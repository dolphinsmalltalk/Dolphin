| package |
package := Package name: 'RBTests'.
package paxVersion: 1;
	basicComment: ''.


package classNames
	add: #AbstractClassVariableTest;
	add: #AbstractInstanceVariableTest;
	add: #AddClassTest;
	add: #AddClassVariableTest;
	add: #AddInstanceVariableTest;
	add: #AddMethodTest;
	add: #AddParameterTest;
	add: #BrowserEnvironmentTest;
	add: #ChildrenToSiblingsTest;
	add: #CreateAccessorsForVariableTest;
	add: #ExtractMethodTest;
	add: #ExtractMethodToComponentTest;
	add: #ExtractToTemporaryTest;
	add: #FormatterTest;
	add: #InlineAllMethodTest;
	add: #InlineMethodFromComponentTest;
	add: #InlineMethodTest;
	add: #InlineParameterTest;
	add: #InlineTemporaryTest;
	add: #MoveMethodTest;
	add: #MoveVariableDefinitionTest;
	add: #ParserTest;
	add: #ProtectInstanceVariableTest;
	add: #PullUpClassVariableTest;
	add: #PushDownClassVariableTest;
	add: #PushDownInstanceVariableTest;
	add: #PushDownMethodTest;
	add: #PushUpInstanceVariableTest;
	add: #PushUpMethodTest;
	add: #RBClassTest;
	add: #RBNamespaceTest;
	add: #RefactoringBrowserTest;
	add: #RefactoringTest;
	add: #ReferenceFinderTest;
	add: #RemoveClassTest;
	add: #RemoveClassVariableTest;
	add: #RemoveInstanceVariableTest;
	add: #RemoveMethodTest;
	add: #RemoveParameterTest;
	add: #RenameClassTest;
	add: #RenameClassVariableTest;
	add: #RenameInstanceVariableTest;
	add: #RenameMethodTest;
	add: #RenameTemporaryTest;
	add: #SmalllintTest;
	add: #TemporaryToInstanceVariableTest;
	add: #VariableEnvironmentTest;
	add: #VariableTypeTest;
	yourself.

package methodNames
	add: #BlockClosure -> #isEqualTo:;
	add: #ByteArray -> #isEqualTo:;
	add: #Collection -> #isEqualTo:;
	add: #CompiledCode -> #isEqualTo:;
	add: #Object -> #isEqualTo:;
	add: #String -> #isEqualTo:;
	add: #String -> #withCRs;
	yourself.

package globalNames
	add: #RBFormatter1;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	add: #RBFormatter1;
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\..\..\Object Arts\Dolphin\Base\Dolphin';
	add: '..\..\..\..\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter';
	add: '..\..\..\..\Object Arts\Dolphin\MVP\Dialogs\Progress\Dolphin Progress Dialog';
	add: '..\Environments\RBEnvironments';
	add: '..\Formatters\RBFormatters';
	add: '..\Parser\RBParser';
	add: '..\Refactorings\RBRefactorings';
	add: '..\Refactorings\RBReferenceFinder';
	add: '..\SmallLint\RBSmallLint';
	add: 'RBTestMethods';
	add: '..\..\..\..\Object Arts\Dolphin\System\Compiler\Smalltalk Parser';
	add: '..\..\..\Camp Smalltalk\SUnit\SUnit';
	yourself).

package!

"Class Definitions"!

TestCase subclass: #RefactoringBrowserTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringBrowserTest subclass: #BrowserEnvironmentTest
	instanceVariableNames: 'browser universalEnvironment totalSelectors'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringBrowserTest subclass: #FormatterTest
	instanceVariableNames: 'settings'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringBrowserTest subclass: #ParserTest
	instanceVariableNames: 'currentSelector classSearches rewrites'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringBrowserTest subclass: #RBClassTest
	instanceVariableNames: 'objectClass newClass messageNodeClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringBrowserTest subclass: #RBNamespaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringBrowserTest subclass: #RefactoringTest
	instanceVariableNames: 'manager changeSet model'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringBrowserTest subclass: #ReferenceFinderTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringBrowserTest subclass: #SmalllintTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringBrowserTest subclass: #VariableTypeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
BrowserEnvironmentTest subclass: #VariableEnvironmentTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #AbstractClassVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #AbstractInstanceVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #AddClassTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #AddClassVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #AddInstanceVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #AddMethodTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #AddParameterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #ChildrenToSiblingsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #CreateAccessorsForVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #ExtractMethodTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #ExtractMethodToComponentTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #ExtractToTemporaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #InlineAllMethodTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #InlineMethodFromComponentTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #InlineMethodTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #InlineParameterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #InlineTemporaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #MoveMethodTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #MoveVariableDefinitionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #ProtectInstanceVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #PullUpClassVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #PushDownClassVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #PushDownInstanceVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #PushDownMethodTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #PushUpInstanceVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #PushUpMethodTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #RemoveClassTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #RemoveClassVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #RemoveInstanceVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #RemoveMethodTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #RemoveParameterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #RenameClassTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #RenameClassVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #RenameInstanceVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #RenameMethodTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #RenameTemporaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RefactoringTest subclass: #TemporaryToInstanceVariableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!

RBFormatter1 := RBConfigurableFormatter!


"Loose Methods"!

!BlockClosure methodsFor!

isEqualTo: aBlockClosure
	self class = aBlockClosure class ifFalse: [^false].
	^self method isEqualTo: aBlockClosure method! !
!BlockClosure categoriesFor: #isEqualTo:!public!testing! !

!ByteArray methodsFor!

isEqualTo: aByteArray
	^self = aByteArray! !
!ByteArray categoriesFor: #isEqualTo:!comparing!public! !

!Collection methodsFor!

isEqualTo: anObject
	^self class == anObject class and: 
			[self size = anObject size and: 
					[| notFound |
					notFound := Object new.
					self allSatisfy: 
							[:each | 
							(anObject detect: [:eachOther | each isEqualTo: eachOther]
								ifNone: [notFound]) ~~ notFound]]]! !
!Collection categoriesFor: #isEqualTo:!comparing!public! !

!CompiledCode methodsFor!

isEqualTo: aMethod 
	| count |
	self == aMethod ifTrue: [^true].
	self class = aMethod class ifFalse: [^false].
	self byteCodes = aMethod byteCodes ifFalse: [^false].
	count := self literalCount.
	aMethod literalCount = count ifFalse: [^false].
	"We need to special case static blocks in the literal frame to avoid infinite recursion"
	1 to: count
		do: 
			[:i | 
			| a b |
			a := self at: i.
			b := aMethod at: i.
			"The static blocks must be equal if they are implemented by this method and
			the bytecodes and all other literals are identical"
			(a class == BlockClosure and: [a method == self]) 
				ifTrue: [(b class == BlockClosure and: [b method == aMethod]) ifFalse: [^false]]
				ifFalse: [(a isEqualTo: b) ifFalse: [^false]]].
	^true! !
!CompiledCode categoriesFor: #isEqualTo:!public!testing! !

!Object methodsFor!

isEqualTo: anObject
	^self = anObject! !
!Object categoriesFor: #isEqualTo:!public!testing! !

!String methodsFor!

isEqualTo: aString
	^self = aString!

withCRs
	| stream |
	stream := self class writeStream: self size.
	self do: [:each | each = $\ ifTrue: [stream nextPutAll: self class lineDelimiter] ifFalse: [stream nextPut: each]].
	^stream contents! !
!String categoriesFor: #isEqualTo:!comparing!public! !
!String categoriesFor: #withCRs!converting!public! !

"End of package definition"!

