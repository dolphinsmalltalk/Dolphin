| package |
package := Package name: 'RBTests'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{Refactory.Browser.Tests.AbstractClassVariableRefactoringTest}
	#{Refactory.Browser.Tests.AbstractInstanceVariableRefactoringTest}
	#{Refactory.Browser.Tests.AddClassRefactoringTest}
	#{Refactory.Browser.Tests.AddClassVariableRefactoringTest}
	#{Refactory.Browser.Tests.AddInstanceVariableRefactoringTest}
	#{Refactory.Browser.Tests.AddMethodRefactoringTest}
	#{Refactory.Browser.Tests.AddParameterRefactoringTest}
	#{Refactory.Browser.Tests.BrowserEnvironmentTest}
	#{Refactory.Browser.Tests.ChildrenToSiblingsRefactoringTest}
	#{Refactory.Browser.Tests.CreateAccessorsForVariableRefactoringTest}
	#{Refactory.Browser.Tests.ExpandReferencedPoolsRefactoringTest}
	#{Refactory.Browser.Tests.ExtractMethodRefactoringTest}
	#{Refactory.Browser.Tests.ExtractMethodToComponentRefactoringTest}
	#{Refactory.Browser.Tests.ExtractToTemporaryRefactoringTest}
	#{Refactory.Browser.Tests.InlineAllSendersRefactoringTest}
	#{Refactory.Browser.Tests.InlineMethodFromComponentRefactoringTest}
	#{Refactory.Browser.Tests.InlineMethodRefactoringTest}
	#{Refactory.Browser.Tests.InlineParameterRefactoringTest}
	#{Refactory.Browser.Tests.InlineTemporaryRefactoringTest}
	#{Refactory.Browser.Tests.MoveMethodRefactoringTest}
	#{Refactory.Browser.Tests.MoveVariableDefinitionRefactoringTest}
	#{Refactory.Browser.Tests.ParserTest}
	#{Refactory.Browser.Tests.ParseTreeRewriterTest}
	#{Refactory.Browser.Tests.ParseTreeSearcherTest}
	#{Refactory.Browser.Tests.PluggableEnvironmentTest}
	#{Refactory.Browser.Tests.ProtectInstanceVariableRefactoringTest}
	#{Refactory.Browser.Tests.PullUpClassVariableRefactoringTest}
	#{Refactory.Browser.Tests.PushDownClassVariableRefactoringTest}
	#{Refactory.Browser.Tests.PushDownInstanceVariableRefactoringTest}
	#{Refactory.Browser.Tests.PushDownMethodRefactoringTest}
	#{Refactory.Browser.Tests.PushUpInstanceVariableRefactoringTest}
	#{Refactory.Browser.Tests.PushUpMethodRefactoringTest}
	#{Refactory.Browser.Tests.RBClassTest}
	#{Refactory.Browser.Tests.RBConditionTest}
	#{Refactory.Browser.Tests.RBMethodTest}
	#{Refactory.Browser.Tests.RBModelTest}
	#{Refactory.Browser.Tests.RBSourceFormatterTest}
	#{Refactory.Browser.Tests.RBVariableAnalyserTest}
	#{Refactory.Browser.Tests.RefactoringBrowserTest}
	#{Refactory.Browser.Tests.RefactoringManagerTest}
	#{Refactory.Browser.Tests.RefactoringTest}
	#{Refactory.Browser.Tests.ReferenceFinderTest}
	#{Refactory.Browser.Tests.RemoveClassRefactoringTest}
	#{Refactory.Browser.Tests.RemoveClassVariableRefactoringTest}
	#{Refactory.Browser.Tests.RemoveInstanceVariableRefactoringTest}
	#{Refactory.Browser.Tests.RemoveMethodRefactoringTest}
	#{Refactory.Browser.Tests.RemoveParameterRefactoringTest}
	#{Refactory.Browser.Tests.RenameClassRefactoringTest}
	#{Refactory.Browser.Tests.RenameClassVariableRefactoringTest}
	#{Refactory.Browser.Tests.RenameInstanceVariableRefactoringTest}
	#{Refactory.Browser.Tests.RenameMethodRefactoringTest}
	#{Refactory.Browser.Tests.RenameTemporaryRefactoringTest}
	#{Refactory.Browser.Tests.SmalllintTest}
	#{Refactory.Browser.Tests.TemporaryToInstanceVariableRefactoringTest}
	#{Refactory.Browser.Tests.VariableEnvironmentTest}
	#{Refactory.Browser.Tests.VariableTypeTest}
).

package setMethodNames: #(
	#(#{Core.ByteArray} #isEqualTo:)
	#(#{Core.Collection} #isEqualTo:)
	#(#{Core.Interval} #isEqualTo:)
	#(#{Core.Object} #isEqualTo:)
	#(#{Core.String} #isEqualTo:)
	#(#{Core.String} #withCRs)
	#(#{Kernel.BlockClosure} #isEqualTo:)
	#(#{Kernel.CompiledCode} #isEqualTo:)
	#(#{Refactory.Browser.TestData.RefactoryTestDataApp} #inlineParameterMethod:)
	#(#{Refactory.Browser.TestData.RefactoryTestDataApp} #sendInlineParameterMethod)
	#(#{Refactory.Browser.TestData.RefactoryTestDataApp} #testMethod1)
	#(#{Smalltalk class} #isEqualTo:)
).

package setVariableNames: #(
	#{Refactory.Browser.RBFormatter1}
).

package setAliasVariableNames: #(
	#{Refactory.Browser.RBFormatter1}
).

package setPrerequisites: #(
	'..\..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\Change Objects\RBChangeObjects'
	'..\Environments\RBEnvironments'
	'..\Formatters\RBFormatters'
	'..\..\RBNamespaces'
	'..\Parser\RBParser'
	'..\Refactorings\RBRefactorings'
	'..\Refactorings\RBReferenceFinder'
	'..\SmallLint\RBSmallLint'
	'RBTestMethods'
	'..\..\..\..\Object Arts\Dolphin\System\Compiler\Smalltalk Parser'
	'..\..\..\Camp Smalltalk\SUnit\SUnit'
).

package!

"Class Definitions"!

XProgramming.SUnit.TestCase subclass: #'Refactory.Browser.Tests.RefactoringBrowserTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{Refactory.Browser.TestData private})
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.BrowserEnvironmentTest'
	instanceVariableNames: 'browser universalEnvironment totalSelectors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.ParserTest'
	instanceVariableNames: 'currentSelector classSearches rewrites'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.ParseTreeRewriterTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.ParseTreeSearcherTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RBClassTest'
	instanceVariableNames: 'model objectClass newClass messageNodeClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RBMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RBModelTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RBSourceFormatterTest'
	instanceVariableNames: 'settings'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RBVariableAnalyserTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RefactoringManagerTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RefactoringTest'
	instanceVariableNames: 'manager changeSet model'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.ReferenceFinderTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.SmalllintTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.VariableTypeTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.BrowserEnvironmentTest subclass: #'Refactory.Browser.Tests.PluggableEnvironmentTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.BrowserEnvironmentTest subclass: #'Refactory.Browser.Tests.VariableEnvironmentTest'
	instanceVariableNames: ''
	classVariableNames: 'ClassVariable'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AbstractClassVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AbstractInstanceVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AddClassRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AddClassVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AddInstanceVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AddMethodRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AddParameterRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ChildrenToSiblingsRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.CreateAccessorsForVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ExpandReferencedPoolsRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ExtractMethodRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ExtractMethodToComponentRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ExtractToTemporaryRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.InlineAllSendersRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.InlineMethodFromComponentRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.InlineMethodRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.InlineParameterRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.InlineTemporaryRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.MoveMethodRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.MoveVariableDefinitionRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ProtectInstanceVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PullUpClassVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PushDownClassVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PushDownInstanceVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PushDownMethodRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PushUpInstanceVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PushUpMethodRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RBConditionTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RemoveClassRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RemoveClassVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RemoveInstanceVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RemoveMethodRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RemoveParameterRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RenameClassRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RenameClassVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RenameInstanceVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RenameMethodRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RenameTemporaryRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.TemporaryToInstanceVariableRefactoringTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Variable Aliases"!

Refactory.Browser.RBFormatter1 := Refactory.Browser.RBConfigurableFormatter!


"Loose Methods"!

!Core.ByteArray methodsFor!

isEqualTo: aByteArray
	^self = aByteArray! !
!Core.ByteArray categoriesForMethods!
isEqualTo:!comparing!public! !
!

!Core.Collection methodsFor!

isEqualTo: anObject
	^self class == anObject class and: 
			[self size = anObject size and: 
					[| notFound |
					notFound := Object new.
					self allSatisfy: 
							[:each |
							(anObject detect: [:eachOther | each isEqualTo: eachOther] ifNone: [notFound]) ~~ notFound]]]! !
!Core.Collection categoriesForMethods!
isEqualTo:!comparing!public! !
!

!Core.Interval methodsFor!

isEqualTo: anObject
	^self class == anObject class and: [self = anObject]! !
!Core.Interval categoriesForMethods!
isEqualTo:!public! !
!

!Core.Object methodsFor!

isEqualTo: anObject
	^self = anObject! !
!Core.Object categoriesForMethods!
isEqualTo:!public!testing! !
!

!Core.String methodsFor!

isEqualTo: aString
	^self = aString!

withCRs
	| stream |
	stream := self class writeStream: self size.
	self do: [:each | each = $\ ifTrue: [stream nextPutAll: self class lineDelimiter] ifFalse: [stream nextPut: each]].
	^stream contents! !
!Core.String categoriesForMethods!
isEqualTo:!comparing!public! !
withCRs!converting!public! !
!

!Kernel.BlockClosure methodsFor!

isEqualTo: aBlockClosure
	self class = aBlockClosure class ifFalse: [^false].
	^self method isEqualTo: aBlockClosure method! !
!Kernel.BlockClosure categoriesForMethods!
isEqualTo:!public!testing! !
!

!Kernel.CompiledCode methodsFor!

isEqualTo: aMethod
	| count |
	self == aMethod ifTrue: [^true].
	self class = aMethod class ifFalse: [^false].
	self byteCodes = aMethod byteCodes ifFalse: [^false].
	count := self literalCount.
	aMethod literalCount = count ifFalse: [^false].
	"We need to special case static blocks in the literal frame to avoid infinite recursion"
	1 to: count
		do: 
			[:i |
			| a b |
			a := self basicAt: i.
			b := aMethod basicAt: i.
			"The static blocks must be equal if they are implemented by this method and
			the bytecodes and all other literals are identical"
			(a class == BlockClosure and: [a method == self])
				ifTrue: [(b class == BlockClosure and: [b method == aMethod]) ifFalse: [^false]]
				ifFalse: [(a isEqualTo: b) ifFalse: [^false]]].
	^true! !
!Kernel.CompiledCode categoriesForMethods!
isEqualTo:!public!testing! !
!

!Refactory.Browser.TestData.RefactoryTestDataApp methodsFor!

inlineParameterMethod: aSymbol
	<namespace: Tools>
	^aSymbol isSymbol!

sendInlineParameterMethod
	^self inlineParameterMethod: #(#asdf)!

testMethod1
	<namespace: Tools>
	^self testMethod1 
		, ([:each | each testMethod1] value: #(#(#testMethod1) 2 #testMethod1))! !
!Refactory.Browser.TestData.RefactoryTestDataApp categoriesForMethods!
inlineParameterMethod:!public!test! !
sendInlineParameterMethod!public!test! !
testMethod1!public!test! !
!

!Smalltalk class methodsFor!

isEqualTo: aSystemDictionary 
	^aSystemDictionary == self! !
!Smalltalk class categoriesForMethods!
isEqualTo:!comparing!public! !
!

"End of package definition"!

