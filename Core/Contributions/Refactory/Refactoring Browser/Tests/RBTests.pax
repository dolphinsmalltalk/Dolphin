| package |
package := Package name: 'RBTests'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{Refactory.Browser.Tests.AbstractClassVariableTest}
	#{Refactory.Browser.Tests.AbstractInstanceVariableTest}
	#{Refactory.Browser.Tests.AddClassTest}
	#{Refactory.Browser.Tests.AddClassVariableTest}
	#{Refactory.Browser.Tests.AddInstanceVariableTest}
	#{Refactory.Browser.Tests.AddMethodTest}
	#{Refactory.Browser.Tests.AddParameterTest}
	#{Refactory.Browser.Tests.BrowserEnvironmentTest}
	#{Refactory.Browser.Tests.ChildrenToSiblingsTest}
	#{Refactory.Browser.Tests.CreateAccessorsForVariableTest}
	#{Refactory.Browser.Tests.ExtractMethodTest}
	#{Refactory.Browser.Tests.ExtractMethodToComponentTest}
	#{Refactory.Browser.Tests.ExtractToTemporaryTest}
	#{Refactory.Browser.Tests.FormatterTest}
	#{Refactory.Browser.Tests.InlineAllMethodTest}
	#{Refactory.Browser.Tests.InlineMethodFromComponentTest}
	#{Refactory.Browser.Tests.InlineMethodTest}
	#{Refactory.Browser.Tests.InlineParameterTest}
	#{Refactory.Browser.Tests.InlineTemporaryTest}
	#{Refactory.Browser.Tests.MoveMethodTest}
	#{Refactory.Browser.Tests.MoveVariableDefinitionTest}
	#{Refactory.Browser.Tests.ParserTest}
	#{Refactory.Browser.Tests.PluggableEnvironmentTest}
	#{Refactory.Browser.Tests.ProtectInstanceVariableTest}
	#{Refactory.Browser.Tests.PullUpClassVariableTest}
	#{Refactory.Browser.Tests.PushDownClassVariableTest}
	#{Refactory.Browser.Tests.PushDownInstanceVariableTest}
	#{Refactory.Browser.Tests.PushDownMethodTest}
	#{Refactory.Browser.Tests.PushUpInstanceVariableTest}
	#{Refactory.Browser.Tests.PushUpMethodTest}
	#{Refactory.Browser.Tests.RBClassTest}
	#{Refactory.Browser.Tests.RBConditionTest}
	#{Refactory.Browser.Tests.RBMethodTest}
	#{Refactory.Browser.Tests.RBNamespaceTest}
	#{Refactory.Browser.Tests.RefactoringBrowserTest}
	#{Refactory.Browser.Tests.RefactoringManagerTest}
	#{Refactory.Browser.Tests.RefactoringTest}
	#{Refactory.Browser.Tests.ReferenceFinderTest}
	#{Refactory.Browser.Tests.RemoveClassTest}
	#{Refactory.Browser.Tests.RemoveClassVariableTest}
	#{Refactory.Browser.Tests.RemoveInstanceVariableTest}
	#{Refactory.Browser.Tests.RemoveMethodTest}
	#{Refactory.Browser.Tests.RemoveParameterTest}
	#{Refactory.Browser.Tests.RenameClassTest}
	#{Refactory.Browser.Tests.RenameClassVariableTest}
	#{Refactory.Browser.Tests.RenameInstanceVariableTest}
	#{Refactory.Browser.Tests.RenameMethodTest}
	#{Refactory.Browser.Tests.RenameTemporaryTest}
	#{Refactory.Browser.Tests.SmalllintTest}
	#{Refactory.Browser.Tests.TemporaryToInstanceVariableTest}
	#{Refactory.Browser.Tests.VariableEnvironmentTest}
	#{Refactory.Browser.Tests.VariableTypeTest}
).

package setMethodNames: #(
	#(#{Core.ByteArray} #isEqualTo:)
	#(#{Core.Collection} #isEqualTo:)
	#(#{Core.Interval} #isEqualTo:)
	#(#{Core.Object} #isEqualTo:)
	#(#{Core.String} #isEqualTo:)
	#(#{Core.String} #withCRs)
	#(#{Kernel.BlockClosure} #isEqualTo:)
	#(#{Kernel.CompiledCode} #isEqualTo:)
	#(#{Refactory.Browser.AddClassRefactoring class} #correspondingTestCase)
	#(#{Refactory.Browser.ChildrenToSiblingsRefactoring class} #correspondingTestCase)
	#(#{Refactory.Browser.ExtractMethodRefactoring class} #correspondingTestCase)
	#(#{Refactory.Browser.RemoveClassRefactoring class} #correspondingTestCase)
	#(#{Refactory.Browser.RenameClassRefactoring class} #correspondingTestCase)
	#(#{Smalltalk class} #isEqualTo:)
).

package setVariableNames: #(
	#{Refactory.Browser.RBFormatter1}
).

package setAliasVariableNames: #(
	#{Refactory.Browser.RBFormatter1}
).

package setPrerequisites: #(
	'..\..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\..\..\..\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\..\..\..\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter'
	'..\..\..\..\Object Arts\Dolphin\MVP\Dialogs\Progress\Dolphin Progress Dialog'
	'..\Environments\RBEnvironments'
	'..\Formatters\RBFormatters'
	'..\Parser\RBParser'
	'..\Refactorings\RBRefactorings'
	'..\Refactorings\RBReferenceFinder'
	'..\SmallLint\RBSmallLint'
	'RBTestMethods'
	'..\..\..\..\Object Arts\Dolphin\System\Compiler\Smalltalk Parser'
	'..\..\..\Camp Smalltalk\SUnit\SUnit'
).

package!

"Class Definitions"!

XProgramming.SUnit.TestCase subclass: #'Refactory.Browser.Tests.RefactoringBrowserTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.BrowserEnvironmentTest'
	instanceVariableNames: 'browser universalEnvironment totalSelectors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.FormatterTest'
	instanceVariableNames: 'settings'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.ParserTest'
	instanceVariableNames: 'currentSelector classSearches rewrites'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RBClassTest'
	instanceVariableNames: 'objectClass newClass messageNodeClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RBMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RBNamespaceTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RefactoringManagerTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.RefactoringTest'
	instanceVariableNames: 'manager changeSet model'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.ReferenceFinderTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.SmalllintTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringBrowserTest subclass: #'Refactory.Browser.Tests.VariableTypeTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.BrowserEnvironmentTest subclass: #'Refactory.Browser.Tests.PluggableEnvironmentTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.BrowserEnvironmentTest subclass: #'Refactory.Browser.Tests.VariableEnvironmentTest'
	instanceVariableNames: ''
	classVariableNames: 'ClassVariable'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AbstractClassVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AbstractInstanceVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AddClassTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AddClassVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AddInstanceVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AddMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.AddParameterTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ChildrenToSiblingsTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.CreateAccessorsForVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ExtractMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ExtractMethodToComponentTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ExtractToTemporaryTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.InlineAllMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.InlineMethodFromComponentTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.InlineMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.InlineParameterTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.InlineTemporaryTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.MoveMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.MoveVariableDefinitionTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.ProtectInstanceVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PullUpClassVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PushDownClassVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PushDownInstanceVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PushDownMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PushUpInstanceVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.PushUpMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RBConditionTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RemoveClassTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RemoveClassVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RemoveInstanceVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RemoveMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RemoveParameterTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RenameClassTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RenameClassVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RenameInstanceVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RenameMethodTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.RenameTemporaryTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.RefactoringTest subclass: #'Refactory.Browser.Tests.TemporaryToInstanceVariableTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Variable Aliases"!

Refactory.Browser.RBFormatter1 := Refactory.Browser.RBConfigurableFormatter!


"Loose Methods"!

!Core.ByteArray methodsFor!

isEqualTo: aByteArray
	^self = aByteArray! !
!Core.ByteArray categoriesForMethods!
isEqualTo:!comparing!public! !
!

!Core.Collection methodsFor!

isEqualTo: anObject
	^self class == anObject class and: 
			[self size = anObject size and: 
					[| notFound |
					notFound := Object new.
					self allSatisfy: 
							[:each |
							(anObject detect: [:eachOther | each isEqualTo: eachOther] ifNone: [notFound]) ~~ notFound]]]! !
!Core.Collection categoriesForMethods!
isEqualTo:!comparing!public! !
!

!Core.Interval methodsFor!

isEqualTo: anObject
	^self class == anObject class and: [self = anObject]! !
!Core.Interval categoriesForMethods!
isEqualTo:!public! !
!

!Core.Object methodsFor!

isEqualTo: anObject
	^self = anObject! !
!Core.Object categoriesForMethods!
isEqualTo:!public!testing! !
!

!Core.String methodsFor!

isEqualTo: aString
	^self = aString!

withCRs
	| stream |
	stream := self class writeStream: self size.
	self do: [:each | each = $\ ifTrue: [stream nextPutAll: self class lineDelimiter] ifFalse: [stream nextPut: each]].
	^stream contents! !
!Core.String categoriesForMethods!
isEqualTo:!comparing!public! !
withCRs!converting!public! !
!

!Kernel.BlockClosure methodsFor!

isEqualTo: aBlockClosure
	self class = aBlockClosure class ifFalse: [^false].
	^self method isEqualTo: aBlockClosure method! !
!Kernel.BlockClosure categoriesForMethods!
isEqualTo:!public!testing! !
!

!Kernel.CompiledCode methodsFor!

isEqualTo: aMethod
	| count |
	self == aMethod ifTrue: [^true].
	self class = aMethod class ifFalse: [^false].
	self byteCodes = aMethod byteCodes ifFalse: [^false].
	count := self literalCount.
	aMethod literalCount = count ifFalse: [^false].
	"We need to special case static blocks in the literal frame to avoid infinite recursion"
	1 to: count
		do: 
			[:i |
			| a b |
			a := self basicAt: i.
			b := aMethod basicAt: i.
			"The static blocks must be equal if they are implemented by this method and
			the bytecodes and all other literals are identical"
			(a class == BlockClosure and: [a method == self])
				ifTrue: [(b class == BlockClosure and: [b method == aMethod]) ifFalse: [^false]]
				ifFalse: [(a isEqualTo: b) ifFalse: [^false]]].
	^true! !
!Kernel.CompiledCode categoriesForMethods!
isEqualTo:!public!testing! !
!

!Refactory.Browser.AddClassRefactoring class methodsFor!

correspondingTestCase
	^Tests.AddClassTest! !
!Refactory.Browser.AddClassRefactoring class categoriesForMethods!
correspondingTestCase!public! !
!

!Refactory.Browser.ChildrenToSiblingsRefactoring class methodsFor!

correspondingTestCase
	^Tests.ChildrenToSiblingsTest! !
!Refactory.Browser.ChildrenToSiblingsRefactoring class categoriesForMethods!
correspondingTestCase!public! !
!

!Refactory.Browser.ExtractMethodRefactoring class methodsFor!

correspondingTestCase
	^Tests.ExtractMethodTest! !
!Refactory.Browser.ExtractMethodRefactoring class categoriesForMethods!
correspondingTestCase!public! !
!

!Refactory.Browser.RemoveClassRefactoring class methodsFor!

correspondingTestCase
	^Refactory.Browser.Tests.RemoveClassTest! !
!Refactory.Browser.RemoveClassRefactoring class categoriesForMethods!
correspondingTestCase!public! !
!

!Refactory.Browser.RenameClassRefactoring class methodsFor!

correspondingTestCase
	^Tests.RenameClassTest! !
!Refactory.Browser.RenameClassRefactoring class categoriesForMethods!
correspondingTestCase!public! !
!

!Smalltalk class methodsFor!

isEqualTo: aSystemDictionary 
	^aSystemDictionary == self! !
!Smalltalk class categoriesForMethods!
isEqualTo:!comparing!public! !
!

"End of package definition"!

