| package |
package := Package name: 'RBSmallLint'.
package paxVersion: 1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Refactoring Browser SmallLint
Copyright (c) John Brant & Don Roberts.'.


package classNames
	add: #BasicLintRule;
	add: #BlockLintRule;
	add: #CompositeLintRule;
	add: #LintRule;
	add: #MultiEnvironment;
	add: #ParseTreeEnvironment;
	add: #ParseTreeLintRule;
	add: #SmalllintChecker;
	add: #SmalllintContext;
	add: #SmalllintFilterEnvironment;
	add: #TransformationRule;
	yourself.

package methodNames
	add: #Behavior -> #instanceBehavior;
	add: #CompiledCode -> #needsHybridFrame;
	add: #CompiledCode -> #withAllBlockMethodsDo:;
	add: #CompiledMethod -> #equivalentTo:;
	add: #Metaclass -> #instanceBehavior;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\Change Objects\RBChangeObjects'
	'..\Environments\RBEnvironments'
	'..\Parser\RBParser'
	'..\Refactorings\RBRefactorings').

package!

"Class Definitions"!

Object subclass: #LintRule
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #SmalllintChecker
	instanceVariableNames: 'rule environment context methodBlock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #SmalllintContext
	instanceVariableNames: 'class selector parseTree literals literalSemaphore literalProcess selectors compiledMethod selfMessages superMessages messages'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
BrowserEnvironmentWrapper subclass: #MultiEnvironment
	instanceVariableNames: 'environmentDictionaries'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
AndEnvironment subclass: #SmalllintFilterEnvironment
	instanceVariableNames: 'lintRuleName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SelectorEnvironment subclass: #ParseTreeEnvironment
	instanceVariableNames: 'matcher'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
LintRule subclass: #BasicLintRule
	instanceVariableNames: 'result openSymbol'
	classVariableNames: 'FilterDictionary'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
LintRule subclass: #CompositeLintRule
	instanceVariableNames: 'rules'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
LintRule subclass: #TransformationRule
	instanceVariableNames: 'rewriteRule changes class'
	classVariableNames: 'RecursiveSelfRule'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
BasicLintRule subclass: #BlockLintRule
	instanceVariableNames: 'classBlock methodBlock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
BasicLintRule subclass: #ParseTreeLintRule
	instanceVariableNames: 'matcher'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Behavior methodsFor!

instanceBehavior
	"Answer the receiver's singleton instance (the actual class object)."

	^self! !
!Behavior categoriesFor: #instanceBehavior!accessing!public! !

!CompiledCode methodsFor!

needsHybridFrame
	^self needsContext!

withAllBlockMethodsDo: operation
	operation value: self! !
!CompiledCode categoriesFor: #needsHybridFrame!private!testing! !
!CompiledCode categoriesFor: #withAllBlockMethodsDo:!enumerating!private! !

!CompiledMethod methodsFor!

equivalentTo: aCompiledMethod
	| selfParseTree source |
	#rbFix.	"Use the VisualAge version which doesn't include a Decompiler either"
	self class == aCompiledMethod class ifFalse: [^false].
	self byteCodes = aCompiledMethod byteCodes ifFalse: [^false].
	#rbSW.	"Added literals check to stop false positives when using ##()"
	self literals = aCompiledMethod literals ifFalse: [^false].
	source := self getSource.
	source isNil ifTrue: [^false].
	selfParseTree := RBParser parseMethod: source onError: [:string :pos | ^false].
	source := aCompiledMethod getSource.
	source isNil ifTrue: [^false].
	^selfParseTree equalTo: (RBParser parseMethod: source onError: [:string :pos | ^false])
		exceptForVariables: #()
	"
	^self = aCompiledMethod or: [self class == aCompiledMethod class and: [self numArgs == aCompiledMethod numArgs
				and: 
					[| selfParseTree methodParseTree |
					selfParseTree := mclass decompilerClass new
								decompile: (mclass defaultSelectorForMethod: self)
								in: mclass
								method: self.
					methodParseTree := aCompiledMethod mclass decompilerClass new
								decompile: (aCompiledMethod mclass defaultSelectorForMethod: aCompiledMethod)
								in: aCompiledMethod mclass
								method: aCompiledMethod.
					selfParseTree = methodParseTree]]]"! !
!CompiledMethod categoriesFor: #equivalentTo:!public!RefactoringBrowser! !

!Metaclass methodsFor!

instanceBehavior
	"Answer the receiver's singleton instance (the actual class object)."

	^instanceClass! !
!Metaclass categoriesFor: #instanceBehavior!accessing!public! !

"End of package definition"!

