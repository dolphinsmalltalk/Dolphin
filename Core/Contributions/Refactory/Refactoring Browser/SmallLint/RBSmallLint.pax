| package |
package := Package name: 'RBSmallLint'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Refactoring Browser SmallLint
Copyright (c) John Brant & Don Roberts.'.


package setClassNames: #(
	#{Refactory.Browser.BasicLintRule}
	#{Refactory.Browser.BlockLintRule}
	#{Refactory.Browser.CompositeLintRule}
	#{Refactory.Browser.LintRule}
	#{Refactory.Browser.MultiEnvironment}
	#{Refactory.Browser.ParseTreeEnvironment}
	#{Refactory.Browser.ParseTreeLintRule}
	#{Refactory.Browser.SmalllintChecker}
	#{Refactory.Browser.SmalllintContext}
	#{Refactory.Browser.SmalllintFilterEnvironment}
	#{Refactory.Browser.TransformationRule}
	#{Refactory.Browser.UndeclaredVariableCollector}
).

package setMethodNames: #(
	#(#{Core.Behavior} #instanceBehavior)
	#(#{Core.Metaclass} #instanceBehavior)
	#(#{Kernel.CompiledCode} #needsHybridFrame)
	#(#{Kernel.CompiledCode} #refersToStaticVariables)
	#(#{Kernel.CompiledCode} #withAllBlockMethodsDo:)
	#(#{Kernel.CompiledMethod} #equivalentTo:)
).

package setPrerequisites: #(
	'..\..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\Change Objects\RBChangeObjects'
	'..\Environments\RBEnvironments'
	'..\..\RBNamespaces'
	'..\Parser\RBParser'
	'..\Refactorings\RBRefactorings'
	'..\..\..\..\Object Arts\Dolphin\System\Compiler\Smalltalk Compiler'
	'..\..\..\..\Object Arts\Dolphin\System\Compiler\Smalltalk Parser'
).

package!

"Class Definitions"!

Core.Object subclass: #'Refactory.Browser.LintRule'
	instanceVariableNames: 'name'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Refactory.Browser.SmalllintChecker'
	instanceVariableNames: 'rule environment context methodBlock'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Refactory.Browser.SmalllintContext'
	instanceVariableNames: 'class selector parseTree literals literalSemaphore literalProcess selectors compiledMethod selfMessages superMessages messages'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BrowserEnvironmentWrapper subclass: #'Refactory.Browser.MultiEnvironment'
	instanceVariableNames: 'environmentDictionaries'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.AndEnvironment subclass: #'Refactory.Browser.SmalllintFilterEnvironment'
	instanceVariableNames: 'lintRuleName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.SelectorEnvironment subclass: #'Refactory.Browser.ParseTreeEnvironment'
	instanceVariableNames: 'matcher'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.LintRule subclass: #'Refactory.Browser.BasicLintRule'
	instanceVariableNames: 'result openSymbol'
	classVariableNames: 'FilterDictionary'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.LintRule subclass: #'Refactory.Browser.CompositeLintRule'
	instanceVariableNames: 'rules'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.LintRule subclass: #'Refactory.Browser.TransformationRule'
	instanceVariableNames: 'rewriteRule changes class'
	classVariableNames: 'RecursiveSelfRule'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BasicLintRule subclass: #'Refactory.Browser.BlockLintRule'
	instanceVariableNames: 'classBlock methodBlock'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BasicLintRule subclass: #'Refactory.Browser.ParseTreeLintRule'
	instanceVariableNames: 'matcher'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StaticVariableBinder subclass: #'Refactory.Browser.UndeclaredVariableCollector'
	instanceVariableNames: 'undeclareds'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Behavior methodsFor!

instanceBehavior
	"Answer the receiver's singleton instance (the actual class object)."

	^self! !
!Core.Behavior categoriesForMethods!
instanceBehavior!accessing!public! !
!

!Core.Metaclass methodsFor!

instanceBehavior
	"Answer the receiver's singleton instance (the actual class object)."

	^instanceClass! !
!Core.Metaclass categoriesForMethods!
instanceBehavior!accessing!public! !
!

!Kernel.CompiledCode methodsFor!

needsHybridFrame
	^self needsContext!

refersToStaticVariables
	1 to: self size do: [:i | (self basicAt: i) isVariableBinding ifTrue: [^true]].
	^false!

withAllBlockMethodsDo: operation
	operation value: self! !
!Kernel.CompiledCode categoriesForMethods!
needsHybridFrame!private!testing! !
refersToStaticVariables!private!testing! !
withAllBlockMethodsDo:!enumerating!private! !
!

!Kernel.CompiledMethod methodsFor!

equivalentTo: aCompiledMethod
	| selfParseTree source |
	#rbFix.	"Use the VisualAge version which doesn't include a Decompiler either"
	self class == aCompiledMethod class ifFalse: [^false].
	self byteCodes = aCompiledMethod byteCodes ifFalse: [^false].
	#rbSW.	"Added literals check to stop false positives when using ##()"
	self literals = aCompiledMethod literals ifFalse: [^false].
	source := self getSource.
	source isNil ifTrue: [^false].
	selfParseTree := Parser parseMethod: source onError: [:string :pos | ^false].
	source := aCompiledMethod getSource.
	source isNil ifTrue: [^false].
	^selfParseTree equalTo: (Parser parseMethod: source onError: [:string :pos | ^false])
		exceptForVariables: #()
	"
	^self = aCompiledMethod or: [self class == aCompiledMethod class and: [self numArgs == aCompiledMethod numArgs
				and: 
					[| selfParseTree methodParseTree |
					selfParseTree := mclass decompilerClass new
								decompile: (mclass defaultSelectorForMethod: self)
								in: mclass
								method: self.
					methodParseTree := aCompiledMethod mclass decompilerClass new
								decompile: (aCompiledMethod mclass defaultSelectorForMethod: aCompiledMethod)
								in: aCompiledMethod mclass
								method: aCompiledMethod.
					selfParseTree = methodParseTree]]]"! !
!Kernel.CompiledMethod categoriesForMethods!
equivalentTo:!public!RefactoringBrowser! !
!

"End of package definition"!

