"Filed out from Dolphin Smalltalk 7"!

LintRule subclass: #CompositeLintRule
	instanceVariableNames: 'rules'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CompositeLintRule guid: (GUID fromString: '{ac469ac9-0c11-4be1-90b2-f1a9192e9d98}')!
CompositeLintRule comment: 'CompositeLintRule groups LintRules into a single rule (composite pattern).

Instance Variables:
	rules	<Collection of: LintRule>	the rules that make up the composite

'!
!CompositeLintRule categoriesForClass!Refactory-Lint! !
!CompositeLintRule methodsFor!

checkClass: aSmalllintContext 
	rules do: 
			[:each | 
			each checkClass: aSmalllintContext.
			Processor yield]!

checkMethod: aSmalllintContext 
	rules do: 
			[:each | 
			each checkMethod: aSmalllintContext.
			Processor yield]!

failedRules
	^rules inject: OrderedCollection new into: [:oc :each | oc addAll: each failedRules; yourself]!

hasConflicts
	^rules anySatisfy: [:each | each hasConflicts]!

isComposite
	^true!

isEmpty
	^rules allSatisfy: [:each | each isEmpty]!

problemCount
	^rules inject: 0 into: [:count :each | count + each problemCount]!

resetResult
	rules do: [:each | each resetResult]!

rules
	^rules!

rules: aCollection
	rules := aCollection!

viewResults
	rules do: [:each | each viewResults]! !
!CompositeLintRule categoriesFor: #checkClass:!accessing!public! !
!CompositeLintRule categoriesFor: #checkMethod:!accessing!public! !
!CompositeLintRule categoriesFor: #failedRules!accessing!public! !
!CompositeLintRule categoriesFor: #hasConflicts!public!testing! !
!CompositeLintRule categoriesFor: #isComposite!public!testing! !
!CompositeLintRule categoriesFor: #isEmpty!public!testing! !
!CompositeLintRule categoriesFor: #problemCount!accessing!public! !
!CompositeLintRule categoriesFor: #resetResult!initialize/release!public! !
!CompositeLintRule categoriesFor: #rules!accessing!public! !
!CompositeLintRule categoriesFor: #rules:!initialize/release!public! !
!CompositeLintRule categoriesFor: #viewResults!helpers!private! !

!CompositeLintRule class methodsFor!

allRules
	^self ruleFor: self protocol: 'all checks'!

lintChecks
	^self rules: (BasicLintRule lintProtocols
				collect: [:each | self ruleFor: BasicLintRule protocol: each])
		name: 'Lint checks'!

ruleFor: aClass protocol: aProtocol 
	| allRules |
	#rbFix.	"Dolphin category names are strings, not symbols, and make use of #capitalized"
	allRules := aClass withAllSubclasses inject: OrderedCollection new
				into: 
					[:sum :each | 
					sum
						addAll: ((BrowserEnvironment new selectorsFor: aProtocol in: each class) 
									collect: [:selector | each perform: selector]);
						yourself	"asSymbol"].
	^self rules: (allRules asSortedCollection: [:a :b | a name <= b name])
		name: aProtocol capitalized!

rules: aCollection 
	^self new rules: aCollection!

rules: aCollection name: aString 
	^(self new) rules: aCollection;
		name: aString;
		yourself!

transformations
	^self ruleFor: TransformationRule protocol: 'transformations'! !
!CompositeLintRule class categoriesFor: #allRules!instance creation!public! !
!CompositeLintRule class categoriesFor: #lintChecks!all checks!public! !
!CompositeLintRule class categoriesFor: #ruleFor:protocol:!instance creation!public! !
!CompositeLintRule class categoriesFor: #rules:!instance creation!public! !
!CompositeLintRule class categoriesFor: #rules:name:!instance creation!public! !
!CompositeLintRule class categoriesFor: #transformations!all checks!public! !

