| package |
package := Package name: 'RBEnvironments'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Refactoring Browser Environments
Copyright © John Brant & Don Roberts.

Originally ported to Dolphin by Blair McGlashan and Andy Bower at Camp Smalltalk 1 in San Diego, 2000. Fairly extensively modified since, especially in Dolphin 8 due to the introduction of namespaces.'.


package setClassNames: #(
	#{Refactory.Browser.AndEnvironment}
	#{Refactory.Browser.BrowserEnvironment}
	#{Refactory.Browser.BrowserEnvironmentWrapper}
	#{Refactory.Browser.CategoryEnvironment}
	#{Refactory.Browser.ClassEnvironment}
	#{Refactory.Browser.NotEnvironment}
	#{Refactory.Browser.OrEnvironment}
	#{Refactory.Browser.ProtocolEnvironment}
	#{Refactory.Browser.SelectorEnvironment}
	#{Refactory.Browser.VariableEnvironment}
).

package setMethodNames: #(
	#(#{Core.Association} #binding)
	#(#{Core.Behavior} #numberSelectors)
	#(#{Core.Behavior} #selectorsAndMethodsDo:)
	#(#{Core.Class class} #subBehaviors)
	#(#{Core.ClassDescription} #allSubBehaviorsDo:)
	#(#{Core.ClassDescription} #allSubBehaviorsPreOrderDo:)
	#(#{Core.ClassDescription} #subBehaviors)
	#(#{Core.ClassDescription} #withAllSubBehaviorsDo:)
	#(#{Core.Metaclass} #soleInstance)
	#(#{Core.Object} #isVariableBinding)
	#(#{Kernel.CompiledCode} #allLiterals)
	#(#{Kernel.VariableBinding} #isUnbound)
	#(#{Kernel.VariableBinding} #isVariableBinding)
).

package setPrerequisites: #(
	'..\..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\..\RBNamespaces'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Refactory.Browser.BrowserEnvironment'
	instanceVariableNames: 'label searchStrings search filter'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BrowserEnvironment
	subclass: #'Refactory.Browser.BrowserEnvironmentWrapper'
	instanceVariableNames: 'environment progressBlock'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BrowserEnvironmentWrapper
	subclass: #'Refactory.Browser.AndEnvironment'
	instanceVariableNames: 'andedEnvironment'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BrowserEnvironmentWrapper
	subclass: #'Refactory.Browser.CategoryEnvironment'
	instanceVariableNames: 'categories'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BrowserEnvironmentWrapper
	subclass: #'Refactory.Browser.ClassEnvironment'
	instanceVariableNames: 'classes metaClasses'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BrowserEnvironmentWrapper
	subclass: #'Refactory.Browser.NotEnvironment'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BrowserEnvironmentWrapper
	subclass: #'Refactory.Browser.OrEnvironment'
	instanceVariableNames: 'oredEnvironment'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BrowserEnvironmentWrapper
	subclass: #'Refactory.Browser.ProtocolEnvironment'
	instanceVariableNames: 'class protocols'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BrowserEnvironmentWrapper
	subclass: #'Refactory.Browser.SelectorEnvironment'
	instanceVariableNames: 'classSelectors metaClassSelectors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.BrowserEnvironmentWrapper
	subclass: #'Refactory.Browser.VariableEnvironment'
	instanceVariableNames: 'instanceVariables instanceVariableReaders instanceVariableWriters classVariables selectorCache'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Association methodsFor!

binding
	^self! !
!Core.Association categoriesForMethods!
binding!public!testing! !
!

!Core.Behavior methodsFor!

numberSelectors
	"Answer the number of selectors in the receiver's method dictionary."

	^methodDictionary ifNil: [0] ifNotNil: [methodDictionary size]!

selectorsAndMethodsDo: aDyadicValuable
	"Evaluate the <dyadicValuable> argument for each of the selector/method pairs in 
	the receiver's method dictionary."

	^methodDictionary ifNotNil: [methodDictionary keysAndValuesDo: aDyadicValuable]! !
!Core.Behavior categoriesForMethods!
numberSelectors!enumerating!public! !
selectorsAndMethodsDo:!enumerating!public! !
!

!Core.Class class methodsFor!

subBehaviors
	"Answer a <collection> containing the receiver's immediate subclasses."

	^Smalltalk allRoots collect: [:each | each class]! !
!Core.Class class categoriesForMethods!
subBehaviors!class hierarchy-accessing!public! !
!

!Core.ClassDescription methodsFor!

allSubBehaviorsDo: operation
	"Private - Evaluate the monadic valuable argument, operation, for each 
	of the receiver's sub-behaviours using a pre-order depth first traversal."

	self allSubBehaviorsPreOrderDo: operation!

allSubBehaviorsPreOrderDo: aMonadicValuable
	"Private - Evaluate the <monadicValuable> argument for each of the receiver's subclasses, visiting the receiver before its subclasses (i.e. a pre-order traversal)."

	self subBehaviors do: 
			[:subclass |
			aMonadicValuable value: subclass.
			subclass allSubBehaviorsPreOrderDo: aMonadicValuable]!

subBehaviors
	"Answer a <collection> containing the receiver's immediate subclasses."

	^self subclasses!

withAllSubBehaviorsDo: aMonadicValuable
	"Evaluate the monadic valuable argument for the receiver and each 
	of its sub-behaviours using a depth-first traversal."

	aMonadicValuable value: self.
	self allSubBehaviorsDo: aMonadicValuable! !
!Core.ClassDescription categoriesForMethods!
allSubBehaviorsDo:!class hierarchy-accessing!enumerating!private! !
allSubBehaviorsPreOrderDo:!class hierarchy-accessing!private! !
subBehaviors!class hierarchy-accessing!public! !
withAllSubBehaviorsDo:!enumerating!public! !
!

!Core.Metaclass methodsFor!

soleInstance
	"Answer the receiver's singleton instance (the actual class object)."

	#rbFix. "Dolphin normally uses #instanceClass"
	^instanceClass
! !
!Core.Metaclass categoriesForMethods!
soleInstance!accessing!public! !
!

!Core.Object methodsFor!

isVariableBinding
	"Answer whether the receiver is a <variableBinding>, i.e. an association which responds
	to #key and #value methods."

	^false! !
!Core.Object categoriesForMethods!
isVariableBinding!public!testing! !
!

!Kernel.CompiledCode methodsFor!

allLiterals
	"Answer an array of the literals in the receiver."

	#rbFix. "Dolphin uses #literals"
	^self literals! !
!Kernel.CompiledCode categoriesForMethods!
allLiterals!accessing!private! !
!

!Kernel.VariableBinding methodsFor!

isUnbound
	"Answer whether the receiver is unbound - i.e. not actually installed into the system such that it is reachable from the root namespace by following its binding path."

	^environment isNil or: [self fullyQualifiedReference bindingOrNil ~~ self]!

isVariableBinding
	"Answer whether the receiver is a <variableBinding>, i.e. an association which responds
	to #key and #value methods."

	^true! !
!Kernel.VariableBinding categoriesForMethods!
isUnbound!public!testing! !
isVariableBinding!public!testing! !
!

"End of package definition"!

