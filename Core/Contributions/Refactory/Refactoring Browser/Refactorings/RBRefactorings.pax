| package |
package := Package name: 'RBRefactorings'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Refactoring Browser Refactorings
Copyright (c) John Brant & Don Roberts.

Ported to Dolphin by Blair McGlashan and Andy Bower at Camp Smalltalk 1 in San Diego, 2000.

Browse the ''*-RB fixes'' pseudo-category to find the modifications made as part of the Dolphin port.'.


package setClassNames: #(
	#{Refactory.Browser.AbstractClassVariableRefactoring}
	#{Refactory.Browser.AbstractInstanceVariableRefactoring}
	#{Refactory.Browser.AbstractVariablesRefactoring}
	#{Refactory.Browser.AddClassRefactoring}
	#{Refactory.Browser.AddClassVariableRefactoring}
	#{Refactory.Browser.AddImportRefactoring}
	#{Refactory.Browser.AddInstanceVariableRefactoring}
	#{Refactory.Browser.AddMethodRefactoring}
	#{Refactory.Browser.AddParameterRefactoring}
	#{Refactory.Browser.ChangeMethodNameRefactoring}
	#{Refactory.Browser.ChangeStaticVariableQualificationRefactoring}
	#{Refactory.Browser.ChildrenToSiblingsRefactoring}
	#{Refactory.Browser.ClassImportsRefactoring}
	#{Refactory.Browser.ClassNameToBindingReferenceRefactoring}
	#{Refactory.Browser.ClassRefactoring}
	#{Refactory.Browser.CreateAccessorsForVariableRefactoring}
	#{Refactory.Browser.ExpandImportsRefactoring}
	#{Refactory.Browser.ExtractMethodRefactoring}
	#{Refactory.Browser.ExtractMethodToComponentRefactoring}
	#{Refactory.Browser.ExtractToTemporaryRefactoring}
	#{Refactory.Browser.InlineAllSendersRefactoring}
	#{Refactory.Browser.InlineMethodFromComponentRefactoring}
	#{Refactory.Browser.InlineMethodRefactoring}
	#{Refactory.Browser.InlineParameterRefactoring}
	#{Refactory.Browser.InlineTemporaryRefactoring}
	#{Refactory.Browser.MethodRefactoring}
	#{Refactory.Browser.MoveMethodRefactoring}
	#{Refactory.Browser.MoveVariableDefinitionRefactoring}
	#{Refactory.Browser.ProtectInstanceVariableRefactoring}
	#{Refactory.Browser.PullUpClassVariableRefactoring}
	#{Refactory.Browser.PullUpInstanceVariableRefactoring}
	#{Refactory.Browser.PushDownClassVariableRefactoring}
	#{Refactory.Browser.PushDownInstanceVariableRefactoring}
	#{Refactory.Browser.PushDownMethodRefactoring}
	#{Refactory.Browser.PushUpMethodRefactoring}
	#{Refactory.Browser.QualifyStaticVariablesRefactoring}
	#{Refactory.Browser.RBAbstractClass}
	#{Refactory.Browser.RBAbstractCondition}
	#{Refactory.Browser.RBClass}
	#{Refactory.Browser.RBCondition}
	#{Refactory.Browser.RBConjunctiveCondition}
	#{Refactory.Browser.RBEmptyCondition}
	#{Refactory.Browser.RBMetaclass}
	#{Refactory.Browser.RBMethod}
	#{Refactory.Browser.RBMethodName}
	#{Refactory.Browser.RBModel}
	#{Refactory.Browser.RBNamespaceClass}
	#{Refactory.Browser.RBNegationCondition}
	#{Refactory.Browser.RBReadBeforeWrittenTester}
	#{Refactory.Browser.RBRootNamespace}
	#{Refactory.Browser.RBSmalltalkNamespace}
	#{Refactory.Browser.RBVariableAnalyser}
	#{Refactory.Browser.RBVariableBinding}
	#{Refactory.Browser.Refactoring}
	#{Refactory.Browser.RefactoringError}
	#{Refactory.Browser.RefactoringManager}
	#{Refactory.Browser.RefactoryTyper}
	#{Refactory.Browser.RemoveClassRefactoring}
	#{Refactory.Browser.RemoveClassVariableRefactoring}
	#{Refactory.Browser.RemoveImportRefactoring}
	#{Refactory.Browser.RemoveInstanceVariableRefactoring}
	#{Refactory.Browser.RemoveMethodRefactoring}
	#{Refactory.Browser.RemoveParameterRefactoring}
	#{Refactory.Browser.RenameClassRefactoring}
	#{Refactory.Browser.RenameClassVariableRefactoring}
	#{Refactory.Browser.RenameInstanceVariableRefactoring}
	#{Refactory.Browser.RenameMethodRefactoring}
	#{Refactory.Browser.RenameTemporaryRefactoring}
	#{Refactory.Browser.SplitClassRefactoring}
	#{Refactory.Browser.TemporaryToInstanceVariableRefactoring}
	#{Refactory.Browser.UnqualifyStaticVariablesRefactoring}
	#{Refactory.Browser.VariableRefactoring}
).

package setMethodNames: #(
	#(#{Core.Array} #hasLiteralMatching:)
	#(#{Core.Class} #classInModel:)
	#(#{Core.Class} #instancesAreClasses)
	#(#{Core.Class} #newClassInModel:)
	#(#{Core.Class class} #rootsOfTheWorld)
	#(#{Core.ClassDescription} #classInModel:)
	#(#{Core.ClassDescription} #instancesAreClasses)
	#(#{Core.ClassDescription} #realClass)
	#(#{Core.Metaclass} #classInModel:)
	#(#{Core.Metaclass} #instancesAreClasses)
	#(#{Kernel.BindingReference} #referenceInModel:)
	#(#{Kernel.CompiledCode} #hasLiteralMatching:)
	#(#{Kernel.Namespace class} #newClassInModel:)
	#(#{Kernel.StBasicVariableNode} #isBindingChanged)
	#(#{Kernel.StBasicVariableNode} #refersToBinding:)
	#(#{Kernel.StBasicVariableNode} #refersToClass:)
	#(#{Kernel.StLiteralArrayNode} #isOrContainsQualifiedReferenceMatching:)
	#(#{Kernel.StLiteralArrayNode} #refersToClass:)
	#(#{Kernel.StLiteralArrayNode} #refersToSymbol:)
	#(#{Kernel.StLiteralArrayNode} #rewriteQualifiedReferencesWith:)
	#(#{Kernel.StLiteralNode} #isOrContainsQualifiedReferenceMatching:)
	#(#{Kernel.StLiteralNode} #qualifiedReferencesDo:)
	#(#{Kernel.StLiteralNode} #refersToClass:)
	#(#{Kernel.StLiteralNode} #refersToSymbol:)
	#(#{Kernel.StLiteralNode} #rewriteQualifiedReferencesWith:)
	#(#{Kernel.StLiteralValueNode} #refersToSymbol:)
	#(#{Kernel.StProgramNode} #refersToBinding:)
	#(#{Kernel.StProgramNode} #refersToClass:)
	#(#{Kernel.StQualifiedReferenceNode} #copyWithName:)
	#(#{Kernel.StQualifiedReferenceNode} #isBindingChanged)
	#(#{Kernel.StQualifiedReferenceNode} #isOrContainsQualifiedReferenceMatching:)
	#(#{Kernel.StQualifiedReferenceNode} #qualifiedReferencesDo:)
	#(#{Kernel.StQualifiedReferenceNode} #refersToBinding:)
	#(#{Kernel.StQualifiedReferenceNode} #refersToClass:)
	#(#{Kernel.StQualifiedReferenceNode} #rewriteQualifiedReferencesWith:)
	#(#{Kernel.StStaticVariable} #refersToBinding:)
	#(#{Kernel.StStaticVariable} #refersToClass:)
	#(#{Kernel.StVariable} #refersToBinding:)
	#(#{Kernel.StVariable} #refersToClass:)
	#(#{Kernel.StVariableNode} #copyWithName:)
	#(#{Kernel.StVariableNode} #isBindingChanged)
	#(#{Kernel.StVariableNode} #refersToClass:)
	#(#{Kernel.VariableBinding} #realBinding)
	#(#{Kernel.VariableBinding} #refersToBinding:)
	#(#{Kernel.VariableBinding} #refersToClass:)
	#(#{Root class} #classInModel:)
	#(#{Root class} #newClassInModel:)
	#(#{Smalltalk class} #newClassInModel:)
).

package setPrerequisites: #(
	'..\..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\Change Objects\RBChangeObjects'
	'..\Environments\RBEnvironments'
	'..\..\RBNamespaces'
	'..\Parser\RBParser'
	'..\..\..\..\Object Arts\Dolphin\System\Compiler\Smalltalk Compiler'
	'..\..\..\..\Object Arts\Dolphin\System\Compiler\Smalltalk Parser'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Refactory.Browser.RBAbstractClass'
	instanceVariableNames: 'newMethods instanceVariableNames removedSelectors scope'
	classVariableNames: 'LookupSuperclass'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'Refactory.Browser.RBAbstractCondition'
	instanceVariableNames: 'errorMacro'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'Refactory.Browser.RBMethod'
	instanceVariableNames: 'class compiledMethod source selector parseTree hasSourceIntervals package'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'Refactory.Browser.RBMethodName'
	instanceVariableNames: 'selector arguments'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'Refactory.Browser.Refactoring'
	instanceVariableNames: 'model options'
	classVariableNames: 'RefactoringOptions'
	imports: #(#{Kernel})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'Refactory.Browser.RefactoringManager'
	instanceVariableNames: 'refactorings'
	classVariableNames: 'Instance'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'Refactory.Browser.RefactoryTyper'
	instanceVariableNames: 'model class variableTypes bestGuesses variableMessages backpointers methodName selectorLookup'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Error
	subclass: #'Refactory.Browser.RefactoringError'
	instanceVariableNames: 'refactoring'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.VariableBinding
	subclass: #'Refactory.Browser.RBVariableBinding'
	instanceVariableNames: 'realBinding'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Model
	subclass: #'Refactory.Browser.RBModel'
	instanceVariableNames: 'changes environment rootClasses implementorsCache sendersCache rootNamespace smalltalkNamespace selectorsCache'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.ParseNodeVisitor
	subclass: #'Refactory.Browser.RBReadBeforeWrittenTester'
	instanceVariableNames: 'read checkNewTemps scopeStack'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.StaticVariableBinder
	subclass: #'Refactory.Browser.RBVariableAnalyser'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.RBAbstractClass
	subclass: #'Refactory.Browser.RBClass'
	instanceVariableNames: 'model name metaclass realClass superclass subclasses unqualifiedName classPool imports categoryNames comment environment binding instanceSpec'
	classVariableNames: 'LookupComment'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.RBAbstractClass
	subclass: #'Refactory.Browser.RBMetaclass'
	instanceVariableNames: 'instanceClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.RBClass
	subclass: #'Refactory.Browser.RBNamespaceClass'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.RBNamespaceClass
	subclass: #'Refactory.Browser.RBRootNamespace'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.RBNamespaceClass
	subclass: #'Refactory.Browser.RBSmalltalkNamespace'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.RBAbstractCondition
	subclass: #'Refactory.Browser.RBCondition'
	instanceVariableNames: 'block type errorBlock'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.RBAbstractCondition
	subclass: #'Refactory.Browser.RBConjunctiveCondition'
	instanceVariableNames: 'left right failed'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.RBAbstractCondition
	subclass: #'Refactory.Browser.RBEmptyCondition'
	instanceVariableNames: ''
	classVariableNames: 'Current'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.RBAbstractCondition
	subclass: #'Refactory.Browser.RBNegationCondition'
	instanceVariableNames: 'condition'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.Refactoring
	subclass: #'Refactory.Browser.AbstractVariablesRefactoring'
	instanceVariableNames: 'tree fromClass instVarReaders instVarWriters privateClassVarReaders privateClassVarWriters toClasses ignore'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.Refactoring
	subclass: #'Refactory.Browser.AddClassRefactoring'
	instanceVariableNames: 'details subclasses'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.Refactoring
	subclass: #'Refactory.Browser.ClassRefactoring'
	instanceVariableNames: 'className'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.Refactoring
	subclass: #'Refactory.Browser.ExpandImportsRefactoring'
	instanceVariableNames: 'imports fromClass parseTree toClasses isExpanded'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.Refactoring
	subclass: #'Refactory.Browser.MethodRefactoring'
	instanceVariableNames: 'class'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.Refactoring
	subclass: #'Refactory.Browser.RemoveClassRefactoring'
	instanceVariableNames: 'classNames'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.Refactoring
	subclass: #'Refactory.Browser.SplitClassRefactoring'
	instanceVariableNames: 'class instanceVariables newClassName referenceVariableName newClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.Refactoring
	subclass: #'Refactory.Browser.VariableRefactoring'
	instanceVariableNames: 'class variableName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ClassRefactoring
	subclass: #'Refactory.Browser.ChildrenToSiblingsRefactoring'
	instanceVariableNames: 'parent subclasses'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ClassRefactoring
	subclass: #'Refactory.Browser.ClassImportsRefactoring'
	instanceVariableNames: 'class import'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ClassRefactoring
	subclass: #'Refactory.Browser.ClassNameToBindingReferenceRefactoring'
	instanceVariableNames: 'class unqualifiedName'
	classVariableNames: ''
	imports: #(#{Refactory.Browser})
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ClassRefactoring
	subclass: #'Refactory.Browser.RenameClassRefactoring'
	instanceVariableNames: 'newName class newClassReference oldUnqualified classBinding'
	classVariableNames: ''
	imports: #(#{Refactory.Browser})
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ClassImportsRefactoring
	subclass: #'Refactory.Browser.AddImportRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ClassImportsRefactoring
	subclass: #'Refactory.Browser.RemoveImportRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.AddMethodRefactoring'
	instanceVariableNames: 'protocols source'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.ChangeMethodNameRefactoring'
	instanceVariableNames: 'newSelector oldSelector permutation implementors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.ChangeStaticVariableQualificationRefactoring'
	instanceVariableNames: 'selector sourceInterval method sourceTree node'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.ExtractMethodRefactoring'
	instanceVariableNames: 'selector extractionInterval extractedParseTree modifiedParseTree parameters needsReturn'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.ExtractMethodToComponentRefactoring'
	instanceVariableNames: 'selector extractionInterval extractedMethodSelector'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.ExtractToTemporaryRefactoring'
	instanceVariableNames: 'sourceInterval selector newVariableName method'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.InlineAllSendersRefactoring'
	instanceVariableNames: 'selector numberReplaced numberNotReplaced'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.InlineMethodRefactoring'
	instanceVariableNames: 'sourceInterval inlineParseTree sourceParseTree sourceSelector sourceMessage inlineClass method'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.InlineTemporaryRefactoring'
	instanceVariableNames: 'sourceInterval selector assignmentNode definingNode sourceTree method'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.MoveMethodRefactoring'
	instanceVariableNames: 'selector variable moveToClasses parseTree hasOnlySelfReturns selfVariableName abstractVariables'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.MoveVariableDefinitionRefactoring'
	instanceVariableNames: 'selector interval name parseTree blockNodes definingNode method'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.PushDownMethodRefactoring'
	instanceVariableNames: 'selectors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.PushUpMethodRefactoring'
	instanceVariableNames: 'removeDuplicates selectors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.RemoveMethodRefactoring'
	instanceVariableNames: 'selectors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.RenameTemporaryRefactoring'
	instanceVariableNames: 'selector interval oldName newName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.MethodRefactoring
	subclass: #'Refactory.Browser.TemporaryToInstanceVariableRefactoring'
	instanceVariableNames: 'selector temporaryVariableName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ChangeMethodNameRefactoring
	subclass: #'Refactory.Browser.AddParameterRefactoring'
	instanceVariableNames: 'initializer senders'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ChangeMethodNameRefactoring
	subclass: #'Refactory.Browser.RemoveParameterRefactoring'
	instanceVariableNames: 'parameterIndex argument'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ChangeMethodNameRefactoring
	subclass: #'Refactory.Browser.RenameMethodRefactoring'
	instanceVariableNames: 'hasPermutedArguments'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.RemoveParameterRefactoring
	subclass: #'Refactory.Browser.InlineParameterRefactoring'
	instanceVariableNames: 'expressions'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ChangeStaticVariableQualificationRefactoring
	subclass: #'Refactory.Browser.QualifyStaticVariablesRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.ChangeStaticVariableQualificationRefactoring
	subclass: #'Refactory.Browser.UnqualifyStaticVariablesRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.InlineMethodRefactoring
	subclass: #'Refactory.Browser.InlineMethodFromComponentRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.AbstractClassVariableRefactoring'
	instanceVariableNames: 'accessorsRefactoring variableBinding'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.AbstractInstanceVariableRefactoring'
	instanceVariableNames: 'accessorsRefactoring'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.AddClassVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.AddInstanceVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.CreateAccessorsForVariableRefactoring'
	instanceVariableNames: 'getterMethod setterMethod classVariable needsReturn'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.ProtectInstanceVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.PullUpClassVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.PullUpInstanceVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.PushDownClassVariableRefactoring'
	instanceVariableNames: 'destinationClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.PushDownInstanceVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.RemoveClassVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.RemoveInstanceVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.RenameClassVariableRefactoring'
	instanceVariableNames: 'newName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.VariableRefactoring
	subclass: #'Refactory.Browser.RenameInstanceVariableRefactoring'
	instanceVariableNames: 'newName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Array methodsFor!

hasLiteralMatching: aMonadicValuable
	1 to: self size
		do: 
			[:i |
			| each |
			each := self at: i.
			((aMonadicValuable value: each)
				or: [each class == Array and: [each hasLiteralMatching: aMonadicValuable]]) ifTrue: [^true]].
	^false! !

!Core.Array categoriesForMethods!
hasLiteralMatching:!private!testing! !
!

!Core.Class methodsFor!

classInModel: aRBModel
	^((environment classInModel: aRBModel) localBindingFor: name) value!

instancesAreClasses
	^false!

newClassInModel: aRBModel
	^Refactory.Browser.RBClass new model: aRBModel existing: self! !

!Core.Class categoriesForMethods!
classInModel:!public! !
instancesAreClasses!public! !
newClassInModel:!private!refactoring! !
!

!Core.Class class methodsFor!

rootsOfTheWorld
	#rbFix.	"Dolphin uses #allRoots"
	^Smalltalk allRoots! !

!Core.Class class categoriesForMethods!
rootsOfTheWorld!class hierarchy-accessing!private! !
!

!Core.ClassDescription methodsFor!

classInModel: aRBModel
	^self subclassResponsibility!

instancesAreClasses
	^self subclassResponsibility!

realClass
	^self! !

!Core.ClassDescription categoriesForMethods!
classInModel:!public! !
instancesAreClasses!public! !
realClass!public! !
!

!Core.Metaclass methodsFor!

classInModel: aRBModel
	^(instanceClass classInModel: aRBModel) ifNotNil: [:modelClass | modelClass metaclass]!

instancesAreClasses
	^true! !

!Core.Metaclass categoriesForMethods!
classInModel:!public! !
instancesAreClasses!public! !
!

!Kernel.BindingReference methodsFor!

referenceInModel: aRBModel 
	^Refactory.Browser.RBBindingReference model: aRBModel reference: self! !

!Kernel.BindingReference categoriesForMethods!
referenceInModel:!public! !
!

!Kernel.CompiledCode methodsFor!

hasLiteralMatching: aMonadicValuable
	1 to: self size
		do: 
			[:i |
			| literal |
			literal := self basicAt: i.
			((aMonadicValuable value: literal)
				or: [literal class == Array and: [literal hasLiteralMatching: aMonadicValuable]]) ifTrue: [^true]].
	^false! !

!Kernel.CompiledCode categoriesForMethods!
hasLiteralMatching:!private!testing! !
!

!Kernel.Namespace class methodsFor!

newClassInModel: aRBModel
	^Refactory.Browser.RBNamespaceClass new model: aRBModel existing: self! !

!Kernel.Namespace class categoriesForMethods!
newClassInModel:!private!refactoring! !
!

!Kernel.StBasicVariableNode methodsFor!

isBindingChanged
	"Assuming that this node has been bound by a semantic analyser, would it bind differently now?"

	| originalBinding |
	originalBinding := self binding.
	^originalBinding notNil and: [originalBinding ~~ self resolveBinding]!

refersToBinding: aVariableBinding
	^variable notNil and: [variable refersToBinding: aVariableBinding]!

refersToClass: aClass
	^variable notNil and: [variable refersToClass: aClass]! !

!Kernel.StBasicVariableNode categoriesForMethods!
isBindingChanged!public!testing! !
refersToBinding:!public!testing! !
refersToClass:!public!testing! !
!

!Kernel.StLiteralArrayNode methodsFor!

isOrContainsQualifiedReferenceMatching: aMonadicValuable
	^self contents
		anySatisfy: [:each | each isLiteralNode and: [each isOrContainsQualifiedReferenceMatching: aMonadicValuable]]!

refersToClass: aClass
	^self contents anySatisfy: [:each | each refersToClass: aClass]!

refersToSymbol: aSymbol
	^self contents anySatisfy: [:each | each refersToSymbol: aSymbol]!

rewriteQualifiedReferencesWith: aMonadicValuable
	^StLiteralArrayNode
		contents: (self contents collect: [:each | each rewriteQualifiedReferencesWith: aMonadicValuable])! !

!Kernel.StLiteralArrayNode categoriesForMethods!
isOrContainsQualifiedReferenceMatching:!public!testing! !
refersToClass:!public!testing! !
refersToSymbol:!public!testing! !
rewriteQualifiedReferencesWith:!public!transforming! !
!

!Kernel.StLiteralNode methodsFor!

isOrContainsQualifiedReferenceMatching: aMonadicValuable
	^false!

qualifiedReferencesDo: aMonadicValuable
	"Overridden by classes that are or may contain qualified reference nodes to enumerate those nodes through the argument block."

	!

refersToClass: aClass
	^false!

refersToSymbol: aSymbol
	^false!

rewriteQualifiedReferencesWith: aMonadicValuable
	^self copy! !

!Kernel.StLiteralNode categoriesForMethods!
isOrContainsQualifiedReferenceMatching:!public!testing! !
qualifiedReferencesDo:!public!testing! !
refersToClass:!public!testing! !
refersToSymbol:!public!testing! !
rewriteQualifiedReferencesWith:!public!transforming! !
!

!Kernel.StLiteralValueNode methodsFor!

refersToSymbol: aSymbol
	^self value refersToLiteral: aSymbol! !

!Kernel.StLiteralValueNode categoriesForMethods!
refersToSymbol:!public!testing! !
!

!Kernel.StProgramNode methodsFor!

refersToBinding: aVariableBinding
	"Answer whether this parse tree refers to the specified variable. N.B. The tree must have been 'bound' (i.e. have been semantically analysed to resolve variables)."

	self childrenDo: [:each | (each refersToBinding: aVariableBinding) ifTrue: [^true]].
	^false!

refersToClass: aClass
	"Answer whether this parse tree refers to the named class. N.B. The tree must be 'bound' (i.e. have been semantically analysed to resolve variables)."

	self childrenDo: [:each | (each refersToClass: aClass) ifTrue: [^true]].
	^false! !

!Kernel.StProgramNode categoriesForMethods!
refersToBinding:!public!testing! !
refersToClass:!public!testing! !
!

!Kernel.StQualifiedReferenceNode methodsFor!

copyWithName: aString
	^self copy
		pathString: aString;
		clearPositions;
		yourself!

isBindingChanged
	"Assuming that this node has been bound by the RBVariableAnalyser, would it bind differently now?"

	^binding notNil and: [self resolveBinding ~~ binding]!

isOrContainsQualifiedReferenceMatching: aMonadicValuable
	^aMonadicValuable value: self!

qualifiedReferencesDo: aMonadicValuable
	^aMonadicValuable value: self!

refersToBinding: aVariableBinding
	| var |
	var := self binding.
	^var notNil and: [var refersToBinding: aVariableBinding]!

refersToClass: aClass
	| var |
	var := self binding.
	#namespaceToDo.	"What about the reference a VariableBinding has to it's environment?"
	^var notNil and: [var refersToClass: aClass]!

rewriteQualifiedReferencesWith: aMonadicValuable
	^aMonadicValuable value: self! !

!Kernel.StQualifiedReferenceNode categoriesForMethods!
copyWithName:!private!transforming! !
isBindingChanged!public!testing! !
isOrContainsQualifiedReferenceMatching:!public!testing! !
qualifiedReferencesDo:!public!testing! !
refersToBinding:!public!testing! !
refersToClass:!public!testing! !
rewriteQualifiedReferencesWith:!public!transforming! !
!

!Kernel.StStaticVariable methodsFor!

refersToBinding: aVariableBinding
	^binding refersToBinding: aVariableBinding!

refersToClass: aClass
	^binding notNil and: [binding refersToClass: aClass]! !

!Kernel.StStaticVariable categoriesForMethods!
refersToBinding:!public!testing! !
refersToClass:!public!testing! !
!

!Kernel.StVariable methodsFor!

refersToBinding: aVariableBinding
	^false!

refersToClass: aClass
	^false! !

!Kernel.StVariable categoriesForMethods!
refersToBinding:!public!testing! !
refersToClass:!public!testing! !
!

!Kernel.StVariableNode methodsFor!

copyWithName: aString
	^self copy
		name: aString;
		clearPositions;
		yourself!

isBindingChanged
	"Assuming that this node has been bound by a semantic analyser, would it bind differently now?"

	^false!

refersToClass: aRBClass
	^false! !

!Kernel.StVariableNode categoriesForMethods!
copyWithName:!private!transforming! !
isBindingChanged!accessing!public! !
refersToClass:!public!testing! !
!

!Kernel.VariableBinding methodsFor!

realBinding
	^self!

refersToBinding: aVariableBinding
	^self == aVariableBinding or: 
			[aVariableBinding isClassBinding and: [self environment includesEnvironment: aVariableBinding value]]!

refersToClass: aClass
	^(self isClassBinding and: [value == aClass]) or: [self environment includesEnvironment: aClass]! !

!Kernel.VariableBinding categoriesForMethods!
realBinding!accessing!public! !
refersToBinding:!public!testing! !
refersToClass:!public!testing! !
!

!Root class methodsFor!

classInModel: aRBModel
	^aRBModel rootNamespace!

newClassInModel: aRBModel
	^aRBModel rootNamespace! !

!Root class categoriesForMethods!
classInModel:!public! !
newClassInModel:!private!refactoring! !
!

!Smalltalk class methodsFor!

newClassInModel: aRBModel
	^Refactory.Browser.RBSmalltalkNamespace new model: aRBModel existing: self! !

!Smalltalk class categoriesForMethods!
newClassInModel:!private!refactoring! !
!

"End of package definition"!

