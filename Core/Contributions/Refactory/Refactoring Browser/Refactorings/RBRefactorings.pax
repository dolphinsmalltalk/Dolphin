| package |
package := Package name: 'RBRefactorings'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Refactoring Browser Refactorings
Copyright (c) John Brant & Don Roberts.

Ported to Dolphin by Blair McGlashan and Andy Bower at Camp Smalltalk 1 in San Diego, 2000.

Browse the ''*-RB fixes'' pseudo-category to find the modifications made as part of the Dolphin port.'.


package setClassNames: #(
	#{Refactory.Browser.AbstractClassVariableRefactoring}
	#{Refactory.Browser.AbstractInstanceVariableRefactoring}
	#{Refactory.Browser.AbstractVariablesRefactoring}
	#{Refactory.Browser.AddClassRefactoring}
	#{Refactory.Browser.AddClassVariableRefactoring}
	#{Refactory.Browser.AddInstanceVariableRefactoring}
	#{Refactory.Browser.AddMethodRefactoring}
	#{Refactory.Browser.AddParameterRefactoring}
	#{Refactory.Browser.ChangeMethodNameRefactoring}
	#{Refactory.Browser.ChildrenToSiblingsRefactoring}
	#{Refactory.Browser.ClassRefactoring}
	#{Refactory.Browser.CreateAccessorsForVariableRefactoring}
	#{Refactory.Browser.ExpandReferencedPoolsRefactoring}
	#{Refactory.Browser.ExtractMethodRefactoring}
	#{Refactory.Browser.ExtractMethodToComponentRefactoring}
	#{Refactory.Browser.ExtractToTemporaryRefactoring}
	#{Refactory.Browser.InlineAllSendersRefactoring}
	#{Refactory.Browser.InlineMethodFromComponentRefactoring}
	#{Refactory.Browser.InlineMethodRefactoring}
	#{Refactory.Browser.InlineParameterRefactoring}
	#{Refactory.Browser.InlineTemporaryRefactoring}
	#{Refactory.Browser.MethodRefactoring}
	#{Refactory.Browser.MoveMethodRefactoring}
	#{Refactory.Browser.MoveVariableDefinitionRefactoring}
	#{Refactory.Browser.ProtectInstanceVariableRefactoring}
	#{Refactory.Browser.PullUpClassVariableRefactoring}
	#{Refactory.Browser.PullUpInstanceVariableRefactoring}
	#{Refactory.Browser.PushDownClassVariableRefactoring}
	#{Refactory.Browser.PushDownInstanceVariableRefactoring}
	#{Refactory.Browser.PushDownMethodRefactoring}
	#{Refactory.Browser.PushUpMethodRefactoring}
	#{Refactory.Browser.RBAbstractClass}
	#{Refactory.Browser.RBAbstractCondition}
	#{Refactory.Browser.RBClass}
	#{Refactory.Browser.RBCondition}
	#{Refactory.Browser.RBConjunctiveCondition}
	#{Refactory.Browser.RBEmptyCondition}
	#{Refactory.Browser.RBMetaclass}
	#{Refactory.Browser.RBMethod}
	#{Refactory.Browser.RBMethodName}
	#{Refactory.Browser.RBModel}
	#{Refactory.Browser.RBNamespaceClass}
	#{Refactory.Browser.RBNegationCondition}
	#{Refactory.Browser.RBReadBeforeWrittenTester}
	#{Refactory.Browser.RBVariableAnalyser}
	#{Refactory.Browser.RBVariableBinding}
	#{Refactory.Browser.Refactoring}
	#{Refactory.Browser.RefactoringError}
	#{Refactory.Browser.RefactoringManager}
	#{Refactory.Browser.RefactoringWarning}
	#{Refactory.Browser.RefactoryTyper}
	#{Refactory.Browser.RemoveClassRefactoring}
	#{Refactory.Browser.RemoveClassVariableRefactoring}
	#{Refactory.Browser.RemoveInstanceVariableRefactoring}
	#{Refactory.Browser.RemoveMethodRefactoring}
	#{Refactory.Browser.RemoveParameterRefactoring}
	#{Refactory.Browser.RenameClassVariableRefactoring}
	#{Refactory.Browser.RenameInstanceVariableRefactoring}
	#{Refactory.Browser.RenameMethodRefactoring}
	#{Refactory.Browser.RenameTemporaryRefactoring}
	#{Refactory.Browser.SplitClassRefactoring}
	#{Refactory.Browser.TemporaryToInstanceVariableRefactoring}
	#{Refactory.Browser.VariableRefactoring}
).

package setMethodNames: #(
	#(#{Core.Array} #hasLiteralMatching:)
	#(#{Core.Class} #rbClass)
	#(#{Core.Class class} #rootsOfTheWorld)
	#(#{Kernel.CompiledCode} #hasLiteralMatching:)
	#(#{Kernel.Namespace class} #rbClass)
	#(#{Kernel.StAbstractVariableNode} #refersToClass:)
	#(#{Kernel.StLiteralArrayNode} #refersToClass:)
	#(#{Kernel.StLiteralNode} #refersToClass:)
	#(#{Kernel.StParameterNode} #refersToClass:)
	#(#{Kernel.StQualifiedReferenceNode} #refersToClass:)
	#(#{Kernel.StStaticVariable} #refersToClass:)
	#(#{Kernel.StTempDeclNode} #refersToClass:)
	#(#{Kernel.StVariable} #refersToClass:)
	#(#{Kernel.StVariableNode} #refersToClass:)
	#(#{Kernel.VariableBinding} #refersToClass:)
	#(#{Refactory.Browser.RBPatternVariableNode} #refersToClass:)
).

package setPrerequisites: #(
	'..\..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\Change Objects\RBChangeObjects'
	'..\Environments\RBEnvironments'
	'..\..\RBNamespaces'
	'..\Parser\RBParser'
	'..\..\..\..\Object Arts\Dolphin\System\Compiler\Smalltalk Compiler'
	'..\..\..\..\Object Arts\Dolphin\System\Compiler\Smalltalk Parser'
).

package!

"Class Definitions"!

Core.Object subclass: #'Refactory.Browser.RBAbstractClass'
	instanceVariableNames: 'newMethods instanceVariableNames removedMethods scope'
	classVariableNames: 'LookupSuperclass'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Refactory.Browser.RBAbstractCondition'
	instanceVariableNames: 'errorMacro'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Refactory.Browser.RBMethod'
	instanceVariableNames: 'class compiledMethod source selector parseTree'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Refactory.Browser.RBMethodName'
	instanceVariableNames: 'selector arguments'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Refactory.Browser.RBModel'
	instanceVariableNames: 'changes environment newClasses removedClasses modelClasses rootClasses implementorsCache sendersCache enumerating'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Refactory.Browser.Refactoring'
	instanceVariableNames: 'model options'
	classVariableNames: 'RefactoringOptions'
	imports: #(#{Kernel})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Refactory.Browser.RefactoringManager'
	instanceVariableNames: 'refactorings'
	classVariableNames: 'Instance'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Refactory.Browser.RefactoryTyper'
	instanceVariableNames: 'model class variableTypes bestGuesses variableMessages backpointers methodName selectorLookup'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Error subclass: #'Refactory.Browser.RefactoringError'
	instanceVariableNames: 'refactoring'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Warning subclass: #'Refactory.Browser.RefactoringWarning'
	instanceVariableNames: 'refactoring'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.VariableBinding subclass: #'Refactory.Browser.RBVariableBinding'
	instanceVariableNames: 'realBinding'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.ParseNodeVisitor subclass: #'Refactory.Browser.RBReadBeforeWrittenTester'
	instanceVariableNames: 'read checkNewTemps scopeStack'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.AbstractSemanticAnalyser subclass: #'Refactory.Browser.RBVariableAnalyser'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.RBAbstractClass subclass: #'Refactory.Browser.RBClass'
	instanceVariableNames: 'model name metaclass realClass superclass subclasses unqualifiedName classPool imports category comment environment binding'
	classVariableNames: 'LookupComment'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.RBAbstractClass subclass: #'Refactory.Browser.RBMetaclass'
	instanceVariableNames: 'nonMetaclass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.RBClass subclass: #'Refactory.Browser.RBNamespaceClass'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.RBAbstractCondition subclass: #'Refactory.Browser.RBCondition'
	instanceVariableNames: 'block type errorBlock'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.RBAbstractCondition subclass: #'Refactory.Browser.RBConjunctiveCondition'
	instanceVariableNames: 'left right failed'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.RBAbstractCondition subclass: #'Refactory.Browser.RBEmptyCondition'
	instanceVariableNames: ''
	classVariableNames: 'Current'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.RBAbstractCondition subclass: #'Refactory.Browser.RBNegationCondition'
	instanceVariableNames: 'condition'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Refactoring subclass: #'Refactory.Browser.AbstractVariablesRefactoring'
	instanceVariableNames: 'tree fromClass instVarReaders instVarWriters classVarReaders classVarWriters toClasses ignore'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Refactoring subclass: #'Refactory.Browser.ClassRefactoring'
	instanceVariableNames: 'className'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Refactoring subclass: #'Refactory.Browser.ExpandReferencedPoolsRefactoring'
	instanceVariableNames: 'pools fromClass parseTree toClasses'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Refactoring subclass: #'Refactory.Browser.MethodRefactoring'
	instanceVariableNames: 'class'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Refactoring subclass: #'Refactory.Browser.RemoveClassRefactoring'
	instanceVariableNames: 'classNames'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Refactoring subclass: #'Refactory.Browser.SplitClassRefactoring'
	instanceVariableNames: 'class instanceVariables newClassName referenceVariableName newClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Refactoring subclass: #'Refactory.Browser.VariableRefactoring'
	instanceVariableNames: 'class variableName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.ClassRefactoring subclass: #'Refactory.Browser.AddClassRefactoring'
	instanceVariableNames: 'category superclass subclasses'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.ClassRefactoring subclass: #'Refactory.Browser.ChildrenToSiblingsRefactoring'
	instanceVariableNames: 'parent subclasses'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.AddMethodRefactoring'
	instanceVariableNames: 'protocols source'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.ChangeMethodNameRefactoring'
	instanceVariableNames: 'newSelector oldSelector permutation implementors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.ExtractMethodRefactoring'
	instanceVariableNames: 'selector extractionInterval extractedParseTree modifiedParseTree parameters needsReturn'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.ExtractMethodToComponentRefactoring'
	instanceVariableNames: 'selector extractionInterval extractedMethodSelector'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.ExtractToTemporaryRefactoring'
	instanceVariableNames: 'sourceInterval selector newVariableName parseTree'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.InlineAllSendersRefactoring'
	instanceVariableNames: 'selector numberReplaced numberNotReplaced'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.InlineMethodRefactoring'
	instanceVariableNames: 'sourceInterval inlineParseTree sourceParseTree sourceSelector sourceMessage inlineClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.InlineTemporaryRefactoring'
	instanceVariableNames: 'sourceInterval selector sourceTree assignmentNode definingNode'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.MoveMethodRefactoring'
	instanceVariableNames: 'selector variable moveToClasses parseTree hasOnlySelfReturns selfVariableName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.MoveVariableDefinitionRefactoring'
	instanceVariableNames: 'selector interval name parseTree blockNodes definingNode'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.PushDownMethodRefactoring'
	instanceVariableNames: 'selectors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.PushUpMethodRefactoring'
	instanceVariableNames: 'removeDuplicates selectors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.RemoveMethodRefactoring'
	instanceVariableNames: 'selectors'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.RenameTemporaryRefactoring'
	instanceVariableNames: 'selector interval oldName newName parseTree'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.MethodRefactoring subclass: #'Refactory.Browser.TemporaryToInstanceVariableRefactoring'
	instanceVariableNames: 'selector temporaryVariableName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.ChangeMethodNameRefactoring subclass: #'Refactory.Browser.AddParameterRefactoring'
	instanceVariableNames: 'initializer senders'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.ChangeMethodNameRefactoring subclass: #'Refactory.Browser.RemoveParameterRefactoring'
	instanceVariableNames: 'parameterIndex argument'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.ChangeMethodNameRefactoring subclass: #'Refactory.Browser.RenameMethodRefactoring'
	instanceVariableNames: 'hasPermutedArguments'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.RemoveParameterRefactoring subclass: #'Refactory.Browser.InlineParameterRefactoring'
	instanceVariableNames: 'expressions'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.InlineMethodRefactoring subclass: #'Refactory.Browser.InlineMethodFromComponentRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.AbstractClassVariableRefactoring'
	instanceVariableNames: 'accessorsRefactoring'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.AbstractInstanceVariableRefactoring'
	instanceVariableNames: 'accessorsRefactoring'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.AddClassVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.AddInstanceVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.CreateAccessorsForVariableRefactoring'
	instanceVariableNames: 'getterMethod setterMethod classVariable needsReturn'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.ProtectInstanceVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.PullUpClassVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.PullUpInstanceVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.PushDownClassVariableRefactoring'
	instanceVariableNames: 'destinationClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.PushDownInstanceVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.RemoveClassVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.RemoveInstanceVariableRefactoring'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.RenameClassVariableRefactoring'
	instanceVariableNames: 'newName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.VariableRefactoring subclass: #'Refactory.Browser.RenameInstanceVariableRefactoring'
	instanceVariableNames: 'newName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Array methodsFor!

hasLiteralMatching: aMonadicValuable
	1 to: self size
		do: 
			[:i |
			| each |
			each := self at: i.
			((aMonadicValuable value: each)
				or: [each class == Array and: [each hasLiteralMatching: aMonadicValuable]]) ifTrue: [^true]].
	^false! !
!Core.Array categoriesForMethods!
hasLiteralMatching:!private!testing! !
!

!Core.Class methodsFor!

rbClass
	^Refactory.Browser.RBClass! !
!Core.Class categoriesForMethods!
rbClass!constants!public! !
!

!Core.Class class methodsFor!

rootsOfTheWorld
	#rbFix.	"Dolphin uses #allRoots"
	^Smalltalk allRoots! !
!Core.Class class categoriesForMethods!
rootsOfTheWorld!class hierarchy-accessing!private! !
!

!Kernel.CompiledCode methodsFor!

hasLiteralMatching: aMonadicValuable
	1 to: self size
		do: 
			[:i |
			| literal |
			literal := self basicAt: i.
			((aMonadicValuable value: literal)
				or: [literal class == Array and: [literal hasLiteralMatching: aMonadicValuable]]) ifTrue: [^true]].
	^false! !
!Kernel.CompiledCode categoriesForMethods!
hasLiteralMatching:!private!testing! !
!

!Kernel.Namespace class methodsFor!

rbClass
	^Refactory.Browser.RBNamespaceClass! !
!Kernel.Namespace class categoriesForMethods!
rbClass!constants!public! !
!

!Kernel.StAbstractVariableNode methodsFor!

refersToClass: aRBClass
	^false! !
!Kernel.StAbstractVariableNode categoriesForMethods!
refersToClass:!public!testing! !
!

!Kernel.StLiteralArrayNode methodsFor!

refersToClass: aClass
	^self contents anySatisfy: [:each | each refersToClass: aClass]! !
!Kernel.StLiteralArrayNode categoriesForMethods!
refersToClass:!public!testing! !
!

!Kernel.StLiteralNode methodsFor!

refersToClass: aClass
	^false! !
!Kernel.StLiteralNode categoriesForMethods!
refersToClass:!public!testing! !
!

!Kernel.StParameterNode methodsFor!

refersToClass: aRBClass
	^false! !
!Kernel.StParameterNode categoriesForMethods!
refersToClass:!public!testing! !
!

!Kernel.StQualifiedReferenceNode methodsFor!

refersToClass: aClass
	| var |
	var := self binding.
	#namespaceToDo.	"What about the reference a VariableBinding has to it's environment?"
	^var notNil and: [var refersToClass: aClass]! !
!Kernel.StQualifiedReferenceNode categoriesForMethods!
refersToClass:!public!testing! !
!

!Kernel.StStaticVariable methodsFor!

refersToClass: aClass
	^binding notNil and: [binding refersToClass: aClass]! !
!Kernel.StStaticVariable categoriesForMethods!
refersToClass:!public!testing! !
!

!Kernel.StTempDeclNode methodsFor!

refersToClass: aRBClass
	^false! !
!Kernel.StTempDeclNode categoriesForMethods!
refersToClass:!public!testing! !
!

!Kernel.StVariable methodsFor!

refersToClass: aClass
	^false! !
!Kernel.StVariable categoriesForMethods!
refersToClass:!public!testing! !
!

!Kernel.StVariableNode methodsFor!

refersToClass: aClass
	^variable notNil and: [variable refersToClass: aClass]! !
!Kernel.StVariableNode categoriesForMethods!
refersToClass:!public!testing! !
!

!Kernel.VariableBinding methodsFor!

refersToClass: aClass
	^self isClassBinding and: [value == aClass]! !
!Kernel.VariableBinding categoriesForMethods!
refersToClass:!public!testing! !
!

!Refactory.Browser.RBPatternVariableNode methodsFor!

refersToClass: aRBClass
	^false! !
!Refactory.Browser.RBPatternVariableNode categoriesForMethods!
refersToClass:!public!testing! !
!

"End of package definition"!

