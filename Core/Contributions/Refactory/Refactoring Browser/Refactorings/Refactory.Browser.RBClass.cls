"Filed out from Dolphin Smalltalk"!

Refactory.Browser.RBAbstractClass subclass: #'Refactory.Browser.RBClass'
	instanceVariableNames: 'model name metaclass realClass unqualifiedName classVariableNames imports category classConstants comment environment'
	classVariableNames: 'LookupComment'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.RBClass guid: (Core.GUID fromString: '{e6a15c71-6c8c-437d-856c-42cd447df930}')!
Refactory.Browser.RBClass comment: 'RBClass represents a Class.

Instance Variables:
	category	<Symbol>	name of the category that the class should be compiled in
	classVariableNames	<SequenceableCollection of: Symbol>	class variables defined by the class
	poolDictionaryNames	<Collection of: Symbol>	pool variables included by the class'!
!Refactory.Browser.RBClass categoriesForClass!Refactory-Model! !
!Refactory.Browser.RBClass methodsFor!

<= aRBClass
	"Answer whether the receiver should sort before the argument, e.g. in a SortedCollection using the default sort block. We use a case sensitive comparison for stability. The class name is the primary sort order, but for equal names the namespace is then used.
	This provides a stable order that is reasonable for working with unqualified names, and which is therefore useful for backwards compatibility, but it doesn't necessarily make sense for fully qualified names. Generally it is preferable to specify one's own sort order comparison rather than relying on the default."

	| cmp |
	cmp := self unqualifiedName <==> aRBClass unqualifiedName.
	^cmp == 0 ifTrue: [self fullName <= aRBClass fullName] ifFalse: [cmp < 0]!

addClassVariable: aString
	self classVariableNames add: aString.
	model addClassVariable: aString to: self!

addImport: aString
	| ref |
	ref := aString asQualifiedReference.
	imports := self imports copyWith: ref.
	model addImport: ref to: self!

allClassVariableNames
	| sprClass |
	sprClass := self superclass.
	^sprClass isNil
		ifTrue: [self classVariableNames]
		ifFalse: [sprClass allClassVariableNames , self classVariableNames]!

allImports
	^self superclass ifNil: [self imports] ifNotNil: [:sprClass | sprClass allImports , self imports]!

category
	^category isNil
		ifTrue: [model environment whichCategoryIncludes: self name]
		ifFalse: [category]!

category: aSymbol 
	category := aSymbol!

classBindingNames
	^self classVariableNames , (self classConstants collect: [:each | each key])!

classConstants
	classConstants
		ifNil: [self classConstants: (self isDefined ifTrue: [self realClass classConstants] ifFalse: [#()])].
	^classConstants!

classConstants: aCollectionOfVariableBindings
	classConstants := aCollectionOfVariableBindings asOrderedCollection!

classVariableNames
	(classVariableNames isNil and: [self isDefined])
		ifTrue: [self classVariableNames: self realClass classBindingNames].
	^classVariableNames!

classVariableNames: aCollectionOfStrings 
	classVariableNames := aCollectionOfStrings asOrderedCollection!

comment
	^comment == LookupComment
		ifTrue: [comment := self isDefined ifTrue: [self realClass comment]]
		ifFalse: [comment]!

comment: aString
	model comment: (comment := aString) in: self!

definitionString
	| definitionStream |
	definitionStream := (String writeStream: 256)
				locale: SmalltalkLocale.Hex;
				yourself.
	self printDefinitionOn: definitionStream.
	^definitionStream contents!

directlyDefinesClassVariable: aString
	^self classVariableNames includes: aString!

directlyImportsNamespace: aBindingReference
	"Namespace imports must always be absolute binding references, but they may be private, so we just compare the paths"

	| pathString |
	pathString := aBindingReference asString.
	^self imports anySatisfy: [:each | each pathString = pathString]!

environment
	"Rather confusingly, this is environment in the sense of being a namespace (i.e. an instance of RBNamespaceClass) and is compatible with the use of the term in the Behavior/ClassDescription/Class/Metaclass hierarchy.
	It's not the BrowserEnvironment (another type of scope) environment of the RBNamespace (Refactoring model) class. I think I might rename RBNamespace...."

	^environment ifNil: [environment := self getEnvironment]!

fullyQualifiedReference
	^BindingReference pathString: name!

getEnvironment
	^model classNamed: self environmentName!

getImports
	#rbFix.	"Dolphin stores the pool names in its classes, rather than the pools themselves."
	^self realClass imports
	"sharedPools collect: [:each | Smalltalk keyAtValue: each]"!

imports
	imports ifNil: [imports := self isDefined ifTrue: [self realClass imports] ifFalse: [#()]].
	^imports!

imports: aCollectionOfStrings
	imports := (aCollectionOfStrings collect: [:each | each asQualifiedReference]) asArray!

includesEnvironment: aClass
	"Answer whether the receiver includes the namespace argument (i.e. is it nested within it somewhere in its environment chain)."

	^self == aClass or: [self environment includesEnvironment: aClass]
!

includesNamespace: aClass
	"Answer whether the receiver includes the namespace argument (i.e. is it a sub-namespace, or is it nested within it somewhere in its environment chain)."

	^self == aClass or: [(self inheritsFrom: aClass) or: [self environment includesEnvironment: aClass]]!

isDefined
	^realClass notNil!

isMeta
	^false!

kindOfSubclass
	"Private - Answer a string describing the kind of subclassing method used to create the receiver 
	(part of its definition)."

	^self isVariable 
		ifTrue: [self isBytes ifTrue: ['variableByteSubclass:'] ifFalse: ['variableSubclass:']]
		ifFalse: ['subclass:']!

localBindingFor: aString
	"Answer a variable binding for the named variable directly in the scope of this class, i.e. one of its own class variables. If there is no such class variable, then answer nil."

	^self realClass localBindingFor: aString!

metaclass
	^metaclass!

metaclass: aRBMetaclass
	metaclass := aRBMetaclass.
	aRBMetaclass nonMetaclass: self!

model
	^model!

model: aRBNamespace 
	model := aRBNamespace!

name
	"Answer the name of the non-metaclass. Note that in Dolphin 8 this is always a fully-qualified name."

	^name!

name: aString
	name := aString.
	unqualifiedName := environment := nil!

newBindingContextForIdentifier: aString
	^Kernel.BindingContext
		methodClass: self
		environment: self environment
		identifier: aString!

nonMetaclass
	^self!

printDefinitionOn: puttableStream
	| constants |
	puttableStream
		nextPutAll: self superclass name;
		space;
		nextPutAll: self kindOfSubclass;
		space;
		print: self fullName asSymbol;
		crtab;
		nextPutAll: 'instanceVariableNames: '''.
	self instanceVariableNames do: [:each | puttableStream nextPutAll: each]
		separatedBy: [puttableStream space].
	puttableStream
		nextPut: $';
		crtab;
		nextPutAll: 'classVariableNames: '''.
	self classVariableNames do: [:each | puttableStream nextPutAll: each]
		separatedBy: [puttableStream space].
	puttableStream
		nextPut: $';
		crtab;
		nextPutAll: 'imports: ';
		print: self imports;
		crtab;
		nextPutAll: 'classInstanceVariableNames: '''.
	self metaclass instanceVariableNames do: [:each | puttableStream nextPutAll: each]
		separatedBy: [puttableStream space].
	puttableStream
		nextPut: $';
		crtab;
		nextPutAll: 'classConstants: {'.
	constants := self classConstants.
	constants isEmpty
		ifFalse: 
			[constants do: 
					[:each |
					puttableStream
						crtab: 2;
						print: each]
				separatedBy: [puttableStream nextPut: $.].
			puttableStream crtab].
	puttableStream nextPut: $}!

realClass
	^realClass!

realClass: aClass 
	realClass := aClass.
	superclass isNil ifTrue: [superclass := LookupSuperclass]!

realName: aSymbol 
	self realClass: aSymbol asQualifiedReference value!

removeClassVariable: aString
	self classVariableNames remove: aString ifAbsent: [self classConstants remove: aString].
	model removeClassVariable: aString from: self!

renameClassVariable: oldName to: newName around: aBlock
	| varNames |
	varNames := self classVariableNames.
	varNames at: (varNames indexOf: oldName) put: newName.
	model
		renameClassVariable: oldName
		to: newName
		in: self
		around: aBlock!

resolveBindingPath: anArray
	"Private - Attempt to resolve a <VariableBinding> by walking the names in the argument through nested namespaces."

	| length |
	length := anArray size.
	length == 0 ifTrue: [^self binding].
	^(self resolveUnqualifiedName: (anArray at: 1))
		ifNotNil: 
			[:rootBinding |
			| binding namespace |
			binding := rootBinding.
			2 to: length
				do: 
					[:i |
					| identifier |
					namespace := binding value.
					identifier := anArray at: i.
					binding := namespace resolvePublicBinding: (self newBindingContextForIdentifier: identifier).
					binding isNil ifTrue: [^nil]].
			binding]!

resolveImportedBinding: aBindingContext
	"Private - Search imported namespaces for a binding that matches the identifier in the <BindingContext> supplied. The search proceeds up through the class hierarchy (i.e. imports in the class hierarchy are inherited), and then out to the imports of the enclosing namespace. Imports into the enclosing namespaces of superclasses are not searched."

	| current |
	current := self.
	
	[(current resolveLocallyImportedBinding: aBindingContext) ifNotNil: [:binding | ^binding].
	current := current superclass.
	current isNil]
			whileFalse.
	^aBindingContext environment
		ifNotNil: [:env | env resolveImportedBinding: aBindingContext]!

resolveLocallyImportedBinding: aBindingContext
	"Private - Search the directly imported namespaces for a binding that matches the identifier in the <BindingContext> argument."

	1 to: self imports size
		do: 
			[:i |
			| each |
			each := imports at: i.
			(aBindingContext visitImport: each from: self)
				ifNotNil: 
					[:namespace |
					((model classFor: namespace) resolvePublicBinding: aBindingContext)
						ifNotNil: [:binding | ^binding]]].
	^nil!

resolvePathString: aString
	(BindingReference isQualifiedName: aString) ifFalse: [^self resolveUnqualifiedName: aString].
	^self resolveBindingPath: ($. split: aString)!

resolvePublicBinding: aBindingContext
	"Private - Resolve a binding with public visibility in the receiver's hierarchy, or among its local imports.
	This is used to find bindings for second and subsequent components of qualified names."

	(self hierarchyBindingFor: aBindingContext identifier)
		ifNotNil: [:binding | binding isPrivate ifFalse: [^binding]].
	"Search only the local imports, not the imports of the imports."
	^self resolveLocallyImportedBinding: aBindingContext!

resolveUnqualifiedName: aString
	"Private - Attempt to find a binding for the specified unqualified name in the scope of the receiver. Variables defined in the class hierarchy should bind more tightly than those in the namespace (environment) hierarchy. Only after exhausting these hierarchies should the imports be searched, again with the same rule that imports into the class hierarchy bind more tightly than those into the environment hierarchy. In other words the binding resolution rules are:
		1. Variables defined in the class hierarchy, search first the local class variables, then those of the superclass, and so on up to a root class.
		2. Variables defined in the enclosing namespace hierarchy (i.e. the class' environment, the environment of the environment, and so on up to the Root namespace).
		3. The hierarchy and superclass variables of imported namespaces (shared pools in old money), then of the imports into the enclosing environment, and so on.
	The search for a variables defined in the class hierarchy cannot encounter cycles. Once the imported namespaces are brought into the mix, however, we can end up revisiting the same namespace more than once because the imports form a directed graph that may have cycles, not necessarily a tree. Obviously there is no point searching any reachable namespace more than once, and we also need the search to terminate, both of which conditions are achieved by maintaining a visited set in a BindingContext object.
	Namespace imports can be public or private. Private imports are only visited for searches initiated in the importee. Variables can also be private, in which case they can only be resolved locally."

	#namespaceToDo.	"Private variables"
	^(self bindingFor: aString)
		ifNil: [self resolveImportedBinding: (self newBindingContextForIdentifier: aString)]!

setName: aSymbol 
	name := aSymbol.
	comment := LookupComment!

unqualifiedName
	"Answer the fully-qualified name of the non-metaclass."

	^unqualifiedName ifNil: [unqualifiedName := ($. split: name) last asSymbol]! !
!Refactory.Browser.RBClass categoriesForMethods!
<=!public! !
addClassVariable:!public!variable accessing! !
addImport:!namespaces!public! !
allClassVariableNames!accessing!public! !
allImports!namespaces!public! !
category!accessing!public! !
category:!accessing!public! !
classBindingNames!public! !
classConstants!accessing!public! !
classConstants:!accessing!public! !
classVariableNames!accessing!public! !
classVariableNames:!accessing!public! !
comment!accessing!public! !
comment:!accessing!public! !
definitionString!accessing!public! !
directlyDefinesClassVariable:!public!testing! !
directlyImportsNamespace:!public!testing! !
environment!accessing!public! !
fullyQualifiedReference!accessing!namespaces!public! !
getEnvironment!accessing!public! !
getImports!helpers!private! !
imports!accessing!public! !
imports:!accessing!public! !
includesEnvironment:!namespaces!private!testing! !
includesNamespace:!private!testing! !
isDefined!public!testing! !
isMeta!public!testing! !
kindOfSubclass!class hierarchy-testing!private! !
localBindingFor:!bindings!public! !
metaclass!accessing!public! !
metaclass:!initializing!private! !
model!accessing!public! !
model:!initialize/release!public! !
name!accessing!public! !
name:!accessing!public! !
newBindingContextForIdentifier:!bindings!private! !
nonMetaclass!accessing!public! !
printDefinitionOn:!accessing!public! !
realClass!accessing!public! !
realClass:!accessing!public! !
realName:!initialize/release!public! !
removeClassVariable:!public!variable accessing! !
renameClassVariable:to:around:!public!variable accessing! !
resolveBindingPath:!bindings!private! !
resolveImportedBinding:!bindings!private! !
resolveLocallyImportedBinding:!bindings!private! !
resolvePathString:!bindings!private! !
resolvePublicBinding:!bindings!private! !
resolveUnqualifiedName:!bindings!private! !
setName:!initializing!private! !
unqualifiedName!public! !
!

!Refactory.Browser.RBClass class methodsFor!

existingNamed: aSymbol 
	^(self named: aSymbol)
		realName: aSymbol;
		yourself!

initialize
	LookupComment := Object new!

model: aRBNamespace existing: aBehavior
	| class |
	class := aBehavior instanceClass.
	^(self named: class fullName)
		model: aRBNamespace;
		realClass: class;
		metaclass: (RBMetaclass basicNew
					realClass: class class;
					yourself);
		yourself!

named: aSymbol
	^self basicNew
		setName: aSymbol;
		yourself! !
!Refactory.Browser.RBClass class categoriesForMethods!
existingNamed:!instance creation!public! !
initialize!class initialization!public! !
model:existing:!instance creation!public! !
named:!instance creation!public! !
!

