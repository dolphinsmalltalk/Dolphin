| package |
package := Package name: 'IDB Printer'.
package paxVersion: 1;
	basicComment: 'Printing
Version 6b - November 2005
For Version 6 of Dolphin Smalltalk

(C) 2006 Ian Bartholomew
ian@idb.me.uk
Public Domain Freeware

6b - November 2005
	- Added methods contributed by James Foster.  Thanks.
'.

package basicPackageVersion: '6b JGF.1'.

package basicScriptAt: #preinstall put: 'Win32Constants
	at: ''PHYSICALWIDTH'' put: 110;
	at: ''PHYSICALHEIGHT'' put: 111;
	at: ''PHYSICALOFFSETX'' put: 112;
	at: ''PHYSICALOFFSETY'' put: 113
'.

package classNames
	add: #Printer;
	add: #PrintPreviewShell;
	yourself.

package methodNames
	add: #Bitmap -> #canvasCompatibleWith:;
	add: #DEVMODEW -> #deviceName;
	add: #FORMATRANGE -> #cpMax;
	add: #FORMATRANGE -> #cpMin;
	add: #FORMATRANGE -> #hdcTarget;
	add: #KernelLibrary -> #getProfileString:keyName:default:returnedString:size:;
	add: #MultilineTextEdit -> #printDocumentTo:;
	add: #MultilineTextEdit -> #printPreviewDocumentTo:for:;
	add: #PAGESETUPDLGW -> #defaultFlag;
	add: #PAGESETUPDLGW -> #deviceNameFromDevMode;
	add: #PAGESETUPDLGW -> #deviceNameFromDevNames;
	add: #RichTextEdit -> #printDocumentTo:;
	add: #RichTextEdit -> #printPreviewDocumentTo:for:;
	add: #ScintillaView -> #printDocumentTo:;
	add: #ScintillaView -> #printPreviewDocumentTo:for:;
	add: 'PrinterCanvas class' -> #forPrinterNamed:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\..\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\..\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Choice Prompter'
	'..\..\Object Arts\Dolphin\MVP\Dialogs\Common\Dolphin Common Print Dialog'
	'..\..\Object Arts\Dolphin\MVP\Presenters\Image\Dolphin Image Presenter'
	'..\..\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Integer Prompter'
	'..\..\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\..\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Rich Text Presenter'
	'..\..\Object Arts\Dolphin\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\..\Object Arts\Dolphin\MVP\Views\Scrollbars\Dolphin Scrollbars'
	'..\..\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\..\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters'
	'..\..\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models').

package!

"Class Definitions"!

Object subclass: #Printer
	instanceVariableNames: 'devNames devMode rtMargin margins selectionRange pageRanges pageRangeLimits titleBlock printerCanvas'
	classVariableNames: ''
	poolDictionaries: 'PrintingConstants Win32Constants'
	classInstanceVariableNames: ''!
Shell subclass: #PrintPreviewShell
	instanceVariableNames: 'image documentView printer currentPage bitmap lastPage'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Bitmap methodsFor!

canvasCompatibleWith: aPrinterCanvas
	"Private - Answer a Canvas to access the bitmap"

	#idbAdded.
	hdc
		ifNil:
			[hdc := GDILibrary default createCompatibleDC: aPrinterCanvas handle.
			GDILibrary default selectObject: hdc hgdiobj: self asParameter].
	^Canvas withNonOwnedDC: hdc! !
!Bitmap categoriesForMethods!
canvasCompatibleWith:!idb goodies!printing!public! !
!

!DEVMODEW methodsFor!

deviceName
	^self dmDeviceName! !
!DEVMODEW categoriesForMethods!
deviceName!accessing!idb goodies!public! !
!

!FORMATRANGE methodsFor!

cpMax
	#idbAdded.
	^bytes sdwordAtOffset: 44!

cpMin
	#idbAdded.
	^bytes sdwordAtOffset: 40!

hdcTarget
	#idbAdded.
	^bytes dwordAtOffset: 4! !
!FORMATRANGE categoriesForMethods!
cpMax!accessing!idb goodies!public! !
cpMin!accessing!idb goodies!public! !
hdcTarget!accessing!idb goodies!public! !
!

!KernelLibrary methodsFor!

getProfileString: appName keyName: keyName default: defaultStr returnedString: retStr size: anInt
	<stdcall: dword GetProfileStringA lpvoid lpvoid lpvoid lpvoid dword>
	#idbAdded.
	#JamesFoster.
	self invalidCall! !
!KernelLibrary categoriesForMethods!
getProfileString:keyName:default:returnedString:size:!idb goodies!public!win32 functions-system information! !
!

!MultilineTextEdit methodsFor!

printDocumentTo: aPrinter
	| richTextEdit |
	#idbAdded.
	richTextEdit := (RichTextEdit new)
		parentView: View desktop;
		create;
		yourself.
	richTextEdit
		replaceSelection: self text;
		printDocumentTo: aPrinter!

printPreviewDocumentTo: aPrinter for: aPrintPreviewShell
	| richTextEdit |
	#idbAdded.
	richTextEdit := (RichTextEdit new)
		parentView: View desktop;
		create;
		yourself.
	richTextEdit
		replaceSelection: self text;
		printPreviewDocumentTo: aPrinter for: aPrintPreviewShell! !
!MultilineTextEdit categoriesForMethods!
printDocumentTo:!idb goodies!printing!public! !
printPreviewDocumentTo:for:!idb goodies!printing!public! !
!

!PAGESETUPDLGW methodsFor!

defaultFlag
	^self devNames wDefault!

deviceNameFromDevMode
	#JamesFoster.
	^self devMode deviceName!

deviceNameFromDevNames
	#JamesFoster.
	^self devNames deviceName! !
!PAGESETUPDLGW categoriesForMethods!
defaultFlag!accessing!public! !
deviceNameFromDevMode!accessing!public! !
deviceNameFromDevNames!accessing!public! !
!

!PrinterCanvas class methodsFor!

forPrinterNamed: aString
	| hDC |
	#idbAdded.
	#JamesFoster.
	hDC := GDILibrary default
		createDC: nil
		lpszDevice: aString asParameter
		lpszOutput: nil
		lpInitData: nil.	"lpdvminit: nil."
	#idbToDo.	"Check GDI call"
	hDC ifNil: [^nil].
	^self withOwnedDC: hDC asInteger! !
!PrinterCanvas class categoriesForMethods!
forPrinterNamed:!idb goodies!instance creation!public! !
!

!RichTextEdit methodsFor!

printDocumentTo: aPrinter
	"I know the print and printPreview metods could be amalgamated but 
	there are enough differences to make it messy"

	| formatRange pageRect renderRect page |
	#idbAdded.	"All measurements in pixels"	"All the documentation implies that the origin in the next statement should be the offset (see printPreview)
	If you use that then the page is printed too far to the right??"
	pageRect := (0 @ 0 * 1440 / aPrinter printerCanvas resolution) truncated
				extent: (aPrinter printerCanvas extent * 1440 / aPrinter printerCanvas resolution) truncated.	"margins are in 0.001 of an inch"
	renderRect := pageRect origin + (aPrinter margins topLeft * 1.44) truncated
				corner: pageRect corner - (aPrinter margins bottomRight * 1.44) truncated.
	formatRange := FORMATRANGE new.
	formatRange
		hdc: aPrinter printerCanvas handle;
		hdcTarget: aPrinter printerCanvas handle;
		rcPage: (RECTL marshal: pageRect);
		cpMin: (aPrinter selectionRange ifNil: [0] ifNotNil: [:arg | arg start]);
		cpMax: (aPrinter selectionRange ifNil: [self textLength] ifNotNil: [:arg | arg stop]).
	page := 1.
	aPrinter printerCanvas startDocNamed: 'Dolphin'.
	[formatRange cpMin < formatRange cpMax] whileTrue: 
			["We need to refresh the renderRect every page"
			formatRange rc: (RECTL marshal: renderRect).
			(aPrinter pageRanges anySatisfy: [:range | range includes: page])
				ifTrue: 
					[aPrinter printerCanvas startPage.	"Insert the title (if needed)"
					aPrinter titleBlock
						ifNotNil: 
							[:arg |
							arg
								value: aPrinter printerCanvas
								value: page
								value: (renderRect left / 1440 * aPrinter printerCanvas resolution x) truncated
								value: (renderRect right / 1440 * aPrinter printerCanvas resolution x) truncated].	"Render it"
					formatRange cpMin: (self
								sendMessage: EM_FORMATRANGE
								wParam: 0
								lParam: formatRange yourAddress).	"Display it"
					self
						sendMessage: EM_DISPLAYBAND
						wParam: 0
						lParam: formatRange rc yourAddress.
					aPrinter printerCanvas endPage]
				ifFalse: 
					["No need to render so just format the page and continue"
					formatRange cpMin: (self
								sendMessage: EM_FORMATRANGE
								wParam: 0
								lParam: formatRange yourAddress)].
			page := page + 1].
	self
		sendMessage: EM_FORMATRANGE
		wParam: 0
		lParam: 0.
	aPrinter printerCanvas endDoc!

printPreviewDocumentTo: aPrinter for: aPrintPreviewShell
	"I know the print and printPreview metods could be amalgamated but 
	there are enough differences to make it messy"

	| formatRange offset pageRect renderRect page bitmap bitmapCanvas |
	#idbAdded.	"All measurements in pixels"
	bitmap := Bitmap compatible: aPrinter printerCanvas extent: aPrinter pageSize.
	bitmapCanvas := (bitmap canvasCompatibleWith: aPrinter printerCanvas)
				fillRectangle: (0 @ 0 extent: aPrinter pageSize) brush: Brush white;
				yourself.
	offset := (aPrinter printerCanvas getDeviceCaps: PHYSICALOFFSETX)
				@ (aPrinter printerCanvas getDeviceCaps: PHYSICALOFFSETY).
	pageRect := (offset * 1440 / aPrinter printerCanvas resolution) truncated
				extent: (aPrinter printerCanvas extent * 1440 / aPrinter printerCanvas resolution) truncated.	"margins are in 0.001 of an inch"
	renderRect := pageRect origin + (aPrinter margins topLeft * 1.44) truncated
				corner: pageRect corner - (aPrinter margins bottomRight * 1.44) truncated.
	formatRange := FORMATRANGE new.
	formatRange
		hdc: bitmapCanvas handle;
		hdcTarget: aPrinter printerCanvas handle;
		rcPage: (RECTL marshal: pageRect);
		cpMin: (aPrinter selectionRange ifNil: [0] ifNotNil: [:arg | arg start]);
		cpMax: (aPrinter selectionRange ifNil: [self textLength] ifNotNil: [:arg | arg stop]).
	page := 1.
	[formatRange cpMin < formatRange cpMax] whileTrue: 
			["We need to refresh the renderRect every page"
			formatRange rc: (RECTL marshal: renderRect).
			aPrintPreviewShell currentPage = page
				ifTrue: 
					["Insert the title (if needed)"
					aPrinter titleBlock
						ifNotNil: 
							[:arg |
							arg
								value: bitmapCanvas
								value: page
								value: (renderRect left / 1440 * aPrinter printerCanvas resolution x) truncated
								value: (renderRect right / 1440 * aPrinter printerCanvas resolution x) truncated].	"Render it"
					formatRange cpMin: (self
								sendMessage: EM_FORMATRANGE
								wParam: 0
								lParam: formatRange yourAddress).	"Display it"
					self
						sendMessage: EM_DISPLAYBAND
						wParam: 0
						lParam: formatRange rc yourAddress]
				ifFalse: 
					["No need to render so just format the page and continue"
					formatRange cpMin: (self
								sendMessage: EM_FORMATRANGE
								wParam: 0
								lParam: formatRange yourAddress)].
			page := page + 1].
	self
		sendMessage: EM_FORMATRANGE
		wParam: 0
		lParam: 0.
	aPrintPreviewShell
		bitmap: bitmap;
		lastPage: page - 1! !
!RichTextEdit categoriesForMethods!
printDocumentTo:!idb goodies!printing!public! !
printPreviewDocumentTo:for:!idb goodies!printing!public! !
!

!ScintillaView methodsFor!

printDocumentTo: aPrinter
	"I know the print and printPreview metods could be amalgamated but 
	there are enough differences to make it messy"

	| formatRange pageRect renderRect page |
	#idbAdded.	"All measurements in pixels"	"All the documentation implies that the origin in the next statement should be the offset (see printPreview)
	If you use that then the page is printed too far to the right??"
	pageRect := 0 @ 0 extent: aPrinter printerCanvas extent.	"margins are in 0.001 of an inch"
	renderRect := pageRect origin
				+ (aPrinter margins topLeft / 1000 * aPrinter printerCanvas resolution) truncated
					corner: pageRect corner
							- (aPrinter margins bottomRight / 1000 * aPrinter printerCanvas resolution) truncated.
	formatRange := Scintilla.RangeToFormatFull new.
	formatRange
		hdc: aPrinter printerCanvas handle;
		hdcTarget: aPrinter printerCanvas handle;
		rc: (RECTL marshal: renderRect);
		rcPage: (RECTL marshal: pageRect);
		cpMin: (aPrinter selectionRange ifNil: [0] ifNotNil: [:arg | arg start]);
		cpMax: (aPrinter selectionRange ifNil: [self textLength] ifNotNil: [:arg | arg stop]).
	self printColourMode: Scintilla.SC_PRINT_COLOURONWHITE.
	page := 1.
	aPrinter printerCanvas startDocNamed: 'Dolphin'.
	[formatRange cpMin < formatRange cpMax] whileTrue: 
			[(aPrinter pageRanges anySatisfy: [:range | range includes: page])
				ifTrue: 
					[aPrinter printerCanvas startPage.	"Insert the title (if needed)"
					aPrinter titleBlock
						ifNotNil: 
							[:arg |
							arg
								value: aPrinter printerCanvas
								value: page
								value: renderRect left
								value: renderRect right].	"Render it"
					formatRange cpMin: (self sciFormatRangeFull: true fr: formatRange).
					aPrinter printerCanvas endPage]
				ifFalse: 
					["No need to render so just format the page and continue"
					formatRange cpMin: (self sciFormatRangeFull: false fr: formatRange)].
			page := page + 1].
	self sciFormatRangeFull: false fr: 0.
	aPrinter printerCanvas endDoc!

printPreviewDocumentTo: aPrinter for: aPrintPreviewShell
	"I know the print and printPreview metods could be amalgamated but 
	there are enough differences to make it messy"

	| formatRange offset pageRect renderRect page bitmap bitmapCanvas |
	#idbAdded.	"All measurements in pixels"
	bitmap := Bitmap compatible: aPrinter printerCanvas extent: aPrinter pageSize.
	bitmapCanvas := (bitmap canvasCompatibleWith: aPrinter printerCanvas)
		fillRectangle: (0 @ 0 extent: aPrinter pageSize) brush: Brush white;
		yourself.
	offset := (aPrinter printerCanvas getDeviceCaps: PHYSICALOFFSETX)
		@ (aPrinter printerCanvas getDeviceCaps: PHYSICALOFFSETY).
	pageRect := offset extent: aPrinter printerCanvas extent.	"margins are in 0.001 of an inch"
	renderRect := pageRect origin
		+ (aPrinter margins topLeft / 1000 * aPrinter printerCanvas resolution) truncated
		corner:
			pageRect corner
				- (aPrinter margins bottomRight / 1000 * aPrinter printerCanvas resolution) truncated.
	formatRange := Scintilla.RangeToFormatFull new.
	formatRange
		hdc: bitmapCanvas handle;
		hdcTarget: aPrinter printerCanvas handle;
		rc: (RECTL marshal: renderRect);
		rcPage: (RECTL marshal: pageRect);
		cpMin: (aPrinter selectionRange ifNil: [0] ifNotNil: [:arg | arg start]);
		cpMax: (aPrinter selectionRange ifNil: [self textLength] ifNotNil: [:arg | arg stop]).
	self printColourMode: Scintilla.SC_PRINT_COLOURONWHITE.
	page := 1.
	[formatRange cpMin < formatRange cpMax]
		whileTrue:
			[aPrintPreviewShell currentPage = page
				ifTrue:
					["Insert the title (if needed)"
					aPrinter titleBlock
						ifNotNil:
							[:arg | 
							arg
								value: bitmapCanvas
								value: page
								value: renderRect left
								value: renderRect right].	"Render it"
					formatRange cpMin: (self sciFormatRangeFull: true fr: formatRange)]
				ifFalse:
					["No need to render so just format the page and continue"
					formatRange cpMin: (self sciFormatRangeFull: false fr: formatRange)].
			page := page + 1].
	self sciFormatRangeFull: false fr: 0.
	aPrintPreviewShell
		bitmap: bitmap;
		lastPage: page - 1! !
!ScintillaView categoriesForMethods!
printDocumentTo:!idb goodies!printing!public! !
printPreviewDocumentTo:for:!idb goodies!printing!public! !
!

"End of package definition"!

