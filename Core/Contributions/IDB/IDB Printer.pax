| package |
package := Package name: 'IDB Printer'.
package paxVersion: 1;
	basicComment: 'Printing
Version 6b - November 2005
For Version 6 of Dolphin Smalltalk

(C) 2006 Ian Bartholomew
ian@idb.me.uk
Public Domain Freeware

6b - November 2005
	- Added methods contributed by James Foster.  Thanks.
'.

package basicPackageVersion: '6b JGF.1'.

package basicScriptAt: #preinstall put: 'Win32Constants
	at: ''PHYSICALWIDTH'' put: 110;
	at: ''PHYSICALHEIGHT'' put: 111;
	at: ''PHYSICALOFFSETX'' put: 112;
	at: ''PHYSICALOFFSETY'' put: 113
'.

package classNames
	add: #DEVNAMES;
	add: #PAGESETUPDLG;
	add: #Printer;
	add: #PrintPreviewShell;
	yourself.

package methodNames
	add: #Bitmap -> #canvasCompatibleWith:;
	add: #ComDlgLibrary -> #pageSetupDlg:;
	add: #DEVMODE -> #deviceName;
	add: #FORMATRANGE -> #cpMax;
	add: #FORMATRANGE -> #cpMin;
	add: #FORMATRANGE -> #hdcTarget;
	add: #KernelLibrary -> #getProfileString:keyName:default:returnedString:size:;
	add: #MultilineTextEdit -> #printDocumentTo:;
	add: #MultilineTextEdit -> #printPreviewDocumentTo:for:;
	add: #PRINTDLG -> #deviceNameFromDevMode;
	add: #PRINTDLG -> #deviceNameFromDevNames;
	add: #PRINTDLG -> #devModeDo:;
	add: #PRINTDLG -> #devNamesDo:;
	add: #PRINTDLG -> #driverName;
	add: #PRINTDLG -> #outputName;
	add: #PRINTDLGEX -> #deviceNameFromDevMode;
	add: #PRINTDLGEX -> #deviceNameFromDevNames;
	add: #PRINTDLGEX -> #devModeDo:;
	add: #PRINTDLGEX -> #devNamesDo:;
	add: #PRINTDLGEX -> #driverName;
	add: #PRINTDLGEX -> #outputName;
	add: #RichTextEdit -> #printDocumentTo:;
	add: #RichTextEdit -> #printPreviewDocumentTo:for:;
	add: #ScintillaView -> #printDocumentTo:;
	add: #ScintillaView -> #printPreviewDocumentTo:for:;
	add: 'PrinterCanvas class' -> #forPrinterNamed:;
	yourself.

package globalNames
	add: #PrintingConstants;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Choice Prompter';
	add: '..\Object Arts\Dolphin\MVP\Dialogs\Common\Dolphin Common Dialogs';
	add: '..\Object Arts\Dolphin\MVP\Dialogs\Common\Dolphin Common Print Dialog';
	add: '..\Object Arts\Dolphin\MVP\Presenters\Image\Dolphin Image Presenter';
	add: '..\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter';
	add: '..\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Rich Text Presenter';
	add: '..\Object Arts\Dolphin\MVP\Views\Scintilla\Dolphin Scintilla View';
	add: '..\Object Arts\Dolphin\MVP\Views\Scrollbars\Dolphin Scrollbars';
	add: '..\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter';
	add: '..\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters';
	add: '..\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models';
	yourself).

package!

"Class Definitions"!

Object subclass: #Printer
	instanceVariableNames: 'hDevNames hDevMode rtMargin margins selectionRange pageRange pageRangeLimits titleBlock printerCanvas'
	classVariableNames: ''
	poolDictionaries: 'PrintingConstants Win32Constants'
	classInstanceVariableNames: ''!
ExternalStructure subclass: #DEVNAMES
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Win32Structure subclass: #PAGESETUPDLG
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Shell subclass: #PrintPreviewShell
	instanceVariableNames: 'image documentView printer currentPage bitmap lastPage'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Bitmap methodsFor!

canvasCompatibleWith: aPrinterCanvas
	"Private - Answer a Canvas to access the bitmap"

	#idbAdded.
	hdc
		ifNil:
			[hdc := GDILibrary default createCompatibleDC: aPrinterCanvas handle.
			GDILibrary default selectObject: hdc hgdiobj: self asParameter].
	^Canvas withNonOwnedDC: hdc! !
!Bitmap categoriesFor: #canvasCompatibleWith:!idb goodies!printing!public! !

!ComDlgLibrary methodsFor!

pageSetupDlg: aWinPAGESETUPDLG
	"Private - Displays a Page Setup dialog box.

		BOOL PageSetupDlg(
			LPPAGESETUPDLG  lppsd 	// address of structure with initialization data
		);"

	<stdcall: bool PageSetupDlgA lpvoid>
	#idbAdded.
	^self invalidCall! !
!ComDlgLibrary categoriesFor: #pageSetupDlg:!idb goodies!primitives!public!win32 functions-common dialog box! !

!DEVMODE methodsFor!

deviceName
	#idbAdded.
	#JamesFoster.
	^String fromAddress: self dmDeviceName yourAddress! !
!DEVMODE categoriesFor: #deviceName!accessing!idb goodies!public! !

!FORMATRANGE methodsFor!

cpMax
	#idbAdded.
	^bytes sdwordAtOffset: 44!

cpMin
	#idbAdded.
	^bytes sdwordAtOffset: 40!

hdcTarget
	#idbAdded.
	^bytes dwordAtOffset: 4! !
!FORMATRANGE categoriesFor: #cpMax!accessing!idb goodies!public! !
!FORMATRANGE categoriesFor: #cpMin!accessing!idb goodies!public! !
!FORMATRANGE categoriesFor: #hdcTarget!accessing!idb goodies!public! !

!KernelLibrary methodsFor!

getProfileString: appName keyName: keyName default: defaultStr returnedString: retStr size: anInt
	<stdcall: dword GetProfileStringA lpvoid lpvoid lpvoid lpvoid dword>
	#idbAdded.
	#JamesFoster.
	self invalidCall! !
!KernelLibrary categoriesFor: #getProfileString:keyName:default:returnedString:size:!idb goodies!public!win32 functions-system information! !

!MultilineTextEdit methodsFor!

printDocumentTo: aPrinter
	| richTextEdit |
	#idbAdded.
	richTextEdit := (RichTextEdit new)
		parentView: View desktop;
		create;
		yourself.
	richTextEdit
		replaceSelection: self text;
		printDocumentTo: aPrinter!

printPreviewDocumentTo: aPrinter for: aPrintPreviewShell
	| richTextEdit |
	#idbAdded.
	richTextEdit := (RichTextEdit new)
		parentView: View desktop;
		create;
		yourself.
	richTextEdit
		replaceSelection: self text;
		printPreviewDocumentTo: aPrinter for: aPrintPreviewShell! !
!MultilineTextEdit categoriesFor: #printDocumentTo:!idb goodies!printing!public! !
!MultilineTextEdit categoriesFor: #printPreviewDocumentTo:for:!idb goodies!printing!public! !

!PRINTDLG methodsFor!

deviceNameFromDevMode
	#idbAdded.
	#JamesFoster.
	^self devModeDo: [:devMode | devMode deviceName]!

deviceNameFromDevNames
	#idbAdded.
	#JamesFoster.
	^self devNamesDo: [:devMode | devMode deviceName]!

devModeDo: aBlock
	| hDevMode pDevMode |
	#idbAdded.
	#JamesFoster.
	hDevMode := self hDevMode.
	(pDevMode := KernelLibrary default globalLock: hDevMode) ifNil: [^nil].
	^[aBlock value: (DEVMODE fromAddress: pDevMode)]
		ensure: [KernelLibrary default globalUnlock: hDevMode]!

devNamesDo: aBlock
	| hDevNames pDevNames |
	#idbAdded.
	#JamesFoster.
	hDevNames := self hDevNames.
	(pDevNames := KernelLibrary default globalLock: hDevNames) ifNil: [^self].
	^[aBlock value: (DEVNAMES fromAddress: pDevNames)]
		ensure: [KernelLibrary default globalUnlock: hDevNames]!

driverName
	#idbAdded.
	#JamesFoster.
	^self devNamesDo: [:devMode | devMode driverName]!

outputName
	#idbAdded.
	#JamesFoster.
	^self devNamesDo: [:devNames | devNames outputName]! !
!PRINTDLG categoriesFor: #deviceNameFromDevMode!accessing!idb goodies!public! !
!PRINTDLG categoriesFor: #deviceNameFromDevNames!accessing!idb goodies!public! !
!PRINTDLG categoriesFor: #devModeDo:!accessing!idb goodies!public! !
!PRINTDLG categoriesFor: #devNamesDo:!accessing!idb goodies!public! !
!PRINTDLG categoriesFor: #driverName!accessing!idb goodies!public! !
!PRINTDLG categoriesFor: #outputName!accessing!idb goodies!public! !

!PRINTDLGEX methodsFor!

deviceNameFromDevMode
	#idbAdded.
	#JamesFoster.
	^self devModeDo: [:devMode | devMode deviceName]!

deviceNameFromDevNames
	#idbAdded.
	#JamesFoster.
	^self devNamesDo: [:devMode | devMode deviceName]!

devModeDo: aBlock
	| hDevMode pDevMode |
	#idbAdded.
	#JamesFoster.
	hDevMode := self hDevMode.
	(pDevMode := KernelLibrary default globalLock: hDevMode) ifNil: [^nil].
	^[aBlock value: (DEVMODE fromAddress: pDevMode)]
		ensure: [KernelLibrary default globalUnlock: hDevMode]!

devNamesDo: aBlock
	| hDevNames pDevNames |
	#idbAdded.
	#JamesFoster.
	hDevNames := self hDevNames.
	(pDevNames := KernelLibrary default globalLock: hDevNames) ifNil: [^self].
	^[aBlock value: (DEVNAMES fromAddress: pDevNames)]
		ensure: [KernelLibrary default globalUnlock: hDevNames]!

driverName
	#idbAdded.
	#JamesFoster.
	^self devNamesDo: [:devMode | devMode driverName]!

outputName
	#idbAdded.
	#JamesFoster.
	^self devNamesDo: [:devNames | devNames outputName]! !
!PRINTDLGEX categoriesFor: #deviceNameFromDevMode!accessing!idb goodies!public! !
!PRINTDLGEX categoriesFor: #deviceNameFromDevNames!accessing!idb goodies!public! !
!PRINTDLGEX categoriesFor: #devModeDo:!helpers!idb goodies!public! !
!PRINTDLGEX categoriesFor: #devNamesDo:!helpers!idb goodies!public! !
!PRINTDLGEX categoriesFor: #driverName!accessing!idb goodies!public! !
!PRINTDLGEX categoriesFor: #outputName!accessing!idb goodies!public! !

!PrinterCanvas class methodsFor!

forPrinterNamed: aString
	| hDC |
	#idbAdded.
	#JamesFoster.
	hDC := GDILibrary default
		createDC: nil
		lpszDevice: aString asParameter
		lpszOutput: nil
		lpInitData: nil.	"lpdvminit: nil."
	#idbToDo.	"Check GDI call"
	hDC ifNil: [^nil].
	^self withOwnedDC: hDC asInteger! !
!PrinterCanvas class categoriesFor: #forPrinterNamed:!idb goodies!instance creation!public! !

!RichTextEdit methodsFor!

printDocumentTo: aPrinter
	"I know the print and printPreview metods could be amalgamated but 
	there are enough differences to make it messy"

	| formatRange pageRect renderRect page |
	#idbAdded.	"All measurements in pixels"	"All the documentation implies that the origin in the next statement should be the offset (see printPreview)
	If you use that then the page is printed too far to the right??"
	pageRect := (0 @ 0 * 1440 / aPrinter printerCanvas resolution) truncated
		extent: (aPrinter printerCanvas extent * 1440 / aPrinter printerCanvas resolution) truncated.	"margins are in 0.001 of an inch"
	renderRect := pageRect origin + (aPrinter margins topLeft * 1.44) truncated
		corner: pageRect corner - (aPrinter margins bottomRight * 1.44) truncated.
	formatRange := FORMATRANGE new.
	formatRange
		hdc: aPrinter printerCanvas handle;
		hdcTarget: aPrinter printerCanvas handle;
		rcPage: (RECT fromRectangle: pageRect);
		cpMin: (aPrinter selectionRange ifNil: [0] ifNotNil: [:arg | arg start]);
		cpMax: (aPrinter selectionRange ifNil: [self textLength] ifNotNil: [:arg | arg stop]).
	page := 1.
	aPrinter printerCanvas startDocNamed: 'Dolphin'.
	[formatRange cpMin < formatRange cpMax]
		whileTrue:
			["We need to refresh the renderRect every page"
			formatRange rc: (RECT fromRectangle: renderRect).
			(aPrinter pageRange isNil or: [aPrinter pageRange includes: page])
				ifTrue:
					[aPrinter printerCanvas startPage.	"Insert the title (if needed)"
					aPrinter titleBlock
						ifNotNil:
							[:arg | 
							arg
								value: aPrinter printerCanvas
								value: page
								value: (renderRect left / 1440 * aPrinter printerCanvas resolution x) truncated
								value: (renderRect right / 1440 * aPrinter printerCanvas resolution x) truncated].	"Render it"
					formatRange
						cpMin:
							(self
								sendMessage: EM_FORMATRANGE
								wParam: 0
								lParam: formatRange yourAddress).	"Display it"
					self
						sendMessage: EM_DISPLAYBAND
						wParam: 0
						lParam: formatRange rc yourAddress.
					aPrinter printerCanvas endPage]
				ifFalse:
					["No need to render so just format the page and continue"
					formatRange
						cpMin:
							(self
								sendMessage: EM_FORMATRANGE
								wParam: 0
								lParam: formatRange yourAddress)].
			page := page + 1].
	self
		sendMessage: EM_FORMATRANGE
		wParam: 0
		lParam: 0.
	aPrinter printerCanvas endDoc!

printPreviewDocumentTo: aPrinter for: aPrintPreviewShell
	"I know the print and printPreview metods could be amalgamated but 
	there are enough differences to make it messy"

	| formatRange offset pageRect renderRect page bitmap bitmapCanvas |
	#idbAdded.	"All measurements in pixels"
	bitmap := Bitmap compatible: aPrinter printerCanvas extent: aPrinter pageSize.
	bitmapCanvas := (bitmap canvasCompatibleWith: aPrinter printerCanvas)
		fillRectangle: (0 @ 0 extent: aPrinter pageSize) brush: Brush white;
		yourself.
	offset := (aPrinter printerCanvas getDeviceCaps: PHYSICALOFFSETX)
		@ (aPrinter printerCanvas getDeviceCaps: PHYSICALOFFSETY).
	pageRect := (offset * 1440 / aPrinter printerCanvas resolution) truncated
		extent: (aPrinter printerCanvas extent * 1440 / aPrinter printerCanvas resolution) truncated.	"margins are in 0.001 of an inch"
	renderRect := pageRect origin + (aPrinter margins topLeft * 1.44) truncated
		corner: pageRect corner - (aPrinter margins bottomRight * 1.44) truncated.
	formatRange := FORMATRANGE new.
	formatRange
		hdc: bitmapCanvas handle;
		hdcTarget: aPrinter printerCanvas handle;
		rcPage: (RECT fromRectangle: pageRect);
		cpMin: (aPrinter selectionRange ifNil: [0] ifNotNil: [:arg | arg start]);
		cpMax: (aPrinter selectionRange ifNil: [self textLength] ifNotNil: [:arg | arg stop]).
	page := 1.
	[formatRange cpMin < formatRange cpMax]
		whileTrue:
			["We need to refresh the renderRect every page"
			formatRange rc: (RECT fromRectangle: renderRect).
			aPrintPreviewShell currentPage = page
				ifTrue:
					["Insert the title (if needed)"
					aPrinter titleBlock
						ifNotNil:
							[:arg | 
							arg
								value: bitmapCanvas
								value: page
								value: (renderRect left / 1440 * aPrinter printerCanvas resolution x) truncated
								value: (renderRect right / 1440 * aPrinter printerCanvas resolution x) truncated].	"Render it"
					formatRange
						cpMin:
							(self
								sendMessage: EM_FORMATRANGE
								wParam: 0
								lParam: formatRange yourAddress).	"Display it"
					self
						sendMessage: EM_DISPLAYBAND
						wParam: 0
						lParam: formatRange rc yourAddress]
				ifFalse:
					["No need to render so just format the page and continue"
					formatRange
						cpMin:
							(self
								sendMessage: EM_FORMATRANGE
								wParam: 0
								lParam: formatRange yourAddress)].
			page := page + 1].
	self
		sendMessage: EM_FORMATRANGE
		wParam: 0
		lParam: 0.
	aPrintPreviewShell
		bitmap: bitmap;
		lastPage: page - 1! !
!RichTextEdit categoriesFor: #printDocumentTo:!idb goodies!printing!public! !
!RichTextEdit categoriesFor: #printPreviewDocumentTo:for:!idb goodies!printing!public! !

!ScintillaView methodsFor!

printDocumentTo: aPrinter
	"I know the print and printPreview metods could be amalgamated but 
	there are enough differences to make it messy"

	| formatRange pageRect renderRect page |
	#idbAdded.	"All measurements in pixels"	"All the documentation implies that the origin in the next statement should be the offset (see printPreview)
	If you use that then the page is printed too far to the right??"
	pageRect := 0 @ 0 extent: aPrinter printerCanvas extent.	"margins are in 0.001 of an inch"
	renderRect := pageRect origin
		+ (aPrinter margins topLeft / 1000 * aPrinter printerCanvas resolution) truncated
		corner:
			pageRect corner
				- (aPrinter margins bottomRight / 1000 * aPrinter printerCanvas resolution) truncated.
	formatRange := FORMATRANGE new.
	formatRange
		hdc: aPrinter printerCanvas handle;
		hdcTarget: aPrinter printerCanvas handle;
		rc: (RECT fromRectangle: renderRect);
		rcPage: (RECT fromRectangle: pageRect);
		cpMin: (aPrinter selectionRange ifNil: [0] ifNotNil: [:arg | arg start]);
		cpMax: (aPrinter selectionRange ifNil: [self textLength] ifNotNil: [:arg | arg stop]).
	self printColourMode: SC_PRINT_COLOURONWHITE.
	page := 1.
	aPrinter printerCanvas startDocNamed: 'Dolphin'.
	[formatRange cpMin < formatRange cpMax]
		whileTrue:
			[(aPrinter pageRange isNil or: [aPrinter pageRange includes: page])
				ifTrue:
					[aPrinter printerCanvas startPage.	"Insert the title (if needed)"
					aPrinter titleBlock
						ifNotNil:
							[:arg | 
							arg
								value: aPrinter printerCanvas
								value: page
								value: renderRect left
								value: renderRect right].	"Render it"
					formatRange cpMin: (self sciFormatRange: true fr: formatRange).
					aPrinter printerCanvas endPage]
				ifFalse:
					["No need to render so just format the page and continue"
					formatRange cpMin: (self sciFormatRange: false fr: formatRange)].
			page := page + 1].
	self sciFormatRange: false fr: 0.
	aPrinter printerCanvas endDoc!

printPreviewDocumentTo: aPrinter for: aPrintPreviewShell
	"I know the print and printPreview metods could be amalgamated but 
	there are enough differences to make it messy"

	| formatRange offset pageRect renderRect page bitmap bitmapCanvas |
	#idbAdded.	"All measurements in pixels"
	bitmap := Bitmap compatible: aPrinter printerCanvas extent: aPrinter pageSize.
	bitmapCanvas := (bitmap canvasCompatibleWith: aPrinter printerCanvas)
		fillRectangle: (0 @ 0 extent: aPrinter pageSize) brush: Brush white;
		yourself.
	offset := (aPrinter printerCanvas getDeviceCaps: PHYSICALOFFSETX)
		@ (aPrinter printerCanvas getDeviceCaps: PHYSICALOFFSETY).
	pageRect := offset extent: aPrinter printerCanvas extent.	"margins are in 0.001 of an inch"
	renderRect := pageRect origin
		+ (aPrinter margins topLeft / 1000 * aPrinter printerCanvas resolution) truncated
		corner:
			pageRect corner
				- (aPrinter margins bottomRight / 1000 * aPrinter printerCanvas resolution) truncated.
	formatRange := FORMATRANGE new.
	formatRange
		hdc: bitmapCanvas handle;
		hdcTarget: aPrinter printerCanvas handle;
		rc: (RECT fromRectangle: renderRect);
		rcPage: (RECT fromRectangle: pageRect);
		cpMin: (aPrinter selectionRange ifNil: [0] ifNotNil: [:arg | arg start]);
		cpMax: (aPrinter selectionRange ifNil: [self textLength] ifNotNil: [:arg | arg stop]).
	self printColourMode: SC_PRINT_COLOURONWHITE.
	page := 1.
	[formatRange cpMin < formatRange cpMax]
		whileTrue:
			[aPrintPreviewShell currentPage = page
				ifTrue:
					["Insert the title (if needed)"
					aPrinter titleBlock
						ifNotNil:
							[:arg | 
							arg
								value: bitmapCanvas
								value: page
								value: renderRect left
								value: renderRect right].	"Render it"
					formatRange cpMin: (self sciFormatRange: true fr: formatRange)]
				ifFalse:
					["No need to render so just format the page and continue"
					formatRange cpMin: (self sciFormatRange: false fr: formatRange)].
			page := page + 1].
	self sciFormatRange: false fr: 0.
	aPrintPreviewShell
		bitmap: bitmap;
		lastPage: page - 1! !
!ScintillaView categoriesFor: #printDocumentTo:!idb goodies!printing!public! !
!ScintillaView categoriesFor: #printPreviewDocumentTo:for:!idb goodies!printing!public! !

"End of package definition"!

