| package |
package := Package name: 'IDB DeviceIndependentBitmap'.
package paxVersion: 1;
	basicComment: 'DeviceIndependentBitmap classes
Version 6a - May 2005
For Version 6 of Dolphin Smalltalk

(C) 2005 Ian Bartholomew
ian@idb.me.uk
Public Domain Freeware
'.

package basicPackageVersion: '6a'.


package methodNames
	add: #Clipboard -> #getDeviceIndependentBitmap;
	add: #Clipboard -> #getDeviceIndependentBitmapIfNone:;
	add: #Clipboard -> #isDeviceIndependentBitmapAvailable;
	add: #Clipboard -> #setDeviceIndependentBitmap:;
	add: #Clipboard -> #setDeviceIndependentBitmap:format:;
	add: #Clipboard -> #setDeviceIndependentBitmap:formatId:;
	add: #DeviceIndependentBitmap -> #bitmapInfoStruct;
	add: 'DIBSection class' -> #colorTableDepth1;
	add: 'DIBSection class' -> #colorTableDepth4;
	add: 'DIBSection class' -> #colorTableDepth8;
	add: 'DIBSection class' -> #colorTableForDepth:;
	yourself.

package globalNames
	add: #DeviceIndependentBitmap;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	add: #DeviceIndependentBitmap;
	yourself).

package setPrerequisites: #(
	'..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\..\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base').

package!

"Global Aliases"!

DeviceIndependentBitmap := DIBSection!


"Loose Methods"!

!Clipboard methodsFor!

getDeviceIndependentBitmap
	"Get a DeviceIndependentBitmap from the Clipboard"

	#idbAdded.	"Or was, this is present for backwards compatibility for any uses of this old package"
	^self getDIBSection!

getDeviceIndependentBitmapIfNone: exceptionHandler 
	"Get a DeviceIndependentBitmap from the Clipboard"

	#idbAdded.	"Or was, this is present for backwards compatibility for any uses of this old package"
	^self getDIBSectionIfNone: exceptionHandler!

isDeviceIndependentBitmapAvailable
	"Answer whether the clipboard contains a DIB.(DIBSection or DeviceIndependentBitmap)"

	#idbAdded.
	^self isFormatIdAvailable: CF_DIB!

setDeviceIndependentBitmap: aDeviceIndependentBitmap
	"Transfer the specified DIBSection bitmap to the clipboard."

	#idbAdded.	"Or was, this is present for backwards compatibility for any uses of this old package"
	self setBitmap: aDeviceIndependentBitmap format: #DIBSection!

setDeviceIndependentBitmap: aDeviceIndependentBitmap format: formatName
	"Copy the specified bitmap to the clipboard as an entry
	of the specified format name."

	#idbAdded.	"Or was, this is present for backwards compatibility for any uses of this old package"
	self setBitmap: aDeviceIndependentBitmap format: #DIBSection!

setDeviceIndependentBitmap: aDeviceIndependentBitmap formatId: formatId
	"Copies a DeviceIndependentBitmap onto the Clipboard
	The clipboard expects a pached BITMAPINFO (a BITMAPINFO followed immediately 
	by the image bits)"

	#idbAdded.	"Or was, this is present for backwards compatibility for any uses of this old package"
	self setDeviceIndependentBitmap: aDeviceIndependentBitmap
! !
!Clipboard categoriesForMethods!
getDeviceIndependentBitmap!public! !
getDeviceIndependentBitmapIfNone:!public! !
isDeviceIndependentBitmapAvailable!idb goodies!public!testing! !
setDeviceIndependentBitmap:!accessing!idb goodies!public! !
setDeviceIndependentBitmap:format:!accessing!idb goodies!public! !
setDeviceIndependentBitmap:formatId:!accessing!idb goodies!public! !
!

!DeviceIndependentBitmap methodsFor!

bitmapInfoStruct
	| bitmapInfoStruct dibSectionStruct bitmapInfoHeaderStruct |
	dibSectionStruct := self getInfo.
	bitmapInfoHeaderStruct := dibSectionStruct dsBmih.
	bitmapInfoStruct := BITMAPINFO colorDepth: bitmapInfoHeaderStruct biBitCount.
	bitmapInfoStruct bmiHeader: bitmapInfoHeaderStruct.
	bitmapInfoHeaderStruct biBitCount <= 8
		ifTrue: [bitmapInfoStruct bmiColors: self getColorTable bytes].
	^bitmapInfoStruct! !
!DeviceIndependentBitmap categoriesForMethods!
bitmapInfoStruct!accessing!public! !
!

!DIBSection class methodsFor!

colorTableDepth1
	"Answer a default color table to be used for depth 1 (monochrome) bitmaps"

	^(StructureArray length: 2 elementClass: RGBQUAD)
		at: 1
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbBlue: 0;
					rgbGreen: 0);
		at: 2
			put: ((RGBQUAD new)
					rgbRed: 255;
					rgbBlue: 255;
					rgbGreen: 255);
		yourself!

colorTableDepth4
	"Answer a default color table to be used for depth 4 (VGA) bitmaps"

	^(StructureArray length: 16 elementClass: RGBQUAD)
		at: 1
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbBlue: 0;
					rgbGreen: 0);
		at: 2
			put: ((RGBQUAD new)
					rgbRed: 128;
					rgbBlue: 0;
					rgbGreen: 0);
		at: 3
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbBlue: 0;
					rgbGreen: 128);
		at: 4
			put: ((RGBQUAD new)
					rgbRed: 128;
					rgbBlue: 0;
					rgbGreen: 128);
		at: 5
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbBlue: 128;
					rgbGreen: 0);
		at: 6
			put: ((RGBQUAD new)
					rgbRed: 128;
					rgbBlue: 128;
					rgbGreen: 0);
		at: 7
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbBlue: 128;
					rgbGreen: 128);
		at: 8
			put: ((RGBQUAD new)
					rgbRed: 192;
					rgbBlue: 192;
					rgbGreen: 192);
		at: 9
			put: ((RGBQUAD new)
					rgbRed: 128;
					rgbBlue: 128;
					rgbGreen: 128);
		at: 10
			put: ((RGBQUAD new)
					rgbRed: 255;
					rgbBlue: 0;
					rgbGreen: 0);
		at: 11
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbBlue: 0;
					rgbGreen: 255);
		at: 12
			put: ((RGBQUAD new)
					rgbRed: 255;
					rgbBlue: 0;
					rgbGreen: 255);
		at: 13
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbBlue: 255;
					rgbGreen: 0);
		at: 14
			put: ((RGBQUAD new)
					rgbRed: 255;
					rgbBlue: 255;
					rgbGreen: 0);
		at: 15
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbBlue: 255;
					rgbGreen: 255);
		at: 16
			put: ((RGBQUAD new)
					rgbRed: 255;
					rgbBlue: 255;
					rgbGreen: 255);
		yourself!

colorTableDepth8
	"Answer a default color table to be used for depth 8 (super VGA) bitmaps"

	| table index |
	table := StructureArray length: 256 elementClass: RGBQUAD.
	table
		at: 1
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbGreen: 0;
					rgbBlue: 0);
		at: 2
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbGreen: 0;
					rgbBlue: 128);
		at: 3
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbGreen: 128;
					rgbBlue: 0);
		at: 4
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbGreen: 128;
					rgbBlue: 128);
		at: 5
			put: ((RGBQUAD new)
					rgbRed: 128;
					rgbGreen: 0;
					rgbBlue: 0);
		at: 6
			put: ((RGBQUAD new)
					rgbRed: 128;
					rgbGreen: 0;
					rgbBlue: 128);
		at: 7
			put: ((RGBQUAD new)
					rgbRed: 128;
					rgbGreen: 128;
					rgbBlue: 0);
		at: 8
			put: ((RGBQUAD new)
					rgbRed: 192;
					rgbGreen: 192;
					rgbBlue: 192);
		at: 9
			put: ((RGBQUAD new)
					rgbRed: 128;
					rgbGreen: 128;
					rgbBlue: 128);
		at: 10
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbGreen: 0;
					rgbBlue: 255);
		at: 11
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbGreen: 255;
					rgbBlue: 0);
		at: 12
			put: ((RGBQUAD new)
					rgbRed: 0;
					rgbGreen: 255;
					rgbBlue: 255);
		at: 13
			put: ((RGBQUAD new)
					rgbRed: 255;
					rgbGreen: 0;
					rgbBlue: 0);
		at: 14
			put: ((RGBQUAD new)
					rgbRed: 255;
					rgbGreen: 0;
					rgbBlue: 255);
		at: 15
			put: ((RGBQUAD new)
					rgbRed: 255;
					rgbGreen: 255;
					rgbBlue: 0);
		at: 16
			put: ((RGBQUAD new)
					rgbRed: 255;
					rgbGreen: 255;
					rgbBlue: 255).
	index := 17.
	#(0 50 101 152 203 254) do: 
			[:red | 
			#(0 50 101 152 203 254) do: 
					[:green | 
					#(0 50 101 152 203 254) do: 
							[:blue | 
							table at: index
								put: ((RGBQUAD new)
										rgbRed: red;
										rgbGreen: green;
										rgbBlue: blue).
							index := index + 1]]].
	0 to: 242
		by: 11
		do: 
			[:all | 
			table at: index
				put: ((RGBQUAD new)
						rgbRed: all;
						rgbGreen: all;
						rgbBlue: all).
			index := index + 1].
	table at: index
		put: ((RGBQUAD new)
				rgbRed: 255;
				rgbGreen: 255;
				rgbBlue: 255).
	^table!

colorTableForDepth: anInteger
	"Answer an instance of the default color table to be used for 
	DeviceIndependentBitmaps with anInteger color depth"

	^self perform: ('colorTableDepth' , anInteger printString) asSymbol! !
!DIBSection class categoriesForMethods!
colorTableDepth1!constants!public! !
colorTableDepth4!constants!public! !
colorTableDepth8!constants!public! !
colorTableForDepth:!accessing!public! !
!

"End of package definition"!

