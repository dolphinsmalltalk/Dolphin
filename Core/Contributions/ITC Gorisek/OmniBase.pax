| package |
package := Package name: 'OmniBase'.
package paxVersion: 1;
	basicComment: 'OmniBase 2.04
Copyright (C) 1998-2001 David Gorisek, ALL RIGHTS RESERVED
Copyright (C) 2001-2002 IT Consulting Gorisek d.o.o., ALL RIGHTS RESERVED

Check http://www.gorisek.com for the latest version of this package.

Release notes follow:


OmniBase 2.04 for Dolphin Smalltalk 5.0 release notes
-----------------------------------------------------

1. Installation

Install OmniBase into your image by loading package OmniBase.pac.
The package has been saved with Dolphin 5.0, if you need a package
for an earlier version please contact us by e-mail.

2. Documentation

An up-to-date OmniBase tutorial and API reference can be found on
the internet at the following URL:

http://www.gorisek.com

Dolphin Smalltalk distribution also includes a PersonnelFile package
which demonstrates one of possible strategies for making business
objects persistent and indexable using OmniBase. Note, that OmniBase
does not prescribe you a persistency model for business objects.
OmniBase only provides a way to persist Smalltalk objects in a multi-
user environment. As in Smalltalk itself, the implementation of the
object model is up to the application developer using OmniBase.


3. Support

If you find a bug please report it immediately by e-mail to
<david@gorisek.com> so that you can receive a new version in the
shortest possible time. Also suggestions on how to improve the
product are welcome.

Registered users of OmniBase are welcome to use the HelpDesk
application for submitting and tracking bug reports and feature
requests. HelpDesk is available at:

https://gorisek.com/HelpDesk/login.html

Send e-mail if you do not have a valid username or password.


4. Release change log

New in release 2.04

- fix for the ODBMemoryWriteStream which could in a very rare case
  write inconsistent serialization data

New in release 2.03

- changes in the VisualWorks version

New in release 2.02

- fixed ODBClassDescription>>createdFor: bug
- other changes in the VisualWorks version

New in release 2.01

- VisualWorks related fixes


5. Licence agreement

The OmniBase object database is provided as it is and with all
faults, known or unknown.

The source code and other information contained in the source
code package is COPYRIGHT (C) by David Gorisek (the author).
Portions of the source code can not be used without prior author''s
written permission.

OmniBase object database is licenced and sold under a
''per developer sit'' licence model.

You may install and use an unlimited number of copies of OmniBase 
object database on computers, including workstations, terminals 
or other digital electronic devices to design, develop, and test 
your software application(s), however, you must acquire and 
dedicate a license for each separate developer who is developing 
software using OmniBase. A license for the OmniBase object database 
may not be shared or used concurrently by different users. In no 
event shall the author be liable for any special, incidental, 
indirect, punitive or consequential damages whatsoever arising 
out of or in any way related to the use of or inability to use 
the OmniBase object database. By using the OmniBase object database
you accept this licence agreement and the fact that you are using 
the database at your own risk. The author reserves all rights not
expressly granted to you in this License agreement. The OmniBase 
object database is protected by copyright laws of the Republic of 
Slovenia and other intellectual property laws and treaties.

'.

package basicPackageVersion: '2.1.83'.


package classNames
	add: #ODB1CharacterString;
	add: #ODB8ByteFloat;
	add: #ODBAssociationChanged;
	add: #ODBBTreeDictionary;
	add: #ODBBTreeDictionaryAssociation;
	add: #ODBBTreeIdentityDictionary;
	add: #ODBBTreeIndexDictionary;
	add: #ODBBTreeIntegerIndexDictionary;
	add: #ODBBTreeIterator;
	add: #ODBBTreeMultiValueDictionary;
	add: #ODBBTreePage;
	add: #ODBByteStorageRequest;
	add: #ODBCannotLock;
	add: #ODBCannotLockKey;
	add: #ODBCannotLockObject;
	add: #ODBChange;
	add: #ODBChangesPackage;
	add: #ODBClassDescription;
	add: #ODBClassInfoFile;
	add: #ODBClassManager;
	add: #ODBClassManagerForSerialization;
	add: #ODBClient;
	add: #ODBClientFile;
	add: #ODBClientManager;
	add: #ODBClientTable;
	add: #ODBContainer;
	add: #ODBContainerInfoFile;
	add: #ODBCopyValue;
	add: #ODBDatabaseObject;
	add: #ODBDBBTreeDictionary;
	add: #ODBDBBTreeIdentityDictionary;
	add: #ODBDBBTreeIndexDictionary;
	add: #ODBDBBTreeIntegerIndexDictionary;
	add: #ODBDBBTreeMultiValueDictionary;
	add: #ODBDemandLoader;
	add: #ODBDeserializer;
	add: #ODBDeserializers;
	add: #ODBDictionaryChanged;
	add: #ODBDoubleByteCharacter;
	add: #ODBEmptyString;
	add: #ODBError;
	add: #ODBExistingObject;
	add: #ODBExpiredProxyObject;
	add: #ODBExternalBuffer;
	add: #ODBExternalReference;
	add: #ODBFile;
	add: #ODBFileStream;
	add: #ODBFloatAs100Integer;
	add: #ODBFloatAsInteger;
	add: #ODBForeignClient;
	add: #ODBGarbageCollector;
	add: #ODBGarbageCollectorFile;
	add: #ODBGarbageCollectorRequest;
	add: #ODBGcBTreeIterator;
	add: #ODBGcBTreePage;
	add: #ODBGlobalLockedTransaction;
	add: #ODBIdentityDictionary;
	add: #ODBIDTable;
	add: #ODBIntegerSet;
	add: #ODBKeyLock;
	add: #ODBLargeNegativeInteger;
	add: #ODBLargePositiveInteger;
	add: #ODBLocalClient;
	add: #ODBLocalTransaction;
	add: #ODBLock;
	add: #ODBLockingConflict;
	add: #ODBLockNotification;
	add: #ODBLongReadOnlyTransaction;
	add: #ODBMemoryReadStream;
	add: #ODBMemoryWriteStream;
	add: #ODBnCharacterString;
	add: #ODBNewObject;
	add: #ODBNewObjectNewClass;
	add: #ODBNewObjectVersion;
	add: #ODBObjectHolder;
	add: #ODBObjectID;
	add: #ODBObjectIDDictionary;
	add: #ODBObjectIdStack;
	add: #ODBObjectIndexFile;
	add: #ODBObjectLock;
	add: #ODBObjectManager;
	add: #ODBObjectStorage;
	add: #ODBOldHoldersFile;
	add: #ODBPersistentDictionary;
	add: #ODBReadOnlyTransaction;
	add: #ODBReference;
	add: #ODBReferenceManager;
	add: #ODBRootObjectDBHolder;
	add: #ODBRootObjectHolder;
	add: #ODBSerializedDBObject256References;
	add: #ODBSerializedDBObject65536References;
	add: #ODBSerializedDBObjectWithoutReferences;
	add: #ODBSerializedObject;
	add: #ODBSerializer;
	add: #ODBSizeChanged;
	add: #ODBSizeHolder;
	add: #ODBSortedDictionary;
	add: #ODBStream;
	add: #ODBStreamLockedNotification;
	add: #ODBTerminatedClient;
	add: #ODBTerminatedTransaction;
	add: #ODBTransaction;
	add: #ODBTransactionFile;
	add: #ODBTransactionManager;
	add: #ODBTransactionObject;
	add: #ODBUndefinedObject;
	add: #ODBUnexpectedNetworkError;
	add: #ODBValueHolder;
	add: #ODBVersionControlFile;
	add: #ODBVersionDescriptor;
	add: #ODBWeakValueIdentityDictionary;
	add: #OmniBase;
	add: #OmniBaseArchiver;
	add: #OmniBaseTester;
	yourself.

package methodNames
	add: #Array -> #odbBasicSerialize:;
	add: #Association -> #odbBasicSerialize:;
	add: #Behavior -> #odbGetRegDictionary;
	add: #BlockClosure -> #evaluateAndCommitIn:;
	add: #BlockClosure -> #evaluateIn:;
	add: #ByteArray -> #asBtreeKeyOfSize:;
	add: #ByteArray -> #odbAsInteger;
	add: #ByteArray -> #odbIsLessOrEqualTo:;
	add: #ByteArray -> #odbIsLessThan:;
	add: #ByteArray -> #odbLongAt:;
	add: #ByteArray -> #odbLongAt:put:;
	add: #ByteArray -> #odbShortAt:;
	add: #ByteArray -> #odbShortAt:put:;
	add: #Character -> #odbBasicSerialize:;
	add: #Character -> #odbSerialize:;
	add: #Class -> #odbSerialize:;
	add: #Class -> #odbTransientInstanceVariables;
	add: #Date -> #asBtreeKeyOfSize:;
	add: #Date -> #odbBasicSerialize:;
	add: #DeadObject -> #odbSerialize:;
	add: #Dictionary -> #odbBasicSerialize:;
	add: #False -> #odbBasicSerialize:;
	add: #False -> #odbObjectID;
	add: #False -> #odbSerialize:;
	add: #File -> #odbSerialize:;
	add: #Float -> #odbBasicSerialize:;
	add: #Float -> #odbSerialize:;
	add: #Fraction -> #odbBasicSerialize:;
	add: #Fraction -> #odbSerialize:;
	add: #IdentityDictionary -> #odbBasicSerialize:;
	add: #Integer -> #asBtreeKeyOfSize:;
	add: #Integer -> #odbBasicSerialize:;
	add: #Integer -> #odbSerialize:;
	add: #KernelLibrary -> #odbLockFile:offsetLow:offsetHigh:lengthLow:lengthHigh:;
	add: #KernelLibrary -> #odbSetEndOfFile:;
	add: #KernelLibrary -> #odbUnlockFile:offsetLow:offsetHigh:lengthLow:lengthHigh:;
	add: #LookupTable -> #odbBasicSerialize:;
	add: #Message -> #odbBasicSerialize:;
	add: #MessageSend -> #odbBasicSerialize:;
	add: #Metaclass -> #odbSerialize:;
	add: #Object -> #asBtreeKeyOfSize:;
	add: #Object -> #isIdenticalTo:;
	add: #Object -> #isODBReference;
	add: #Object -> #isODBTransactionObject;
	add: #Object -> #makePersistent;
	add: #Object -> #markDirty;
	add: #Object -> #odbAboutToCommitIn:;
	add: #Object -> #odbBasicSerialize:;
	add: #Object -> #odbDeserialize:;
	add: #Object -> #odbDeserialized:;
	add: #Object -> #odbGetOID;
	add: #Object -> #odbGetTransaction;
	add: #Object -> #odbLoadedIn:;
	add: #Object -> #odbMadePersistentIn:;
	add: #Object -> #odbObject;
	add: #Object -> #odbObjectID;
	add: #Object -> #odbResolve;
	add: #Object -> #odbSerialize:;
	add: #OrderedCollection -> #odbBasicSerialize:;
	add: #Process -> #odbSerialize:;
	add: #ProcessorScheduler -> #odbBasicSerialize:;
	add: #ProcessorScheduler -> #odbSerialize:;
	add: #ScaledDecimal -> #odbBasicSerialize:;
	add: #ScaledDecimal -> #odbSerialize:;
	add: #Semaphore -> #odbTerminateWaitingProcesses;
	add: #Set -> #odbBasicSerialize:;
	add: #String -> #asBtreeKeyOfSize:;
	add: #String -> #odbBasicSerialize:;
	add: #Symbol -> #odbBasicSerialize:;
	add: #Symbol -> #odbSerialize:;
	add: #SystemDictionary -> #odbBasicSerialize:;
	add: #SystemDictionary -> #odbSerialize:;
	add: #Time -> #odbBasicSerialize:;
	add: #TimeStamp -> #asBtreeKeyOfSize:;
	add: #True -> #odbBasicSerialize:;
	add: #True -> #odbObjectID;
	add: #True -> #odbSerialize:;
	add: #UndefinedObject -> #odbBasicSerialize:;
	add: #UndefinedObject -> #odbDeserialize:;
	add: #UndefinedObject -> #odbLoadVariables:classInfo:;
	add: #UndefinedObject -> #odbObjectID;
	add: #UndefinedObject -> #odbSerialize:;
	add: #UnicodeString -> #odbBasicSerialize:;
	add: 'Array class' -> #odbDeserialize:;
	add: 'Association class' -> #odbDeserialize:;
	add: 'Character class' -> #odbDeserialize:;
	add: 'Class class' -> #odbDeserialize:;
	add: 'Date class' -> #odbDeserialize:;
	add: 'DeadObject class' -> #odbDeserialize:;
	add: 'Dictionary class' -> #odbDeserialize:;
	add: 'Float class' -> #odbDeserialize:;
	add: 'Fraction class' -> #odbDeserialize:;
	add: 'ListModel class' -> #odbTransientInstanceVariables;
	add: 'Message class' -> #odbDeserialize:;
	add: 'MessageSend class' -> #odbDeserialize:;
	add: 'Metaclass class' -> #odbDeserialize:;
	add: 'Model class' -> #odbTransientInstanceVariables;
	add: 'Object class' -> #newPersistent;
	add: 'Object class' -> #odbLoadVariables:classInfo:;
	add: 'OrderedCollection class' -> #odbDeserialize:;
	add: 'ScaledDecimal class' -> #odbDeserialize:;
	add: 'Set class' -> #odbDeserialize:;
	add: 'String class' -> #odbDeserialize:;
	add: 'Symbol class' -> #odbDeserialize:;
	add: 'Time class' -> #odbDeserialize:;
	add: 'Time class' -> #secondClockValue;
	add: 'UndefinedObject class' -> #odbDeserialize:;
	add: 'UnicodeString class' -> #odbDeserialize:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\Object Arts\Dolphin\Base\Dolphin';
	add: '..\..\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models';
	add: '..\..\Object Arts\Dolphin\MVP\Dialogs\Progress\Dolphin Progress Dialog';
	yourself).

package!

"Class Definitions"!

Object subclass: #ODBBTreeDictionaryAssociation
	instanceVariableNames: 'valueHolder key transaction'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBByteStorageRequest
	instanceVariableNames: 'objectHolder byteArray'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBChange
	instanceVariableNames: 'objectID transactionObject transaction'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBChangesPackage
	instanceVariableNames: 'changes'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBClassDescription
	instanceVariableNames: 'name bytes variable instSize instVarNames instVarIndexes class varOrder classID'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBClassManager
	instanceVariableNames: 'classes names idTable infoFile mutex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBClassManagerForSerialization
	instanceVariableNames: 'classesToDescription idToClassDescription'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBClient
	instanceVariableNames: 'id clientFile transactions clientManager transactionFiles'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBClientManager
	instanceVariableNames: 'localClient environment idTable clients'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBContainer
	instanceVariableNames: 'objectManager id name path indexFile dbFiles dataFileA dataFileB activeDataFile byteStorageQueue queueSize dbFilesMutex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBDatabaseObject
	instanceVariableNames: 'objectHolder'
	classVariableNames: 'ClassIDs'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBDemandLoader
	instanceVariableNames: 'objectID transaction proxyObject'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBDeserializer
	instanceVariableNames: 'classArray classes classesCounter classManager counter objects stream referenceManager transaction'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'classArray'!
Object subclass: #ODBDeserializers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBExpiredProxyObject
	instanceVariableNames: 'oid'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBExternalBuffer
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBFile
	instanceVariableNames: 'stream'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBGarbageCollector
	instanceVariableNames: 'gcFile containers objectManager reorganizeDictionaries reorganizeIndexSets progressDialog progressValue'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBIdentityDictionary
	instanceVariableNames: 'keys values elementCount sizeLimit emptySlotMarker'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBLock
	instanceVariableNames: 'transaction lockIndex objectID lockID'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBObjectID
	instanceVariableNames: 'containerID index'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBObjectIDDictionary
	instanceVariableNames: 'dictionaries'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBObjectManager
	instanceVariableNames: 'containers environment idTable infoFile'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBReferenceManager
	instanceVariableNames: 'references'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBSerializer
	instanceVariableNames: 'mainObject classCollection classes classesCounter classManager counter externalObjects objects stream referenceManager'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBSortedDictionary
	instanceVariableNames: 'keys values elementCount currentIndex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBStream
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBTransaction
	instanceVariableNames: 'client objects versionDescriptor dbConnection transactionFile objectIndex transactionManager locks cacheMutex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBTransactionManager
	instanceVariableNames: 'dbConnection versionControl oldHolders committingTransaction transactionReferences mutex serializingTransactionsMutex serializingTransactionsSemaphore'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBTransactionObject
	instanceVariableNames: 'transaction lockObject holder dataBaseObject'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBUndefinedObject
	instanceVariableNames: 'basicHash variables indexedVariables bytes classInfo basicSize'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ODBVersionDescriptor
	instanceVariableNames: 'versionNumber readVersionNumber topVersionNumber committingTransactions myCommits'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #OmniBase
	instanceVariableNames: 'rootDir objectManager classManager clientManager transactionManager'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'sessions currentTransaction processToTransactionDict processToTransactionMutex'!
Object subclass: #OmniBaseArchiver
	instanceVariableNames: 'db newDb versionDescriptor oldHolders newVersionNumber progressDialog progressValue'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #OmniBaseTester
	instanceVariableNames: 'testDb testDir'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
LookupTable variableSubclass: #ODBPersistentDictionary
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Error subclass: #ODBError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBError subclass: #ODBCannotLock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBError subclass: #ODBLockingConflict
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBError subclass: #ODBUnexpectedNetworkError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBLockingConflict subclass: #ODBCannotLockKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBLockingConflict subclass: #ODBCannotLockObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Notification subclass: #ODBLockNotification
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Notification subclass: #ODBStreamLockedNotification
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBByteStorageRequest subclass: #ODBGarbageCollectorRequest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBChange subclass: #ODBAssociationChanged
	instanceVariableNames: 'key oldValue newValue'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBChange subclass: #ODBDictionaryChanged
	instanceVariableNames: 'dataBaseObject'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBChange subclass: #ODBNewObjectVersion
	instanceVariableNames: 'newVersion oldVersion'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBChange subclass: #ODBSizeChanged
	instanceVariableNames: 'deltaSize'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBClient subclass: #ODBForeignClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBClient subclass: #ODBLocalClient
	instanceVariableNames: 'hasGlobalLock freeTransactionFile'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBClient subclass: #ODBTerminatedClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDatabaseObject subclass: #ODBDBBTreeIndexDictionary
	instanceVariableNames: 'iterator'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDatabaseObject subclass: #ODBRootObjectDBHolder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDatabaseObject subclass: #ODBSerializedDBObjectWithoutReferences
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDBBTreeIndexDictionary subclass: #ODBDBBTreeDictionary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDBBTreeIndexDictionary subclass: #ODBDBBTreeIntegerIndexDictionary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDBBTreeIndexDictionary subclass: #ODBDBBTreeMultiValueDictionary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDBBTreeDictionary subclass: #ODBDBBTreeIdentityDictionary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBSerializedDBObjectWithoutReferences subclass: #ODBSerializedDBObject256References
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBSerializedDBObjectWithoutReferences subclass: #ODBSerializedDBObject65536References
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODB1CharacterString
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODB8ByteFloat
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBCopyValue
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBDoubleByteCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBEmptyString
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBExistingObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBExternalReference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBFloatAs100Integer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBFloatAsInteger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBLargeNegativeInteger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBLargePositiveInteger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBnCharacterString
	instanceVariableNames: 'n'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBNewObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBDeserializers subclass: #ODBNewObjectNewClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBExternalBuffer subclass: #ODBBTreePage
	instanceVariableNames: 'pagePosition keyLength valueLength iterator indexOnPage itemLength'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBExternalBuffer subclass: #ODBObjectHolder
	instanceVariableNames: 'container objectID oldVersion'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBExternalBuffer subclass: #ODBSizeHolder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBExternalBuffer subclass: #ODBValueHolder
	instanceVariableNames: 'object removed objectSet'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBBTreePage subclass: #ODBGcBTreePage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBBTreeIterator
	instanceVariableNames: 'keyLength valueLength rootPagePosition searchPath currentKey currentKeyExists nextKey searchPathHeight version mutex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBClientFile
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBClientTable
	instanceVariableNames: 'table'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBGarbageCollectorFile
	instanceVariableNames: 'status'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBIDTable
	instanceVariableNames: 'lastID'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBIntegerSet
	instanceVariableNames: 'bitField currentPage changed'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBObjectIdStack
	instanceVariableNames: 'cache top filePos valueSize bottom'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBObjectIndexFile
	instanceVariableNames: 'valueLength pageSize start gcPosition gcBuffer gcCount var1'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBObjectStorage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBOldHoldersFile
	instanceVariableNames: 'buffer bufPos filePos'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBTransactionFile
	instanceVariableNames: 'locks transactionID lockPositions recovery newLockPosition'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBFile subclass: #ODBVersionControlFile
	instanceVariableNames: 'lastReadTime versionDescriptor'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBBTreeIterator subclass: #ODBClassInfoFile
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBBTreeIterator subclass: #ODBContainerInfoFile
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBBTreeIterator subclass: #ODBGcBTreeIterator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBIdentityDictionary subclass: #ODBWeakValueIdentityDictionary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBLock subclass: #ODBKeyLock
	instanceVariableNames: 'key'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBLock subclass: #ODBObjectLock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBStream subclass: #ODBFileStream
	instanceVariableNames: 'fileHandle pathName kernelLibrary mutex'
	classVariableNames: ''
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!
ODBStream subclass: #ODBMemoryReadStream
	instanceVariableNames: 'current'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBStream subclass: #ODBMemoryWriteStream
	instanceVariableNames: 'collections current readLimit lastSize'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBTransaction subclass: #ODBLocalTransaction
	instanceVariableNames: 'changesPackage inconsistent newObjects application'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBTransaction subclass: #ODBTerminatedTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBLocalTransaction subclass: #ODBGlobalLockedTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBLocalTransaction subclass: #ODBReadOnlyTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBReadOnlyTransaction subclass: #ODBLongReadOnlyTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBTransactionObject subclass: #ODBBTreeIndexDictionary
	instanceVariableNames: 'changed keySize currentKey'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBTransactionObject subclass: #ODBRootObjectHolder
	instanceVariableNames: 'changed'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBTransactionObject subclass: #ODBSerializedObject
	instanceVariableNames: 'changed'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBBTreeIndexDictionary subclass: #ODBBTreeDictionary
	instanceVariableNames: 'locks initialSize deltaSize'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBBTreeIndexDictionary subclass: #ODBBTreeIntegerIndexDictionary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBBTreeIndexDictionary subclass: #ODBBTreeMultiValueDictionary
	instanceVariableNames: 'initialSize deltaSize newObjects'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ODBBTreeDictionary subclass: #ODBBTreeIdentityDictionary
	instanceVariableNames: 'newKeys'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ProtoObject subclass: #ODBReference
	instanceVariableNames: 'transactionObject demandLoader'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Array methodsFor!

odbBasicSerialize: serializer

	serializer stream putByte: 35; putPositiveInteger: self size.
	1 to: self size do: [:i | (self at: i) odbSerialize: serializer ].! !
!Array categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!Array class methodsFor!

odbDeserialize: deserializer 
	| array |
	array := self new: deserializer stream getPositiveInteger.
	deserializer register: array.
	1 to: array size do: [:i | array at: i put: deserializer odbNextObject].
	^array! !
!Array class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Association methodsFor!

odbBasicSerialize: serializer

	serializer stream putByte: 31.
	key odbSerialize: serializer.
	value odbSerialize: serializer.! !
!Association categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!Association class methodsFor!

odbDeserialize: deserializer 
	| result |
	deserializer register: (result := self new).
	^result
		key: deserializer odbNextObject;
		value: deserializer odbNextObject! !
!Association class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Behavior methodsFor!

odbGetRegDictionary
	"Answer identity dictionary instance for serializing instances of the receiver class.
	This method can be used for optimization of large complex objects with many
	instances of a single class where some other way of indexing objects would be more appropriate.
	"

	^OmniBase newFastIdentityDictionary: 500! !
!Behavior categoriesFor: #odbGetRegDictionary!OmniBase!public! !

!BlockClosure methodsFor!

evaluateAndCommitIn: anOmniBaseTransaction 
	"Evaluate the receiver block while setting the current transaction 
	to anOmniBaseTransaction. If an error occurs during execution of
	this block the transaction will be rolled back. If there is no error the
	transaction will be committed. Answer the result of evaluating the block."

	| activeProcess previousTxn result |
	activeProcess := Processor activeProcess.
	previousTxn := OmniBase getCurrentAndSet: anOmniBaseTransaction for: activeProcess.
	
	[result := self ifCurtailed: [anOmniBaseTransaction abort].
	anOmniBaseTransaction commit] 
			ensure: 
				[previousTxn isNil 
					ifTrue: [OmniBase removeFor: activeProcess]
					ifFalse: [OmniBase setTransaction: previousTxn for: activeProcess]].
	^result!

evaluateIn: anOmniBaseTransaction 
	"Evaluate the receiver block while setting the current transaction 
	to anOmniBaseTransaction. If an error occurs during execution of
	this block the transaction will be rolled back. Answer the result of
	the block."

	| activeProcess previousTxn |
	activeProcess := Processor activeProcess.
	previousTxn := OmniBase getCurrentAndSet: anOmniBaseTransaction for: activeProcess.
	^[self ifCurtailed: [anOmniBaseTransaction abort]] ensure: 
			[previousTxn isNil 
				ifTrue: [OmniBase removeFor: activeProcess]
				ifFalse: [OmniBase setTransaction: previousTxn for: activeProcess]]! !
!BlockClosure categoriesFor: #evaluateAndCommitIn:!OmniBase!public! !
!BlockClosure categoriesFor: #evaluateIn:!OmniBase!public! !

!ByteArray methodsFor!

asBtreeKeyOfSize: keySize

	self size = keySize ifTrue: [^self].
	^self
		replaceBytesOf: (ByteArray new: keySize)
		from: 1 to: (self size min: keySize) startingAt: 1!

odbAsInteger
	| result each negative |
	result := 0.
	1 to: self size
		do: 
			[:i | 
			each := self at: i.
			i = 1 
				ifTrue: 
					[result := each bitAnd: 15.
					each > 31 ifTrue: [negative := true]]
				ifFalse: [result := result * 100 + (each bitAnd: 15) + ((each bitShift: -4) * 10)]].
	negative = true ifTrue: [^0 - result].
	^result!

odbIsLessOrEqualTo: aByteArray

    | i size |
    i := 1. size := self size.
    [(self at: i) = (aByteArray at: i) and: [i < size]] whileTrue: [i := i + 1].
    ^(self at: i) <= (aByteArray at: i)!

odbIsLessThan: aByteArray

    | i size |
    i := 1. size := self size.
    [(self at: i) = (aByteArray at: i) and: [i < size]] whileTrue: [i := i + 1].
    ^(self at: i) < (aByteArray at: i)!

odbLongAt: index 
	^self dwordAtOffset: index - 1!

odbLongAt: index put: longValue 
	self dwordAtOffset: index - 1 put: longValue!

odbShortAt: index 
	^self wordAtOffset: index - 1!

odbShortAt: index put: longValue 
	self wordAtOffset: index - 1 put: longValue! !
!ByteArray categoriesFor: #asBtreeKeyOfSize:!OmniBase!public! !
!ByteArray categoriesFor: #odbAsInteger!accessing!primitives!private! !
!ByteArray categoriesFor: #odbIsLessOrEqualTo:!OmniBase!public! !
!ByteArray categoriesFor: #odbIsLessThan:!OmniBase!public! !
!ByteArray categoriesFor: #odbLongAt:!public! !
!ByteArray categoriesFor: #odbLongAt:put:!public! !
!ByteArray categoriesFor: #odbShortAt:!public! !
!ByteArray categoriesFor: #odbShortAt:put:!public! !

!Character methodsFor!

odbBasicSerialize: serializer

	asciiValue < 256 ifTrue: [
		serializer stream putByte: 13; putChar: self.
		^self
	].
	serializer stream putByte: 29; putWord: asciiValue!

odbSerialize: serializer

	asciiValue < 256 ifTrue: [
		serializer stream putByte: 13; putChar: self.
		^self
	].
	serializer stream putByte: 29; putWord: asciiValue! !
!Character categoriesFor: #odbBasicSerialize:!public! !
!Character categoriesFor: #odbSerialize:!OmniBase!public! !

!Character class methodsFor!

odbDeserialize: deserializer

	^deserializer stream getChar! !
!Character class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Class methodsFor!

odbSerialize: serializer

	serializer stream putByte: 26; putString: name!

odbTransientInstanceVariables
		"This method tells OmniBase which instance variables should not be stored into the database."

	^OrderedCollection new! !
!Class categoriesFor: #odbSerialize:!OmniBase!public! !
!Class categoriesFor: #odbTransientInstanceVariables!OmniBase!public! !

!Class class methodsFor!

odbDeserialize: deserializer

	^Smalltalk at: deserializer stream getString asSymbol ifAbsent: []! !
!Class class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Date methodsFor!

asBtreeKeyOfSize: keySize 
	keySize < 3 
		ifTrue: [OmniBase signalError: 'Key size has to be at least 3 bytes to accomodate a date'].
	^days asBtreeKeyOfSize: keySize!

odbBasicSerialize: serializer

	serializer stream putByte: 32; putInteger: days! !
!Date categoriesFor: #asBtreeKeyOfSize:!OmniBase!public! !
!Date categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!Date class methodsFor!

odbDeserialize: deserializer

	^deserializer register: (self new setDays: deserializer stream getInteger)! !
!Date class categoriesFor: #odbDeserialize:!OmniBase!public! !

!DeadObject methodsFor!

odbSerialize: serializer

	serializer stream putByte: 10! !
!DeadObject categoriesFor: #odbSerialize:!OmniBase!public! !

!DeadObject class methodsFor!

odbDeserialize: deserializer

	^self current! !
!DeadObject class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Dictionary methodsFor!

odbBasicSerialize: serializer 
	self class == Dictionary ifFalse: [^super odbBasicSerialize: serializer].
	(serializer stream)
		putByte: 37;
		putPositiveInteger: self size.
	self keysAndValuesDo: 
			[:key :value | 
			key odbSerialize: serializer.
			value odbSerialize: serializer]! !
!Dictionary categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!Dictionary class methodsFor!

odbDeserialize: deserializer 
	| size dict key |
	size := deserializer stream getPositiveInteger.
	dict := self new: size.
	deserializer register: dict.
	size timesRepeat: 
			[key := deserializer odbNextObject.
			dict at: key put: deserializer odbNextObject].
	^dict! !
!Dictionary class categoriesFor: #odbDeserialize:!OmniBase!public! !

!False methodsFor!

odbBasicSerialize: serializer

	serializer stream putByte: 16!

odbObjectID

  ^ODBObjectID containerID: 0 index: 3!

odbSerialize: serializer

	serializer stream putByte: 16! !
!False categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!False categoriesFor: #odbObjectID!OmniBase!public! !
!False categoriesFor: #odbSerialize:!OmniBase!public! !

!File methodsFor!

odbSerialize: serializer

	serializer cantSave: self! !
!File categoriesFor: #odbSerialize:!OmniBase!public! !

!Float methodsFor!

odbBasicSerialize: serializer

	| x int |
	self = 0.0 ifTrue: [ ^serializer stream putByte: 41 ].
	self = 1.0 ifTrue: [ ^serializer stream putByte: 42 ].
	x := self * 100.0.
	(int := x asInteger) asFloat = x
		ifTrue: [
			int \\ 100 = 0 ifTrue: [ ^serializer stream putByte: 43; putInteger: int // 100 ].
			^serializer stream putByte: 44; putInteger: int.
		].
	self basicSize = 8 ifTrue: [
		^serializer stream
			putByte: 45;
			putBytesFrom: (ExternalAddress fromInteger: self yourAddress) len: 8.
	].
	serializer stream
		putByte: 40;
		putPositiveInteger: self basicSize;
		putBytesFrom: (ExternalAddress fromInteger: self yourAddress) len: self basicSize.!

odbSerialize: serializer 
	| x int |
	self = 0.0 ifTrue: [^serializer stream putByte: 41].
	self = 1.0 ifTrue: [^serializer stream putByte: 42].
	x := self * 100.0.
	(int := x asInteger) asFloat = x 
		ifTrue: 
			[int \\ 100 = 0 
				ifTrue: 
					[^(serializer stream)
						putByte: 43;
						putInteger: int // 100].
			^(serializer stream)
				putByte: 44;
				putInteger: int].
	self basicSize = 8 
		ifTrue: 
			[^(serializer stream)
				putByte: 45;
				putBytesFrom: (ExternalAddress fromInteger: self yourAddress) len: 8].
	(serializer stream)
		putByte: 40;
		putPositiveInteger: self basicSize;
		putBytesFrom: (ExternalAddress fromInteger: self yourAddress) len: self basicSize! !
!Float categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!Float categoriesFor: #odbSerialize:!OmniBase!public! !

!Float class methodsFor!

odbDeserialize: deserializer

	| float len |
	float := self basicNew: (len := deserializer stream getPositiveInteger).
	deserializer stream getBytesFor: (ExternalAddress fromInteger: float yourAddress) len: len.
	^float! !
!Float class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Fraction methodsFor!

odbBasicSerialize: serializer 
	(serializer stream)
		putByte: 39;
		putInteger: numerator;
		putInteger: denominator!

odbSerialize: serializer 
	(serializer stream)
		putByte: 39;
		putInteger: numerator;
		putInteger: denominator! !
!Fraction categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!Fraction categoriesFor: #odbSerialize:!OmniBase!public! !

!Fraction class methodsFor!

odbDeserialize: deserializer

	^self numerator: deserializer stream getInteger
		denominator: deserializer stream getInteger

	! !
!Fraction class categoriesFor: #odbDeserialize:!OmniBase!public! !

!IdentityDictionary methodsFor!

odbBasicSerialize: serializer

	self class == IdentityDictionary ifFalse: [ ^super odbBasicSerialize: serializer ].
	serializer
		stream putByte: 38;
		putPositiveInteger: self size.
	self keysAndValuesDo: [:key :value |
		key odbSerialize: serializer.
		value odbSerialize: serializer.
	].
! !
!IdentityDictionary categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!Integer methodsFor!

asBtreeKeyOfSize: keySize 
	"Answer BCD encoded byte array for indexing integers in B-tree."

	| bytes b i n |
	bytes := ByteArray new: keySize.
	n := self abs.
	i := keySize.
	[i = 1] whileFalse: 
			[b := n \\ 10.
			n := n // 10.
			b := n \\ 10 * 16 bitOr: b.
			n := n // 10.
			bytes at: i put: b.
			i := i - 1].
	b := n \\ 10.
	self < 0 ifTrue: [b := b bitOr: 32].
	bytes at: 1 put: b.
	n < 10 
		ifFalse: 
			[self error: 'B-tree dictionary key size is too short to convert receiver into byte array'].
	^bytes!

odbBasicSerialize: serializer

	self < 0 ifTrue: [
		self > -4 ifTrue: [ ^serializer stream putByte: self + 70 ].
		^serializer stream putByte: 12; putPositiveInteger: 0 - self.
	].
	self < 17 ifTrue: [ ^serializer stream putByte: self + 50 ].
	serializer stream putByte: 11; putPositiveInteger: self!

odbSerialize: serializer

	self < 0 ifTrue: [
		self > -4 ifTrue: [ ^serializer stream putByte: self + 70 ].
		^serializer stream putByte: 12; putPositiveInteger: 0 - self.
	].
	self < 17 ifTrue: [ ^serializer stream putByte: self + 50 ].
	serializer stream putByte: 11; putPositiveInteger: self! !
!Integer categoriesFor: #asBtreeKeyOfSize:!arithmetic!public! !
!Integer categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!Integer categoriesFor: #odbSerialize:!OmniBase!public! !

!KernelLibrary methodsFor!

odbLockFile: fileHandle
    offsetLow: loPos offsetHigh: hiPos
    lengthLow: loLength lengthHigh: hiLength

	<stdcall: bool LockFile handle dword dword dword dword>
	^self invalidCall!

odbSetEndOfFile: fileHandle

	<stdcall: bool SetEndOfFile handle>
	^self invalidCall
!

odbUnlockFile: fileHandle
    offsetLow: loPos offsetHigh: hiPos
    lengthLow: loLength lengthHigh: hiLength

	<stdcall: bool UnlockFile handle dword dword dword dword>
	^self invalidCall! !
!KernelLibrary categoriesFor: #odbLockFile:offsetLow:offsetHigh:lengthLow:lengthHigh:!OmniBase!public! !
!KernelLibrary categoriesFor: #odbSetEndOfFile:!OmniBase!public! !
!KernelLibrary categoriesFor: #odbUnlockFile:offsetLow:offsetHigh:lengthLow:lengthHigh:!OmniBase!public! !

!ListModel class methodsFor!

odbTransientInstanceVariables
		"This method tells OmniBase which instance variables should not be stored into the database."

	^super odbTransientInstanceVariables
		add: 'events';
		yourself! !
!ListModel class categoriesFor: #odbTransientInstanceVariables!OmniBase!public! !

!LookupTable methodsFor!

odbBasicSerialize: serializer 
	self class == LookupTable ifFalse: [^super odbBasicSerialize: serializer].
	(serializer stream)
		putByte: 28;
		putPositiveInteger: self size.
	self keysAndValuesDo: 
			[:key :value | 
			key odbSerialize: serializer.
			value odbSerialize: serializer]! !
!LookupTable categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!Message methodsFor!

odbBasicSerialize: serializer 
	self class == Message ifFalse: [^super odbBasicSerialize: serializer].
	serializer stream putByte: 17.
	selector odbSerialize: serializer.
	args odbSerialize: serializer! !
!Message categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!Message class methodsFor!

odbDeserialize: deserializer 
	| result |
	deserializer register: (result := self new).
	^result
		setSelector: deserializer odbNextObject arguments: deserializer odbNextObject;
		yourself! !
!Message class categoriesFor: #odbDeserialize:!OmniBase!public! !

!MessageSend methodsFor!

odbBasicSerialize: serializer 
	self class == MessageSend ifFalse: [^super odbBasicSerialize: serializer].
	serializer stream putByte: 20.
	receiver odbSerialize: serializer.
	selector odbSerialize: serializer.
	args odbSerialize: serializer! !
!MessageSend categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!MessageSend class methodsFor!

odbDeserialize: deserializer 
	| result |
	deserializer register: (result := self new).
	^result
		receiver: deserializer odbNextObject;
		setSelector: deserializer odbNextObject arguments: deserializer odbNextObject;
		yourself! !
!MessageSend class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Metaclass methodsFor!

odbSerialize: serializer

	serializer stream putByte: 27;  putString: instanceClass name
! !
!Metaclass categoriesFor: #odbSerialize:!OmniBase!public! !

!Metaclass class methodsFor!

odbDeserialize: deserializer

	^(Smalltalk at: deserializer stream getString asSymbol ifAbsent: [^nil]) class! !
!Metaclass class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Model class methodsFor!

odbTransientInstanceVariables
		"This method tells OmniBase which instance variables should not be stored into the database."

	^super odbTransientInstanceVariables
		add: 'events';
		yourself! !
!Model class categoriesFor: #odbTransientInstanceVariables!OmniBase!public! !

!Object methodsFor!

asBtreeKeyOfSize: keySize

	OmniBase signalError: 'Dont know how to convert this object to a B-tree dictionary bytes key'!

isIdenticalTo: anObject 
	"Answer true if anObject is identical to receiver. This is necessary since with database
	proxies the real object identity is lost because while the object is not yet loaded from the
	database it is represented by its proxy. Later when the real object is loaded this proxy still
	represents the identical object but the #== identity check will answer false because it is not
	aware of this. It is implemented in this way because the #== method is inlined and can not
	be overridden."

	anObject isODBReference ifTrue: [^anObject isIdenticalTo: self].
	^self == anObject!

isODBReference

        ^false!

isODBTransactionObject

        ^false!

makePersistent
	"Makes the object persistent in the current process's transaction."

	OmniBase currentTransaction makePersistent: self!

markDirty
	| t |
	(t := OmniBase currentTransactionOrNil) isNil 
		ifTrue: 
			[(t := self odbGetTransaction) isNil 
				ifTrue: 
					[OmniBase signalError: 'Can not mark object as dirty. Transaction context is unknown. ']].
	t markDirty: self!

odbAboutToCommitIn: anOmniBaseTransaction 
	"Sent before transaction writes changes to the database (right before commit).
	In this method you can use transaction the same way as usual.
	Do nothing by default."

	!

odbBasicSerialize: serializer 
	| stream classInfo instSize |
	classInfo := serializer registerClass: self class.
	stream := serializer stream.
	classInfo isVariable ifTrue: [stream putPositiveInteger: self basicSize].
	classInfo isBytes 
		ifTrue: [stream putBytesFrom: self len: self basicSize]
		ifFalse: 
			[classInfo instVarIndexes do: [:i | (self instVarAt: i) odbSerialize: serializer].
			instSize := self class instSize.
			instSize + 1 to: instSize + self basicSize
				do: [:i | (self instVarAt: i) odbSerialize: serializer]]!

odbDeserialize: deserializer

	^self!

odbDeserialized: deserializer

	^self!

odbGetOID
	"Answer persistent object's OID."

	| t oid |
	(oid := self odbObjectID) isNil ifFalse: [^oid].
	(t := OmniBase currentTransactionOrNil) isNil 
		ifFalse: [(oid := t getObjectIDOrNil: self) isNil ifFalse: [^oid]].
	(t := self odbGetTransaction) isNil ifFalse: [^t getObjectIDOrNil: self].
	^nil!

odbGetTransaction
	"Answer the transaction in which the object was loaded."

	"immediate objects can not be made persistent"

	| allReferences |
	self isImmediate ifTrue: [^nil].

	"first check all inst vars if any references a proxy from which we could get a reference to transaction"
	self class isBytes 
		ifFalse: 
			[1 to: self class instSize + self basicSize
				do: [:i | (self instVarAt: i) isODBReference ifTrue: [^(self instVarAt: i) odbTransaction]]].
	"check references to self and find the transaction in which object was loaded"
	allReferences := self allReferences.
	allReferences do: [:each | each isODBReference ifTrue: [^each odbTransaction]].
	^nil!

odbLoadedIn: anOmniBaseTransaction
		"This method is sent when the object is loaded from the database."
!

odbMadePersistentIn: anOmniBaseTransaction
		"This method is sent when the object is made persistent."!

odbObject
	"Answer real persistent object."

	^self!

odbObjectID
	^nil!

odbResolve
	"If this were a proxy object it would resolve itself and answer a real persistent object from the database.
	Since this is not a proxy answer yourself.
	Note: This method is here because in Dolphin 5.1 sending yourself is optimized which means that there is no message
	send involved and a proxy does not fetch an object from the database, instead it answers itself a proxy."

	^self!

odbSerialize: serializer 
	(serializer register: self) ifTrue: [^self].
	self odbBasicSerialize: serializer! !
!Object categoriesFor: #asBtreeKeyOfSize:!OmniBase!public! !
!Object categoriesFor: #isIdenticalTo:!OmniBase!public! !
!Object categoriesFor: #isODBReference!OmniBase!public! !
!Object categoriesFor: #isODBTransactionObject!OmniBase!public! !
!Object categoriesFor: #makePersistent!OmniBase!public! !
!Object categoriesFor: #markDirty!OmniBase!public! !
!Object categoriesFor: #odbAboutToCommitIn:!public! !
!Object categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!Object categoriesFor: #odbDeserialize:!OmniBase!public! !
!Object categoriesFor: #odbDeserialized:!OmniBase!public! !
!Object categoriesFor: #odbGetOID!OmniBase!public! !
!Object categoriesFor: #odbGetTransaction!OmniBase!public! !
!Object categoriesFor: #odbLoadedIn:!OmniBase!public! !
!Object categoriesFor: #odbMadePersistentIn:!OmniBase!public! !
!Object categoriesFor: #odbObject!OmniBase!public! !
!Object categoriesFor: #odbObjectID!OmniBase!public! !
!Object categoriesFor: #odbResolve!OmniBase!public! !
!Object categoriesFor: #odbSerialize:!OmniBase!public! !

!Object class methodsFor!

newPersistent

	^self new makePersistent!

odbLoadVariables: deserializer classInfo: classInfo 
	| stream order iSize object basicSize varArray |
	stream := deserializer stream.
	classInfo isVariable 
		ifTrue: [object := self basicNew: (basicSize := stream getPositiveInteger)]
		ifFalse: 
			[basicSize := 0.
			object := self basicNew].
	deserializer register: object.
	classInfo isBytes 
		ifTrue: 
			[stream getBytesFor: object len: basicSize.
			^object].
	varArray := Array new: (iSize := classInfo realInstSize) + 1.
	order := classInfo variableOrder.
	1 to: classInfo instSize
		do: [:i | varArray at: (order at: i) put: deserializer odbNextObject].
	1 to: iSize do: [:i | object instVarAt: i put: (varArray at: i)].
	iSize + 1 to: iSize + basicSize
		do: [:i | object instVarAt: i put: deserializer odbNextObject].
	^object odbDeserialized: deserializer! !
!Object class categoriesFor: #newPersistent!constants!OmniBase!public! !
!Object class categoriesFor: #odbLoadVariables:classInfo:!OmniBase!public! !

!OrderedCollection methodsFor!

odbBasicSerialize: serializer

	serializer stream
		putByte: 81;
		putPositiveInteger: lastIndex - firstIndex + 1.
	firstIndex to: lastIndex do: [:i | (self basicAt: i) odbSerialize: serializer ].! !
!OrderedCollection categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!OrderedCollection class methodsFor!

odbDeserialize: deserializer 
	| result size |
	size := deserializer stream getPositiveInteger.
	deserializer register: (result := self ofSize: size).
	1 to: size do: [:i | result basicAt: i put: deserializer odbNextObject].
	^result! !
!OrderedCollection class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Process methodsFor!

odbSerialize: serializer

	serializer cantSave: self! !
!Process categoriesFor: #odbSerialize:!OmniBase!public! !

!ProcessorScheduler methodsFor!

odbBasicSerialize: serializer

	serializer stream putByte: 22!

odbSerialize: serializer

	serializer stream putByte: 22! !
!ProcessorScheduler categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!ProcessorScheduler categoriesFor: #odbSerialize:!OmniBase!public! !

!ScaledDecimal methodsFor!

odbBasicSerialize: serializer 
	(serializer stream)
		putByte: 47;
		putInteger: self numerator;
		putInteger: self denominator;
		putInteger: scale!

odbSerialize: serializer 
	(serializer stream)
		putByte: 47;
		putInteger: self numerator;
		putInteger: self denominator;
		putInteger: scale! !
!ScaledDecimal categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!ScaledDecimal categoriesFor: #odbSerialize:!OmniBase!public! !

!ScaledDecimal class methodsFor!

odbDeserialize: deserializer 
	| stream |
	stream := deserializer stream.
	^self 
		numerator: stream getInteger
		denominator: stream getInteger
		scale: stream getInteger! !
!ScaledDecimal class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Semaphore methodsFor!

odbTerminateWaitingProcesses
	^self terminateProcess! !
!Semaphore categoriesFor: #odbTerminateWaitingProcesses!process synchronisation!public! !

!Set methodsFor!

odbBasicSerialize: serializer 
	self class == Set ifFalse: [^super odbBasicSerialize: serializer].
	(serializer stream)
		putByte: 30;
		putPositiveInteger: self size.
	self do: [:each | each odbSerialize: serializer]! !
!Set categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!Set class methodsFor!

odbDeserialize: deserializer 
	| size set |
	size := deserializer stream getPositiveInteger.
	set := self new: size.
	deserializer register: set.
	size timesRepeat: [set add: deserializer odbNextObject].
	^set! !
!Set class categoriesFor: #odbDeserialize:!OmniBase!public! !

!String methodsFor!

asBtreeKeyOfSize: keySize 
	^self 
		replaceBytesOf: (ByteArray new: keySize)
		from: 1
		to: (self size min: keySize)
		startingAt: 1!

odbBasicSerialize: serializer

	self size < 10 ifTrue: [
		^serializer stream
			putByte: 70 + self size;
			putBytesFrom: self len: self size.
	].
	serializer stream
		putByte: 34;
		putPositiveInteger: self size;
		putBytesFrom: self len: self size! !
!String categoriesFor: #asBtreeKeyOfSize:!converting!public! !
!String categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!String class methodsFor!

odbDeserialize: deserializer

	| str len |
	str := self new: (len := deserializer stream getPositiveInteger).
	deserializer stream getBytesFor: str len: len.
	^deserializer register: str! !
!String class categoriesFor: #odbDeserialize:!OmniBase!public! !

!Symbol methodsFor!

odbBasicSerialize: serializer

	serializer stream
		putByte: 18;
		putPositiveInteger: self size;
		putBytesFrom: self len: self size!

odbSerialize: serializer

	serializer stream
		putByte: 18;
		putPositiveInteger: self size;
		putBytesFrom: self len: self size! !
!Symbol categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!Symbol categoriesFor: #odbSerialize:!OmniBase!public! !

!Symbol class methodsFor!

odbDeserialize: deserializer

	| str len |
	str := String new: (len := deserializer stream getPositiveInteger).
	deserializer stream getBytesFor: str len: len.
	^str asSymbol! !
!Symbol class categoriesFor: #odbDeserialize:!OmniBase!public! !

!SystemDictionary methodsFor!

odbBasicSerialize: serializer

	serializer stream putByte: 19!

odbSerialize: serializer

	serializer stream putByte: 19! !
!SystemDictionary categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!SystemDictionary categoriesFor: #odbSerialize:!OmniBase!public! !

!Time methodsFor!

odbBasicSerialize: serializer

	serializer stream
		putByte: 33;
		putPositiveInteger: milliseconds // 1000! !
!Time categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!Time class methodsFor!

odbDeserialize: deserializer

	^deserializer register: (self basicNew setMilliseconds: deserializer stream getPositiveInteger * 1000)!

secondClockValue
	"Answer the current value of the system millisecond clock"

	^self millisecondClockValue // 1000! !
!Time class categoriesFor: #odbDeserialize:!OmniBase!public! !
!Time class categoriesFor: #secondClockValue!OmniBase!public! !

!TimeStamp methodsFor!

asBtreeKeyOfSize: keySize 
	keySize < 8 
		ifTrue: 
			[OmniBase signalError: 'Key size has to be at least 8 bytes to accomodate a timestamp'].
	^self asSeconds asBtreeKeyOfSize: keySize! !
!TimeStamp categoriesFor: #asBtreeKeyOfSize:!printing!public! !

!True methodsFor!

odbBasicSerialize: serializer

	serializer stream putByte: 15!

odbObjectID

  ^ODBObjectID containerID: 0 index: 2!

odbSerialize: serializer

	serializer stream putByte: 15! !
!True categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!True categoriesFor: #odbObjectID!OmniBase!public! !
!True categoriesFor: #odbSerialize:!OmniBase!public! !

!UndefinedObject methodsFor!

odbBasicSerialize: serializer

	serializer stream putByte: 14!

odbDeserialize: deserializer

	deserializer loadError!

odbLoadVariables: deserializer classInfo: classInfo

	^ODBUndefinedObject new odbLoadVariables: deserializer classInfo: classInfo!

odbObjectID

  ^ODBObjectID containerID: 0 index: 1!

odbSerialize: serializer

	serializer stream putByte: 14! !
!UndefinedObject categoriesFor: #odbBasicSerialize:!OmniBase!public! !
!UndefinedObject categoriesFor: #odbDeserialize:!OmniBase!public! !
!UndefinedObject categoriesFor: #odbLoadVariables:classInfo:!public! !
!UndefinedObject categoriesFor: #odbObjectID!OmniBase!public! !
!UndefinedObject categoriesFor: #odbSerialize:!OmniBase!public! !

!UndefinedObject class methodsFor!

odbDeserialize: deserializer

	^nil! !
!UndefinedObject class categoriesFor: #odbDeserialize:!OmniBase!public! !

!UnicodeString methodsFor!

odbBasicSerialize: serializer 
	| len stream |
	len := self size.
	(stream := serializer stream)
		putByte: 36;
		putPositiveInteger: len.
	1 to: len do: [:i | stream putWord: (self at: i) asInteger]! !
!UnicodeString categoriesFor: #odbBasicSerialize:!OmniBase!public! !

!UnicodeString class methodsFor!

odbDeserialize: deserializer 
	| str len stream |
	str := self new: (len := (stream := deserializer stream) getPositiveInteger).
	1 to: len do: [:i | str at: i put: (Character value: stream getWord)].
	^deserializer register: str! !
!UnicodeString class categoriesFor: #odbDeserialize:!OmniBase!public! !

"End of package definition"!

