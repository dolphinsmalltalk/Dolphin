| package |
package := Package name: 'OA SUnit Extensions'.
package paxVersion: 1;
	basicComment: 'Object Arts SUnit Extensions.
Copyright (c) Object Arts Ltd, 2002.

Extensions to the basic SUnit unit testing packages, including the ability to test that the correct set of SASE events are fired for particular actions.'.


package methodNames
	add: #TestCase -> #<=;
	add: #TestCase -> #=;
	add: #TestCase -> #assert:isKindOf:;
	add: #TestCase -> #assert:sameAs:;
	add: #TestCase -> #assertIsNil:;
	add: #TestCase -> #debugWithResult;
	add: #TestCase -> #debugWithResult:;
	add: #TestCase -> #deny:equals:;
	add: #TestCase -> #deny:sameAs:;
	add: #TestCase -> #denyIsNil:;
	add: #TestCase -> #hash;
	add: #TestCase -> #should:raise:matching:;
	add: #TestCase -> #should:trigger:against:;
	add: #TestCase -> #should:trigger:butNot:against:;
	add: #TestCase -> #should:trigger:matching:against:;
	add: #TestCase -> #should:triggerAllOf:against:;
	add: #TestCase -> #should:triggerAllOf:matching:against:;
	add: #TestCase -> #should:triggerAllOf:matching:butNoneOf:against:;
	add: #TestCase -> #shouldnt:trigger:against:;
	add: #TestCase -> #shouldnt:triggerAnyOf:against:;
	add: #TestResult -> #debugCase:;
	add: 'TestCase class' -> #buildSuiteFromConcreteMethods:;
	add: 'TestCase class' -> #debugWithResult:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\..\Object Arts\Dolphin\Base\Dolphin';
	add: 'SUnit';
	yourself).

package!

"Class Definitions"!


"Global Aliases"!


"Loose Methods"!

!TestCase methodsFor!

<= aTestCase
	"Answer whether the receiver is 'less than' the <TestCase> argument, for collation purposes only."

	^self class == aTestCase class
		ifTrue: [self selector <= aTestCase selector]
		ifFalse: [self class <= aTestCase class]!

= aTestCase 
	"Answer whether the argument, aTestCase, is considered exactly equivalent to the receiver."

	^self class == aTestCase class and: [self selector == aTestCase selector]!

assert: actualObject isKindOf: expectedType
	(actualObject isKindOf: expectedType)
		ifFalse: 
			[self fail: ((String writeStream: 100)
						nextPutAll: 'Expected a ';
						print: expectedType;
						nextPutAll: ' Actual: ';
						print: actualObject class;
						nextPutAll: '.';
						contents)]!

assert: actualObject sameAs: expectedObject
	expectedObject == actualObject
		ifFalse: [self fail: (self comparingStringBetween: expectedObject and: actualObject)]!

assertIsNil: anObject
	anObject
		ifNotNil: 
			[self fail: (String writeStream
						nextPutAll: 'Expected nil, not ';
						print: anObject;
						nextPutAll: '.';
						contents)]!

debugWithResult
	| result |
	result := TestResult new.
	self debugWithResult: result.
	^result!

debugWithResult: aResult
	aResult debugCase: self!

deny: actualObject equals: expectedObject
	expectedObject ~= actualObject
		ifFalse: 
			[self fail: (String writeStream
						nextPutAll: 'Unexpectedly equal to ';
						print: expectedObject;
						nextPutAll: ' Actual: ';
						print: actualObject;
						nextPutAll: '.';
						contents)]!

deny: actualObject sameAs: expectedObject
	expectedObject ~~ actualObject
		ifFalse: 
			[self fail: (String writeStream
						nextPutAll: 'Did not expect ';
						print: actualObject;
						nextPutAll: '.';
						contents)]!

denyIsNil: anObject
	anObject ifNil: [self fail: 'Expected non-nil result']!

hash
	"Answer the <SmallInteger> hash value for the receiver. We use only the selector at the moment."

	^testSelector hash!

should: aBlock raise: anException matching: discriminator
	"Example usage:
		self should: [array at: $1] raise: Error matching: [:ex | ex messageText = 'Index: $1 is not an integer'].
	"

	| raised |
	raised := false.
	aBlock on: anException
		do: 
			[:exception | 
			(discriminator value: exception) ifTrue: [raised := true].
			"If the exception is resumable, such as a warning, then allow execution of the block to continue"
			exception exit: nil].
	self assert: raised!

should: aZeroArgBlock trigger: aSymbol against: anObject 
	"Example Usage:
		self 
			should: [Object trigger: #testNoArgs]
			trigger: #testNoArgs
			against: Object.
	"

	self 
		should: aZeroArgBlock
		triggerAllOf: (Array with: aSymbol)
		against: anObject!

should: aBlock trigger: eventSymbol1 butNot: eventSymbol2 against: anObject 
	"Example usage:
		self 
			should: [presenter selection: each]
			trigger: #selectionChanged
			butNot: #selectionChanging:
			against: presenter.
	"

	self 
		should: aBlock
		triggerAllOf: (Array with: eventSymbol1)
		matching: [:message | true]
		butNoneOf: (Array with: eventSymbol2)
		against: anObject!

should: aZeroArgBlock trigger: aSymbol matching: discriminatorBlock against: anObject 
	"Example usage:
		self 
			should: [Object trigger: #testTwoArgs:arg2:]
			trigger: #testTwoArgs:arg2:
			matching: [:arg1 :arg2 | arg1 isNil & arg2 isNil]
			against: Object.
	"

	self assert: aSymbol argumentCount = discriminatorBlock argumentCount.
	self 
		should: aZeroArgBlock
		triggerAllOf: (Array with: aSymbol)
		matching: [:message | discriminatorBlock valueWithArguments: message arguments]
		against: anObject!

should: aZeroArgBlock triggerAllOf: aCollectionOfSymbols against: anObject 
	self 
		should: aZeroArgBlock
		triggerAllOf: aCollectionOfSymbols
		matching: [:message | true]
		against: anObject!

should: aZeroArgBlock triggerAllOf: aCollectionOfSymbols matching: aOneArgBlockOrNil against: anObject 
	self 
		should: aZeroArgBlock
		triggerAllOf: aCollectionOfSymbols
		matching: aOneArgBlockOrNil
		butNoneOf: #()
		against: anObject!

should: aZeroArgBlock triggerAllOf: aCollectionOfSymbols matching: aOneArgBlock butNoneOf: aCollectionOfSymbols2 against: anObject 
	| fired allEvents |
	fired := Bag new.
	allEvents := aCollectionOfSymbols union: aCollectionOfSymbols2.
	"The expected and unexpected event sets should be disjoint"
	self assert: allEvents size = (aCollectionOfSymbols size + aCollectionOfSymbols2 size).
	
	[allEvents do: 
			[:each | 
			"If the event selector is part of nil's protocol, then no MNU will be raised, 
			and the test will be invalid"

			self deny: (nil respondsTo: each).
			anObject when: each sendTo: nil].
	aZeroArgBlock on: MessageNotUnderstood
		do: 
			[:mnu | 
			(mnu receiver ~~ nil or: [(allEvents includes: mnu selector) not]) ifTrue: [mnu pass].
			((aCollectionOfSymbols2 includes: mnu selector) or: [aOneArgBlock value: mnu message]) 
				ifTrue: [fired add: mnu selector].
			mnu resume: mnu receiver]] 
			ensure: [anObject removeEventsTriggeredFor: nil].
	"If this assertion fails, then the object did not trigger one or more of the expected events"
	self assert: (aCollectionOfSymbols difference: fired) isEmpty.
	"If this assertion fails, then the object triggered one or more events that it should not have"
	self assert: (aCollectionOfSymbols2 intersection: fired) isEmpty!

shouldnt: aBlock trigger: aSymbol against: anObject 
	"Example usage:
		self 
			shouldnt: [presenter selection: each]
			trigger: #selectionChanging:
			against: presenter.
	"

	self 
		shouldnt: aBlock
		triggerAnyOf: (Array with: aSymbol)
		against: anObject!

shouldnt: aZeroArgBlock triggerAnyOf: aCollectionOfSymbols against: anObject 
	"Example usage:
		self 
			shouldnt: [presenter model remove: objects last]
			triggerAnyOf: #(#selectionChanged #selectionChanging:)
			against: presenter.
	"

	self 
		should: aZeroArgBlock
		triggerAllOf: #()
		matching: [:message | true]
		butNoneOf: aCollectionOfSymbols
		against: anObject! !
!TestCase categoriesFor: #<=!comparing!public! !
!TestCase categoriesFor: #=!comparing!public! !
!TestCase categoriesFor: #assert:isKindOf:!asserting!public! !
!TestCase categoriesFor: #assert:sameAs:!asserting!public! !
!TestCase categoriesFor: #assertIsNil:!asserting!public! !
!TestCase categoriesFor: #debugWithResult!public!running! !
!TestCase categoriesFor: #debugWithResult:!private!running! !
!TestCase categoriesFor: #deny:equals:!asserting!public! !
!TestCase categoriesFor: #deny:sameAs:!public! !
!TestCase categoriesFor: #denyIsNil:!asserting!public! !
!TestCase categoriesFor: #hash!comparing!public! !
!TestCase categoriesFor: #should:raise:matching:!asserting!public! !
!TestCase categoriesFor: #should:trigger:against:!asserting!public! !
!TestCase categoriesFor: #should:trigger:butNot:against:!asserting!public! !
!TestCase categoriesFor: #should:trigger:matching:against:!asserting!public! !
!TestCase categoriesFor: #should:triggerAllOf:against:!asserting!public! !
!TestCase categoriesFor: #should:triggerAllOf:matching:against:!asserting!public! !
!TestCase categoriesFor: #should:triggerAllOf:matching:butNoneOf:against:!asserting!public! !
!TestCase categoriesFor: #shouldnt:trigger:against:!asserting!public! !
!TestCase categoriesFor: #shouldnt:triggerAnyOf:against:!asserting!public! !

!TestCase class methodsFor!

buildSuiteFromConcreteMethods: testMethodSelectors 
	^self isAbstract 
		ifTrue: 
			[| suite |
			suite := TestSuite new.
			suite name: self displayString.
			self allSubclassesDo: [:each | each isAbstract ifFalse: [suite addTest: (each buildSuiteFromMethods: testMethodSelectors)]].
			suite]
		ifFalse: [self buildSuiteFromMethods: testMethodSelectors]!

debugWithResult: aSymbol
	^(self selector: aSymbol) debugWithResult! !
!TestCase class categoriesFor: #buildSuiteFromConcreteMethods:!Instance Creation!public! !
!TestCase class categoriesFor: #debugWithResult:!Instance Creation!public! !

!TestResult methodsFor!

debugCase: aTestCase
	"Same as runCase:, but must pass out an errors so caught by the debugger"

	
	[| start stop |
	start := Time microsecondClockValue.
	aTestCase runCase.
	stop := Time microsecondClockValue.
	self addPass: aTestCase duration: stop - start]
			on: self class failure
			do: 
				[:signal |
				self addFailure: aTestCase signal: signal.
				signal pass]
			on: self class error
			do: 
				[:signal |
				self addError: aTestCase signal: signal.
				signal pass]
			on: self class skip
			do: 
				[:signal |
				self addSkip: aTestCase signal: signal.
				signal return]! !
!TestResult categoriesFor: #debugCase:!public!running! !

"End of package definition"!

