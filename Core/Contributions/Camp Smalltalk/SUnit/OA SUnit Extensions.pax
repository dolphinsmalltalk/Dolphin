| package |
package := Package name: 'OA SUnit Extensions'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Object Arts SUnit Extensions.
Copyright (c) Object Arts Ltd, 2002.

Extensions to the basic SUnit unit testing packages, including the ability to test that the correct set of SASE events are fired for particular actions.'.


package setClassNames: #(
	#{XProgramming.SUnit.CommandLineTestRunner}
	#{XProgramming.SUnit.TestRunConsoleLogger}
	#{XProgramming.SUnit.TestRunLogger}
).

package setMethodNames: #(
	#(#{XProgramming.SUnit.TestCase} #<=)
	#(#{XProgramming.SUnit.TestCase} #=)
	#(#{XProgramming.SUnit.TestCase} #assert:closeTo:)
	#(#{XProgramming.SUnit.TestCase} #assert:closeTo:precision:)
	#(#{XProgramming.SUnit.TestCase} #assert:equals:description:)
	#(#{XProgramming.SUnit.TestCase} #assert:identicalTo:)
	#(#{XProgramming.SUnit.TestCase} #assert:isKindOf:)
	#(#{XProgramming.SUnit.TestCase} #assert:sameAs:)
	#(#{XProgramming.SUnit.TestCase} #assertIsNil:)
	#(#{XProgramming.SUnit.TestCase} #assertNotNil:)
	#(#{XProgramming.SUnit.TestCase} #debugWithResult)
	#(#{XProgramming.SUnit.TestCase} #debugWithResult:)
	#(#{XProgramming.SUnit.TestCase} #deny:equals:)
	#(#{XProgramming.SUnit.TestCase} #deny:identicalTo:)
	#(#{XProgramming.SUnit.TestCase} #deny:sameAs:)
	#(#{XProgramming.SUnit.TestCase} #denyIsNil:)
	#(#{XProgramming.SUnit.TestCase} #hash)
	#(#{XProgramming.SUnit.TestCase} #isCiBuild)
	#(#{XProgramming.SUnit.TestCase} #isKnownSlowTest)
	#(#{XProgramming.SUnit.TestCase} #should:raise:matching:)
	#(#{XProgramming.SUnit.TestCase} #should:trigger:against:)
	#(#{XProgramming.SUnit.TestCase} #should:trigger:butNot:against:)
	#(#{XProgramming.SUnit.TestCase} #should:trigger:matching:against:)
	#(#{XProgramming.SUnit.TestCase} #should:triggerAllOf:against:)
	#(#{XProgramming.SUnit.TestCase} #should:triggerAllOf:matching:against:)
	#(#{XProgramming.SUnit.TestCase} #should:triggerAllOf:matching:butNoneOf:against:)
	#(#{XProgramming.SUnit.TestCase} #shouldnt:trigger:against:)
	#(#{XProgramming.SUnit.TestCase} #shouldnt:triggerAnyOf:against:)
	#(#{XProgramming.SUnit.TestCase} #skipUnless:)
	#(#{XProgramming.SUnit.TestCase} #thisTestMethod)
	#(#{XProgramming.SUnit.TestCase class} #buildSuiteFromConcreteMethods:)
	#(#{XProgramming.SUnit.TestCase class} #debugWithResult:)
	#(#{XProgramming.SUnit.TestCaseResult} #isKnownSlowTest)
	#(#{XProgramming.SUnit.TestResource} #isCiBuild)
	#(#{XProgramming.SUnit.TestResult} #debugCase:)
	#(#{XProgramming.SUnit.TestSuite} #displayOn:)
).

package setPrerequisites: #(
	'..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'SUnit'
	'SUnitPreload'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'XProgramming.SUnit.CommandLineTestRunner'
	instanceVariableNames: 'results lastCase loggers verbose'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'XProgramming.SUnit.TestRunLogger'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

XProgramming.SUnit.TestRunLogger
	subclass: #'XProgramming.SUnit.TestRunConsoleLogger'
	instanceVariableNames: 'stream timings notifications'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!XProgramming.SUnit.TestCase methodsFor!

<= aTestCase
	"Answer whether the receiver is 'less than' the <TestCase> argument, for collation purposes only."

	^self class == aTestCase class
		ifTrue: [self selector <= aTestCase selector]
		ifFalse: [self class <= aTestCase class]!

= aTestCase 
	"Answer whether the argument, aTestCase, is considered exactly equivalent to the receiver."

	^self class == aTestCase class and: [self selector == aTestCase selector]!

assert: actualNumber closeTo: expectedNumber
	(actualNumber closeTo: expectedNumber)
		ifFalse: [self fail: (self comparingStringBetween: expectedNumber and: actualNumber)]!

assert: actualNumber closeTo: expectedNumber precision: precisionNumber
	(actualNumber closeTo: expectedNumber precision: precisionNumber)
		ifFalse: [self fail: (self comparingStringBetween: expectedNumber and: actualNumber)]!

assert: actualObject equals: expectedObject description: aStringOrValue
	expectedObject = actualObject
		ifFalse: 
			[self
				fail: aStringOrValue value , ': ' , (self comparingStringBetween: expectedObject and: actualObject)]!

assert: actualObject identicalTo: expectedObject
	expectedObject == actualObject
		ifFalse: [self fail: (self comparingStringBetween: expectedObject and: actualObject)]

	"
	(Smalltalk.DiffBrowser show: 'Vertical view') compare: actualObject printString id: 'Actual' and: expectedObject printString id: 'Expected'
	"!

assert: actualObject isKindOf: expectedType
	(actualObject isKindOf: expectedType)
		ifFalse: 
			[self fail: ((String smalltalkWriteStream: 100)
						nextPutAll: 'Expected a ';
						print: expectedType;
						nextPutAll: ' Actual: ';
						print: actualObject class;
						nextPutAll: '.';
						contents)]!

assert: actualObject sameAs: expectedObject
	Notification deprecated.
	self assert: actualObject identicalTo: expectedObject!

assertIsNil: anObject
	anObject
		ifNotNil: 
			[self fail: (String writeStream
						nextPutAll: 'Expected nil, not ';
						print: anObject;
						nextPutAll: '.';
						contents)]!

assertNotNil: anObject
	anObject ifNil: [self fail: 'Expected non-nil object']!

debugWithResult
	| result |
	result := TestResult new.
	self debugWithResult: result.
	^result!

debugWithResult: aResult
	aResult debugCase: self!

deny: actualObject equals: expectedObject
	expectedObject ~= actualObject
		ifFalse: 
			[self fail: (String writeStream
						nextPutAll: 'Unexpectedly equal to ';
						print: expectedObject;
						nextPutAll: ' Actual: ';
						print: actualObject;
						nextPutAll: '.';
						contents)]!

deny: actualObject identicalTo: expectedObject
	expectedObject ~~ actualObject
		ifFalse: 
			[self fail: (String writeStream
						nextPutAll: 'Did not expect ';
						print: actualObject;
						nextPutAll: '.';
						contents)]!

deny: actualObject sameAs: expectedObject
	Notification deprecated.
	self deny: actualObject identicalTo: expectedObject!

denyIsNil: anObject
	anObject ifNil: [self fail: 'Expected non-nil result']!

hash
	"Answer the <SmallInteger> hash value for the receiver. We use only the selector at the moment."

	^testSelector hash!

isCiBuild
	^(SessionManager current getenv: 'APPVEYOR') notNil!

isKnownSlowTest
	^self thisTestMethod hasAnnotation: #knownSlowTest!

should: aNiladicValuable raise: anExceptionSelector matching: aMonadicValuable
	"Example usage:
		self should: [array at: $1] raise: Error matching: [:ex | ex messageText = 'Index: $1 is not an integer'].
	"

	self
		should: aNiladicValuable
		raise: (anExceptionSelector matching: aMonadicValuable)
		description: ['Exception matching <1d> not raised' << anExceptionSelector]!

should: aNiladicValuable trigger: aSymbol against: anObject
	"Example Usage:
		self 
			should: [Object trigger: #testNoArgs]
			trigger: #testNoArgs
			against: Object.
	"

	self
		should: aNiladicValuable
		triggerAllOf: {aSymbol}
		against: anObject!

should: aNiladicValuable trigger: eventSymbol1 butNot: eventSymbol2 against: anObject
	"Example usage:
		self 
			should: [presenter selection: each]
			trigger: #selectionChanged
			butNot: #selectionChanging:
			against: presenter.
	"

	self
		should: aNiladicValuable
		triggerAllOf: {eventSymbol1}
		matching: [:message | true]
		butNoneOf: {eventSymbol2}
		against: anObject!

should: aNiladicValuable trigger: aSymbol matching: discriminatorBlock against: anObject
	"Example usage:
		self 
			should: [Object trigger: #testTwoArgs:arg2:]
			trigger: #testTwoArgs:arg2:
			matching: [:arg1 :arg2 | arg1 isNil & arg2 isNil]
			against: Object.
	"

	self assert: aSymbol argumentCount equals: discriminatorBlock argumentCount.
	self
		should: aNiladicValuable
		triggerAllOf: {aSymbol}
		matching: [:message | discriminatorBlock valueWithArguments: message arguments]
		against: anObject!

should: aNiladicValuable triggerAllOf: aCollectionOfSymbols against: anObject 
	self 
		should: aNiladicValuable
		triggerAllOf: aCollectionOfSymbols
		matching: [:message | true]
		against: anObject!

should: aNiladicValuable triggerAllOf: aCollectionOfSymbols matching: aOneArgBlockOrNil against: anObject 
	self 
		should: aNiladicValuable
		triggerAllOf: aCollectionOfSymbols
		matching: aOneArgBlockOrNil
		butNoneOf: #()
		against: anObject!

should: aNiladicValuable triggerAllOf: aCollectionOfSymbols matching: aOneArgBlock butNoneOf: aCollectionOfSymbols2 against: anObject
	| fired allEvents |
	fired := Bag new.
	allEvents := aCollectionOfSymbols union: aCollectionOfSymbols2.
	"The expected and unexpected event sets should be disjoint"
	self assert: allEvents size equals: aCollectionOfSymbols size + aCollectionOfSymbols2 size.
	
	[allEvents do: 
			[:each |
			"If the event selector is part of nil's protocol, then no MNU will be raised, 
			and the test will be invalid"
			self deny: (nil respondsTo: each).
			anObject when: each sendTo: nil].
	aNiladicValuable on: MessageNotUnderstood
		do: 
			[:mnu |
			(mnu receiver ~~ nil or: [(allEvents includes: mnu selector) not]) ifTrue: [mnu pass].
			((aCollectionOfSymbols2 includes: mnu selector) or: [aOneArgBlock value: mnu message])
				ifTrue: [fired add: mnu selector].
			mnu resume: mnu receiver]]
			ensure: [anObject removeEventsTriggeredFor: nil].
	"If this assertion fails, then the object did not trigger one or more of the expected events"
	self assert: (aCollectionOfSymbols difference: fired) isEmpty.
	"If this assertion fails, then the object triggered one or more events that it should not have"
	self assert: (aCollectionOfSymbols2 intersection: fired) isEmpty!

shouldnt: aNiladicValuable trigger: aSymbol against: anObject
	"Example usage:
		self 
			shouldnt: [presenter selection: each]
			trigger: #selectionChanging:
			against: presenter.
	"

	self
		shouldnt: aNiladicValuable
		triggerAnyOf: {aSymbol}
		against: anObject!

shouldnt: aNiladicValuable triggerAnyOf: aCollectionOfSymbols against: anObject 
	"Example usage:
		self 
			shouldnt: [presenter model remove: objects last]
			triggerAnyOf: #(#selectionChanged #selectionChanging:)
			against: presenter.
	"

	self 
		should: aNiladicValuable
		triggerAllOf: #()
		matching: [:message | true]
		butNoneOf: aCollectionOfSymbols
		against: anObject!

skipUnless: aNiladicValuable
	" If the assumption in the <niladicValuable> argument evaluates to false, abandon the running test and mark it as skipped."
	
	aNiladicValuable value ifFalse: [TestSkip signal: 'Assumption in #skipUnless: failed']!

thisTestMethod
	^self class lookupMethod: self selector! !

!XProgramming.SUnit.TestCase categoriesForMethods!
<=!comparing!public! !
=!comparing!public! !
assert:closeTo:!asserting!public! !
assert:closeTo:precision:!asserting!public! !
assert:equals:description:!asserting!public! !
assert:identicalTo:!asserting!public! !
assert:isKindOf:!asserting!public! !
assert:sameAs:!asserting!public! !
assertIsNil:!asserting!public! !
assertNotNil:!asserting!public! !
debugWithResult!public!running! !
debugWithResult:!private!running! !
deny:equals:!asserting!public! !
deny:identicalTo:!public! !
deny:sameAs:!public! !
denyIsNil:!asserting!public! !
hash!comparing!public! !
isCiBuild!helpers!public! !
isKnownSlowTest!accessing!public! !
should:raise:matching:!asserting!public! !
should:trigger:against:!asserting!public! !
should:trigger:butNot:against:!asserting!public! !
should:trigger:matching:against:!asserting!public! !
should:triggerAllOf:against:!asserting!public! !
should:triggerAllOf:matching:against:!asserting!public! !
should:triggerAllOf:matching:butNoneOf:against:!asserting!public! !
shouldnt:trigger:against:!asserting!public! !
shouldnt:triggerAnyOf:against:!asserting!public! !
skipUnless:!asserting!public! !
thisTestMethod!accessing!public! !
!

!XProgramming.SUnit.TestCase class methodsFor!

buildSuiteFromConcreteMethods: testMethodSelectors
	^self isAbstract
		ifTrue: 
			[| suite |
			suite := TestSuite new.
			suite name: self displayString.
			self allSubclassesDo: 
					[:each |
					each isAbstract
						ifFalse: 
							[suite
								addTest: (each buildSuiteFromMethods: (testMethodSelectors intersection: each allTestSelectors))]].
			suite]
		ifFalse: [self buildSuiteFromMethods: testMethodSelectors]!

debugWithResult: aSymbol
	^(self selector: aSymbol) debugWithResult! !

!XProgramming.SUnit.TestCase class categoriesForMethods!
buildSuiteFromConcreteMethods:!Instance Creation!public! !
debugWithResult:!Instance Creation!public! !
!

!XProgramming.SUnit.TestCaseResult methodsFor!

isKnownSlowTest
	^case isKnownSlowTest! !

!XProgramming.SUnit.TestCaseResult categoriesForMethods!
isKnownSlowTest!accessing!public! !
!

!XProgramming.SUnit.TestResource methodsFor!

isCiBuild
	^(SessionManager current getenv: 'APPVEYOR') notNil! !

!XProgramming.SUnit.TestResource categoriesForMethods!
isCiBuild!helpers!public! !
!

!XProgramming.SUnit.TestResult methodsFor!

debugCase: aTestCase
	"Same as runCase:, but must pass out an errors so caught by the debugger"

	| start |
	aTestCase isDebug: true.
	start := Delay microsecondClockValue.
	
	[aTestCase runCase.
	self addPass: aTestCase duration: (Delay microsecondClockValue - start) microseconds]
			on: self class failure
			do: 
				[:signal |
				self
					addFailure: aTestCase
					signal: signal
					after: (Delay microsecondClockValue - start) microseconds.
				signal pass]
			on: self class error
			do: 
				[:signal |
				self
					addError: aTestCase
					signal: signal
					after: (Delay microsecondClockValue - start) microseconds.
				signal pass]
			on: self class skip
			do: 
				[:signal |
				self addSkip: aTestCase signal: signal.
				signal return]! !

!XProgramming.SUnit.TestResult categoriesForMethods!
debugCase:!public!running! !
!

!XProgramming.SUnit.TestSuite methodsFor!

displayOn: aPuttableStream
	aPuttableStream nextPutAll: self name! !

!XProgramming.SUnit.TestSuite categoriesForMethods!
displayOn:!displaying!public! !
!

"End of package definition"!

