| package |
package := Package name: 'CS ANSI Tests'.
package paxVersion: 1;
	basicComment: ''.

package basicScriptAt: #postinstall put: '| locator |
locator := FolderRelativeFileLocator basePath: self path.
#(''AnsiDB.st'' ''AnsiInit.st'') do: [:each | SourceManager default fileIn: (locator localFileSpecFor: each)]'.

package classNames
	add: #AbstractDictionaryHelper;
	add: #ArrayANSITest;
	add: #ArrayFactoryANSITest;
	add: #BagANSITest;
	add: #BagFactoryANSITest;
	add: #BooleanANSITest;
	add: #ByteArrayANSITest;
	add: #ByteArrayFactoryANSITest;
	add: #CharacterANSITest;
	add: #CharacterFactoryANSITest;
	add: #CollectionHelper;
	add: #CollectionStreamHelper;
	add: #CollectionTest;
	add: #DateAndTimeANSITest;
	add: #DateAndTimeFactoryANSITest;
	add: #DictionaryANSITest;
	add: #DictionaryFactoryANSITest;
	add: #DurationANSITest;
	add: #DurationFactoryANSITest;
	add: #DyadicValuableANSITest;
	add: #ErrorANSITest;
	add: #ErrorClassANSITest;
	add: #ExceptionANSITest;
	add: #ExceptionClassANSITest;
	add: #ExceptionSetANSITest;
	add: #ExtensibleCollectionHelper;
	add: #FailedMessageANSITest;
	add: #FileStreamFactoryANSITest;
	add: #FloatANSITest;
	add: #FloatCharacterizationANSITest;
	add: #FractionANSITest;
	add: #FractionFactoryANSITest;
	add: #GettableStreamHelper;
	add: #IdentityDictionaryANSITest;
	add: #IdentityDictionaryFactoryANSITest;
	add: #IntegerANSITest;
	add: #IntervalANSITest;
	add: #IntervalFactoryANSITest;
	add: #MainTestCase;
	add: #MessageNotUnderstoodANSITest;
	add: #MessageNotUnderstoodSelectorANSITest;
	add: #MonadicBlockANSITest;
	add: #MsgParmSpec;
	add: #MsgReturnRuleSpec;
	add: #MsgReturnSpec;
	add: #NiladicBlockANSITest;
	add: #NilANSITest;
	add: #NotificationANSITest;
	add: #NotificationClassANSITest;
	add: #ObjectANSITest;
	add: #ObjectClassANSITest;
	add: #ObjectHelper;
	add: #OrderedCollectionANSITest;
	add: #OrderedCollectionFactoryANSITest;
	add: #ProtocolANYSpec;
	add: #ProtocolMsgSpec;
	add: #ProtocolSpec;
	add: #PuttableStreamHelper;
	add: #ReadableStringHelper;
	add: #ReadFileStreamANSITest;
	add: #ReadStreamANSITest;
	add: #ReadStreamFactoryANSITest;
	add: #ReadStreamHelper;
	add: #ReadWriteStreamANSITest;
	add: #ReadWriteStreamFactoryANSITest;
	add: #ScaledDecimalANSITest;
	add: #SelectorANSITest;
	add: #SequencedCollectionHelper;
	add: #SequencedContractibleCollectionHelper;
	add: #SequencedReadableCollectionHelper;
	add: #SequencedReadableCollectionTest;
	add: #SequencedStreamHelper;
	add: #SequencedStreamTest;
	add: #SetANSITest;
	add: #SetFactoryANSITest;
	add: #SortedCollectionANSITest;
	add: #SortedCollectionFactoryANSITest;
	add: #StringANSITest;
	add: #StringFactoryANSITest;
	add: #SymbolANSITest;
	add: #TestCaseHelper;
	add: #TestCaseProtocol;
	add: #TranscriptANSITest;
	add: #WarningANSITest;
	add: #WarningClassANSITest;
	add: #WriteFileStreamANSITest;
	add: #WriteStreamANSITest;
	add: #WriteStreamFactoryANSITest;
	add: #WriteStreamHelper;
	add: #ZeroDivideANSITest;
	add: #ZeroDivideFactoryANSITest;
	yourself.

package methodNames
	add: #ClassDescription -> #addProtocolNamed:;
	add: #ClassDescription -> #ansiProtocolNames;
	add: #ClassDescription -> #ansiProtocolNames:;
	add: #ClassDescription -> #ansiProtocols;
	add: #ClassDescription -> #conformsToAnsiProtocolNamed:;
	add: #ClassDescription -> #definedAsProtocolNames;
	add: #ClassDescription -> #removeAnsiProtocolNamed:;
	add: #ClassDescription -> #removeAnsiProtocolNamed:ifAbsent:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\..\SUnit\SUnit'
	'..\..\SUnit\SUnitPreload').

package!

"Class Definitions"!

Object subclass: #MsgParmSpec
	instanceVariableNames: 'parmName parmProtocols parmAliasingAttribute'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #MsgReturnSpec
	instanceVariableNames: 'returnValueProtocols returnValueAliasingAttribute'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ProtocolANYSpec
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ProtocolMsgSpec
	instanceVariableNames: 'selector parameterSpecifications returnValueSpecifications specSections'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MsgReturnSpec subclass: #MsgReturnRuleSpec
	instanceVariableNames: 'ruleSourceCode ruleBlock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ProtocolANYSpec subclass: #ProtocolSpec
	instanceVariableNames: 'name conformsTo description messageSpecifications'
	classVariableNames: 'ClassProtocols DefaultConvTable FixNum OperatorTable Protocols UnaryConvTable UndefinedConformsToNames'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCase subclass: #TestCaseProtocol
	instanceVariableNames: ''
	classVariableNames: 'IsStrict'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseProtocol subclass: #MainTestCase
	instanceVariableNames: 'messages helpers'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseProtocol subclass: #TestCaseHelper
	instanceVariableNames: 'testCase'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'testSelectors'!
MainTestCase subclass: #ArrayFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #BagFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #BooleanANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ByteArrayFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #CharacterANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #CharacterFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #CollectionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #DateAndTimeANSITest
	instanceVariableNames: 'd19970426t8'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #DateAndTimeFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #DictionaryFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #DurationANSITest
	instanceVariableNames: 'off0123 smallInt2 largeNegInt2000000000 largePosInt2000000000 float2 fractionHalf numList'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #DurationFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #DyadicValuableANSITest
	instanceVariableNames: 'blk2args'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ErrorANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ErrorClassANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ExceptionANSITest
	instanceVariableNames: 'unchanged changed value exceptionClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ExceptionClassANSITest
	instanceVariableNames: 'exceptionClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ExceptionSetANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #FailedMessageANSITest
	instanceVariableNames: 'failedMsg'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #FileStreamFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #FloatANSITest
	instanceVariableNames: 'smallInt2 largeNegInt2000000000 largePosInt2000000000 float2 fractionHalf sclDec2s3 numList'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #FloatCharacterizationANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #FractionANSITest
	instanceVariableNames: 'smallInt2 largeNegInt2000000000 largePosInt2000000000 float2 fractionHalf sclDec2s3 numList'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #FractionFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #IdentityDictionaryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #IdentityDictionaryFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #IntegerANSITest
	instanceVariableNames: 'smallInt2 largeNegInt2000000000 largePosInt2000000000 float2 fractionHalf sclDec2s3 numList'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #IntervalFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #MessageNotUnderstoodANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #MessageNotUnderstoodSelectorANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #MonadicBlockANSITest
	instanceVariableNames: 'blk1args'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #NiladicBlockANSITest
	instanceVariableNames: 'blk0args canonicalObject'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #NilANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #NotificationANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #NotificationClassANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ObjectANSITest
	instanceVariableNames: 'object'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ObjectClassANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #OrderedCollectionFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ReadFileStreamANSITest
	instanceVariableNames: 'readFileStream'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ReadStreamFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ReadWriteStreamANSITest
	instanceVariableNames: 'readWriteStream'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ReadWriteStreamFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ScaledDecimalANSITest
	instanceVariableNames: 'smallInt2 largeNegInt2000000000 largePosInt2000000000 float2 fractionHalf sclDec2s3 numList'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #SelectorANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #SequencedStreamTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #SetFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #SortedCollectionFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #StringFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #TranscriptANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #WarningANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #WarningClassANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #WriteFileStreamANSITest
	instanceVariableNames: 'writeFileStream'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #WriteStreamFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ZeroDivideANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MainTestCase subclass: #ZeroDivideFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CollectionTest subclass: #BagANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CollectionTest subclass: #DictionaryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CollectionTest subclass: #IntervalANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CollectionTest subclass: #SequencedReadableCollectionTest
	instanceVariableNames: 'canonicalObjects'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CollectionTest subclass: #SetANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SequencedReadableCollectionTest subclass: #ArrayANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SequencedReadableCollectionTest subclass: #ByteArrayANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SequencedReadableCollectionTest subclass: #OrderedCollectionANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SequencedReadableCollectionTest subclass: #SortedCollectionANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SequencedReadableCollectionTest subclass: #StringANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SequencedReadableCollectionTest subclass: #SymbolANSITest
	instanceVariableNames: 'smalltalkSymbol'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SequencedStreamTest subclass: #ReadStreamANSITest
	instanceVariableNames: 'readStream'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SequencedStreamTest subclass: #WriteStreamANSITest
	instanceVariableNames: 'writeStream buffer'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #AbstractDictionaryHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #CollectionHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #CollectionStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #ExtensibleCollectionHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #GettableStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #ObjectHelper
	instanceVariableNames: 'object'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #PuttableStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #ReadableStringHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #ReadStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #SequencedCollectionHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #SequencedContractibleCollectionHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #SequencedReadableCollectionHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #SequencedStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCaseHelper subclass: #WriteStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!ClassDescription methodsFor!

addProtocolNamed: protocolName 
	"Add the protocol named, protocolName, to the list of protocols to which the receiver conforms."

	| tmpProtocolNames |
	#ACSProS.
	tmpProtocolNames := self ansiProtocolNames.
	tmpProtocolNames add: protocolName.
	self ansiProtocolNames: tmpProtocolNames!

ansiProtocolNames
	"Answer the names of protocols to which the receiver's instances directly conform. 
	Note: This excludes inherited protocols."

	| tmpList |
	tmpList := ProtocolSpec classProtocols at: self ifAbsent: [nil].
	tmpList isNil ifTrue: [^ProtocolSpec defaultProtocolNameCollection].
	^tmpList!

ansiProtocolNames: protocolNameList
	"Private - Set the names of protocols to which the receiver's instances directly conform to protocolNameList. 
	Note: This excludes inherited protocols. protocolNameList must be a <collection> of <symbol>s."

	(protocolNameList isKindOf: Set) ifFalse: [self error: 'Protocol name list not a Set.'].
	protocolNameList isEmpty
		ifTrue: [ProtocolSpec classProtocols removeKey: self ifAbsent: []]
		ifFalse: [ProtocolSpec classProtocols at: self put: protocolNameList]!

ansiProtocols
	"Answer the protocols to which the receiver's instances directly conform. 
	Note: This excludes inherited protocols."

	^ProtocolSpec protocolsInNameList: self ansiProtocolNames!

conformsToAnsiProtocolNamed: protocolName 
	"Answer whether the receiver conforms to the protocol named protocolName.
	Note: This includes inherited protocols."

	#ACSProS.
	^(self ansiProtocolNames includes: protocolName) 
		or: [self superclass notNil and: [self superclass conformsToAnsiProtocolNamed: protocolName]]!

definedAsProtocolNames
	"Answer the names of protocols to which the receiver's instances directly conform.  If it has no protocols, check super classes until protocols are found 
	Note: This excludes inherited protocols. 
	200/03/04 Harmon, R. Added."

	| tmpList |
	tmpList := ProtocolSpec classProtocols at: self ifAbsent: [nil].
	tmpList isNil ifTrue: [^self superclass definedAsProtocolNames].
	^tmpList!

removeAnsiProtocolNamed: protocolName
	"Remove the protocol named, protocolName, from the list of protocols to which the receiver conforms."

	self removeAnsiProtocolNamed: protocolName
		ifAbsent: [ProtocolSpec errorProtocolNotFound: protocolName]!

removeAnsiProtocolNamed: protocolName ifAbsent: notFoundBlock 
	"Remove the protocol named, protocolName, from the list of protocols to which the receiver conforms.  Evaluate notFoundBlock if not found."

	| tmpProtocolNames |
	#ACSProS.
	tmpProtocolNames := self ansiProtocolNames.
	tmpProtocolNames isEmpty ifTrue: [^notFoundBlock value].
	tmpProtocolNames remove: protocolName ifAbsent: [^notFoundBlock value].
	self ansiProtocolNames: tmpProtocolNames! !
!ClassDescription categoriesFor: #addProtocolNamed:!public! !
!ClassDescription categoriesFor: #ansiProtocolNames!protocols!public! !
!ClassDescription categoriesFor: #ansiProtocolNames:!public! !
!ClassDescription categoriesFor: #ansiProtocols!protocols!public! !
!ClassDescription categoriesFor: #conformsToAnsiProtocolNamed:!public! !
!ClassDescription categoriesFor: #definedAsProtocolNames!public! !
!ClassDescription categoriesFor: #removeAnsiProtocolNamed:!public! !
!ClassDescription categoriesFor: #removeAnsiProtocolNamed:ifAbsent:!public! !

"End of package definition"!

