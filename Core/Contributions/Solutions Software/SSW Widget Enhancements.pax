| package |
package := Package name: 'SSW Widget Enhancements'.
package paxVersion: 1;
	basicComment: '© Solutions Software/John Aspinall 2017
Provided under the same licence terms as Dolphin Smalltalk 7'.

package basicPackageVersion: '0.001'.


package classNames
	add: #EmulatedPushButton;
	add: #FormattedTextEdit;
	add: #IconWithExtent;
	add: #OwnerDrawnButton;
	add: #TextAndImageButton;
	yourself.

package methodNames
	add: #Canvas -> #clipTo:during:;
	add: #Canvas -> #erase:;
	add: #Canvas -> #erase:color:;
	add: #Canvas -> #prefixTextDisabled:at:;
	add: #ComboBox -> #cueBanner;
	add: #ComboBox -> #cueBanner:;
	add: #ComboBox -> #droppedWidth:;
	add: #ComboBox -> #hasCueBanner;
	add: #ControlView -> #freeTheme;
	add: #ControlView -> #hasTheme;
	add: #ControlView -> #onViewDestroyed;
	add: #ControlView -> #openTheme;
	add: #ControlView -> #theme;
	add: #ControlView -> #themePartName;
	add: #Date -> #shortString;
	add: #GDILibrary -> #getClipRgn:hrgn:;
	add: #Icon -> #asSmallIcon;
	add: #Icon -> #withExtent:;
	add: #KeyEvent -> #resendTo:;
	add: #NMTTDISPINFOA -> #lpszText;
	add: #NMTTDISPINFOW -> #lpszText;
	add: #NullConverter -> #isNullConverter;
	add: #PointEvent -> #resendTo:;
	add: #PushButton -> #alignment;
	add: #PushButton -> #alignment:;
	add: #PushButton -> #isRightButton;
	add: #PushButton -> #isRightButton:;
	add: #PushButton -> #themePartName;
	add: #PushButton -> #tipText;
	add: #PushButton -> #tipText:;
	add: #PushButton -> #ttnGetDispInfo:;
	add: #PushButton -> #wmNotify:wParam:lParam:;
	add: #SystemMetrics -> #hasListViewAlphaBlendedHighlights;
	add: #SystemMetrics -> #hasListViewHotTracking;
	add: #TextEdit -> #cueBanner;
	add: #TextEdit -> #cueBanner:;
	add: #TextEdit -> #hasCueBanner;
	add: #TypeConverter -> #isNullConverter;
	add: #View -> #addToolTipWithHandle:;
	add: #View -> #getUICuesState;
	add: #View -> #setUICuesState:;
	add: #View -> #shouldShowFocusRect;
	add: #View -> #shouldShowFocusRect:;
	add: #View -> #shouldShowKeyboardAccelerators;
	add: #View -> #tabPrevious;
	add: #VistaThemeLibrary -> #endBufferedAnimation:fUpdateTarget:;
	add: #VistaThemeLibrary -> #getThemeTransitionDuration:iPartId:iStateIdFrom:iStateIdTo:iPropId:pdwDuration:;
	add: #WinImageList -> #draw:on:at:extent:backcolor:forecolor:flags:;
	add: 'Color class' -> #buttonShadow;
	add: 'Color class' -> #grayText;
	add: 'Color class' -> #highlightText;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\Object Arts\Dolphin\Base\Dolphin';
	add: '..\..\Object Arts\Dolphin\MVP\Views\Common Controls\Dolphin Common Controls';
	add: '..\..\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter';
	add: '..\..\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\..\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter';
	add: '..\..\Object Arts\Dolphin\MVP\Views\Tooltips\Dolphin Tooltips';
	add: '..\..\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters';
	yourself).

package!

"Class Definitions"!

Icon subclass: #IconWithExtent
	instanceVariableNames: 'extent'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
PushButton subclass: #OwnerDrawnButton
	instanceVariableNames: 'displayState transitionDurations shouldShowKeyboardCues animationEndTime setFocusTime'
	classVariableNames: ''
	poolDictionaries: 'ThemeConstants'
	classInstanceVariableNames: ''!
OwnerDrawnButton subclass: #TextAndImageButton
	instanceVariableNames: 'imageExtent imageManager imageIndex dropDownMenu isMenuOpen'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TextAndImageButton subclass: #EmulatedPushButton
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TextEdit subclass: #FormattedTextEdit
	instanceVariableNames: 'isFormatting messageBubble format separatorChars placeholderChar'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Canvas methodsFor!

clipTo: aRectangle during: aBlock

	| oldClipRegion |

	oldClipRegion := Region empty.
	GDILibrary default getClipRgn: self asParameter hrgn: oldClipRegion asParameter.
	[self intersectClipRectangle: aRectangle.
	aBlock value] ensure: [self selectClipRegion: oldClipRegion]!

erase: aRectangle
	"Erase the receiver to the current background colour"

	self erase: aRectangle color: self backcolor!

erase: aRectangle color: aColor
	"Erase the receiver to the current background colour"

	self fillRectangle: aRectangle brush: (Brush color: aColor)!

prefixTextDisabled: aString at: aPoint

	^UserLibrary default 
		drawState: self asParameter
		hbr: nil 
		lpOutputFunc: 0 
		lData: aString asDword
		wData: 0 
		x: aPoint x y: aPoint y 
		cx: self extent x cy: self extent y
		fuFlags: DST_PREFIXTEXT | DSS_DISABLED! !
!Canvas categoriesFor: #clipTo:during:!drawing!public! !
!Canvas categoriesFor: #erase:!drawing!public! !
!Canvas categoriesFor: #erase:color:!drawing!public! !
!Canvas categoriesFor: #prefixTextDisabled:at:!drawing!public! !

!Color class methodsFor!

buttonShadow

	^self systemColor: 16 "COLOR_BTNSHADOW"!

grayText
	"Answer the Gray Text system color."

	^self systemColor: COLOR_GRAYTEXT!

highlightText
	"Answer the Highlight Text system color."

	^self systemColor: COLOR_HIGHLIGHTTEXT! !
!Color class categoriesFor: #buttonShadow!constants!public! !
!Color class categoriesFor: #grayText!constants!public! !
!Color class categoriesFor: #highlightText!constants!public! !

!ComboBox methodsFor!

cueBanner

	| string |

	string := UnicodeString new: 1024.

	^(self sendMessage: 16r1704 "CB_SETCUEBANNER" wParam: string yourAddress lParam: string size) = 1
		ifTrue: [string asString upTo: Character null]
		ifFalse: [nil]!

cueBanner: aString

	self sendMessage: 16r1703 "CB_SETCUEBANNER" wParam: 0 lpParam: aString asUnicodeString!

droppedWidth: anInteger

	self sendMessage: CB_SETDROPPEDWIDTH wParam: anInteger!

hasCueBanner

	^(self sendMessage: 16r1704 "CB_GETCUEBANNER" wParam: (UnicodeString new: 1024) yourAddress lParam: 1024) > 0! !
!ComboBox categoriesFor: #cueBanner!event handling!public! !
!ComboBox categoriesFor: #cueBanner:!event handling!public! !
!ComboBox categoriesFor: #droppedWidth:!hierarchy!public!sub views! !
!ComboBox categoriesFor: #hasCueBanner!public!testing! !

!ControlView methodsFor!

freeTheme

	self hasTheme ifTrue:
		[ThemeLibrary default closeThemeData: self theme.
		self removePropertyAt: #themeHandle]!

hasTheme

	^(self propertyAt: #themeHandle ifAbsent: [nil]) notNull!

onViewDestroyed

	self hasTheme ifTrue: [self freeTheme].

	super onViewDestroyed!

openTheme

	^self themePartName ifNotNil: [ :themePartName | self propertyAt: #themeHandle put: (ThemeLibrary default openThemeData: self asParameter pszClassList: themePartName asUnicodeString)]!

theme

	| theme |

	theme := self propertyAt: #themeHandle ifAbsent: [nil].
	^theme isNull 
		ifTrue: [self openTheme. self propertyAt: #themeHandle ifAbsent: [nil]]
		ifFalse: [theme]!

themePartName

	"Subclasses should override to enable theme support"

	^nil! !
!ControlView categoriesFor: #freeTheme!helpers!public! !
!ControlView categoriesFor: #hasTheme!public!testing! !
!ControlView categoriesFor: #onViewDestroyed!public!realizing/unrealizing! !
!ControlView categoriesFor: #openTheme!helpers!public! !
!ControlView categoriesFor: #theme!accessing!public! !
!ControlView categoriesFor: #themePartName!constants!public! !

!Date methodsFor!

shortString

	| stream |

	stream := WriteStream on: (String new: 10).

	self printOn: stream longPicture: false.

	^stream contents! !
!Date categoriesFor: #shortString!printing!public! !

!GDILibrary methodsFor!

getClipRgn: hdc hrgn: hRegion
	"The SelectClipRgn function selects a region as the current clipping region
	for the specified device context. 

	int GetClipRgn(
		HDC hdc		// handle of device context 
		HRGN hrgn		// handle of region   
	);"
	<stdcall: sdword GetClipRgn handle handle>
	^self invalidCall! !
!GDILibrary categoriesFor: #getClipRgn:hrgn:!public!win32 functions-clipping! !

!Icon methodsFor!

asSmallIcon

	^self withExtent: 16@16!

withExtent: aPoint

	^IconWithExtent new
		fileLocator: self fileLocator;
		identifier: self identifier;
		instanceHandle: self instanceHandle;
		extent: aPoint;
		yourself! !
!Icon categoriesFor: #asSmallIcon!converting!public! !
!Icon categoriesFor: #withExtent:!converting!public! !

!KeyEvent methodsFor!

resendTo: aView

	"Send this message onto aView"

	aView 
		sendMessage: message 
		wParam: wParam 
		lParam: lParam! !
!KeyEvent categoriesFor: #resendTo:!public!testing! !

!NMTTDISPINFOA methodsFor!

lpszText

	^bytes uintPtrAtOffset: ##(self offsetOf: #lpszText)! !
!NMTTDISPINFOA categoriesFor: #lpszText!accessing!public! !

!NMTTDISPINFOW methodsFor!

lpszText

	^bytes uintPtrAtOffset: ##(self offsetOf: #lpszText)! !
!NMTTDISPINFOW categoriesFor: #lpszText!accessing!public! !

!NullConverter methodsFor!

isNullConverter

	^true! !
!NullConverter categoriesFor: #isNullConverter!public!testing! !

!PointEvent methodsFor!

resendTo: aView

	"Send this message onto aView, translating the position"

	| newPoint newLParam |

	newLParam := DWORD fromInteger: lParam.
	newPoint := self window mapPoint: self position to: aView.
	newLParam 
		lowSWord: newPoint x;
		highSWord: newPoint y.

	aView 
		sendMessage: message 
		wParam: wParam 
		lParam: newLParam asInteger! !
!PointEvent categoriesFor: #resendTo:!accessing!private! !

!PushButton methodsFor!

alignment

	| style |

	style := self baseStyle bitAnd: BS_CENTER.

	style = BS_LEFT ifTrue: [^#left].
	style = BS_CENTER ifTrue: [^#center].
	style = BS_RIGHT ifTrue: [^#right].

	^#center!

alignment: aSymbol

	| mask |

	self baseStyleMask: BS_CENTER set: false.

	mask := 
		##(Dictionary new 
			at: #left put: BS_LEFT;
			at: #right put: BS_RIGHT;
			at: #center put: BS_CENTER;
			yourself) at: aSymbol ifAbsent: [BS_CENTER].

	self baseStyleMask: mask set: true!

isRightButton

	^(self baseStyle bitAnd: 16r20 "BS_RIGHTBUTTON") ~= 0!

isRightButton: aBoolean

	self baseStyleMask: 16r20 "BS_RIGHTBUTTON" set: aBoolean!

themePartName

	^#BUTTON!

tipText

	^self propertyAt: #tipText ifAbsent: [nil]!

tipText: aString

	aString isNil
		ifTrue: [self removePropertyAt: #tipText ifAbsent: []; removePropertyAt: #tipTextBuffer ifAbsent: []]
		ifFalse: [self propertyAt: #tipText put: aString]!

ttnGetDispInfo: anNMTTDISPINFO 
	"Private - Generic handler for the TTN_GETDISPINFO(A/W) notification message."

	^(anNMTTDISPINFO idIsHandle and: [anNMTTDISPINFO idFrom = self handle asInteger and: [self tipText notNil]]) 
	ifTrue: 
		[anNMTTDISPINFO text: self tipText. 
		"Note that we must keep a reference to the text string to prevent its premature death"
		anNMTTDISPINFO lpszText ifNotNil: [ :text | self propertyAt: #tipTextBuffer put: text].
		0]
	ifFalse: 
		[super ttnGetDispInfo: anNMTTDISPINFO]!

wmNotify: message wParam: wParam lParam: lParam
	"Private - Redirects WM_NOTIFY messages to the appropriate control as a notify message.
	Overridden here to handle notifications from the receiver's tool tip control which 
	does not itself have an associated View so cannot receive the redirected message.
	In any case it is more convenient to direct the notification to the receiver's
	#ttnNeedText: handler."

	| pnmhdr code |
	pnmhdr := lParam asExternalAddress.
	code := pnmhdr sdwordAtOffset: 8.
	(code == TTN_GETDISPINFOW or: [code == TTN_GETDISPINFOA]) ifTrue: [^self nmNotify: pnmhdr].
	^super wmNotify: message wParam: wParam lParam: lParam! !
!PushButton categoriesFor: #alignment!accessing-styles!public! !
!PushButton categoriesFor: #alignment:!accessing-styles!public! !
!PushButton categoriesFor: #isRightButton!accessing-styles!public! !
!PushButton categoriesFor: #isRightButton:!accessing-styles!public! !
!PushButton categoriesFor: #themePartName!constants!public! !
!PushButton categoriesFor: #tipText!accessing!public! !
!PushButton categoriesFor: #tipText:!accessing!public! !
!PushButton categoriesFor: #ttnGetDispInfo:!event handling-win32!private! !
!PushButton categoriesFor: #wmNotify:wParam:lParam:!event handling-win32!private! !

!SystemMetrics methodsFor!

hasListViewAlphaBlendedHighlights
	"Does the host support alpha-blended list view selection highlights?"

	^VMLibrary default isWindowsVistaOrGreater!

hasListViewHotTracking
	"Does the host support hot tracking in list views?"

	^VMLibrary default isWindowsVistaOrGreater! !
!SystemMetrics categoriesFor: #hasListViewAlphaBlendedHighlights!capability enquiries!public! !
!SystemMetrics categoriesFor: #hasListViewHotTracking!capability enquiries!public! !

!TextEdit methodsFor!

cueBanner

	| string |

	string := UnicodeString new: 1024.

	^(self sendMessage: 16r1502 "EM_GETCUEBANNER" wParam: string yourAddress lParam: string size) = 1
		ifTrue: [string asString upTo: Character null]
		ifFalse: [nil]!

cueBanner: aString

	self sendMessage: 16r1501"EM_SETCUEBANNER" wParam: false asParameter lParam: aString asUnicodeString yourAddress!

hasCueBanner

	^(self sendMessage: 16r1502 "EM_GETCUEBANNER" wParam: (UnicodeString new: 1024) yourAddress lParam: 1024) > 0! !
!TextEdit categoriesFor: #cueBanner!accessing!public! !
!TextEdit categoriesFor: #cueBanner:!accessing!public! !
!TextEdit categoriesFor: #hasCueBanner!public!testing! !

!TypeConverter methodsFor!

isNullConverter

	^false! !
!TypeConverter categoriesFor: #isNullConverter!public!testing! !

!View methodsFor!

addToolTipWithHandle: toolTipHandle

	"Add the specified tool tip to this view (typically but not necessarily a Button).
	The receiver will need to override wmNotify:wParam:lParam: to intercept requests for tip text (see PushButton extension in this package).
	Borrowed from cdemers 2/26/2003, based on code from Steve Waring and mm_aa."

	| toolInfo |

	(toolInfo := TOOLINFOA new)
		uFlags: 17; "TTF_IDISHWND | TTF_SUBCLASS"
		hwnd: self handle;
		uId: self handle;
		textCallback.
	UserLibrary default 
		sendMessage: toolTipHandle
		msg: 1028	"TTM_ADDTOOL"
		wParam: 0
		lParam: toolInfo yourAddress.	
	"cdemers - 2/26/2003 Allow multiline."
	UserLibrary default 
		sendMessage: toolTipHandle
		msg: 1048	"TTM_SETMAXTIPWIDTH"
		wParam: 0
		lParam: 500.
	UserLibrary default 
		sendMessage: toolTipHandle
		msg: (WM_USER + 3) "TTM_SETDELAYTIME"
		wParam: 2 "TTDT_AUTOPOP"
		lParam: 20000 "Default seems to be 5000 (5 secs) - this is a bit more reasonable".

	^toolTipHandle!

getUICuesState

	^self sendMessage: 16r0129 "WM_QUERYUISTATE" wParam: 0 lParam: 0!

setUICuesState: anInteger

	^self sendMessage: 16r0127 "WM_CHANGEUISTATE" wParam: anInteger lParam: 0!

shouldShowFocusRect

	^self getUICuesState noMask: 1 "UISF_HIDEFOCUS"!

shouldShowFocusRect: aBoolean

	self setUICuesState: (##(1 "UISF_HIDEFOCUS" bitShift: 16) bitOr: (aBoolean ifTrue: [2 "UIS_CLEAR"] ifFalse: [1 "UIS_SET"]))!

shouldShowKeyboardAccelerators

	^self getUICuesState noMask: 2 "UISF_HIDEACCEL"!

tabPrevious
	"Tab to the control before the receiver in the tab order of the parent."

	| parent previous |
	parent := self parentView.
	[parent notNil and: [previous isNil]] whileTrue: [
		previous := parent tabNextSiblingFrom: self forward: false.
		parent := parent parentView].
	previous isNil ifFalse: [previous tabFocus]! !
!View categoriesFor: #addToolTipWithHandle:!operations!public! !
!View categoriesFor: #getUICuesState!accessing!private! !
!View categoriesFor: #setUICuesState:!accessing!private! !
!View categoriesFor: #shouldShowFocusRect!public!testing! !
!View categoriesFor: #shouldShowFocusRect:!public!testing! !
!View categoriesFor: #shouldShowKeyboardAccelerators!public!testing! !
!View categoriesFor: #tabPrevious!commands!public! !

!VistaThemeLibrary methodsFor!

endBufferedAnimation: hBufferedPaint fUpdateTarget: fUpdateTarget
	"Invoke the EndBufferedAnimation() function of the module wrapped by the receiver.
	Helpstring: Ends a buffered animation operation.

		HRESULT __stdcall EndBufferedAnimation(
			[in]HANDLE hBufferedPaint,
			[in]BOOL fUpdateTarget);"

	<stdcall: hresult EndBufferedAnimation handle bool>
	^self invalidCall!

getThemeTransitionDuration: htheme iPartId: iPartId iStateIdFrom: iStateIdFrom iStateIdTo: iStateIdTo iPropId: iPropId pdwDuration: pdwDuration

	"Gets the duration for the specified transition.
	HRESULT GetThemeTransitionDuration(
		HTHEME hTheme,
		int    iPartId,
		int    iStateIdFrom,
		int    iStateIdTo,
		int    iPropId,
	_Out_ DWORD  *pdwDuration
	);"

	<stdcall: hresult GetThemeTransitionDuration handle sdword sdword sdword sdword sdword*>
	^self invalidCall! !
!VistaThemeLibrary categoriesFor: #endBufferedAnimation:fUpdateTarget:!public! !
!VistaThemeLibrary categoriesFor: #getThemeTransitionDuration:iPartId:iStateIdFrom:iStateIdTo:iPropId:pdwDuration:!public! !

!WinImageList methodsFor!

draw: imageIndexInteger on: aCanvas at: aPoint extent: exPoint backcolor: backColor forecolor: foreColor flags: flagsInteger 
	"Draw the image at one-based <integer> index, imageIndexInteger, in the receiver onto the
	<Canvas>, aCanvas, at the <Point> position, aPoint, using the foreground and background
	<Color>s foreColor and backColor respectively, with <integer> style flags, flagsInteger."

	^CommCtrlLibrary default 
		imageList_DrawEx: self asParameter
		i: imageIndexInteger - 1
		hdcDst: aCanvas asParameter
		x: aPoint x
		y: aPoint y
		dx: exPoint x
		dy: exPoint y
		rgbBk: (backColor isNil ifTrue: [CLR_NONE] ifFalse: [backColor asParameter])
		rgbFg: (foreColor isNil ifTrue: [CLR_DEFAULT] ifFalse: [foreColor asParameter])
		fStyle: flagsInteger! !
!WinImageList categoriesFor: #draw:on:at:extent:backcolor:forecolor:flags:!drawing-bitmaps!public! !

"End of package definition"!

