| package |
package := Package name: 'SSW EditableListView'.
package paxVersion: 1;
	basicComment: '© Solutions Software/John Aspinall 2018
Provided under the same licence terms as Dolphin Smalltalk 7'.

package basicPackageVersion: '7.1.0'.


package classNames
	add: #EditableListView;
	add: #EditableListViewColumn;
	add: #EmbeddedCheckBox;
	add: #EmbeddedCheckButton;
	add: #EmbeddedComboBox;
	add: #EmbeddedFormattedTextEdit;
	add: #EmbeddedMultilineTextEdit;
	add: #EmbeddedPushButton;
	add: #EmbeddedRadioButton;
	add: #EmbeddedTextEdit;
	yourself.

package methodNames
	add: #HeaderView -> #clearSortIconForColumnAtIndex:;
	add: #HeaderView -> #setSortIconForColumn:;
	add: #TextEdit -> #currentLine;
	add: #TextEdit -> #embeddedPreTranslateKeyboardInput:;
	add: #View -> #embeddedValue;
	add: #View -> #embeddedValue:;
	add: 'ListPresenter class' -> #resource_Editable_list_view;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\Object Arts\Dolphin\Base\Dolphin';
	add: '..\..\Object Arts\Dolphin\MVP\Views\Common Controls\Dolphin Common Controls';
	add: '..\..\Object Arts\Dolphin\MVP\Presenters\Date Time\Dolphin Date Time Presenters';
	add: '..\..\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models';
	add: '..\..\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter';
	add: '..\..\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\..\Object Arts\Dolphin\MVP\Presenters\Radio\Dolphin Radio Buttons';
	add: '..\..\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter';
	add: '..\..\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters';
	add: '..\..\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models';
	add: 'SSW ListView Extensions';
	add: 'SSW Widget Enhancements';
	yourself).

package setManualPrerequisites: #(
	'SSW ListView Extensions').

package!

"Class Definitions"!

ListViewColumn subclass: #EditableListViewColumn
	instanceVariableNames: 'isEditable setContentsBlock editor forecolor backcolor preDrawBlock getSortContentsBlock isEditableBlock events cachedParent isValidContentsBlock'
	classVariableNames: ''
	poolDictionaries: 'CommCtrlConstants'
	classInstanceVariableNames: ''!
EmulatedPushButton subclass: #EmbeddedPushButton
	instanceVariableNames: 'isDisplayingEmbedded embeddedRectangle embeddedDisplayState embeddedText text'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ComboBox subclass: #EmbeddedComboBox
	instanceVariableNames: 'choiceModel allowNilSelection'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ListView subclass: #EditableListView
	instanceVariableNames: 'activeEditorCoords originalColumns _spare0 rowForecolor rowBackcolor rowHeight smallImageExtent headerControl hotItemAndColumn tipText'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CheckButton subclass: #EmbeddedCheckButton
	instanceVariableNames: 'textExtent text isAlwaysDrawnEnabled buttonExtent'
	classVariableNames: ''
	poolDictionaries: 'ThemeConstants'
	classInstanceVariableNames: ''!
EmbeddedCheckButton subclass: #EmbeddedCheckBox
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
EmbeddedCheckButton subclass: #EmbeddedRadioButton
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TextEdit subclass: #EmbeddedTextEdit
	instanceVariableNames: 'offset'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
FormattedTextEdit subclass: #EmbeddedFormattedTextEdit
	instanceVariableNames: 'offset'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MultilineTextEdit subclass: #EmbeddedMultilineTextEdit
	instanceVariableNames: 'column'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!HeaderView methodsFor!

clearSortIconForColumnAtIndex: anInteger

	(self columnHeader: anInteger) sortIndicator: nil!

setSortIconForColumn: aListViewColumn

	aListViewColumn isSortOrderInverted
		ifTrue: [(self columnHeader: aListViewColumn index) sortIndicator: #down]
		ifFalse: [(self columnHeader: aListViewColumn index) sortIndicator: #up]! !
!HeaderView categoriesFor: #clearSortIconForColumnAtIndex:!helpers!private! !
!HeaderView categoriesFor: #setSortIconForColumn:!helpers!private! !

!ListPresenter class methodsFor!

resource_Editable_list_view
	"Answer the literal data from which the 'Editable list view' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Editable_list_view)
	"

	^#(#'!!STL' 3 788558 10 ##(STBViewProxy)  8 ##(EditableListView)  98 38 0 0 98 2 8 1140920397 1025 416 590662 2 ##(ListModel)  202 208 98 0 0 1114638 ##(STBSingletonProxy)  8 ##(SearchPolicy)  8 #identity 524550 ##(ColorRef)  8 4278190080 0 7 0 0 0 416 0 8 4294902721 8 ##(BasicListAbstract)  8 ##(IconicListAbstract)  570 8 ##(IconImageManager)  8 #current 0 0 0 328198 ##(Point)  65 65 0 0 202 208 98 1 1447494 14 ##(EditableListViewColumn)  8 'Column 1' 201 8 #left 688 8 ##(SortedCollection)  0 0 416 0 1 0 0 16 0 1052998 13 ##(EmbeddedTextEdit)  0 0 98 2 134349057 1 928 721990 2 ##(ValueHolder)  0 32 570 592 8 #equality 0 0 0 5 0 0 0 928 0 0 852486 ##(NullConverter)  0 8 '' 1 0 0 0 0 0 0 0 0 8 #report 544 0 131171 0 0 0 202 208 544 0 0 0 3 0 0 983302 ##(MessageSequence)  202 208 98 2 721670 ##(MessageSend)  8 #createAt:extent: 98 2 770 11 11 770 491 311 416 1170 8 #text: 98 1 8 'Column 1' 416 983302 ##(WINDOWPLACEMENT)  8 #[44 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 5 0 0 0 5 0 0 0 250 0 0 0 160 0 0 0] 98 0 770 193 193 0 29 )! !
!ListPresenter class categoriesFor: #resource_Editable_list_view!public!resources-views! !

!TextEdit methodsFor!

currentLine

	"Single line by default"

	^1!

embeddedPreTranslateKeyboardInput: aMSG

	aMSG message = WM_KEYDOWN ifTrue:
		[| key action |
		key := aMSG wParam.
		key = VK_TAB ifTrue:
			[Keyboard default isShiftDown
				ifTrue: [action := MessageSend receiver: self parentView selector: #fieldExitPrevTabbed: arguments: #(true)]
				ifFalse: [action := MessageSend receiver: self parentView selector: #fieldExitNextTabbed: arguments: #(true)]].
		(key = VK_RIGHT and: [self caretPosition > self plainText size]) ifTrue: [action := MessageSend receiver: self parentView selector: #fieldExitNextTabbed: arguments: #(false)].

		key = VK_LEFT ifTrue:
			[(self selectionRange isEmpty and: [self caretPosition = 1]) 
			ifTrue: 
				[action := MessageSend receiver: self parentView selector: #fieldExitPrevTabbed: arguments: #(false)]
			ifFalse: 
				[(Keyboard default isShiftDown not and: [self basicSelectionRange = (0 to: self textLength)]) ifTrue: 
					[action := MessageSend receiver: self selector: #caretPosition: arguments: #(1)]]].

		(key = VK_UP and: [self currentLine = 1]) ifTrue: [action := MessageSend receiver: self parentView selector: #fieldExitUp].
		(key = VK_DOWN and: [self currentLine = self lineCount]) ifTrue: [action := MessageSend receiver: self parentView selector: #fieldExitDown].
		key = VK_ESCAPE ifTrue: [action := [self undo; selectAll]].
		action notNil ifTrue:
			[SessionManager inputState queueDeferredAction: action.
			^true]].

	^super preTranslateKeyboardInput: aMSG! !
!TextEdit categoriesFor: #currentLine!accessing!public! !
!TextEdit categoriesFor: #embeddedPreTranslateKeyboardInput:!event handling!public! !

!View methodsFor!

embeddedValue

	^self model value!

embeddedValue: anObject

	self model setValue: anObject.
	self refreshContents! !
!View categoriesFor: #embeddedValue!hierarchy!public!sub views! !
!View categoriesFor: #embeddedValue:!hierarchy!public!sub views! !

"End of package definition"!

