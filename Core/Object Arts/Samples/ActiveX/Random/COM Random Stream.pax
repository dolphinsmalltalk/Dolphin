| package |
package := Package name: 'COM Random Stream'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Random Stream COM Server Sample
Copyright (c) Object Arts Ltd, 1997-2025. Portions copyright CGI Group (Europe) Ltd, 1997.

The RandomStream Sample demonstrates Dolphin''s basic COM facilities (i.e. calling and implementation of COM interfaces, class factories, automatic reference counting, etc).

N.B. This package must be distributed with its type library, Random.tlb, if it is to be invoked from another process, e.g. VB. The typelib can be built into an in-process DLL (see example below), and then the result registered with `regsvr32.exe` before use.

The package provides client (IRandomStream) and server (COMRandomStream) implementations of a simple Random Number Generator object. The interface is OLE automation compatible, and can therefore be used without a marshalling DLL if the supplied type library is first registered.

This sample is compatible with Visual Basic 5 and later. When VB (or another tool) is used as a client then for development purposes Dolphin can be started automatically in embedded (headless) mode and will act as the server. Dolphin automatically registers the class factory when this package is installed (see the post install script to see how this is done). When you release the last interface pointer from a client then Dolphin should close down automatically.

## Development

You can use Dolphin as both client and server (although note that a deployed Dolphin DLL can only be consumed in Dolphin in To Go form, as the development VM cannot load more than one image):
```
r := OS.COM.Examples.IRandomStream2 new.
r next 	"Debug it (F11), to step through the COM callout and call-in stack"
```

To debug/test the server from another client, first register the component from your development image:
 ```
OS.COM.Examples.RandomStream registerComServer
```

This will register IPDolphin.dll as the in-proc server for the COM component, including an additional regkey that details the path to the development image. IPDolphin uses this to locate and load the standard VM and development image to launch when a client creates an instance of the COM component.

Having registered the sample component for development hosting, shutdown the development image and start the `RandomVBClient.exe` found in the package folder. This should launch the Dolphin development image in-proc into the VB process. Your last saved image state, including any open windows, will be restored as usual. You can now set breakpoints in the methods of the `RandomStream` class (e.g. `RandomStream>>#Next:`), and debug client calls into the component. When you close the VB client, you''ll be prompted to Save the Image, but the usual option to cancel will not be available. If you close the development image before the VB client, the latter won''t crash immediately, but pressing any of its buttons will generate an error and it will then shut down.

## Deployment as DLL:

```
Smalltalk developmentSystem saveImage.	"Save the image if you don''t want to lose changes"
OS.COM.ClassFactory revokeAll.
(AXDllImageStripper new)
	rootPackage: OS.COM.Examples.IRandomStream owningPackage;
	executableName: ''DRandom.dll'';
	typeLibPath: OS.COM.Examples.IRandomStream typeLibraryPath;
	stripDeprecatedMethods: true;
	"logReferencesToClasses: true;"
	deploy
```

Now register the built DLL:
```
	regsvr32 drandom.dll
```

You can now start a new Dolphin development session and test the DLL:

```
	"Check that drandom.dll is not loaded"
	Kernel32 getModuleHandle: ''drandom.dll''. "Display-it - should be nil"
	"First revoke the class factory in the development image (otherwise it will serve requests for the component)"
	OS.COM.Examples.RandomStream revokeClassFactories.
	"Now create an instance - this will cause drandom.dll to be loaded. "
	rand := OS.COM.Examples.IRandomStream2 new.
	"Check that the DLL loaded"
	Kernel32 getModuleHandle: ''drandom.dll''. "Display-it - should be non-nil handle"
	"Check the functionality"
	(1 to: 6) collect: [:i | rand next]. "Display-it - should be #(26 9 16 27 46 9) off a seed of 1"
	rand seed. "Display-it"
	rand seed: 1.	"Evaluate-it to reset the seed"
	(1 to: 6) collect: [:i | rand next]. "Display-it should show the same sequence of numbers #(26 9 16 27 46 9)"
	"Free the COM object"
	rand free.
	"Unload the library"
	 OS.COM.Ole32 coFreeUnusedLibrariesEx: 5000 dwReserved: 0.
	"Check that the library unloaded"
	Kernel32 getModuleHandle: ''drandom.dll''. "Display-it - should be nil"
```	

You can also test the DLL in the ancient VB6 client that can be found in the package folder, `RandomVBClient.exe`


And to examine the content: 

```
Smalltalk developmentSystem browseDeploymentLog: ''DRandom.xml''
"Or view the log"
UI.Examples.XmlPad openOn: ''DRandom.xml''
```
'.

package basicScriptAt: #postinstall put: 'OS.COM.Examples.RandomStream registerClassFactory'.
package basicScriptAt: #preuninstall put: '"Revoke the class factory registration."
OS.COM.Examples.RandomStream revokeClassFactories'.

package setClassNames: #(
	#{OS.COM.Examples.IRandomStream}
	#{OS.COM.Examples.IRandomStream2}
	#{OS.COM.Examples.RandomStream}
).

package setVariableNames: #(
	#{OS.COM.Examples.RANDOMLib}
).

package setBinaryVariableNames: #(
	#{OS.COM.Examples.RANDOMLib}
).

package setPrerequisites: #(
	'..\..\..\Dolphin\ActiveX\Automation\ActiveX Automation'
	'..\COM Examples'
	'..\..\..\Dolphin\Base\Dolphin'
	'..\..\..\Dolphin\System\Random\Dolphin Random Stream'
	'..\..\..\Dolphin\ActiveX\COM\OLE COM'
).

package!

"Class Definitions"!

OS.COM.DualInterfaceImplementation
	subclass: #'OS.COM.Examples.RandomStream'
	instanceVariableNames: 'lowerBound upperBound stream'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IDispatch
	subclass: #'OS.COM.Examples.IRandomStream'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.Examples.IRandomStream
	subclass: #'OS.COM.Examples.IRandomStream2'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"End of package definition"!

