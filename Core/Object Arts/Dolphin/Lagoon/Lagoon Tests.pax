| package |
package := Package name: 'Lagoon Tests'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{Tools.Tests.CRTLibraryImportTest}
	#{Tools.Tests.LagoonTests}
	#{Tools.Tests.PackageClosureTests}
).

package setMethodNames: #(
	#(#{Refactory.Browser.BrowserEnvironment} #forPackagesDeployment:)
	#(#{Smalltalk.ImageStripper class} #newForTests)
).

package setPrerequisites: #(
	'..\IDE\Base\Development System'
	'..\IDE\Base\Development System Tests'
	'..\Base\Dolphin'
	'..\Base\Tests\Dolphin Base Tests'
	'..\..\Samples\MVP\Etch-a-Sketch\Etch-a-Sketch'
	'..\..\Samples\MVP\Hello World\Hello World'
	'..\..\Samples\Console\Hello World\Hello World (Console)'
	'..\MVP\Icons\Internal Bitmaps and Icons'
	'Lagoon Image Stripper'
	'..\..\Samples\MVP\Notepad\Notepad'
	'..\..\..\Contributions\Refactory\Refactoring Browser\Environments\RBEnvironments'
	'..\..\..\Contributions\Refactory\RBNamespaces'
	'..\..\Samples\MVP\RegEdit\RegEdit'
	'..\..\Samples\ActiveX\Web Browser\Simple Web Browser'
).

package!

"Class Definitions"!

Core.Tests.DolphinTest subclass: #'Tools.Tests.CRTLibraryImportTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #'Tools.Tests.LagoonTests'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #'Tools.Tests.PackageClosureTests'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{Refactory.Browser private})
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Refactory.Browser.BrowserEnvironment methodsFor!

forPackagesDeployment: aCollectionOfPackages
	| deployed names devMethods removedClasses |
	"The in-scope world is drawn from the slice of the classes & methods that are in the requested packages and their pre-reqs"
	deployed := self forPackagesClosure: aCollectionOfPackages.
	"Classes categorised as 'Development' are excluded"
	deployed := deployed & (self forCategories: #('Development' 'System-Compiler')) not.
	"Assume configured to remove ClassBuilder and Compiler"
	removedClasses := Set new.
	{ClassBuilder. MethodProtocol. Category} do: 
			[:each |
			removedClasses
				addAll: each withAllSubclasses;
				addAll: each class withAllSubclasses].
	deployed := deployed & (self forClasses: removedClasses) not.
	"Finally, certain categories of method and specific methods are forcibly removed, or we assume (for the purposes of the test) that these will be removed as unused"
	devMethods := self
				forMethodCategories: Smalltalk.ImageStripper developmentMethodCategoryNames
						, Smalltalk.ImageStripper classBuildingMethodCategoryNames
							, Smalltalk.ImageStripper classRemovingMethodCategoryNames
							, #('class initialization' 'template definition' 'source filing' 'source filing-methods' 'compiling' 'categories-accessing' 'categories-removing' 'categories-adding' 'categories-testing' 'source filing-class definition').
	devMethods := devMethods
				| (self selectMethods: [:each | each selector == #initialize and: [each methodClass isMeta]])
					& (self forMethodCategories: #('must not strip')) not.
	"We can speed things up a bit by taking a snapshot of the devMethods environment."
	devMethods := self forMethodsIn: devMethods.
	"Custom handling for class initialize methods"
	deployed := deployed & devMethods not.
	"As before, reify the environment to speed things up as we will enumerate it more than once."
	deployed := self forMethodsIn: deployed.
	names := (aCollectionOfPackages collect: [:each | each name]) asSortedArray.
	deployed
		label: 'App deployed from ' , (names size = 1 ifTrue: [names first] ifFalse: [names]) printString.
	^deployed! !
!Refactory.Browser.BrowserEnvironment categoriesForMethods!
forPackagesDeployment:!helpers!public! !
!

!ImageStripper class methodsFor!

newForTests

	^self new initializeForTests! !
!ImageStripper class categoriesForMethods!
newForTests!public! !
!

"End of package definition"!

