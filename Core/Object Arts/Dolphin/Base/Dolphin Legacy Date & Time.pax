| package |
package := Package name: 'Dolphin Legacy Date & Time'.
package paxVersion: 1;
	basicComment: 'Dolphin Smalltalk legacy Date and Time.
Copyright (c) Object Arts Ltd. 1997-2019

Traditional Smalltalk-80 style `Date` and `Time` classes. These are largely superceded by ANSI compliant `DateAndTime` and `Duration`.'.


package classNames
	add: #Date;
	add: #Time;
	yourself.

package methodNames
	add: #BlockClosure -> #millisecondsToRepeat:;
	add: #DateAndTime -> #asDate;
	add: #DateAndTime -> #asTime;
	add: #SYSTEMTIME -> #asDate;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'Dolphin').

package!

"Class Definitions"!

Magnitude subclass: #Date
	instanceVariableNames: 'days'
	classVariableNames: 'DaysInMonth DaysUntilMonth DefaultLongPicture YearPivot'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Magnitude subclass: #Time
	instanceVariableNames: 'seconds'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!BlockClosure methodsFor!

millisecondsToRepeat: anInteger
	"Answer the time taken to execute the receiver anInteger times"

	^Time millisecondsToRun: [ anInteger timesRepeat: [self value]]! !
!BlockClosure categoriesFor: #millisecondsToRepeat:!development!public! !

!DateAndTime methodsFor!

asDate
	"Answer a <Date> representing the date of the receiver. The <Date> will be that at the receiver's offset, so:
		- if a date in the local timezone is needed, send #asLocal first (i.e. `dateAndTime asLocal asDate`)
		- if a UTC date is needed, send #asUTC first (i.e. `dateAndTime asUTC asDate`)."

	^self dayMonthYearDo: 
			[:d :m :y |
			Date
				newDay: d
				monthIndex: m
				year: y]!

asTime
	"Answer a <Time> representing the local time of the receiver. The <Time> will be that at the receiver's offset, so:
		- if a time in the local timezone is needed and the DateAndTime, send #asLocal first (i.e. `dateAndTime asLocal asTime`)
		- if a UTC time is needed, send #asUTC first (i.e. `dateAndTime asUTC asTime`)."

	^Time fromSeconds: seconds! !
!DateAndTime categoriesFor: #asDate!converting!public! !
!DateAndTime categoriesFor: #asTime!converting!public! !

!SYSTEMTIME methodsFor!

asDate
	"Answer a <Date> corresponding to the receiver's date."

	^Date fromSYSTEMTIME: self! !
!SYSTEMTIME categoriesFor: #asDate!converting!public! !

"End of package definition"!

