| package |
package := Package name: 'Dolphin Legacy Date & Time'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk legacy Date and Time.
Copyright (c) Object Arts Ltd. 1997-2019

Traditional Smalltalk-80 style `Date` and `Time` classes. These are largely superceded by ANSI compliant `DateAndTime` and `Duration`.'.


package setClassNames: #(
	#{Core.Date}
	#{Core.Time}
	#{Core.TimeStamp}
).

package setMethodNames: #(
	#(#{Core.DateAndTime} #asDate)
	#(#{Core.DateAndTime} #asTime)
	#(#{Core.DateAndTime} #asTimeStamp)
	#(#{Kernel.BlockClosure} #millisecondsToRepeat:)
	#(#{OS.SYSTEMTIME} #asDate)
	#(#{OS.SYSTEMTIME} #asTimeStamp)
).

package setPrerequisites: #(
	'Dolphin'
).

package!

"Class Definitions"!

Core.Magnitude
	subclass: #'Core.Date'
	instanceVariableNames: 'days'
	classVariableNames: 'DaysInMonth DaysUntilMonth DefaultLongPicture YearPivot'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Magnitude
	subclass: #'Core.Time'
	instanceVariableNames: 'seconds'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Magnitude
	subclass: #'Core.TimeStamp'
	instanceVariableNames: 'date time'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.DateAndTime methodsFor!

asDate
	"Answer a <Date> representing the date of the receiver. The <Date> will be that at the receiver's offset, so:
		- if a date in the local timezone is needed, send #asLocal first (i.e. `dateAndTime asLocal asDate`)
		- if a UTC date is needed, send #asUTC first (i.e. `dateAndTime asUTC asDate`)."

	^self dayMonthYearDo: 
			[:d :m :y |
			Date
				newDay: d
				monthIndex: m
				year: y]!

asTime
	"Answer a <Time> representing the local time of the receiver. The <Time> will be that at the receiver's offset, so:
		- if a time in the local timezone is needed and the DateAndTime, send #asLocal first (i.e. `dateAndTime asLocal asTime`)
		- if a UTC time is needed, send #asUTC first (i.e. `dateAndTime asUTC asTime`)."

	^Time fromSeconds: seconds!

asTimeStamp
	"Answer a <TimeStamp> representing the local date and time of the receiver. The <TimeStamp> will be that at the receiver's offset, so:
		- if a date/time in the local timezone is needed, send #asLocal first (i.e. `dateAndTime asLocal asTimeStamp`)
		- if a UTC date/time is needed, send #asUTC first (i.e. `dateAndTime asUTC asTimeStamp`)."

	^TimeStamp date: self asDate time: self asTime! !
!Core.DateAndTime categoriesForMethods!
asDate!converting!public! !
asTime!converting!public! !
asTimeStamp!converting!public! !
!

!Kernel.BlockClosure methodsFor!

millisecondsToRepeat: anInteger
	"Answer the time taken to execute the receiver anInteger times"

	^Time millisecondsToRun: [anInteger timesRepeat: [self value]]! !
!Kernel.BlockClosure categoriesForMethods!
millisecondsToRepeat:!development!public! !
!

!OS.SYSTEMTIME methodsFor!

asDate
	"Answer a <Date> corresponding to the receiver's date."

	^Date fromSYSTEMTIME: self!

asTimeStamp
	"Answer a <TimeStamp> corresponding to the receiver's point in time."

	^self asDateAndTime asTimeStamp! !
!OS.SYSTEMTIME categoriesForMethods!
asDate!converting!public! !
asTimeStamp!converting!public! !
!

"End of package definition"!

