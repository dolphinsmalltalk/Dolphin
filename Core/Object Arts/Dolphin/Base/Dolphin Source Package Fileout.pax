| package |
package := Package name: 'Dolphin Source Package Fileout'.
package paxVersion: 2.1;
	basicComment: 'Dolphin Source Package Fileout
Copyright (c) Object Arts Ltd. 1997-2016

Support for filing out packages in individual source file (.pax) format'.

package basicScriptAt: #postinstall put: '(MethodProtocol name: #sourceObject)
	addAllSelectors: #(#canFileOut #fileOut #fileOutName #isChanged #isChanged: #owningPackage);
	addClass: Class;
	addClass: Package'.

package setMethodNames: #(
	#(#{Core.Class} #canFileOut)
	#(#{Core.Class} #fileOut)
	#(#{Kernel.AbstractChunkSourceFiler} #emitCategories:for:in:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageAboutBlock:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageClassNames:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageDescription:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageManualPrerequisites:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageMethodNames:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageNames:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackagePrerequisiteNames:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageScripts:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageStripperBytes:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageUntracedVariables:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageVariableNames:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageVariableNameSubsets:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageVariableReference:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPackageVersion:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPaxAttributes:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitPaxPackage:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitVersionNumber:)
	#(#{Kernel.AbstractChunkSourceFiler} #methodNameSortBlock:)
	#(#{Kernel.ChunkSourceFiler} #emitPackageBinaryVariables:)
	#(#{Kernel.ChunkSourceFiler} #emitPackageClassNames:)
	#(#{Kernel.ChunkSourceFiler} #emitPackageCollection:initializer:)
	#(#{Kernel.ChunkSourceFiler} #emitPackageManualPrerequisites:)
	#(#{Kernel.ChunkSourceFiler} #emitPackageMethodNames:)
	#(#{Kernel.ChunkSourceFiler} #emitPackageNameCollection:initializer:)
	#(#{Kernel.ChunkSourceFiler} #emitPackagePrerequisiteNames:)
	#(#{Kernel.ChunkSourceFiler} #emitPackageUntracedVariables:)
	#(#{Kernel.ChunkSourceFiler} #emitPackageVariableNames:)
	#(#{Kernel.ChunkSourceFiler} #emitPackageVariableNameSubsets:)
	#(#{Kernel.ChunkSourceFiler} #emitPaxAttributes:)
	#(#{Kernel.Package} #allFileOutNames)
	#(#{Kernel.Package} #beNotUsingPAX)
	#(#{Kernel.Package} #beUsingPAX)
	#(#{Kernel.Package} #canFileOut)
	#(#{Kernel.Package} #checkTimestamps)
	#(#{Kernel.Package} #createPackagePath)
	#(#{Kernel.Package} #dotPacPath)
	#(#{Kernel.Package} #fileModificationTime)
	#(#{Kernel.Package} #fileOut)
	#(#{Kernel.Package} #fileOutAll)
	#(#{Kernel.Package} #fileOutAllChanged)
	#(#{Kernel.Package} #fileOutBinaryVariables)
	#(#{Kernel.Package} #fileOutBootDefinitions)
	#(#{Kernel.Package} #fileOutNames)
	#(#{Kernel.Package} #fileOutOn:)
	#(#{Kernel.Package} #isLegacySourceFormat:)
	#(#{Kernel.Package} #isRenegade)
	#(#{Kernel.Package} #isUsingPAX)
	#(#{Kernel.Package} #isUsingPAX:)
	#(#{Kernel.Package} #save)
	#(#{Kernel.Package} #saveAs:)
	#(#{Kernel.Package} #saveChanges)
	#(#{Kernel.Package} #savePAC)
	#(#{Kernel.Package} #savePAX)
	#(#{Kernel.Package} #saveSingleFilePackage)
	#(#{Kernel.Package} #updateTimestamp)
	#(#{Kernel.SourceFiler} #emitPackageBinaryVariables:)
	#(#{Kernel.SourceFiler} #emitPackageDescription:)
	#(#{Kernel.SourceFiler} #fileOutClass:ofPackage:)
	#(#{Kernel.SourceFiler} #fileOutDefinitionOfPackage:)
	#(#{Kernel.SourceFiler} #fileOutPackage:)
	#(#{Kernel.SourceFiler} #fileOutPackage:methodsOfClass:)
	#(#{Kernel.SourceFiler} #fileOutPackageClassDefinitions:)
	#(#{Kernel.SourceFiler} #fileOutPackageClasses:)
	#(#{Kernel.SourceFiler} #fileOutPackageMethods:)
	#(#{Kernel.SourceFiler} #fileOutPackageSourceVariables:)
	#(#{Kernel.SourceFiler} #fileOutPackageVariableAliases:)
	#(#{Kernel.SourceFiler} #packageClassesInFileoutOrder:)
	#(#{Kernel.SourceFiler} #storeCommentString:forPackage:)
	#(#{Kernel.SourceManager} #fileOutPackagedClass:)
	#(#{Kernel.SourceManager} #fileOutPackagedClass:to:)
).

package setPrerequisites: #(
	'Dolphin'
	'Dolphin Message Box'
	'Dolphin Source Fileout'
	'..\System\STON\Dolphin STON-Core'
).

package!

"Loose Methods"!

!Core.Class methodsFor!

canFileOut
	"Answer true if the receiver can be filed out. At this stage we just check to ensure that
	the file out file is writeable"

	^File isWriteable: self fileOutName!

fileOut
	"File out the receiver's definition to a class file in the receiver's
	package directory."

	self sourceManager fileOutPackagedClass: self! !
!Core.Class categoriesForMethods!
canFileOut!public!source filing! !
fileOut!public!source filing! !
!

!Kernel.AbstractChunkSourceFiler methodsFor!

emitCategories: aCollection for: aSymbol in: aClass
	stream nextPut: $!!.
	self emitClassName: aClass.
	stream
		space;
		nextPutAll: #categoriesFor:;
		space.
	"#2144."
	self emitString: aSymbol printString.
	stream nextPut: $!!.
	aCollection asSortedCollection do: [:each | self nextChunkPut: each name].
	self endChunk!

emitPackageAboutBlock: aPackage
	aPackage aboutBlock
		ifNotNil: 
			[:aboutBlock |
			stream nextPutAll: 'package aboutBlockBytes: '.
			aboutBlock binaryStoreBytes base64StoreOn: stream.
			stream
				nextPut: $.;
				cr]!

emitPackageClassNames: aPackage 
	self subclassResponsibility!

emitPackageDescription: aPackage
	"Private - File out a description of the <Package> argument to the receiver's stream in PAX source file format. This is in the form of a chunk which, when re-evaluated, creates an equivalent package description in a state which can be used for comparision or loading, etc. None of the code in the package, with the exception of the package scripts, is included. None of the code, including the package scripts, is evaluated."

	self emitPaxPackage: aPackage.
	self emitPackageVersion: aPackage.
	self emitPackageAboutBlock: aPackage.
	self emitPackageStripperBytes: aPackage.
	self emitPackageScripts: aPackage.
	self emitPackageNames: aPackage.
	self emitPackageVariableNameSubsets: aPackage.
	self emitPackagePrerequisiteNames: aPackage.
	self emitPackageManualPrerequisites: aPackage.
	self emitPackageUntracedVariables: aPackage.

	"Finish off the chunk by answering the package loaded"
	stream
		nextPutAll: 'package!!';
		cr;
		cr!

emitPackageManualPrerequisites: aPackage
	"Private - File out the names of any manually configured pre-requisite packages of the <Package> argument onto the receiver's stream."

	self subclassResponsibility!

emitPackageMethodNames: aPackage
	self subclassResponsibility!

emitPackageNames: aPackage
	self emitPackageClassNames: aPackage.
	self emitPackageMethodNames: aPackage.
	self emitPackageVariableNames: aPackage
!

emitPackagePrerequisiteNames: aPackage
	self subclassResponsibility!

emitPackageScripts: aPackage
	aPackage scripts keys asSortedCollection do: 
			[:each |
			stream
				nextPutAll: 'package basicScriptAt: ';
				print: each;
				nextPutAll: ' put: '.
			self emitString: (aPackage scriptAt: each) printString.
			stream
				nextPut: $.;
				cr].
	stream cr!

emitPackageStripperBytes: aPackage
	aPackage imageStripperBytes
		ifNotNil: 
			[:bytes |
			stream nextPutAll: 'package imageStripperBytes: '.
			bytes base64StoreOn: stream.
			stream
				nextPut: $.;
				cr]!

emitPackageUntracedVariables: aPackage
	self subclassResponsibility!

emitPackageVariableNames: aPackage
	self subclassResponsibility!

emitPackageVariableNameSubsets: aPackage
	self subclassResponsibility!

emitPackageVariableReference: aBindingReference
	aBindingReference displayOn: stream!

emitPackageVersion: aPackage
	aPackage basicPackageVersion
		ifNotNil: 
			[:ver |
			stream
				nextPutAll: 'package ';
				nextPutAll: #basicPackageVersion:;
				space.
			self emitVersionNumber: ver.
			stream
				nextPut: $.;
				cr;
				cr]!

emitPaxAttributes: aPackage
	stream
		nextPut: $;;
		crtab.
	aPackage predeclareClassesSetting
		ifNotNil: 
			[:bool |
			stream
				nextPutAll: #preDeclareClassesOnLoad:;
				space;
				print: bool;
				nextPut: $;;
				crtab].
	stream
		nextPutAll: #basicComment:;
		space.
	self emitString: aPackage comment fullPrintString!

emitPaxPackage: aPackage
	stream
		nextPutAll: '| package |';
		cr;
		nextPutAll: 'package := ';
		print: aPackage class;
		space;
		nextPutAll: #name:;
		space;
		print: aPackage name;
		nextPut: $.;
		cr;
		nextPutAll: 'package ';
		nextPutAll: #paxVersion:;
		space.
	self emitVersionNumber: aPackage paxVersion.
	self emitPaxAttributes: aPackage.
	stream
		nextPut: $.;
		cr;
		cr!

emitVersionNumber: aNumber
	aNumber isInteger ifTrue: [aNumber printOn: stream base: 10] ifFalse: [aNumber printOn: stream]!

methodNameSortBlock: aPackage
	^
	[:a :b |
	a className = b className
		ifTrue: [a selector <==> b selector <= 0]
		ifFalse: [a className <= b className]]! !
!Kernel.AbstractChunkSourceFiler categoriesForMethods!
emitCategories:for:in:!private!source filing-pax! !
emitPackageAboutBlock:!private!source filing-pax! !
emitPackageClassNames:!accessing!private! !
emitPackageDescription:!private!source filing-pax! !
emitPackageManualPrerequisites:!private!source filing-pax! !
emitPackageMethodNames:!private!source filing-pax! !
emitPackageNames:!private!source filing-pax! !
emitPackagePrerequisiteNames:!private!source filing-pax! !
emitPackageScripts:!private!source filing-pax! !
emitPackageStripperBytes:!private!source filing-pax! !
emitPackageUntracedVariables:!private!source filing-pax! !
emitPackageVariableNames:!private!source filing-pax! !
emitPackageVariableNameSubsets:!private!source filing-pax! !
emitPackageVariableReference:!accessing!private!source filing! !
emitPackageVersion:!private!source filing-pax! !
emitPaxAttributes:!private!source filing-pax! !
emitPaxPackage:!private!source filing-pax! !
emitVersionNumber:!private!source filing-pax! !
methodNameSortBlock:!private!source filing-pax! !
!

!Kernel.ChunkSourceFiler methodsFor!

emitPackageBinaryVariables: aPackage
	"Private - Emit the definitions for variables of the specified <Package> that are not aliases and which refer to non-source objects onto the receiver's stream."

	self
		emitComment: 'Binary Variables';
		cr.
	aPackage binaryVariableNames asSortedCollection do: 
			[:each |
			self
				emitBinaryVariableDefinition: each;
				cr]!

emitPackageClassNames: aPackage
	self emitPackageNameCollection: aPackage classNames initializer: #setClassNames:!

emitPackageCollection: aSequencedReadableCollection initializer: aSymbol
	aSequencedReadableCollection isEmpty ifTrue: [^self].
	stream
		nextPutAll: 'package ';
		display: aSymbol;
		nextPutAll: ' #(';
		cr.
	aSequencedReadableCollection do: 
			[:each |
			stream
				tab;
				print: each;
				cr].
	stream
		nextPutAll: ').';
		cr;
		cr!

emitPackageManualPrerequisites: aPackage
	self emitPackageCollection: aPackage manualPrerequisites initializer: #setManualPrerequisites:!

emitPackageMethodNames: aPackage
	| names |
	names := aPackage methodNames asSortedCollection: (self methodNameSortBlock: aPackage).
	self emitPackageCollection: (names collect: [:each | {each className. each selector}])
		initializer: #setMethodNames:!

emitPackageNameCollection: aCollectionOfBindingReferences initializer: aSymbol
	self emitPackageCollection: aCollectionOfBindingReferences asSortedCollection initializer: aSymbol!

emitPackagePrerequisiteNames: aPackage
	| basePath |
	basePath := aPackage path.
	self
		emitPackageCollection: ((aPackage prerequisites asSortedCollection: [:a :b | a name <==> b name < 0])
				collect: [:each | File removeExtension: (File relativePathOf: each packageFileName to: basePath)])
		initializer: #setPrerequisites:!

emitPackageUntracedVariables: aPackage
	self emitPackageNameCollection: aPackage untracedVariables initializer: #setUntracedVariables:!

emitPackageVariableNames: aPackage
	self emitPackageNameCollection: aPackage variableNames initializer: #setVariableNames:.!

emitPackageVariableNameSubsets: aPackage
	self emitPackageNameCollection: aPackage binaryVariableNames initializer: #setBinaryVariableNames:.
	self emitPackageNameCollection: aPackage aliasVariableNames initializer: #setAliasVariableNames:!

emitPaxAttributes: aPackage
	aPackage environment
		ifNotNil: 
			[:namespace |
			stream
				nextPut: $;;
				crtab;
				nextPutAll: #environmentName:;
				space;
				print: namespace fullyQualifiedReference].
	super emitPaxAttributes: aPackage! !
!Kernel.ChunkSourceFiler categoriesForMethods!
emitPackageBinaryVariables:!private!source filing! !
emitPackageClassNames:!accessing!private!source filing-pax! !
emitPackageCollection:initializer:!private!source filing-pax! !
emitPackageManualPrerequisites:!private!source filing-pax! !
emitPackageMethodNames:!private!source filing-pax! !
emitPackageNameCollection:initializer:!private!source filing-pax! !
emitPackagePrerequisiteNames:!private!source filing-pax! !
emitPackageUntracedVariables:!private!source filing-pax! !
emitPackageVariableNames:!private!source filing-pax! !
emitPackageVariableNameSubsets:!private!source filing-pax! !
emitPaxAttributes:!private!source filing-pax! !
!

!Kernel.Package methodsFor!

allFileOutNames
	"Private - Answers an OrderedCollection of the source filenames for the receiver and all of its 
	contents when in PAX source mode. Note that the PAX filename is always last in the collection."

	| answer |
	answer := OrderedCollection new.
	self allSourceObjectsDo: [:each | answer add: each fileOutName].
	^answer!

beNotUsingPAX
	"Place the receiver into a mode where it is not using PAX source files.
	This simply involves deleting any PAX source files that currently exist. Without the
	presence of a same named PAX file, the receiver assumes it is operating in
	non-PAX mode for all future save operations."

	| msg names |
	self isUsingPAX ifFalse: [^self].
	names := self allFileOutNames.
	msg := 'Placing this package into PAC mode will delete <2p> PAX source files in the<n>directory <3s>.<n><n>Are you sure that you wish to proceed?'
				expandMacrosWith: self name
				with: names size
				with: self path.
	(UI.MessageBox confirm: msg caption: 'Convert <1p> to PAC mode…' << self name)
		ifTrue: [names do: [:each | (File exists: each) ifTrue: [File delete: each]]]!

beUsingPAX
	"Place the receiver into a mode where it is using PAX source files.
	This simply involves creating the PAX source files for the first time. With the
	presence of a same named PAX file, the receiver assumes it is operating in
	PAX mode for all future save operations."

	| msg |
	self isUsingPAX ifTrue: [^self].
	msg := 'Placing this package into PAX source mode will create <1p> source files<n>in the directory <2s>.<n><n>Are you sure that you wish to proceed?'
				expandMacrosWith: self allSourceObjects size
				with: self path.
	(UI.MessageBox confirm: msg caption: 'Convert <1p> to PAX mode…' << self name)
		ifTrue: [self fileOutAll]!

canFileOut
	"Answer true if the receiver can be filed out. At this stage we just check to ensure that
	all the file out names associated with the PAX file are writeable."

	^self fileOutNames allSatisfy: [:each | File isWriteable: each]!

checkTimestamps
	"Compare the timestamp cached when the package was installed against the timestamp of the
	package file. If the package file has been modified since the package was loaded, then warn
	the user to avoid inadvertent overwrites of later package versions causing loss of changes."

	| mb warning |
	(CheckTimestamps and: [self isRenegade]) ifFalse: [^self].
	mb := UI.MessageBox new.
	mb
		uniqueId: [self] method displayString;
		isSuppressible: true.
	warning := 'The package <1s> has been modified outside this image since it was loaded or last saved.

	Package timestamp:	 <2d>
	File modification time: <3d>

If you proceed and save it from this image then you may lose changes that have been written from another session. If you are not sure it is recommended that you cancel this operation and check whether there are unstaged changes in your workspace with your preferred git tooling. 

Alternatively you can proceed and overwrite any changes on disk. You can also choose to suppress this warning so it is not shown again, however if you do so then in future modified files will be overwritten regardless of the choice that you make now.'
				expandMacrosWithArguments: {self name.
						self timestamp.
						FILETIME fromInteger: self fileModificationTime}
				locale: Locale smalltalk.
	mb okCancel.
	(mb warning: warning) == #cancel ifTrue: [OperationAborted signal]!

createPackagePath
	"Private - Create the directory where the receiver resides on disk"

	File createDirectoryPath: (File splitPathFrom: self fileOutName)!

dotPacPath
	^File path: self packageFileName extension: self class packageExtension!

fileModificationTime
	"Private - Answer the modification time of the receiver's package file on disk as the
	<integer> number of 100-nanosecond intervals since 12:00 A.M. January 1, 1601 UTC (i.e. a
	Win32 FILETIME), or 0 if it does not currently exist."

	| fileName |
	fileName := self isSystemPackage
				ifTrue: [self classDefinitionsFileName]
				ifFalse: [self isUsingPAX ifTrue: [self fileOutName] ifFalse: [self packageFileName]].
	^(File lastWriteTime: fileName) ifNil: [0] ifNotNil: [:filetime | filetime asInteger]!

fileOut
	"Private - File out a definition of the receiver to source files. Normally this
	involves saving a PAX file except in the case where the receiver is a system package
	when separate class and resource definitions files are saved instead."

	self isSystemPackage 
		ifFalse: 
			[self
				savePAC;
				savePAX;
				versionIfRequired]
		ifTrue: [self fileOutBootDefinitions].
	self updateTimestamp.
	self isChanged: false!

fileOutAll
	"Fileout the receiver to a PAX file and all out it's associated source files.
	The .PAC file is also saved when the .PAX is created in order to ensure that
	the two remain in sync."

	self allSourceObjectsDo: [:each | each fileOut]!

fileOutAllChanged
	"Fileout the changed source objects in the receiver"

	self allSourceObjectsDo: [:each | each isChanged ifTrue: [each fileOut]]!

fileOutBinaryVariables
	"Private - File out binary variables to individual files."

	self binaryVariableNames - self aliasVariableNames do: (self isLegacySourceFormat
				ifTrue: 
					[
					[:each |
					| stem stream |
					stem := each shortName.
					(BindingReference isQualifiedName: stem) ifTrue: [^SourceFormatNotSupportedError signalWith: each].
					stream := FileStream write: (File
										composePath: self path
										stem: stem
										extension: 'stb')
								text: false.
					each value binaryStoreOn: stream.
					stream close]]
				ifFalse: 
					["In the new format we serialize with STON, as a text format is preferable to binary in most SCCS."
					
					[:each |
					| stream |
					stream := FileStream write: (self fileNameForBinaryVariable: each extension: 'ston') text: true.
					STON put: each value onStreamPretty: stream.
					stream
						cr;
						close]])!

fileOutBootDefinitions
	"Private - If this is a system package then only write out .st files capable of defining
	the classes independently of the PAX. These are required by the Dolphin boot process.
	Note that the base system package cannot contain any resources."

	| filer srcmgr filename |
	srcmgr := self sourceManager.
	filename := self classDefinitionsFileName.
	srcmgr createDirectoryPath: filename.
	filer := self sourceFilerOn: (FileStream write: filename).
	srcmgr emitFileOutHeaderOn: filer.
	[filer fileOutPackageClassDefinitions: self] ensure: [filer close]!

fileOutNames
	"Private - Answers a set of the source filenames for the receiver when in the multi-file
	(.PAX) source mode. This contains pathnames used to store the PAX file and each of the
	binary globals, etc. It does not include the source files for the	<sourceObject>s held by the 
	receiver."

	^self isSystemPackage
		ifTrue: [Set with: self classDefinitionsFileName]
		ifFalse: 
			[Set new
				add: self fileOutName;
				addAll: (self binaryVariableNames
							collect: [:each | self fileNameForBinaryVariable: each extension: 'ston']);
				yourself]!

fileOutOn: aSourceFiler
	"Append the definition of the receiver in PAX format onto the
	<SourceFiler> argument. This does not file out the source files of the 
	receiver's contents."

	aSourceFiler fileOutDefinitionOfPackage: self!

isLegacySourceFormat: aBoolean
	aBoolean = self isLegacySourceFormat
		ifFalse: 
			[self paxVersion: (aBoolean ifTrue: [1] ifFalse: [self class paxVersion]).
			self isChanged: true]!

isRenegade
	"Answer whether the receiver was loaded (or last saved) before its source representation in the file system.
	An example of where a package might be a renegade is if it has been modified and saved from another image."

	| lastWriteTime |
	lastWriteTime := self fileModificationTime.
	^lastWriteTime > timestamp!

isUsingPAX
	"Answer true if the receiver is using PAX mode. If a PAX file of the same name as the
	receiver exists on disk then both PAC and PAX files are saved simultaneously."

	^self isSystemPackage or: [File exists: self fileOutName]!

isUsingPAX: aBoolean
	"Place the receiver into a mode where it is using PAX source format according to aBoolean."

	self assert: [self isSystemPackage not].
	aBoolean 
		ifTrue: [ self beUsingPAX ]
		ifFalse: [ self beNotUsingPAX ]!

save
	"Save the receiver to a single PAC file. This includes all of the source for the receiver's contents.
	If the receiver is operating in PAX source mode then all of the source files are also
	filed out, including a .PAX definition. Answer whether the package was actually saved.
	This is the implementation behind the Package Browser's 'Save' command."

	self isUsingPAX ifTrue: [self fileOutAll] ifFalse: [self saveSingleFilePackage].
	^true!

saveAs: aString 
	self manager renamePackage: self to: aString.
	self save!

saveChanges
	"Save the receiver, if changed. This includes all of the source for the receiver's contents.
	If the receiver is operating in PAX source mode then all of the changed source files are
	also filed out. including a .PAX definition. Answer whether the package was actually saved.
	This is the implementation behind the Package Browser's 'Save Changes' command."

	self isChanged ifFalse: [^self].
	self isUsingPAX 
		ifTrue: 
			[self fileOutAllChanged.
			self isChanged: false]
		ifFalse: [self saveSingleFilePackage]!

savePAC
	"Private - File out a definition of the receiver and all the objects it owns to a single
	text .PAC file. Any binary objects (views, non-<sourceObject> globals) are saved as a
	printed representation of their STB'd binary store bytes."

	| filer |
	self okToSaveOrDeploy.
	self checkTimestamps.
	self createPackagePath.
	"This event can be hooked to backup the old package before it is overwritten, etc"
	self manager trigger: #aboutToSave: with: self.
	filer := self sourceFilerOn: (FileStream write: self dotPacPath).
	[filer fileOutPackage: self] ensure: [filer close]!

savePAX
	"Private - File out a definition of the receiver to a .PAX source file. This does not file
	out the source files of the receiver's contents."

	"Implementation Note: All fileouts use case sensitive collation in order to avoid problem of order
	switches for same named identifiers with different case, which can cause a line-based source
	management system to detect a change where there isn't one."

	| filer |
	self createPackagePath.
	filer := self sourceFilerOn: (FileStream write: self fileOutName).
	[self fileOutOn: filer] ensure: [filer close].

	"We must also file out the binary globals at this stage, as they are not <sourceObject>s."
	self fileOutBinaryVariables!

saveSingleFilePackage
	"Save the receiver and all owned objects to a single .PAC file.
	The complementary message to save a multi-file package is #fileOutAll."

	self savePAC.
	self updateTimestamp.
	self resetChangeFlags!

updateTimestamp
	"Private - Synchronise the receiver's timestamp with its source file."

	timestamp := self fileModificationTime! !
!Kernel.Package categoriesForMethods!
allFileOutNames!accessing!private!source filing! !
beNotUsingPAX!modes!public! !
beUsingPAX!modes!public! !
canFileOut!public!source filing! !
checkTimestamps!helpers!private! !
createPackagePath!private!source filing! !
dotPacPath!helpers!private! !
fileModificationTime!helpers!private! !
fileOut!public!source filing! !
fileOutAll!public!source filing! !
fileOutAllChanged!public!source filing! !
fileOutBinaryVariables!private!source filing! !
fileOutBootDefinitions!private!source filing! !
fileOutNames!private!source filing! !
fileOutOn:!public!source filing! !
isLegacySourceFormat:!public!testing! !
isRenegade!public!testing! !
isUsingPAX!public!testing! !
isUsingPAX:!accessing!public! !
save!commands!public! !
saveAs:!commands!public! !
saveChanges!operations!public! !
savePAC!helpers!private! !
savePAX!private!source filing-pax! !
saveSingleFilePackage!public!source filing! !
updateTimestamp!helpers!private! !
!

!Kernel.SourceFiler methodsFor!

emitPackageBinaryVariables: aPackage
	"Emit the definitions for variables of the specified <Package> that refer to non-source objects onto the receiver's stream."

	self subclassResponsibility!

emitPackageDescription: aPackage
	"Private - File out a description of the <Package> argument to the receiver's stream that includes all of the metadata of the package."

	^self subclassResponsibility!

fileOutClass: aClass ofPackage: package
	self
		fileOutDefinitionOfClass: aClass;
		fileOutPackage: package methodsOfClass: aClass;
		fileOutPackage: package methodsOfClass: aClass class!

fileOutDefinitionOfPackage: aPackage
	self emitPackageDescription: aPackage.
	self fileOutPackageClassDefinitions: aPackage.
	self fileOutPackageVariableAliases: aPackage.
	self fileOutPackageMethods: aPackage.
	self
		emitComment: 'End of package definition';
		cr!

fileOutPackage: aPackage
	self
		fileOutDefinitionOfPackage: aPackage;
		fileOutPackageSourceVariables: aPackage;
		fileOutPackageClasses: aPackage;
		emitPackageBinaryVariables: aPackage!

fileOutPackage: aPackage methodsOfClass: aClass
	"Private - Append any definitions of the classes methods which are owned by the specified Package to the receiver's stream."

	| methods |
	methods := aPackage methodsOfClass: aClass.
	methods size = aClass methodDictionary size
		ifTrue: 
			["The common case is that all methods of the class also belong to the this package..."
			self fileOutAllMethodsOfBehavior: aClass]
		ifFalse: 
			[| selectors prereqs addBlock |
			"...but if some methods are not owned by this package we have more work to do"
			selectors := methods collect: [:m | m selector].
			self fileOutMessages: selectors ofBehavior: aClass.

			"File out the intersection of the immediate protocols of the class and those of this
			and prerequisite packages' methods"

			"First add all selectors in the superclass chain which are in this package or one of its
			pre-requisites into the set of available selectors."
			prereqs := aPackage prerequisites.
			addBlock := [:e :p | selectors addAll: ((p methodsOfClass: e) collect: [:m | m selector])].
			prereqs do: [:p | addBlock value: aClass value: p].
			aClass allSuperclassesDo: 
					[:e |
					addBlock value: e value: aPackage.
					prereqs do: [:p | addBlock value: e value: p]].
			#todo.	"File out partial protocols, although tools should prevent protocols being split across packages really"
			self fileOutProtocols: (aClass protocols select: [:p | (p selectors difference: selectors) isEmpty])
				ofBehavior: aClass]!

fileOutPackageClassDefinitions: aPackage
	| classes |
	classes := self packageClassesInFileoutOrder: aPackage.
	classes isEmpty
		ifFalse: 
			[self
				emitComment: 'Class Definitions';
				cr.	"The namespaces should be defined first as these may be referenced by other class definitions, then SharedPools, then all other classes."
			classes do: 
					[:each |
					((each inheritsFrom: Namespace) and: [(each inheritsFrom: SharedPool) not])
						ifTrue: [self fileOutBasicDefinitionOfClass: each]].
			classes
				do: [:each | (each inheritsFrom: SharedPool) ifTrue: [self fileOutBasicDefinitionOfClass: each]].
			classes
				do: [:each | (each inheritsFrom: Namespace) ifFalse: [self fileOutBasicDefinitionOfClass: each]].
			self cr]!

fileOutPackageClasses: aPackage
	| classes |
	classes := self packageClassesInFileoutOrder: aPackage.
	classes isEmpty ifTrue: [^self].
	self
		emitComment: 'Classes';
		cr.
	classes do: 
			[:aClass |
			self fileOutAttributesOfClass: aClass.
			self fileOutPackage: aPackage methodsOfClass: aClass.
			self fileOutPackage: aPackage methodsOfClass: aClass class]!

fileOutPackageMethods: aPackage
	"Private - File out the loose methods owned by the specified package to the receiver's stream."

	| loose |
	loose := aPackage methods.
	loose isEmpty
		ifFalse: 
			[self
				emitComment: 'Loose Methods';
				cr.
			self fileOutMethods: loose]!

fileOutPackageSourceVariables: aPackage
	"Private - File out the text representation of the specified packages 'source' object variables onto the receiver's stream. This is used in the single-file .PAC format."

	| names |
	names := aPackage sourceVariableNames.
	names isEmpty ifTrue: [^self].
	self
		emitComment: 'Source Variables';
		cr.
	names asSortedCollection do: 
			[:var |
			var value fileOutOn: self.
			self cr]!

fileOutPackageVariableAliases: aPackage
	"Private - File out the text representation of the specified package's alias variables onto the receiver's stream."

	| names |
	names := aPackage aliasVariableNames.
	names isEmpty
		ifFalse: 
			[self
				emitComment: 'Variable Aliases';
				cr.
			names asSortedCollection
				do: [:var | self fileOutExpression: var asString , ' := ' , var value fullName].
			self cr]!

packageClassesInFileoutOrder: aPackage
	^aPackage classesInHierarchyOrder!

storeCommentString: aString forPackage: aPackage
	"Save the <readableString>, aString, as the comment text for the <Package>, aPackage, to the
	receiver's source stream encoding the position and index into the package's source
	descriptor so that the comment may be retrieved later."

	^self subclassResponsibility! !
!Kernel.SourceFiler categoriesForMethods!
emitPackageBinaryVariables:!private!source filing! !
emitPackageDescription:!private!source filing-pax! !
fileOutClass:ofPackage:!public!source filing! !
fileOutDefinitionOfPackage:!public! !
fileOutPackage:!public! !
fileOutPackage:methodsOfClass:!private! !
fileOutPackageClassDefinitions:!private! !
fileOutPackageClasses:!private! !
fileOutPackageMethods:!private! !
fileOutPackageSourceVariables:!private! !
fileOutPackageVariableAliases:!private! !
packageClassesInFileoutOrder:!private! !
storeCommentString:forPackage:!public!source filing! !
!

!Kernel.SourceManager methodsFor!

fileOutPackagedClass: aClass
	"File out aClass via the package mechanism. The class is filed out to the same directory as the
	package which contains it. Only the methods contained in this package are included in the 
	generated file and following this call the class and its methods are marked as unchanged."

	self fileOutPackagedClass: aClass to: aClass fileOutName.
	!

fileOutPackagedClass: aClass to: aFileName
	"File out aClass via the package mechanism. The class is filed out to aFileName.
	Only the methods contained in this package are included in the 
	generated file and following this call the class and its methods are marked as unchanged."

	aClass owningPackage
		ifNil: 
			["Not in any package so just file out normally"
			self fileOut: aClass to: aFileName]
		ifNotNil: 
			[:package |
			| answer |
			self createDirectoryPath: aFileName.
			answer := package sourceFilerOn: (FileStream write: aFileName).
			self emitFileOutHeaderOn: answer.
			answer
				fileOutClass: aClass ofPackage: package;
				close].

	"Flag the class as being saved, i.e. no longer changed"
	aClass isChanged: false! !
!Kernel.SourceManager categoriesForMethods!
fileOutPackagedClass:!public!source filing! !
fileOutPackagedClass:to:!public!source filing! !
!

"End of package definition"!

