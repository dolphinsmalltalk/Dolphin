| package |
package := Package name: 'Dolphin Additional Sort Algorithms'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Additional Sort Algorithms.
Copyright (c) Object Arts Ltd. 2005.

Some additional sort algorithms over and above the default IntrosortAlgorithm in the base image. These are primarily intended for use with <SortedCollection>, but can in fact be used to sort the indexable instance variables of any object.

This package provides implementations of:
	Heapsort
	Insertion Sort
	Mergesort
	Quicksort
	Shellsort

Of these some are present purely for illustrative purposes, but Mergesort is useful as a fast general purpose algorithm that is stable (unlike the default sort, introsort, which is a quicksort/heapsort hybrid).

There are a number of additional algorithms that it would be interesting to implement, not least those specialised for sorting strings (such as Radix sort), and the Sedgwick and Bennets multi-key (or ternary) Quicksort algorithm. A sensible design for the latter might include an additional ''key block'' to extract the key from each object, with this block expected to return a <sequencedReadableCollection> of uniform key parts (for example a string, or byte array, or array of integers, etc). The sort block would be invoked to compare the key parts, rather than the whole key at once. I suspect, however, that the standard Smalltalk sort block comparison mechanism that answers true/false might be rather inefficient for this algorithm (it needs a -1, 0, 1 comparison result really as otherwise it has to compare key parts twice to distinguish the ''equal'' case), so it might be advisable to dispense with convention in this case, or implement a non-pluggable algorithm just for sorting strings.'.

package basicPackageVersion: '6.0'.


package setClassNames: #(
	#{Kernel.HeapsortAlgorithm}
	#{Kernel.InsertionSortAlgorithm}
	#{Kernel.MergesortAlgorithm}
	#{Kernel.QuicksortAlgorithm}
	#{Kernel.ShellsortAlgorithm}
).

package setMethodNames: #(
	#(#{Core.SortAlgorithm class} #heapSort:)
	#(#{Core.SortAlgorithm class} #insertionSort:)
	#(#{Core.SortAlgorithm class} #mergeSort:)
	#(#{Core.SortAlgorithm class} #quickSort:)
	#(#{Core.SortAlgorithm class} #shellSort:)
).

package setPrerequisites: #(
	'Dolphin'
).

package!

"Class Definitions"!

Kernel.PluggableSortAlgorithm
	subclass: #'Kernel.HeapsortAlgorithm'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.PluggableSortAlgorithm
	subclass: #'Kernel.InsertionSortAlgorithm'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.PluggableSortAlgorithm
	subclass: #'Kernel.MergesortAlgorithm'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.PluggableSortAlgorithm
	subclass: #'Kernel.QuicksortAlgorithm'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.PluggableSortAlgorithm
	subclass: #'Kernel.ShellsortAlgorithm'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.SortAlgorithm class methodsFor!

heapSort: aDyadicValuable
	^HeapsortAlgorithm newSortBlock: aDyadicValuable!

insertionSort: aDyadicValuable
	^InsertionSortAlgorithm newSortBlock: aDyadicValuable!

mergeSort: aDyadicValuable
	^MergesortAlgorithm newSortBlock: aDyadicValuable!

quickSort: aDyadicValuable
	^QuicksortAlgorithm newSortBlock: aDyadicValuable!

shellSort: aDyadicValuable
	^ShellsortAlgorithm newSortBlock: aDyadicValuable! !
!Core.SortAlgorithm class categoriesForMethods!
heapSort:!instance creation!public! !
insertionSort:!instance creation!public! !
mergeSort:!instance creation!public! !
quickSort:!instance creation!public! !
shellSort:!instance creation!public! !
!

"End of package definition"!

