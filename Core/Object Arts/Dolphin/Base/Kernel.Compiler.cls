"Filed out from Dolphin Smalltalk"!

Core.Object subclass: #'Kernel.Compiler'
	instanceVariableNames: ''
	classVariableNames: 'DefaultFlags DisabledWarnings'
	imports: #(#{Kernel.CompilerFlags} #{Kernel.ParseErrorCodes})
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.Compiler guid: (Core.GUID fromString: '{87b4c470-026e-11d3-9fd7-00a0cc3e4a32}')!
Kernel.Compiler comment: 'The Compiler class is responsible for compiling new methods and evaluating expressions.'!
!Kernel.Compiler categoriesForClass!System-Compiler! !
!Kernel.Compiler class methodsFor!

compile: aString in: aClass
	"Compile the String conversion of the argument code as a method of aClass.
	Answer the new method (which is not added to the method dictionary of
	aClass) if there are no syntax errors, otherwise signal a CompilerNotification."

	^self
		compile: aString
		in: aClass
		environment: nil!

compile: aString in: aClass environment: aNamespace

	^(self
		compile: aString
		in: aClass
		environment: aNamespace
		flags: aClass defaultCompilationFlags) method!

compile: aString in: aClass environment: aNamespaceOrNil flags: anInteger
	"Private - Compiler the method source, aString, in the context of the class, aClass, and namespace, aNamespace, parameterized by the flags, anInteger. 
	If aNamespace is not nil, then it is used instead of the class' own environment to look up static variables that are not found within the class' own variables or imports, or of any of its superclasses.
	The flags can be combinations of the following:

	0					Default compilation to code. Method is first element of array	if successful. If some error is detected (syntax or semantic), then it will be nil.
	NotLogged(1)			Reserved.
	SyntaxCheckOnly(2)	Parse method, but do not generate code
	4					Reserved.
	NoOptimize(8)			Disable bytecode optimisation
	TextMap(16)			Generate a textmap from ip to a text range as the third element of the array. The text map is an Array of Integers.
						Every three elements define one map. The first element in a map is the ip of the bytecode (1 based), and the two following elements define the start and stop of the text range (1 based) associated with the 		action of the bytecode.	
	TempsMap(32)			Generate a temporaries map as the fourth element of the array.
						The temporaries map is itself an Array. Every two elements of the 	array refer to one mapping. A mapping has two elements, an ip and aString of temporaries that are valid at the ip. A mapping occurs for every time the temporaries list changes in the method. So the start of a Block with at least one argument will have an entry, the ending of it will also have an entry. Temporaries generated by the optimizer that may be ignore have an underscore as their first character. Optimizer temporaries are ignore when deciding that the temporaries list has changed. Mappings are not necessarily ordered by their ip. Two mappings may have the same ip in this case of an optimized empty block.
	DebugMethod(64)		Generate a debug version of the method which includes break points after every expression. 
						Any text/temporaries map generated at the same time will account for the extra byte codes in the IP offsets.
	Interactive(512)		Interactive compile (compiler can prompt to define globals etc)
	SendYourself(1024)		Don't optimize out #yourself, but rather send as a message.
	"

	| results source |
	source := aString asUtf8String.
	results := CompilerLibrary default
				compile: self
				source: source
				length: source size
				in: aClass
				environment: aNamespaceOrNil
				flags: anInteger
				notifying: self.
	^CompilationResult
		method: results first
		rawTextMap: results second
		rawTempsMap: results third!

compileDebugExpression: aString in: aClass environment: aNamespaceOrNil evaluationPools: anArray
	^(self
		compileForEvaluation: aString
		in: aClass
		environment: aNamespaceOrNil
		evaluationPools: anArray
		flags: DebugMethod) method!

compileDebugMethod: aString in: aClass environment: aNamespace
	^(self
		compile: aString
		in: aClass
		environment: aNamespace
		flags: aClass defaultCompilationFlags | DebugMethod) method!

compileExpression: aString in: aBehaviorOrNil
	^self compileExpression: aString in: aBehaviorOrNil environment: nil!

compileExpression: aString in: aBehaviorOrNil environment: aNamespaceOrNil
	^self
		compileExpression: aString
		in: aBehaviorOrNil
		environment: aNamespaceOrNil
		flags: aBehaviorOrNil defaultCompilationFlags!

compileExpression: aString in: aBehaviorOrNil environment: aNamespaceOrNil flags: anInteger
	^self
		compileForEvaluation: aString
		in: aBehaviorOrNil
		environment: aNamespaceOrNil
		evaluationPools: nil
		flags: anInteger!

compileForEvaluation: aString in: aBehaviorOrNil environment: aNamespaceOrNil evaluationPools: anArray flags: anInteger
	"Private - Compile the expression source, aString, in the context of the class, aBehavior,
	parameterized by the flags, anInteger, notifying, notifier, of any errors or warnings 
	which are detected. Additional shared variables are looked up in the <Array> of <PoolDictionary>,
	anArray. Answers an appropriately instantiated CompilationResult.

	The flags can be combinations of the following:

	0	Default compilation to code. Method is first element of array
		if successful. If some syntax error occurs, then it will be nil.
	1	Reserved.
	2	Syntax Check only. Does not generate a method.
	4	Reserved
	8	Turn off optimization
	16	Generate a textmap from ip to a text range as the third element of
		the array. The text map is an Array of Integers.
		Every three elements define one map. The first element in a map is the
		ip of the bytecode (1 based), and the two following elements define
		the start and stop of the text range (1 based) associated with the
		action of the bytecode.	
	32	Generate a temporaries map as the fourth element of the array
		The temporaries map is itself an Array. Every two elements of the 
		array refer to one mapping. A mapping has two elements, an ip and a
		String of temporaries that are valid at the ip. A mapping occurs for
		every time the temporaries list changes in the method. So the start of
		a Block with at least one argument will have an entry, the ending of
		it will also have an entry. Temporaries generated by the optimizer that
		may be ignore have an underscore as their first character. Optimizer
		temporaries are ignore when deciding that the temporaries list has
		changed. Mappings are not necessarily ordered by their ip. Two mappings
		may have the same ip in this case of an optimized empty block.
	64	Generate a debug version of the method which includes break points after
		every expression. Any text/temporaries map generated at the same time will
		account for the extra byte codes in the IP offsets."

	| results expression source |
	source := aString asUtf8String.
	results := CompilerLibrary default
				compileForEvaluation: self
				source: source
				length: source size
				in: aBehaviorOrNil
				environment: aNamespaceOrNil
				evaluationPools: anArray
				flags: anInteger
				notifying: self.
	expression := results first.
	results := CompilationResult
				method: expression
				rawTextMap: results second
				rawTempsMap: results third.
	expression notNil
		ifTrue: 
			[aBehaviorOrNil ifNotNil: [expression methodClass: aBehaviorOrNil].
			expression
				storeSourceString: source evaluationPools: anArray;
				isImmutable: true].
	^results!

compilerNotification: aCompilerNotification 
	"Private - Inform user of Compiler error/warning as detailed in the 
	<CompilerNotification> argument."

	^aCompilerNotification signal!

debugInfoFlags: aBoolean 
	^TextMap | TempsMap | (aBoolean ifTrue: [DebugMethod] ifFalse: [0])!

debugInfoFor: aString in: aClass environment: aNamespace debug: aBoolean
	"Answers a CompilationResult with all the information necessary for debugging a method
	in aClass whose sources is aString."

	^self
		compile: aString
		in: aClass
		environment: aNamespace
		flags: aClass defaultCompilationFlags | (self debugInfoFlags: aBoolean)!

debugInfoForExpression: aString in: aBehaviorOrNil environment: aNamespace evaluationPools: pools debug: aBoolean
	"Answers a CompilationResult with all the information necessary for debugging a method
	in aClass whose sources is aString."

	^self
		compileForEvaluation: aString
		in: aBehaviorOrNil
		environment: aNamespace
		evaluationPools: pools
		flags: (self debugInfoFlags: aBoolean)!

defaultFlags
	^DefaultFlags!

defaultFlags: anInteger 
	DefaultFlags := anInteger!

disableWarning: anInteger 
	"Disable the compiler warning with the specified code."

	DisabledWarnings add: anInteger!

enableWarning: anInteger
	"Enable the compiler warning with the specified code."

	DisabledWarnings remove: anInteger ifAbsent: nil!

errorClass
	^CompilerErrorNotification!

evaluate: aString
	"Compile and evaluate the expression, aString, in the context of
	UndefinedObject.  If the expression compiles, answer the result of 
	evaluating the expression with nil as the receiver.
	If the compilation fails, signal a CompilerNotification and answer nil. 
	The expression is not written to the change log."

	^self
		evaluate: aString
		for: nil!

evaluate: aString for: anObject
	"Compile and evaluate the expression, aString, with anObject as the receiver. If the
	expression compiles, answer the result of evaluating the expression. If the compilation
	fails, signal a CompilerNotification and answer nil."

	^self
		evaluate: aString
		for: anObject
		environment: nil!

evaluate: aString for: anObject environment: aNamespaceOrNil
	"Compile and evaluate the expression, aString, with anObject as the receiver. If the
	expression compiles, answer the result of evaluating the expression. If the compilation
	fails, signal a CompilerNotification and answer nil."

	^self
		evaluate: aString
		for: anObject
		environment: aNamespaceOrNil
		evaluationPools: nil
		logged: false!

evaluate: aString for: anObject environment: aNamespaceOrNil evaluationPools: anArray logged: aBoolean 
	"Compile and evaluate the expression, aString, with anObject as the 
	receiver.  If the expression compiles, answer the result of evaluating 
	the expression. If the compilation fails, signal a CompilerNotification
	and answer nil. Log the expression to the change log as requested by 
	the argument aBoolean."

	^self 
		evaluate: aString
		for: anObject
		environment: aNamespaceOrNil
		evaluationPools: anArray
		logged: aBoolean
		ifFail: []!

evaluate: aString for: anObject environment: aNamespaceOrNil evaluationPools: anArray logged: aBoolean ifFail: failBlock
	"Compile and evaluate the expression, aString, with anObject as the 
	receiver.  If the expression compiles, answer the result of evaluating 
	the expression. If the compilation fails, signal a CompilerNotification
	and answer nil. Log the expression to the change log as requested by 
	the argument aBoolean."

	^(self
		compileForEvaluation: aString
		in: (anObject ifNotNil: [anObject class])
		environment: aNamespaceOrNil
		evaluationPools: anArray
		flags: 0) method
		ifNotNil: 
			[:expr |
			aBoolean ifTrue: [self sourceManager logEvaluate: aString].
			expr value: anObject withArguments: #()]
		ifNil: [failBlock value]!

evaluate: aString for: anObject environment: aNamespaceOrNil logged: aBoolean
	"Compile and evaluate the expression, aString, with anObject as the 
	receiver.  If the expression compiles, answer the result of evaluating 
	the expression. If the compilation fails, signal a CompilerNotification
	 and answer nil. Log the expression to the change log as requested by 
	the argument aBoolean."

	^self
		evaluate: aString
		for: anObject
		environment: aNamespaceOrNil
		evaluationPools: nil
		logged: aBoolean!

evaluate: aString logged: aBoolean
	"Compile and evaluate the expression, aString, in the context of
	UndefinedObject, with nil as the receiver.  If the expression compiles,
	answer the result of evaluating the expression with nil as the receiver.
	If the compilation fails, signal a CompilerNotification and answer nil. 
	Log the expression to the change log as requested by the argument aBoolean."

	^self evaluate: aString for: nil environment: nil logged: aBoolean!

identifierFrom: aString
	"Answer a String which is an initial suggestion for a Smalltalk identifier based on aString.
	The answer is not guaranteed to be a valid identifier as it could be an empty String.

	Invalid characters are removed, the letter following a removed character is made uppercase
	unless it forms the first character of the identifier when it is made lowercase, all other
	letters are made lowercase."

	| identifier startNewWord first |
	identifier := String smalltalkWriteStream: aString size.
	startNewWord := false.
	first := true.
	aString do: 
			[:c |
			((first and: [self isAValidInitialIdentifierChar: c]) or: [self isAValidIdentifierChar: c])
				ifFalse: [startNewWord := first not]
				ifTrue: 
					[identifier nextPut: (startNewWord ifTrue: [c asUppercase] ifFalse: [c asLowercase]).
					startNewWord := false.
					first := false]].
	^identifier contents!

initialize
	"Private - Initialize the class variables of the receiver.

		Compiler initialize
	"

	DefaultFlags := 0.
	DisabledWarnings := Set new!

isAReservedWord: aString
	"Private - Answer whether aString is a reserved word."

	^self reservedWords includes: aString!

isAValidIdentifierChar: aCharacter
	"Private - Answer whether aCharacter is valid as the non-initial character in an identifier. ANSI Smalltalk allows only the English alphabet, digits, and underscore as characters in identifiers."

	^'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz' includes: aCharacter!

isAValidInitialIdentifierChar: aCharacter
	"Private - Answer whether aCharacter is valid as the initial character in an identifier. ANSI Smalltalk allows only the English alphabet, and underscore as the initial character of an identifiers."

	^'ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz' includes: aCharacter!

isAValidLocalIdentifier: aString
	"Private - Answer whether aString is a valid local identifier."

	^(aString allSatisfy: [:c | self isAValidIdentifierChar: c]) and: [
		(self isAValidInitialIdentifierChar: aString first) and: [
			(self isAReservedWord: aString) not]]!

isValidSelector: aSymbol
	"Answer whether the <Symbol> argument is a valid selector (unary, binary or keyword)."

	^(Symbol isLiteralSymbol: aSymbol) and: [(self isAReservedWord: aSymbol asString) not]!

isWarningDisabled: anInteger 
	^anInteger >= CWarnFirst and: [DisabledWarnings includes: anInteger]!

notificationCallback: anArray
	"Private - The receiver has generated an error while compiling, inform notifier of this.
	N.B. This is a callback from the Compiler, and should not be removed."

	"Array layout:
		1) <integer> Error code
		2) <integer> Line number
		3) <integer> Start of erroneous interval
		4) <integer> End of erroneous interval
		5) <integer> Offset of the start of the source code in the original source (0 unless compiling a static expression)
		6) <String> Source code
		7) <string> selector
		8) <behavior> Class in the context of which the compilation is taking place.
		9) The object to be notified.
		10) <Array> of <Object> representing extra information about the error."

	| errorCode offset sourceText lineNumber errorStart errorStop selector methodClass extras notified |
	errorCode := anArray first.
	(self isWarningDisabled: errorCode) ifTrue: [^true].
	lineNumber := anArray at: 2.
	errorStart := anArray at: 3.
	errorStop := anArray at: 4.
	"The offset must be added to the error range to get the actual interval in the source text"
	offset := anArray at: 5.
	sourceText := anArray at: 6.
	selector := anArray at: 7.
	methodClass := anArray at: 8.
	notified := anArray at: 9.
	extras := anArray at: 10 ifAbsent: #().
	^notified compilerNotification: ((self notificationClass
				code: errorCode
				in: sourceText
				for: methodClass
				selector: selector
				position: errorStart + 1
				line: lineNumber
				range: (errorStart to: errorStop) + 1
				extras: extras)
				offset: offset;
				yourself)!

notificationClass
	^CompilerNotification!

reservedWords
	"Private - Answer the Set of reserved words."

	^##(Set withAll: #('self' 'super' 'nil' 'true' 'false' 'thisContext'))!

uninitialize
	"Clean up VM references that are only required if the compiler is present."

	"Uses:
		notificationCallback:		Sent with compilation errors/warnings
		allInstVarNames			To query the instance variable names of the method class
		evaluate:for:evaluationPools:	To evaluate ##(...) expressions
		bindingFor:				To lookup variables in the evaluation pools.
		fullBindingFor:environment:	Sent to a class to resolve static variables
		asNumber				Sent to parse numeric literals
		understandsArithmetic		Sent to verify the type of literals when parsing some messages with inline forms, e.g. #to:by:do:
		negative					Similarly to above, but to check for negative 'step'
		pathString:context:meta:		Sent to instantiate BindingReference objects for literal binding references
		namespace:				For implicit namespace: annotations when compiling methods with a specific environment (usually Smalltalk)"

	#(#notificationCallback: #allInstVarNames #evaluate:for:evaluationPools: #bindingFor: #fullBindingFor:environment: #asNumber #understandsArithmetic #negative #pathString:scope:flags: #namespace: #setScope:)
		, {BindingReference. Smalltalk} do: [:each | VM unregisterObject: each].
	CompilerLibrary closeDefault!

warningClass
	^CompilerWarningNotification! !
!Kernel.Compiler class categoriesForMethods!
compile:in:!compiling!public! !
compile:in:environment:!compiling!public! !
compile:in:environment:flags:!compiling!private! !
compileDebugExpression:in:environment:evaluationPools:!compiling!public! !
compileDebugMethod:in:environment:!compiling!public! !
compileExpression:in:!compiling!public! !
compileExpression:in:environment:!compiling!public! !
compileExpression:in:environment:flags:!compiling!public! !
compileForEvaluation:in:environment:evaluationPools:flags:!compiling!private! !
compilerNotification:!exceptions!private! !
debugInfoFlags:!development!public! !
debugInfoFor:in:environment:debug:!development!public! !
debugInfoForExpression:in:environment:evaluationPools:debug:!development!public! !
defaultFlags!constants!public! !
defaultFlags:!accessing!public! !
disableWarning:!helpers!public! !
enableWarning:!helpers!public! !
errorClass!public! !
evaluate:!evaluating!public! !
evaluate:for:!evaluating!public! !
evaluate:for:environment:!evaluating!public! !
evaluate:for:environment:evaluationPools:logged:!evaluating!public! !
evaluate:for:environment:evaluationPools:logged:ifFail:!evaluating!public! !
evaluate:for:environment:logged:!evaluating!public! !
evaluate:logged:!evaluating!public! !
identifierFrom:!parsing!public! !
initialize!development!initializing!private! !
isAReservedWord:!parsing!private! !
isAValidIdentifierChar:!parsing!private! !
isAValidInitialIdentifierChar:!parsing!private! !
isAValidLocalIdentifier:!parsing!private! !
isValidSelector:!public!testing! !
isWarningDisabled:!exceptions!private! !
notificationCallback:!exceptions!private! !
notificationClass!public! !
reservedWords!constants!private! !
uninitialize!class hierarchy-removing!public! !
warningClass!public! !
!

