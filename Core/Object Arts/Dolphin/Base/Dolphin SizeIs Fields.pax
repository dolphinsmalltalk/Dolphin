| package |
package := Package name: 'Dolphin SizeIs Fields'.
package paxVersion: 1;
	basicComment: 'Dolphin SizeIs Fields Package.

Contains support for sophisticated conformant field types that can interpret a MIDL size_is expression involving simple arithmetic.'.


package classNames
	add: #ArithmeticExpressionVisitor;
	add: #SizeIsArrayFieldLength;
	add: #SizeIsExpressionFormatter;
	yourself.

package methodNames
	add: #StAssignmentNode -> #solveFor:;
	add: #StMessageNode -> #inverseArithmeticOperator;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: 'Dolphin';
	add: '..\System\Compiler\Smalltalk Parser';
	yourself).

package!

"Class Definitions"!

ArrayFieldLength subclass: #SizeIsArrayFieldLength
	instanceVariableNames: 'sizeIs getLength setLength'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
StParseNodeVisitor subclass: #ArithmeticExpressionVisitor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ArithmeticExpressionVisitor subclass: #SizeIsExpressionFormatter
	instanceVariableNames: 'codeStream structClass variable'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!StAssignmentNode methodsFor!

solveFor: aString
	"Answer an <StAssignmentNode> that rewrites the assignment expression described by the
	receiver to express the value of a named variable on the right-hand side in terms of the
	variable on the left-hand side. Please note that there are some limitations: The RHS must be
	a simple arithmetic expression consisting only of variables, values, and arithmetic operator
	messages, if not an error is thrown; and the RHS must be in simplified form such that there
	is only one occurrence of the target variable, if not the target variable may appear on both
	sides, or a solution will not be found. Lastly the search for a solution is not very
	efficient, although this should not matter for typical expressions."

	| lhs rhs term op sub |
	lhs := self variable.
	(lhs isVariable and: [lhs name = aString])
		ifTrue: 
			["The lhs is the variable we are solving for; we are done."
			^self].
	rhs := self value.
	rhs isVariable
		ifTrue: 
			["Single variable to the right - whether it is the right one or not, we are finished with this solution."
			^rhs name = aString
				ifTrue: 
					["The rhs of the assignment is the variable we are solving for; we just need to swap rhs and lhs, and we are done"
					| solution expr |
					solution := self copy.
					expr := solution variable.
					solution
						variable: solution value;
						value: expr;
						yourself]].
	rhs isLiteralNode
		ifTrue: 
			["If a literal value is on the right, this solution attempt has failed."
			^nil].
	rhs isMessage ifFalse: [^self error: 'Unable to rewrite expression  ' , rhs printString].
	"Recursive 1: Rewrite the equation by cancelling the term on the right of the operation, and
	then recursively solve the resulting equation."
	sub := self copy.
	op := sub value.
	term := StMessageNode
				receiver: sub variable
				selector: op inverseArithmeticOperator
				arguments: (Array with: op arguments first).
	^(sub
		variable: term;
		value: op receiver;
		solveFor: aString)
			ifNil: 
				["Recursion 2: Cancel the left term"
				| selector |
				sub := self copy.
				op := sub value.
				selector := rhs selector.
				(selector == #* or: [selector == #+])
					ifTrue: 
						["Commutative operation"
						term := StMessageNode
									receiver: sub variable
									selector: op inverseArithmeticOperator
									arguments: (Array with: op receiver)]
					ifFalse: 
						["Non-commutative operation"
						term := StMessageNode
									receiver: op receiver
									selector: selector
									arguments: (Array with: sub variable)].
				sub
					variable: term;
					value: op argument;
					solveFor: aString]! !
!StAssignmentNode categoriesFor: #solveFor:!operations!private! !

!StMessageNode methodsFor!

inverseArithmeticOperator
	"If the receiver describes an arithmetic operation, then answer its inverse. If not, throw an error."

	^##((IdentityDictionary new)
		at: #+ put: #-;
		at: #- put: #+;
		at: #>> put: #<<;
		at: #<< put: #>>;
		at: #/ put: #*;
		at: #* put: #/;
		at: #// put: #*;
		shrink) at: self selector! !
!StMessageNode categoriesFor: #inverseArithmeticOperator!public! !

"End of package definition"!

