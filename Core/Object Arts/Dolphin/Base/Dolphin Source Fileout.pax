| package |
package := Package name: 'Dolphin Source Fileout'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{Kernel.SourceFormatNotSupportedError}
).

package setMethodNames: #(
	#(#{Core.Class} #definitionChunk)
	#(#{Core.Class} #fileOutOn:)
	#(#{Core.Class} #printDefinitionOn:)
	#(#{Core.Class} #storeClassCategories)
	#(#{Core.Metaclass} #storeClassCategories)
	#(#{Kernel.AbstractChunkSourceFiler} #emitBinaryVariableDefinition:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitCategories:for:in:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitCategoriesForMethods:of:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitCategoriesOfClass:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitCategoriesOfMethod:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitComment:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitCommentOfClass:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitFileOutHeader)
	#(#{Kernel.AbstractChunkSourceFiler} #emitMethod:)
	#(#{Kernel.AbstractChunkSourceFiler} #emitSpecialBehaviorAttributesOfClass:)
	#(#{Kernel.AbstractChunkSourceFiler} #fileOutAttributesOfClass:)
	#(#{Kernel.AbstractChunkSourceFiler} #fileOutMessages:ofBehavior:)
	#(#{Kernel.AbstractChunkSourceFiler} #fileOutProtocols:ofBehavior:)
	#(#{Kernel.AbstractChunkSourceFiler} #logEvaluation:)
	#(#{Kernel.AbstractChunkSourceFiler} #logRemoveSelector:of:)
	#(#{Kernel.AbstractChunkSourceFiler} #logRemoveSelectors:of:)
	#(#{Kernel.AbstractChunkSourceFiler} #storeCommentString:forClass:)
	#(#{Kernel.AbstractChunkSourceFiler} #storeCommentString:forPackage:)
	#(#{Kernel.AbstractChunkSourceFiler} #storeSource:for:)
	#(#{Kernel.BootSessionManager} #saveImageTo:)
	#(#{Kernel.ChunkSourceFiler} #storeSource:for:)
	#(#{Kernel.CompiledMethod} #storeCategories)
	#(#{Kernel.SourceFiler} #collateClass:against:)
	#(#{Kernel.SourceFiler} #emitCategoriesOfClass:)
	#(#{Kernel.SourceFiler} #emitCategoriesOfMethod:)
	#(#{Kernel.SourceFiler} #emitComment:)
	#(#{Kernel.SourceFiler} #emitFileOutHeader)
	#(#{Kernel.SourceFiler} #emitMessages:ofBehavior:)
	#(#{Kernel.SourceFiler} #emitMethod:)
	#(#{Kernel.SourceFiler} #fileOutAllMethodsOfBehavior:)
	#(#{Kernel.SourceFiler} #fileOutAttributesOfClass:)
	#(#{Kernel.SourceFiler} #fileOutClass:)
	#(#{Kernel.SourceFiler} #fileOutDefinitionOfClass:)
	#(#{Kernel.SourceFiler} #fileOutExpression:)
	#(#{Kernel.SourceFiler} #fileOutMessages:ofBehavior:)
	#(#{Kernel.SourceFiler} #fileOutMethods:)
	#(#{Kernel.SourceFiler} #fileOutProtocols:ofBehavior:)
	#(#{Kernel.SourceFiler} #fileOutResource:)
	#(#{Kernel.SourceFiler} #logRemoveSelector:of:)
	#(#{Kernel.SourceFiler} #logRemoveSelectors:of:)
	#(#{Kernel.SourceFiler} #storeCommentString:forClass:)
	#(#{Kernel.SourceManager} #basicCompressSources:)
	#(#{Kernel.SourceManager} #compressChangedMethodsOf:onto:)
	#(#{Kernel.SourceManager} #compressChanges)
	#(#{Kernel.SourceManager} #compressChangesOf:onto:)
	#(#{Kernel.SourceManager} #compressChangesOnto:)
	#(#{Kernel.SourceManager} #compressPackageCommentsOn:)
	#(#{Kernel.SourceManager} #compressSources)
	#(#{Kernel.SourceManager} #compressSourcesWith:)
	#(#{Kernel.SourceManager} #copyAndReopenSources:)
	#(#{Kernel.SourceManager} #createDirectoryPath:)
	#(#{Kernel.SourceManager} #createSources:)
	#(#{Kernel.SourceManager} #createSourcesFile:)
	#(#{Kernel.SourceManager} #emitFileOutHeaderOn:)
	#(#{Kernel.SourceManager} #fileOut:)
	#(#{Kernel.SourceManager} #fileOut:to:)
	#(#{Kernel.SourceManager} #logChanged:)
	#(#{Kernel.SourceManager} #logComment:)
	#(#{Kernel.SourceManager} #logComment:to:)
	#(#{Kernel.SourceManager} #storeCategoriesForClass:)
	#(#{Kernel.SourceManager} #storeCategoriesForMethod:)
).

package setPrerequisites: #(
	'Dolphin'
	'..\System\Base64\Dolphin Base64'
	'..\System\Win32\MessageBox\Dolphin Message Box'
).

package setManualPrerequisites: #(
	'Dolphin Base64'
).

package!

"Class Definitions"!

Core.Error
	subclass: #'Kernel.SourceFormatNotSupportedError'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Class methodsFor!

definitionChunk
	"Answer a chunk string for the definition of the receiver"

	| stream |
	stream := String writeStream: 256.
	(self sourceFilerClass on: stream) fileOutDefinitionOfClass: self.
	^stream contents!

fileOutOn: aSourceFiler
	aSourceFiler fileOutClass: self!

printDefinitionOn: aPuttableStream
	"Private - Append the textual definition of the receiver to the <puttableStream> argument. Note that this includes the definition of the receiver's metaclass since we now define the whole caboodle using a single message."

	(self sourceFilerClass on: aPuttableStream) printBasicDefinitionOfClass: self!

storeClassCategories
	"Private - Record the categories of the receiver to the change log.
	The job is simply delegated to the receiver's source manager (if available)."

	self sourceManager storeCategoriesForClass: self! !

!Core.Class categoriesForMethods!
definitionChunk!public!source filing-class definition! !
fileOutOn:!public!source filing! !
printDefinitionOn:!private!source filing-class definition! !
storeClassCategories!private!source filing-methods! !
!

!Core.Metaclass methodsFor!

storeClassCategories
	"Private - Record the categories of the receiver to the change log.
	The job is simply delegated to the receiver's source manager (if available)."

	instanceClass storeClassCategories! !

!Core.Metaclass categoriesForMethods!
storeClassCategories!private!source filing-methods! !
!

!Kernel.AbstractChunkSourceFiler methodsFor!

emitBinaryVariableDefinition: aBindingReference
	"File out the text representation of the non-<sourceObject> which is the target of the
	<BindingReference> argument onto the receiver's source stream."

	| value |
	value := aBindingReference value.
	self emitPackageVariableReference: aBindingReference.
	stream
		nextPutAll: ' := ';
		print: Object;
		space;
		display: #fromBinaryStoreBytes:;
		space;
		cr.
	value binaryStoreBytes base64StoreOn: stream.
	stream
		nextPut: $!!;
		cr!

emitCategories: aCollection for: aSymbol in: aClass
	stream nextPut: $!!.
	self emitClassName: aClass on: stream.
	stream
		space;
		nextPutAll: #categoriesFor:;
		space.
	self emitString: aSymbol fullPrintString.
	stream nextPut: $!!.
	aCollection asSortedArray do: [:each | self nextChunkPut: each name].
	self endChunk!

emitCategoriesForMethods: aSequencableCollection of: aClass
	"Emit source that associates the <CompiledMethod>s in the <collection>, methods, with their current categories.
	Note that it is assumed that all the methods are of the same class."

	aSequencableCollection isEmpty ifTrue: [^self].
	stream
		cr;
		nextPut: $!!.
	self emitClassName: aClass on: stream.
	stream
		space;
		nextPutAll: #categoriesForMethods;
		nextPut: $!!;
		cr.
	aSequencableCollection do: 
			[:method |
			self emitString: method selector.
			stream nextPut: $!!.
			method realCategories asSortedArray do: [:each | self nextChunkPut: each name].
			self endChunk].
	stream
		nextPut: $!!;
		cr!

emitCategoriesOfClass: aClass
	"Private - Emit a chunk to source stream to reclassify the <Class>, aClass, in all its existing categories."

	stream nextPut: $!!.
	self emitClassName: aClass on: stream.
	stream
		space;
		nextPutAll: #categoriesForClass;
		nextPut: $!!.
	aClass categories asSortedArray do: [:aCategory | self nextChunkPut: aCategory asString].
	self endChunk!

emitCategoriesOfMethod: aCompiledMethod
	"Private - Append a chunk to the receiver's stream	to reclassify the <CompiledMethod>, aCompiledMethod, in all its current method categories."

	self
		emitCategories: aCompiledMethod realCategories
		for: aCompiledMethod selector
		in: aCompiledMethod methodClass!

emitComment: aString
	"Private - Record aString to the chunk stream as a comment. All comments logged are prefixed
	with a timestamp. N.B. Logging requests should be directed through the SessionManager."

	stream nextPut: $".
	self emitString: aString.
	stream
		nextPut: $";
		nextPut: $!!;
		cr;
		flush!

emitCommentOfClass: aClass
	"Private - Emit a chunk which defines the comment for the <Class>, aClass, to the <puttableStream>
	aWriteStream."

	self emitClassName: aClass on: stream.
	stream
		space;
		display: #comment:;
		space.
	self nextChunkPut: aClass comment fullPrintString.
	stream cr!

emitFileOutHeader
	self
		emitComment: 'Filed out from ' , VM productName;
		cr!

emitMethod: aCompiledMethod 
	"Private - File out the source of the single <CompiledMethod>, aCompiledMethod, 
	to the source stream, updating the method's source descriptor if configured with a 
	source file index."

	self storeSource: aCompiledMethod getSource for: aCompiledMethod!

emitSpecialBehaviorAttributesOfClass: aClass
	(self specialBehaviorAttributesOfClass: aClass) do: 
			[:each |
			stream cr.
			self emitClassName: aClass on: stream.
			stream
				space;
				nextPutAll: each;
				nextPutAll: ': true!!';
				cr]!

fileOutAttributesOfClass: aClass
	"File-out any attributes of the aClass (e.g. the comment, GUID, etc) not included in the basic
	aClass definition, onto the source stream."

	aClass guid
		ifNotNil: 
			[self
				cr;
				emitGUIDOfClass: aClass].
	self emitSpecialBehaviorAttributesOfClass: aClass.
	aClass comment
		ifNotNil: 
			[self
				cr;
				emitCommentOfClass: aClass].
	aClass classCategories
		ifNotNil: 
			[self
				cr;
				emitCategoriesOfClass: aClass]!

fileOutMessages: aCollection ofBehavior: aClass
	"Append the definitions of the methods of the <ClassDescription>, aClassDescription,
	whose names match the selectors in the <collection> of <Symbol>, aCollection, to the source 
	stream. Any method category settings are included."

	| methods |
	aCollection isEmpty ifTrue: [^self].
	self emitHeaderForMethodsOf: aClass.
	methods := self emitMessages: aCollection ofBehavior: aClass.
	self emitFooterForMethodsOf: aClass.
	self isSourceOnly ifFalse: [self emitCategoriesForMethods: methods of: aClass].
	self cr!

fileOutProtocols: aCollection ofBehavior: aClassDescription
	"File out the <MethodProtocol>s in the <collection>, aCollection, to source stream,
	associating them with the <ClassDescription>, aClassDescription."

	aCollection isEmpty ifTrue: [^self].
	(aCollection asSortedArray: [:a :b | a name <==> b name <= 0]) do: 
			[:p |
			self emitClassName: aClassDescription on: stream.
			stream
				nextPutAll: ' methodProtocol: ';
				print: p asSymbol;
				nextPutAll: ' attributes: ';
				print: p attributes asArray;
				nextPutAll: ' selectors: #('.
			"We must print the selectors individually as their may be very many and the default print truncates after
			 a certain number of characters."
			p selectors asSortedArray do: [:s | stream print: s] separatedBy: [stream space].
			self
				nextChunkPut: ')';
				cr].
	self cr!

logEvaluation: aString
	"Private - Log an immediate expression evaluation to the source stream."

	stream nextPutAll: '"Evaluate"'; cr.
	self fileOutExpression: aString!

logRemoveSelector: aSymbol of: aClassDescription
	self emitClassName: aClassDescription on: stream.
	stream
		nextPutAll: ' removeSelector: ';
		print: aSymbol;
		nextPutAll: ' ifAbsent: []'.
	self endChunk!

logRemoveSelectors: aCollection of: aClassDescription
	self emitClassName: aClassDescription on: stream.
	stream
		space;
		display: #removeSelectors:;
		nextPutAll: ' #('.
	aCollection do: [:each | stream print: each] separatedBy: [stream space].
	stream nextPut: $).
	self endChunk!

storeCommentString: aString forClass: aClass
	"Save the <readableString>, aString, as the comment text for the 
	<Class>, aClass, to the receiver's source stream encoding the position and 
	index into the class' source descriptor so that the comment may be retrieved later."

	self emitClassName: aClass on: stream.
	stream nextPutAll: ' comment: '.
	self storeSource: aString fullPrintString for: aClass.
	stream cr!

storeCommentString: aString forPackage: aPackage 
	"Save the <readableString>, aString, as the comment text for the <Package>, aPackage, to the
	receiver's source stream encoding the position and index into the package's source
	descriptor so that the comment may be retrieved later."

	stream
		nextPut: $(;
		print: aPackage class;
		space;
		nextPutAll: #manager;
		space;
		nextPutAll: #packageNamed:;
		space;
		print: aPackage name;
		nextPutAll: ') ';
		nextPutAll: #comment:;
		cr.
	self storeSource: aString fullPrintString for: aPackage.
	stream cr!

storeSource: aString for: aSourceObject
	"Private - Store the <readableString>, aString, as the source text for the <sourceObject>, aSourceObject. If the receiver is associated with a source file then update aSourceObject's source descriptor so that in future it retrieves the source text from the receiver's source stream."

	self nextChunkPut: aString! !

!Kernel.AbstractChunkSourceFiler categoriesForMethods!
emitBinaryVariableDefinition:!public!source filing-file out! !
emitCategories:for:in:!private!source filing-pax! !
emitCategoriesForMethods:of:!public!source filing! !
emitCategoriesOfClass:!private!source filing-file out! !
emitCategoriesOfMethod:!private!source filing-file out! !
emitComment:!private!source filing-file out! !
emitCommentOfClass:!public!source filing! !
emitFileOutHeader!private!source filing! !
emitMethod:!private!source filing-file out! !
emitSpecialBehaviorAttributesOfClass:!public!source filing! !
fileOutAttributesOfClass:!public!source filing! !
fileOutMessages:ofBehavior:!public!source filing! !
fileOutProtocols:ofBehavior:!public!source filing-file out! !
logEvaluation:!private!source filing-file out! !
logRemoveSelector:of:!development!helpers!public! !
logRemoveSelectors:of:!development!helpers!public! !
storeCommentString:forClass:!public!source filing-file out! !
storeCommentString:forPackage:!public!source filing-file out! !
storeSource:for:!private!source filing-file out! !
!

!Kernel.BootSessionManager methodsFor!

saveImageTo: aString
	"Private - Snapshot to filePath.img, marking the log with a timestamp and copying sources
	files. N.B. Use the public entry point #saveImage: to save an image to a new path.

	Take a special interest if we do not currently have the source files available. This will be
	the case when we load from a .exe. In this case we generate some suitable empty source
	files. We also have to mark methods so that they know they have lost any reference to
	information in a .sml file."

	| oldImagePath oldSentry |
	oldImagePath := self imagePath.
	oldSentry := sentry.

	"Now save image and swap over sources. Take care to end up with a good sources and imagePath"
	
	[self imagePath: aString.
	self createSentinel
		ifTrue: 
			[| mb |
			mb := UI.MessageBox new.
			mb beTaskModal.
			mb
				errorMsg: ('The image <1p> is open in another Dolphin instance.<n><n>Close that instance and try again should you still wish to save this image to that name.<n><n>The image has not been saved!!'
						expandMacrosWith: self imageFileName).
			^self].
	self class sourceManager copyAndReopenSources: self imagePath.
	self
		snapshot: self imageFileName;
		logComment: ('Image saved to <1p>' expandMacrosWith: aString).
	Kernel32 closeHandle: oldSentry]
			ifCurtailed: 
				["Attempt to return to the old state so sources & stuff are intact
				 before showing the user the problem."
				
				[Kernel32 closeHandle: sentry.
				sentry := oldSentry.
				self
					imagePath: oldImagePath;
					openSources]
						on: Error
						do: [:anError | anError resignalAsWarning]]! !

!Kernel.BootSessionManager categoriesForMethods!
saveImageTo:!operations-saving!private! !
!

!Kernel.ChunkSourceFiler methodsFor!

storeSource: aString for: aSourceObject 
	"Private - Store the <readableString>, aString, as the source text for the <sourceObject>,
	aSourceObject. If the receiver has been associated with a source file (i.e. the
	sourceFileIndex is set) then update aSourceObject's source descriptor so that in future it
	retrieves the source text from the receiver's source stream."

	| position |
	position := stream position.
	self nextChunkPut: aString.
	sourceFileIndex notNil 
		ifTrue: 
			[aSourceObject sourceDescriptor: (aString isEmpty ifFalse: [self sourceDescriptorForIndex: sourceFileIndex position: position])]! !

!Kernel.ChunkSourceFiler categoriesForMethods!
storeSource:for:!private!source filing-file out! !
!

!Kernel.CompiledMethod methodsFor!

storeCategories
	"Private - Record the categories of the receiver.
	The job is simply delegated to the receiver's source manager."

	self class sourceManager storeCategoriesForMethod: self.! !

!Kernel.CompiledMethod categoriesForMethods!
storeCategories!private!source filing-methods! !
!

!Kernel.SourceFiler methodsFor!

collateClass: aClass1 against: aClass2
	^aClass1 fullName <==> aClass2 fullName!

emitCategoriesOfClass: aClass
	"Private - Emit a chunk to source stream to reclassify the <Class>, aClass, in all its existing categories."

	self subclassResponsibility!

emitCategoriesOfMethod: aCompiledMethod
	"Private - Append a chunk to the <puttableStream>, aWriteStream,
	to reclassify the <CompiledMethod>, aCompiledMethod, in all its current 
	method categories."

	self subclassResponsibility!

emitComment: aString 
	"Private - Record aString to the source stream.
	N.B. Logging requests should be directed through the SessionManager."

	^self subclassResponsibility!

emitFileOutHeader
	self subclassResponsibility!

emitMessages: aCollection ofBehavior: aClass
	| methods sortedSelectors |
	sortedSelectors := aCollection asSortedArray: SortedCollection caseSensitiveSortBlock.
	methods := sortedSelectors collect: 
					[:selector |
					| method |
					self
						cr;
						cr.
					method := aClass compiledMethodAt: selector.
					self emitMethod: method.
					method].
	^methods!

emitMethod: aCompiledMethod 
	"Private - File out the source of the single <CompiledMethod>, aCompiledMethod, to the source stream."

	^self subclassResponsibility!

fileOutAllMethodsOfBehavior: aClassDescription 
	"Emit definitions of all methods in the <ClassDescription> argument, aClassDescription,
	to the source stream."

	self fileOutMessages: aClassDescription selectors ofBehavior: aClassDescription.
	self isSourceOnly 
		ifFalse: [self fileOutProtocols: aClassDescription protocols ofBehavior: aClassDescription]!

fileOutAttributesOfClass: aClass
	"File-out any attributes of the aClass (e.g. the comment, GUID, etc) not included in the basic
	aClass definition, onto the source stream."

	self subclassResponsibility!

fileOutClass: aClass
	"File out a full definition of the <ClassDescription>, aClass, to the source stream
	including all methods, categories and protocols. This includes all methods of the
	class, including any loose methods that may belong to packages other than the
	owning package of the class."

	self
		fileOutDefinitionOfClass: aClass;
		cr;
		fileOutAllMethodsOfBehavior: aClass;
		fileOutAllMethodsOfBehavior: aClass class!

fileOutDefinitionOfClass: aClass
	"File-out a definition of the <Class> to the source stream."

	self
		fileOutBasicDefinitionOfClass: aClass;
		fileOutAttributesOfClass: aClass!

fileOutExpression: aString
	"Append an immediate expression evaluation to the source stream."

	^self subclassResponsibility!

fileOutMessages: aCollection ofBehavior: aClass
	"Append the definitions of the methods of the <ClassDescription>, aClassDescription,
	whose names match the selectors in the <collection> of <Symbol>, aCollection, to the source 
	stream. Any method category settings are included."

	self subclassResponsibility!

fileOutMethods: aCollection
	"Append the definitions of the methods in the <collection> argument to the source stream,
	ordered by class. Any method category settings are included."

	| methodsByClass |
	methodsByClass := Dictionary new.
	aCollection do: 
			[:each |
			"Note that the selectors will be filed out in sorted order, so we don't need to sort them"
			(methodsByClass at: each methodClass ifAbsentPutClean: [OrderedCollection new]) add: each selector].
	(methodsByClass associations sort: [:a :b | (self collateClass: a key against: b key) <= 0])
		do: [:each | self fileOutMessages: each value ofBehavior: each key]!

fileOutProtocols: aCollection ofBehavior: aClassDescription 
	"File out the <MethodProtocol>s in the <collection>, aCollection, to the source stream,
	associating them with the <ClassDescription>, aClassDescription."

	^self subclassResponsibility!

fileOutResource: aResourceIdentifier 
	"Append a definition of the resource identified by the <ResourceIdentifier>, aResourceIdentifer,
	to the source stream. The definition should be sufficient to recreate a copy  of the resource."

	^self subclassResponsibility!

logRemoveSelector: aSymbol of: aClassDescription
	self subclassResponsibility!

logRemoveSelectors: aCollection of: aClassDescription
	self subclassResponsibility!

storeCommentString: aString forClass: aClass
	"Save the <readableString>, aString, as the comment text for the 
	<Class>, aClass, to the receiver's source stream encoding the position and 
	index into the class' source descriptor so that the comment may be retrieved later."

	^self subclassResponsibility! !

!Kernel.SourceFiler categoriesForMethods!
collateClass:against:!private!source filing! !
emitCategoriesOfClass:!private!source filing-file out! !
emitCategoriesOfMethod:!private!source filing-file out! !
emitComment:!operations-logging!private! !
emitFileOutHeader!private!source filing! !
emitMessages:ofBehavior:!private!source filing! !
emitMethod:!private!source filing! !
fileOutAllMethodsOfBehavior:!public!source filing! !
fileOutAttributesOfClass:!public!source filing! !
fileOutClass:!public!source filing! !
fileOutDefinitionOfClass:!public! !
fileOutExpression:!public! !
fileOutMessages:ofBehavior:!public! !
fileOutMethods:!public! !
fileOutProtocols:ofBehavior:!public! !
fileOutResource:!public! !
logRemoveSelector:of:!development!helpers!public! !
logRemoveSelectors:of:!development!helpers!public! !
storeCommentString:forClass:!public!source filing! !
!

!Kernel.SourceManager methodsFor!

basicCompressSources: progress
	"Private - Compresses the sources file reporting the progress to
	<monadicValuable>, progress."

	| totalClasses index tmpPath smlFile filer classes |
	index := 0.
	classes := Smalltalk allClasses.
	totalClasses := classes size.

	"Create temporary stream file"
	tmpPath := File temporaryFilenameWithPrefix: self changesExtension.
	smlFile := self sourcesFileName.
	filer := self sourceFilerClass on: (FileStream write: tmpPath).
	filer
		sourceFileIndex: SourcesIndex;
		isSourceOnly: true.
	self logComment: 'Compressing sources…' to: filer.
	index := 0.
	classes do: 
			[:class |
			filer storeCommentString: class comment forClass: class.
			filer fileOutAllMethodsOfBehavior: class class.
			filer fileOutAllMethodsOfBehavior: class.
			progress value: (index := index + 1) * 100 / totalClasses].
	self compressPackageCommentsOn: filer.
	filer close.

	"Copy temporary file over to dolphin.sml"
	self closeSourcesFile.
	(File exists: smlFile) ifTrue: [File delete: smlFile].
	File rename: tmpPath to: smlFile.
	self openSourcesFile: smlFile.

	"Save image"
	SessionManager current saveImage.

	"Clear down change log"
	self truncateChanges.
	self logComment: 'Compressed sources'!

compressChangedMethodsOf: aBehavior onto: aSourceFiler 
	"Private - Emits the changed methods of aBehavior onto aSourceFiler."

	| changed |
	changed := aBehavior changedMethods collect: [:each | each selector].
	aSourceFiler fileOutMessages: changed ofBehavior: aBehavior!

compressChanges
	"Compresses the change log to remove duplicate entries, and save the image to keep it in sync."

	| tmpPath filer |
	tmpPath := File temporaryFilenameWithPrefix: self changesExtension.
	filer := self chunkFilerOn: (FileStream write: tmpPath).
	filer sourceFileIndex: ChangesIndex.
	mutex critical: 
			[self compressChangesOnto: filer.
			filer close.
			self openNewChangesFile: tmpPath].
	self logComment: 'Compressed changes'.

	"Save image"
	SessionManager current saveImage!

compressChangesOf: aClass onto: aSourceFiler 
	"Private - Compress any changes to the specified class onto the <SourceFiler>."

	"First the comment ..."

	(self sourceIndexFromDescriptor: aClass sourceDescriptor) = ChangesIndex 
		ifTrue: [aSourceFiler storeCommentString: aClass comment forClass: aClass].
	"...then the methods..."
	self
		compressChangedMethodsOf: aClass class onto: aSourceFiler;
		compressChangedMethodsOf: aClass onto: aSourceFiler.
	"Have to reset the changes index so that all changed methods are included since we have lost
	the save point"
	aClass isChanged 
		ifTrue: 
			["Note that it is necessary to remove the existing change index first since
			 attempts after the first to set it are ignored"
			aClass
				isChanged: false;
				changeIndexValue: [0]]!

compressChangesOnto: aSourceFiler
	Smalltalk allClasses do: [:each | self compressChangesOf: each onto: aSourceFiler].
	Package manager packages do: 
			[:each |
			(self sourceIndexFromDescriptor: each sourceDescriptor) = ChangesIndex
				ifTrue: [aSourceFiler storeCommentString: each comment forPackage: each]]!

compressPackageCommentsOn: aSourceFiler
	Package manager packages do: 
			[:each |
			| comment |
			comment := each comment.
			comment isEmpty
				ifTrue: [each sourceDescriptor: nil]
				ifFalse: [aSourceFiler storeCommentString: comment forPackage: each]]!

compressSources
	"Compresses the change log into the sources file. The result is a new empty changes log.
	The image must be saved to keep it in sync."

	self basicCompressSources: [:x | ]

!

compressSourcesWith: aProgressDialog
	"Compresses the change log into the sources file. The result is a new empty changes log.
	During the operation the progress is indicated by aProgressDialog."

	aProgressDialog operation: [:progress | self basicCompressSources: progress ].
	aProgressDialog showModal.
!

copyAndReopenSources: aString
	"Private - Copy sources to the path and root file name (i.e. without extension) specified
	by the <readableString> argument, and then open the copies for any further perusal and 
	modification.

	Take a special interest if we do not currently have the source files available.
	This will be the case when we load from a .exe. In this case we generate some
	suitable empty source files. We also have to mark methods so that they know
	they have lost any reference to information in a .sml file."

	| hadSources |
	hadSources := self hasSources.

	"Copy and and swap over sources. Take care to end up with a good sources and imagePath"
	hadSources
		ifTrue: 
			[self copySourceFilesTo: aString.
			self closeSources].
	hadSources
		ifFalse: 
			[self createSources: aString.
			"We have permanently lost access to any source information so mark all methods"
			Smalltalk allBehaviorsDo: [:aBehavior | aBehavior methodsDo: [:aMethod | aMethod loseSource]]].
	self openSources: aString!

createDirectoryPath: aString
	File createDirectoryPath: (File splitPathFrom: aString)!

createSources: filePath
	"Private - This will create a sources and changes file for the current image. Does not
	update the receiver to use these new files though."

	self createSourcesFile: filePath.
	(File
		open: (self changesFileNameFromPath: filePath)
		mode: #truncate
		check: false) close!

createSourcesFile: filePath
	"Private - Create (or truncate) a source file with the specified path (and default extension)."

	| filer |
	self createDirectoryPath: (self sourcesFileNameFromPath: filePath).
	filer := self sourceFilerClass on: (FileStream write: (self sourcesFileNameFromPath: filePath)).
	self emitFileOutHeaderOn: filer.
	filer close!

emitFileOutHeaderOn: aSourceFiler
	"Private - Append the standard Dolphin file out header to the
	<puttableStream>, aWriteStream."

	aSourceFiler emitFileOutHeader!

fileOut: anObject
	"File out anObject to its default file. If an error occurs during file out, the file
	will be closed by finalization."

	self fileOut: anObject to: anObject fileOutName.!

fileOut: anObject to: aFileName
	"File out anObject to aFileName. If an error occurs during file out, the file
	will be closed by finalization."

	| filer |
	self createDirectoryPath: aFileName.
	filer := anObject sourceFilerClass on: (FileStream write: aFileName).
	self emitFileOutHeaderOn: filer.
	anObject fileOutOn: filer.
	filer close!

logChanged: aSourceObject
	"File out the changed <sourceObject>, aSourceObject, to the change log."

	self changesFiler
		ifNotNil: 
			[:logger |
			mutex critical: 
					[logger setToEnd.
					aSourceObject fileOutOn: logger.
					logger flush]]!

logComment: aString
	"Record aString to the change log as a comment. All comments logged are prefixed with a timestamp.
	N.B. Logging requests should be directed through the SessionManager."

	self changesFiler ifNotNil: [:logger | self logComment: aString to: logger]!

logComment: aString to: aSourceFiler
	"Private - Record aString to the specified source file as a comment. All comments	logged are prefixed with a timestamp, and then a full width colon character."

	| stampedComment |
	stampedComment := (String writeStream: 37 + aString size)
				print: DateAndTime now;
				nextPut: $：;
				nextPutAll: aString;
				grabContents.
	mutex critical: 
			[aSourceFiler
				setToEnd;
				emitComment: stampedComment;
				cr]!

storeCategoriesForClass: aClass
	"Private - Store the categories of the <ClassDescription> argument to the change log so that they may be reloaded later."

	self changesFiler
		ifNotNil: 
			[:logger |
			mutex critical: 
					[logger
						setToEnd;
						emitCategoriesOfClass: aClass;
						cr;
						flush]]!

storeCategoriesForMethod: aCompiledMethod
	"Private - Store the categories of the <CompiledMethod> argument to the change log so that they may be reloaded later."

	self changesFiler
		ifNotNil: 
			[:logger |
			mutex critical: 
					[logger
						setToEnd;
						emitCategoriesOfMethod: aCompiledMethod;
						cr;
						flush]]! !

!Kernel.SourceManager categoriesForMethods!
basicCompressSources:!operations-source files!private! !
compressChangedMethodsOf:onto:!operations-source files!private! !
compressChanges!operations-source files!public! !
compressChangesOf:onto:!operations-source files!private! !
compressChangesOnto:!operations-source files!public! !
compressPackageCommentsOn:!operations-source files!private! !
compressSources!operations-source files!public! !
compressSourcesWith:!operations-source files!public! !
copyAndReopenSources:!operations-source files!private! !
createDirectoryPath:!private!source filing! !
createSources:!operations-source files!private! !
createSourcesFile:!operations-source files!private! !
emitFileOutHeaderOn:!private!source filing! !
fileOut:!public!source filing! !
fileOut:to:!public!source filing! !
logChanged:!public!source filing! !
logComment:!operations-logging!public! !
logComment:to:!operations-logging!private! !
storeCategoriesForClass:!private!source filing! !
storeCategoriesForMethod:!private!source filing! !
!

"End of package definition"!

