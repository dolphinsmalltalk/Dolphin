| package |
package := Package name: 'Dolphin Legacy Resource Framework'.
package paxVersion: 1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Legacy Resource Framework.
Copyright (c) Object Arts Ltd. 1997-2006. 

Many of the classes here are the vestigial remains of the legacy resource framework from versions of Dolphin prior to 6.0. These are only required when loading view resources saved from these earlier versions of the system. '.

package basicPackageVersion: '6.1.1'.


package classNames
	add: #BytecodeRewriter;
	add: #Resource;
	add: #ResourceAccessor;
	add: #ResourceDummyAccessor;
	add: #ResourceGeneratorAccessor;
	add: #ResourceSTBAccessor;
	add: #ResourceSTBByteArrayAccessor;
	add: #ResourceSTBFileAccessor;
	add: #STBResourceSTBByteArrayAccessorProxy;
	add: #STBResourceSTBFileAccessorProxy;
	add: #ViewResource;
	yourself.

package methodNames
	add: #ChunkSourceFiler -> #fileOutResource:;
	add: #ResourceIdentifier -> #assignBinaryResourceData:;
	add: #RuntimeSessionManager -> #initializeFromSessionManager:;
	add: 'BlockClosure class' -> #convertBlockToClosure:;
	add: 'BlockClosure class' -> #convertMethodContext:;
	add: 'BlockClosure class' -> #rewriterClass;
	add: 'BlockClosure class' -> #stbConvertFrom:;
	add: 'ResourceIdentifier class' -> #resourceAt:ifAbsent:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Dolphin'
	'..\..\MVP\Base\Dolphin MVP Base').

package!

"Class Definitions"!

Object subclass: #BytecodeRewriter
	instanceVariableNames: 'blockStack instructions ip ipMap bytecodes bytecode newIP blockMap needsContext'
	classVariableNames: 'DispatchMap'
	poolDictionaries: 'OpcodePool'
	classInstanceVariableNames: ''!
Object subclass: #Resource
	instanceVariableNames: 'accessor icon'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ResourceAccessor
	instanceVariableNames: 'flags'
	classVariableNames: 'ChangedMask'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Resource subclass: #ViewResource
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ResourceAccessor subclass: #ResourceDummyAccessor
	instanceVariableNames: 'object'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ResourceAccessor subclass: #ResourceGeneratorAccessor
	instanceVariableNames: 'class selector'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ResourceAccessor subclass: #ResourceSTBAccessor
	instanceVariableNames: 'classLocator'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ResourceSTBAccessor subclass: #ResourceSTBByteArrayAccessor
	instanceVariableNames: 'byteArray'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ResourceSTBAccessor subclass: #ResourceSTBFileAccessor
	instanceVariableNames: 'fileName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
STBProxy subclass: #STBResourceSTBByteArrayAccessorProxy
	instanceVariableNames: 'bytes'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
STBProxy subclass: #STBResourceSTBFileAccessorProxy
	instanceVariableNames: 'fileName bytes'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!BlockClosure class methodsFor!

convertBlockToClosure: anArray 
	"Private - Convert an old-format block to a new format closure. The bytecodes are rewritten
	to be compatible with the BlockClosure VM, but the result will be very inefficient since it
	is assumed that all temps need to be shared, and arguments have to be copied into shared
	temps. Ideally all old blocks (such as those in View resources) should be recompiled at the
	earliest opportunity, certainly before application deployment as this upgrade will not be
	available at runtime."

	| answer method rewriter newMethod originalIP methodContext receiver |
	answer := self basicNew.
	method := anArray at: 4.
	rewriter := self rewriterClass new.
	newMethod := rewriter rewriteMethod: method.
	"We must swap old and new methods so that any other ref. to the old method is also updated"
	method become: newMethod.
	originalIP := anArray at: 3.
	methodContext := anArray at: 1.
	receiver := methodContext receiver.
	answer
		outer: (self convertMethodContext: methodContext);
		method: method;
		receiver: receiver.
	answer info: 0.
	answer
		argumentCount: (anArray at: 2);
		initialIP: (rewriter blockMap at: originalIP).
	^answer!

convertMethodContext: aMethodContext 
	"Private - Convert an old-format MethodContext to a new format Context."

	| context size |
	size := aMethodContext size.
	context := Context basicNew: size.
	context outer: 0.
	1 to: size do: [:i | context at: i put: (aMethodContext at: i)].
	^context!

rewriterClass
	^BytecodeRewriter!

stbConvertFrom: anSTBClassFormat 
	"Convert from earlier binary filed versions."

	"Note: It is assumed that all blocks will be upgraded before application deployment, so this
	conversion is deliberately placed in the 'development' category, and will not be available
	at runtime."

	| ver upgrading |
	ver := anSTBClassFormat version.
	upgrading := anSTBClassFormat isUpgrading.
	^
	[:data | 
	| newBlock |
	ver < 1 
		ifTrue: [newBlock := self convertBlockToClosure: data]
		ifFalse: 
			[ver < 2 
				ifTrue: [self error: 'Unable to convert interim block format']
				ifFalse: 
					[newBlock := self basicNew: data size - self instSize.
					1 to: data size do: [:i | newBlock instVarAt: i put: (data at: i)]]].
	upgrading ifTrue: [newBlock := self attemptToUpgradeBlock: newBlock data: data].
	newBlock]! !
!BlockClosure class categoriesFor: #convertBlockToClosure:!binary filing!development!private! !
!BlockClosure class categoriesFor: #convertMethodContext:!binary filing!development!private! !
!BlockClosure class categoriesFor: #rewriterClass!binary filing!development!private! !
!BlockClosure class categoriesFor: #stbConvertFrom:!binary filing!development!public! !

!ChunkSourceFiler methodsFor!

fileOutResource: aResourceIdentifier 
	"Append a definition of the resource identified by the <ResourceIdentifier>,
	aResourceIdentifer, to the <puttableStream>, aWriteStream. The definition should be
	sufficient to recreate a copy of the resource."

	stream
		nextPut: $(;
		print: aResourceIdentifier class;
		nextPutAll: ' class: ';
		print: aResourceIdentifier owningClass;
		nextPutAll: ' name: ';
		print: aResourceIdentifier name;
		nextPutAll: ') assign: (';
		print: Object;
		space;
		display: #fromBinaryStoreBytes:;
		cr.
	aResourceIdentifier resource asInternalResource binaryStoreBytes base64StoreOn: stream.
	self emitChunk: ')'! !
!ChunkSourceFiler categoriesFor: #fileOutResource:!public!source filing-file out! !

!ResourceIdentifier methodsFor!

assignBinaryResourceData: aViewResource 
	| view viewClass |
	viewClass := self class environment at: #View.
	view := aViewResource loadWithContext: viewClass desktop forEdit: true.
	self assign: view literalStoreArray.
	view destroy! !
!ResourceIdentifier categoriesFor: #assignBinaryResourceData:!private! !

!ResourceIdentifier class methodsFor!

resourceAt: aResourceIdentifier ifAbsent: aBlock 
	"Legacy resource location code from the previous resource manager framework.
	Answers the resource data associated with aResourceIdentifier"

	^aResourceIdentifier resource! !
!ResourceIdentifier class categoriesFor: #resourceAt:ifAbsent:!accessing!public! !

!RuntimeSessionManager methodsFor!

initializeFromSessionManager: oldSessionManager
	"Private - The receiver has taken take over as the current session
	manager from oldSessionManager. This is an opportunity to transfer
	state information from the replaced manager."

	super initializeFromSessionManager: oldSessionManager.
	#{ResourceAccessor} ifDefined: [:ra | ra ensureAccessorsAreInternal]! !
!RuntimeSessionManager categoriesFor: #initializeFromSessionManager:!initializing!private! !

"End of package definition"!

