| package |
package := Package name: 'Dolphin Legacy Resource Framework'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Legacy Resource Framework.
Copyright (c) Object Arts Ltd. 1997-2006. 

Many of the classes here are the vestigial remains of the legacy resource framework from versions of Dolphin prior to 6.0. These are only required when loading the binary view resources saved from these earlier versions of the system. '.

package basicPackageVersion: '6.1.1'.


package setClassNames: #(
	#{Kernel.D5BytecodeRewriter}
	#{Smalltalk.LargeNegativeInteger}
	#{Smalltalk.LargePositiveInteger}
	#{Smalltalk.OldLargeInteger}
	#{Smalltalk.Resource}
	#{Smalltalk.ResourceAccessor}
	#{Smalltalk.ResourceDummyAccessor}
	#{Smalltalk.ResourceGeneratorAccessor}
	#{Smalltalk.ResourceSTBAccessor}
	#{Smalltalk.ResourceSTBByteArrayAccessor}
	#{Smalltalk.ResourceSTBFileAccessor}
	#{Smalltalk.STBResourceSTBByteArrayAccessorProxy}
	#{Smalltalk.STBResourceSTBFileAccessorProxy}
	#{Smalltalk.ViewResource}
).

package setMethodNames: #(
	#(#{Kernel.AbstractChunkSourceFiler} #fileOutResource:)
	#(#{Kernel.BlockClosure class} #attemptToRecompile:)
	#(#{Kernel.BlockClosure class} #attemptToUpgradeBlock:data:)
	#(#{Kernel.BlockClosure class} #convertBlockToClosure:)
	#(#{Kernel.BlockClosure class} #convertMethodContext:)
	#(#{Kernel.BlockClosure class} #rewriterClass)
	#(#{Kernel.BlockClosure class} #stbConvertFrom:)
	#(#{UI.ResourceIdentifier} #assignBinaryResourceData:)
	#(#{UI.ResourceIdentifier} #stlFilerClass)
	#(#{UI.ResourceIdentifier class} #resourceAt:ifAbsent:)
	#(#{UI.RuntimeSessionManager} #initializeFromSessionManager:)
).

package setPrerequisites: #(
	'..\Dolphin'
	'..\..\System\Filer\Dolphin Binary Filer'
	'Dolphin Legacy Package Support'
	'..\..\System\Filer\Dolphin Literal Out Filer (Old versions)'
	'..\..\MVP\Base\Dolphin MVP Base'
	'..\..\System\Filer\Dolphin STx Filer Core'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Kernel.D5BytecodeRewriter'
	instanceVariableNames: 'blockStack instructions ip ipMap bytecodes bytecode newIP blockMap needsContext'
	classVariableNames: 'DispatchMap'
	imports: #(#{Kernel.OpcodePool})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	variableByteSubclass: #OldLargeInteger
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #Resource
	instanceVariableNames: 'accessor icon'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #ResourceAccessor
	instanceVariableNames: 'flags'
	classVariableNames: 'ChangedMask'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OldLargeInteger
	variableByteSubclass: #LargeNegativeInteger
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OldLargeInteger
	variableByteSubclass: #LargePositiveInteger
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Resource
	subclass: #ViewResource
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

ResourceAccessor
	subclass: #ResourceDummyAccessor
	instanceVariableNames: 'object'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

ResourceAccessor
	subclass: #ResourceGeneratorAccessor
	instanceVariableNames: 'class selector'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

ResourceAccessor
	subclass: #ResourceSTBAccessor
	instanceVariableNames: 'classLocator'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

ResourceSTBAccessor
	subclass: #ResourceSTBByteArrayAccessor
	instanceVariableNames: 'byteArray'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

ResourceSTBAccessor
	subclass: #ResourceSTBFileAccessor
	instanceVariableNames: 'fileName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.STxProxy
	subclass: #STBResourceSTBByteArrayAccessorProxy
	instanceVariableNames: 'bytes'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.STxProxy
	subclass: #STBResourceSTBFileAccessorProxy
	instanceVariableNames: 'fileName bytes'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Kernel.AbstractChunkSourceFiler methodsFor!

fileOutResource: aResourceIdentifier
	"Append a definition of the resource identified by the <ResourceIdentifier>,
	aResourceIdentifer, to the <puttableStream>, aWriteStream. The definition should be
	sufficient to recreate a copy of the resource."

	stream
		nextPut: $(;
		print: aResourceIdentifier class;
		nextPutAll: ' class: ';
		print: aResourceIdentifier owningClass;
		nextPutAll: ' name: ';
		print: aResourceIdentifier name;
		nextPutAll: ') assign: (';
		print: Object;
		space;
		display: #fromBinaryStoreBytes:;
		cr.
	aResourceIdentifier resource asInternalResource binaryStoreBytes base64StoreOn: stream.
	self emitChunk: ')'! !

!Kernel.AbstractChunkSourceFiler categoriesForMethods!
fileOutResource:!public!source filing-file out! !
!

!Kernel.BlockClosure class methodsFor!

attemptToRecompile: aBlockClosure
	| oldMethod newBlock newMethod receiver |
	oldMethod := aBlockClosure method.
	Notification signal: 'Recompiling block: ' , aBlockClosure printString.
	oldMethod class ~~ CompiledExpression
		ifTrue: 
			[Notification signal: 'Unable to recompile block because it was created by a method '.
			^aBlockClosure].
	receiver := aBlockClosure receiver.
	newMethod := Compiler
				compileExpression: oldMethod getSource
				in: (receiver ifNotNil: [oldMethod methodClass])
				environment: oldMethod customEnvironment
				evaluationPools: oldMethod evaluationPools
				flags: 0.
	newMethod isNil
		ifTrue: 
			[Notification signal: 'Error recompiling block'.
			^aBlockClosure].
	newBlock := [newMethod value: receiver withArguments: #()] on: Error
				do: 
					[:ex |
					Notification signal: 'Error creating block: ' , ex printString.
					nil].
	^newBlock ?? aBlockClosure!

attemptToUpgradeBlock: aBlockClosure data: data 
	| recompiledBlock newMethod |
	recompiledBlock := self attemptToRecompile: aBlockClosure.
	recompiledBlock isClean ifFalse: [^recompiledBlock].

	"Danger Will Robinson: If the new block is clean, then it will be referenced from the literal frame of its home method.
	When the STBInFiler #become:s the array with the answer to swap the refs, the array of old vars will end up
	stored in the literal frame as useless junk that we don't want, therefore we pre-emptively replace the ref from
	the literal frame with the array so that it is all correct when swapped [my brain exploded before I understood that, Ed]"
	newMethod := recompiledBlock method.
	newMethod whileMutableDo: 
			[1 to: newMethod literalCount
				do: [:i | (newMethod at: i) == recompiledBlock ifTrue: [newMethod at: i put: data]]].
	^recompiledBlock!

convertBlockToClosure: anArray 
	"Private - Convert an old-format block to a new format closure. The bytecodes are rewritten
	to be compatible with the BlockClosure VM, but the result will be very inefficient since it
	is assumed that all temps need to be shared, and arguments have to be copied into shared
	temps. Ideally all old blocks (such as those in View resources) should be recompiled at the
	earliest opportunity, certainly before application deployment as this upgrade will not be
	available at runtime."

	| answer method rewriter newMethod originalIP methodContext receiver |
	answer := self basicNew.
	method := anArray at: 4.
	rewriter := self rewriterClass new.
	newMethod := rewriter rewriteMethod: method.
	"We must swap old and new methods so that any other ref. to the old method is also updated"
	method become: newMethod.
	originalIP := anArray at: 3.
	methodContext := anArray at: 1.
	receiver := methodContext receiver.
	answer
		outer: (self convertMethodContext: methodContext);
		method: method;
		receiver: receiver.
	answer info: 0.
	answer
		argumentCount: (anArray at: 2);
		initialIP: (rewriter blockMap at: originalIP).
	^answer!

convertMethodContext: aMethodContext
	"Private - Convert an old-format MethodContext to a new format Context."

	| context size |
	size := aMethodContext size.
	context := Context basicNew: size.
	context outer: 0.
	1 to: size do: [:i | context at: i put: (aMethodContext at: i)].
	^context!

rewriterClass
	^D5BytecodeRewriter!

stbConvertFrom: anSTBClassFormat 
	"Convert from earlier binary filed versions."

	"Note: It is assumed that all blocks will be upgraded before application deployment, so this
	conversion is deliberately placed in the 'development' category, and will not be available
	at runtime."

	| ver upgrading |
	ver := anSTBClassFormat version.
	upgrading := anSTBClassFormat isUpgrading.
	^
	[:data | 
	| newBlock |
	ver < 1 
		ifTrue: [newBlock := self convertBlockToClosure: data]
		ifFalse: 
			[ver < 2 
				ifTrue: [self error: 'Unable to convert interim block format']
				ifFalse: 
					[newBlock := self basicNew: data size - self instSize.
					1 to: data size do: [:i | newBlock instVarAt: i put: (data at: i)]]].
	upgrading ifTrue: [newBlock := self attemptToUpgradeBlock: newBlock data: data].
	newBlock]! !

!Kernel.BlockClosure class categoriesForMethods!
attemptToRecompile:!binary filing!development!private! !
attemptToUpgradeBlock:data:!binary filing!development!private! !
convertBlockToClosure:!binary filing!development!private! !
convertMethodContext:!binary filing!development!private! !
rewriterClass!binary filing!development!private! !
stbConvertFrom:!binary filing!development!public! !
!

!UI.ResourceIdentifier methodsFor!

assignBinaryResourceData: aViewResource
	| view stream |
	view := aViewResource loadWithContext: #{DesignDesktopView} value systemDpi forEdit: true.
	stream := Array writeStream: 128.
	view binaryStoreUsing: (STLOutFiler4 on: stream).
	self assign: stream contents.
	view destroy!

stlFilerClass
	^self sourceFilerClass stlFilerClass! !

!UI.ResourceIdentifier categoriesForMethods!
assignBinaryResourceData:!private! !
stlFilerClass!development!private! !
!

!UI.ResourceIdentifier class methodsFor!

resourceAt: aResourceIdentifier ifAbsent: aBlock 
	"Legacy resource location code from the previous resource manager framework.
	Answers the resource data associated with aResourceIdentifier"

	^aResourceIdentifier resource! !

!UI.ResourceIdentifier class categoriesForMethods!
resourceAt:ifAbsent:!accessing!public! !
!

!UI.RuntimeSessionManager methodsFor!

initializeFromSessionManager: oldSessionManager
	"Private - The receiver has taken take over as the current session
	manager from oldSessionManager. This is an opportunity to transfer
	state information from the replaced manager."

	super initializeFromSessionManager: oldSessionManager.
	#{Smalltalk.ResourceAccessor} ifDefined: [:ra | ra ensureAccessorsAreInternal]! !

!UI.RuntimeSessionManager categoriesForMethods!
initializeFromSessionManager:!initializing!private! !
!

"End of package definition"!

