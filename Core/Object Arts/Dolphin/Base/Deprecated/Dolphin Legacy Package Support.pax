| package |
package := Package name: 'Dolphin Legacy Package Support'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Legacy Package Support.
Copyright © Object Arts Ltd. 1997-2020. 

The classes and loose methods here are only required when loading packages saved from earlier Dolphin versions, including support for saving packages in the final Dolphin 7.x format (where feasible) from Dolphin 8. This is to allow for limited round-tripping between Dolphin 7 and Dolphin 8, but as Dolphin 7 does not support namespaces and Dolphin 8 has many other changes, this is quite easy to defeat. In some cases the situation can be improved by back-porting changes from Dolphin 8 as and when required.'.

package basicPackageVersion: '6.1.1'.

package basicScriptAt: #postinstall put: 'Package binaryPacLoader: [:package :stream | package loadLegacyPAC: stream]'.
package basicScriptAt: #postuninstall put: 'Package binaryPacLoader: nil'.

package setClassNames: #(
	#{Kernel.Bytecode}
	#{Kernel.LegacyChunkSourceFiler}
	#{Kernel.LegacySTLPrinter}
	#{Kernel.STLVersion3Policy}
	#{Kernel.STLVersion4Policy}
	#{Smalltalk.MethodContext}
	#{Smalltalk.PoolConstantsDictionary}
	#{Smalltalk.STBSymbolProxy}
).

package setMethodNames: #(
	#(#{Core.Class} #sharedPoolNames)
	#(#{Core.Class} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.Class} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:)
	#(#{Core.Class} #variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.Class} #variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.Class} #variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:)
	#(#{Core.ClassDescription} #sharedVariableString)
	#(#{Core.FileStream} #beBinary)
	#(#{Core.UndefinedObject} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.UndefinedObject} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:)
	#(#{Kernel.Package} #aboutBlockBytes:)
	#(#{Kernel.Package} #allResourceNames:)
	#(#{Kernel.Package} #declareClasses:)
	#(#{Kernel.Package} #errorUnknownFileVersion:)
	#(#{Kernel.Package} #fileInClassDefinitions:)
	#(#{Kernel.Package} #isMultifilePAC)
	#(#{Kernel.Package} #loadGlobalsFromFiler:)
	#(#{Kernel.Package} #loadLegacyPAC:)
	#(#{Kernel.Package} #loadLegacyResources)
	#(#{Kernel.Package} #loadResourcesFromFiler:)
	#(#{Kernel.Package} #loadSelectorForVersion:)
	#(#{Kernel.Package} #loadVersion1:filer:)
	#(#{Kernel.Package} #loadVersion2:filer:)
	#(#{Kernel.Package} #loadVersion3:filer:)
	#(#{Kernel.Package} #loadVersion4:filer:)
	#(#{Kernel.Package} #loadVersion5:filer:)
	#(#{Kernel.Package} #resourceNames)
	#(#{Kernel.Package} #script:)
	#(#{Kernel.Package} #script:put:)
	#(#{Kernel.Package class} #binaryGlobalExtension)
	#(#{Kernel.Package class} #name:comment:)
).

package setPrerequisites: #(
	'..\Dolphin'
	'..\..\System\Filer\Dolphin Literal Filer'
	'..\Dolphin Source Fileout'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Kernel.Bytecode'
	instanceVariableNames: 'instruction args jumpTarget ip'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	variableSubclass: #MethodContext
	instanceVariableNames: 'frame method receiver'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.PoolDictionary
	variableSubclass: #PoolConstantsDictionary
	instanceVariableNames: 'name'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.LiteralPrinter
	subclass: #'Kernel.LegacySTLPrinter'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.AbstractChunkSourceFiler
	subclass: #'Kernel.LegacyChunkSourceFiler'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBProxy
	subclass: #STBSymbolProxy
	instanceVariableNames: 'string'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STLVersionPolicy
	subclass: #'Kernel.STLVersion3Policy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STLVersion3Policy
	subclass: #'Kernel.STLVersion4Policy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Class methodsFor!

sharedPoolNames
	^imports collect: 
			[:each |
			(each valueOrNil ifNotNil: [:sharedPoolClass | Smalltalk oldNames lookup: sharedPoolClass])
				ifNil: [each unqualifiedName]]!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-8.0 packages."

	| subclass |
	#deprecated.
	subclass := self
				subclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				poolDictionaries: poolDictString.
	subclass class instanceVariableNames: classInstVarString.
	^subclass!

variableByteSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		variableByteSubclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

variableSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		variableSubclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

variableSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-8.0 packages"

	| subclass |
	#deprecated.
	subclass := self
				variableSubclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				imports: (self importsFromPoolsString: poolDictString).
	subclass class instanceVariableNames: classInstVarString.
	^subclass! !
!Core.Class categoriesForMethods!
sharedPoolNames!pool variables!public! !
subclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
!

!Core.ClassDescription methodsFor!

sharedVariableString
	^$\x20 join: self sharedPoolNames asSortedArray! !
!Core.ClassDescription categoriesForMethods!
sharedVariableString!accessing!public! !
!

!Core.FileStream methodsFor!

beBinary
	"Treat the elements of the stream as bytes (Integers)."

	#deprecated.	"Only works correctly for switching from AnsiString"
	(collection isKindOf: UtfEncodedString)
		ifTrue: [self error: 'Unable to switch from UTF encoded content to binary'].
	collection := collection asByteArray! !
!Core.FileStream categoriesForMethods!
beBinary!modes!public! !
!

!Core.UndefinedObject methodsFor!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-8.0 packages"

	| subclass |
	#deprecated.
	subclass := self
				subclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				poolDictionaries: poolDictString.
	subclass class instanceVariableNames: classInstVarString.
	^subclass! !
!Core.UndefinedObject categoriesForMethods!
subclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
!

!Kernel.Package methodsFor!

aboutBlockBytes: aByteArray
	"Private - Set the receiver's about block by rehydrating that in serialized
	form in the <ByteArray> argument."

	self aboutBlock: (Object fromBinaryStoreBytes: aByteArray)!

allResourceNames: resources
	"Private - Record the <Collection> of <Associations>s, resources, as the names of all resources
	in this package. This information is recorded only temporarily during package loading, and later
	it is generated dynamically."

	self propertyAt: #allResourceNames put: resources!

declareClasses: aReadStream
	"Private - Load all package classes definitions."

	self isMultifilePAC
		ifTrue: [self class sourceManager fileIn: self classDefinitionsFileName]
		ifFalse: [self fileInClassDefinitions: aReadStream]!

errorUnknownFileVersion: foundVersion
	"Private - Raise an exception to inform that an attempt was made to load a
	package file of an unknown version."

	self error:
			'Unknown package file version found ', foundVersion displayString,
			'. Current version is ', self class packageFileVersion displayString!

fileInClassDefinitions: aFileStream
	"Private - Load all package classes from the filestream up to the end marker.
	Note that this is only used for loading single-file binary legacy (pre 4.0) packages."

	| filer |
	aFileStream beText.
	filer := self sourceFilerOn: aFileStream.
	
	[filer atEnd ifTrue: [^self errorFileCorrupt].
	(Compiler evaluate: filer nextChunk logged: true) = 'end-class-definition']
			whileFalse.
	aFileStream skipSeparators.
	aFileStream next ~= $X ifTrue: [^self errorFileCorrupt].
	aFileStream beBinary!

isMultifilePAC
	"Very early versions of Dolphin had a multi-file format for .PAC files. The .pac was a mix of STB binary and text. Single-file packages, the default, contained all the source but a flag could be set to file out the class definitions and sources as separate files. The resources (as STB'd binary content) and loose methods were still stored into the .pac. This was an attempt at providing a format more suitable for storing in file-based source code control systems, and was superseded by the .pax format."

	^doNotReuse == false!

loadGlobalsFromFiler: binaryFiler
	"Private - File in binary definitions of all the globals held by
	the receiver are directly or indirectly through class ownership.
	Note that this is only used for loading legacy (pre 4.0 packages."

	variableNames size timesRepeat: [binaryFiler next].

	"If the receiver is a source package then file in the individual global from files if this can be done. We can only do this if the files actually exist."
	self isMultifilePAC ifFalse: [^self].
	variableNames do: 
			[:each |
			| fileName |
			fileName := self fileNameForSourceVariable: each.
			(File exists: fileName) ifTrue: [self sourceManager fileIn: fileName].
			each value isChanged: false]!

loadLegacyPAC: aReadStream
	"Private - Load the package the receiver represents from the Dolphin 1.0..3.x format 
	(mixed STB binary and source text) on the <readableStream> argument, aReadStream."

	| binaryFiler version selector |
	aReadStream beBinary.
	binaryFiler := STBInFiler on: aReadStream.

	"Skip over the package. We ignore this (since it represents the receiver)."
	binaryFiler next.
	version := binaryFiler next.
	selector := self loadSelectorForVersion: version.
	self paxVersion: 1.
	self fileInScript: #preinstall.
	self
		perform: selector
		with: aReadStream
		with: binaryFiler.
	self initializeGlobals.
	self initializeLegacyResources.
	doNotReuse := nil.
	self fileInScript: #postinstall!

loadLegacyResources
	"Private - Load all packaged resources for a source format (.PAX) package. Required for older packages that stored resources in separate files, rather than as STL-format array literals in methods."

	| resNames |
	resNames := self allResourceNames asArray.
	resNames do: 
			[:each |
			| viewResClass resIdClass rid filename resource |
			resIdClass := #{UI.ResourceIdentifier} value.
			rid := resIdClass class: (BindingReference pathString: each key home: Smalltalk) value
						name: each value.
			viewResClass := #{Smalltalk.ViewResource} value.
			filename := viewResClass generateFilenameFrom: rid inPackage: self.
			resource := viewResClass inSTBFileWithName: filename.
			rid assign: resource].
	self initializeLegacyResources!

loadResourcesFromFiler: binaryFiler
	"Private - File in binary definitions of all the resources held by
	the receiver are directly or indirectly through class ownership."

	| aResourceIdentifier resourceNames |
	resourceNames := OrderedCollection new.
	[(aResourceIdentifier := binaryFiler next) notNil] whileTrue: 
			[| resource |
			"Read in the binary resource"
			resource := binaryFiler next.
			aResourceIdentifier assign: resource.
			resourceNames add: aResourceIdentifier owningClass name -> aResourceIdentifier name].
	self allResourceNames: resourceNames!

loadSelectorForVersion: anInteger
	^(#(#loadVersion1:filer: #loadVersion2:filer: #loadVersion3:filer: #loadVersion4:filer: #loadVersion5:filer:)
		lookup: anInteger) ifNil: [self errorUnknownFileVersion: anInteger]!

loadVersion1: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 1."

	self vmVersionCheck: -1.
	self declareVariables.
	self fileInClassDefinitions: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.
	self isMultifilePAC ifTrue: [self fileInClasses].
	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText.
	self initializeGlobals!

loadVersion2: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 2."

	self vmVersionCheck: -1.
	self declareVariables.
	self declareClasses: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.
	self isMultifilePAC ifTrue: [self fileInClasses].
	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText.
	self initializeGlobals!

loadVersion3: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 3."

	self vmVersionCheck: -1.
	self declareVariables.
	self declareClasses: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.

	"Load in resources for each class"
	classNames size timesRepeat: 
			[| className resourceClass |
			className := binaryFiler next.
			resourceClass := self classFromName: className.
			binaryFiler next
				keysAndValuesDo: [:resourceName :resource | (UI.ResourceIdentifier class: resourceClass name: resourceName) assign: resource]].

	self isMultifilePAC ifTrue: [self fileInClasses].
	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText.
	self initializeGlobals!

loadVersion4: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 4."

	self vmVersionCheck: -1.
	self declareVariables.
	self declareClasses: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.
	self loadResourcesFromFiler: binaryFiler.	"File in any trailing source code of class/methods"
	self isMultifilePAC ifTrue: [self fileInClasses].
	self sourceManager fileInFrom: aFileStream beText!

loadVersion5: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 5."

	self vmVersionCheck: binaryFiler next.
	"The old multi-file package is no longer a possibility - .pax is used for this instead"
	self declareVariables.
	self fileInClassDefinitions: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.
	self loadResourcesFromFiler: binaryFiler.	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText!

resourceNames
	"Required for boot and loading of pre-D6 packages.
	DO NOT USE"

	^Set new!

script: scriptSymbol
	#deprecated.	"In 4.0, but needed to load some old format packages"
	self scriptAt: scriptSymbol!

script: scriptSymbol put: aString 
	#deprecated.	"In 4.0, but needed to load some old format packages"
	self scriptAt: scriptSymbol put: aString! !
!Kernel.Package categoriesForMethods!
aboutBlockBytes:!accessing!private! !
allResourceNames:!private!source filing! !
declareClasses:!helpers!private! !
errorUnknownFileVersion:!exceptions!legacy package loading!private! !
fileInClassDefinitions:!development!private!source filing! !
isMultifilePAC!legacy package loading!private! !
loadGlobalsFromFiler:!legacy package loading!private! !
loadLegacyPAC:!legacy package loading!private! !
loadLegacyResources!legacy package loading!private! !
loadResourcesFromFiler:!legacy package loading!private! !
loadSelectorForVersion:!legacy package loading!private! !
loadVersion1:filer:!legacy package loading!private! !
loadVersion2:filer:!legacy package loading!private! !
loadVersion3:filer:!legacy package loading!private! !
loadVersion4:filer:!legacy package loading!private! !
loadVersion5:filer:!legacy package loading!private! !
resourceNames!legacy package loading!public! !
script:!legacy package loading!public! !
script:put:!legacy package loading!public! !
!

!Kernel.Package class methodsFor!

binaryGlobalExtension
	"Private - Answer the file extension for the files to which binary globals are stored."

	^ 'stb'!

name: nameString comment: commentString 
	#deprecated.	"In 4.0, but retained becaused needed to load some old format packages"
	^(self name: nameString)
		basicComment: commentString;
		yourself! !
!Kernel.Package class categoriesForMethods!
binaryGlobalExtension!constants!private! !
name:comment:!instance creation!public! !
!

"End of package definition"!

