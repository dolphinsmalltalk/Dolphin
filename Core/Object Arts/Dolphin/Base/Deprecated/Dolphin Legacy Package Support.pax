| package |
package := Package name: 'Dolphin Legacy Package Support'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Legacy Package Support.
Copyright © Object Arts Ltd. 1997-2020. 

The classes and loose methods here are only required when loading packages saved from earlier Dolphin versions, including support for saving packages in the final Dolphin 7.x format (where feasible) from Dolphin 8. This is to allow for limited round-tripping between Dolphin 7 and Dolphin 8, but as Dolphin 7 does not support namespaces and Dolphin 8 has many other changes, this is quite easy to defeat. In some cases the situation can be improved by back-porting changes from Dolphin 8 as and when required.'.

package basicPackageVersion: '6.1.1'.


package setClassNames: #(
	#{Kernel.Bytecode}
	#{Kernel.LegacyBinaryPackageLoader}
	#{Kernel.LegacyChunkSourceFiler}
	#{Smalltalk.MethodContext}
	#{Smalltalk.PoolConstantsDictionary}
).

package setMethodNames: #(
	#(#{Core.Class} #sharedPoolNames)
	#(#{Core.Class} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.Class} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:)
	#(#{Core.Class} #variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.Class} #variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.Class} #variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:)
	#(#{Core.ClassDescription} #sharedVariableString)
	#(#{Core.FileStream} #beBinary)
	#(#{Core.FileStream} #beText)
	#(#{Core.UndefinedObject} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.UndefinedObject} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:)
	#(#{Kernel.Package} #aboutBlockBytes:)
	#(#{Kernel.Package} #allResourceNames:)
	#(#{Kernel.Package} #isMultifilePAC)
	#(#{Kernel.Package} #loadLegacyResources)
	#(#{Kernel.Package} #resourceNames)
	#(#{Kernel.Package} #script:)
	#(#{Kernel.Package} #script:put:)
	#(#{Kernel.Package class} #name:comment:)
	#(#{Kernel.Package class} #stbConvertFrom:)
	#(#{Kernel.Package class} #stbConvertFromVersion0:)
	#(#{Kernel.Package class} #stbConvertFromVersion1:)
	#(#{Kernel.Package class} #stbConvertFromVersion2:)
	#(#{Kernel.Package class} #stbConvertFromVersion3:)
	#(#{Kernel.Package class} #stbConvertFromVersion4:)
	#(#{Kernel.Package class} #stbConvertFromVersion5:)
	#(#{Kernel.Package class} #stbConvertFromVersion6:)
	#(#{Kernel.Package class} #stbConvertFromVersion7:)
	#(#{Kernel.Package class} #stbVersion)
).

package setPrerequisites: #(
	'..\Dolphin'
	'..\..\System\Filer\Dolphin Binary Filer'
	'..\..\System\Filer\Dolphin Binary Filer (Old versions)'
	'..\..\System\Filer\Dolphin Literal Out Filer (Old versions)'
	'..\Dolphin Source Fileout'
	'..\..\System\Filer\Dolphin STx Filer Core'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Kernel.Bytecode'
	instanceVariableNames: 'instruction args jumpTarget ip'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Kernel.LegacyBinaryPackageLoader'
	instanceVariableNames: 'package stream binaryFiler'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	variableSubclass: #MethodContext
	instanceVariableNames: 'frame method receiver'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.PoolDictionary
	variableSubclass: #PoolConstantsDictionary
	instanceVariableNames: 'name'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.AbstractChunkSourceFiler
	subclass: #'Kernel.LegacyChunkSourceFiler'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Class methodsFor!

sharedPoolNames
	^imports collect: 
			[:each |
			(each valueOrNil ifNotNil: [:sharedPoolClass | Smalltalk oldNames lookup: sharedPoolClass])
				ifNil: [each unqualifiedName]]!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-8.0 packages."

	| subclass |
	#deprecated.
	subclass := self
				subclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				poolDictionaries: poolDictString.
	subclass class instanceVariableNames: classInstVarString.
	^subclass!

variableByteSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		variableByteSubclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

variableSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		variableSubclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

variableSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-8.0 packages"

	| subclass |
	#deprecated.
	subclass := self
				variableSubclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				imports: (self importsFromPoolsString: poolDictString).
	subclass class instanceVariableNames: classInstVarString.
	^subclass! !
!Core.Class categoriesForMethods!
sharedPoolNames!pool variables!public! !
subclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
!

!Core.ClassDescription methodsFor!

sharedVariableString
	^$\x20 join: self sharedPoolNames asSortedArray! !
!Core.ClassDescription categoriesForMethods!
sharedVariableString!accessing!public! !
!

!Core.FileStream methodsFor!

beBinary
	"Treat the elements of the stream as bytes (Integers)."

	#deprecated.	"Only works correctly for switching from AnsiString"
	(collection isKindOf: UtfEncodedString)
		ifTrue: [self error: 'Unable to switch from UTF encoded content to binary'].
	collection := collection asByteArray!

beText
	"Treat the elements of the stream as Characters."

	#deprecated.	"This method is too generic: These days it is somewhat unlikely that the bytes are ANSI code-page encoded - more likely UTF-8 or UTF-16, but we can't know for sure. We also can't maintain backwards compatibility with the previous assumption of ANSI encoding, code page unspecified. Toggling FileStreams between text and binary is not recommended."
	self isBinary ifFalse: [^self].
	collection := collection
				replaceBytesOf: (AnsiString new: PageSize)
				from: 1
				to: PageSize
				startingAt: 1! !
!Core.FileStream categoriesForMethods!
beBinary!modes!public! !
beText!modes!public! !
!

!Core.UndefinedObject methodsFor!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-8.0 packages"

	| subclass |
	#deprecated.
	subclass := self
				subclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				poolDictionaries: poolDictString.
	subclass class instanceVariableNames: classInstVarString.
	^subclass! !
!Core.UndefinedObject categoriesForMethods!
subclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
!

!Kernel.Package methodsFor!

aboutBlockBytes: aByteArray
	"Private - Set the receiver's about block by rehydrating that in serialized
	form in the <ByteArray> argument."

	self aboutBlock: (Object fromBinaryStoreBytes: aByteArray)!

allResourceNames: resources
	"Private - Record the <Collection> of <Associations>s, resources, as the names of all resources
	in this package. This information is recorded only temporarily during package loading, and later
	it is generated dynamically."

	self propertyAt: #allResourceNames put: resources!

isMultifilePAC
	"Very early versions of Dolphin had a multi-file format for .PAC files. The .pac was a mix of STB binary and text. Single-file packages, the default, contained all the source but a flag could be set to file out the class definitions and sources as separate files. The resources (as STB'd binary content) and loose methods were still stored into the .pac. This was an attempt at providing a format more suitable for storing in file-based source code control systems, and was superseded by the .pax format."

	^doNotReuse == false!

loadLegacyResources
	"Private - Load all packaged resources for a source format (.PAX) package. Required for older packages that stored resources in separate .vu files, rather than as STL-format array literals in methods."

	| resNames |
	resNames := self allResourceNames asArray.
	resNames do: 
			[:each |
			| viewResClass resIdClass rid filename resource |
			resIdClass := #{UI.ResourceIdentifier} value.
			rid := resIdClass class: (BindingReference pathString: each key home: Smalltalk) value
						name: each value.
			viewResClass := #{Smalltalk.ViewResource} value.
			filename := viewResClass generateFilenameFrom: rid inPackage: self.
			resource := viewResClass inSTBFileWithName: filename.
			rid assign: resource].
	self initializeLegacyResources!

resourceNames
	"Required for boot and loading of pre-D6 packages.
	DO NOT USE"

	^Set new!

script: scriptSymbol
	#deprecated.	"In 4.0, but needed to load some old format packages"
	self scriptAt: scriptSymbol!

script: scriptSymbol put: aString 
	#deprecated.	"In 4.0, but needed to load some old format packages"
	self scriptAt: scriptSymbol put: aString! !
!Kernel.Package categoriesForMethods!
aboutBlockBytes:!accessing!private! !
allResourceNames:!private!source filing! !
isMultifilePAC!legacy package loading!private! !
loadLegacyResources!legacy package loading!private! !
resourceNames!legacy package loading!public! !
script:!legacy package loading!public! !
script:put:!legacy package loading!public! !
!

!Kernel.Package class methodsFor!

name: nameString comment: commentString 
	#deprecated.	"In 4.0, but retained becaused needed to load some old format packages"
	^(self name: nameString)
		basicComment: commentString;
		yourself!

stbConvertFrom: anSTBClassFormat
	"Convert version 0 packages by mutating class names from Strings
	into Symbols. There is no layout change."

	| ver |
	ver := anSTBClassFormat version.
	Notification
		signal: 'Converting package from version ' , ver printString , ' to: ' , self stbVersion printString.
	ver == 7 ifTrue: [^[:data | self stbConvertFromVersion7: data]].
	ver == 6 ifTrue: [^[:data | self stbConvertFromVersion6: data]].
	ver == 5 ifTrue: [^[:data | self stbConvertFromVersion5: data]].
	ver == 4 ifTrue: [^[:data | self stbConvertFromVersion4: data]].
	ver == 3 ifTrue: [^[:data | self stbConvertFromVersion3: data]].
	ver == 2 ifTrue: [^[:data | self stbConvertFromVersion2: data]].
	ver == 1 ifTrue: [^[:data | self stbConvertFromVersion1: data]].
	ver == 0 ifTrue: [^[:data | self stbConvertFromVersion1: data]].
	^super stbConvertFrom: anSTBClassFormat!

stbConvertFromVersion0: anArray
	"Private - Convert version 0 packages by mutating class names from Strings	into Symbols. There is no layout change. Answer the mutated data.
	Version 0 packages preceeded even the first beta release, so there are probably none of these in the wild. Even if there were, the UI framework was radically different, so although they may be loadable they will not work.

	Version 0 Package		-->		Version 1 Package
	1	name					1	name
	2	packagePathname			2	packagePathname
	3	comment					3	comment
	4	classNames (Set)			4	classNames (IdentitySet)
	5	methodNames				5	methodNames
	6	globalNames (Set)			6	globalNames (IdentitySet)
	7	prerequisiteNames			7	prerequisiteNames
	8	preinstall					8	preinstall
	9	postinstall				9	postinstall
	10	singleFile					10	singleFile"

	anArray at: 4 put: ((anArray at: 4) collect: [:n | n asSymbol]) asIdentitySet.
	anArray at: 6 put: (anArray at: 6) asIdentitySet.
	^self stbConvertFromVersion1: anArray!

stbConvertFromVersion1: anArray
	"Private - Convert version 1 packages  to version2. The preinstall and postinstall instance variables are replaced by a dictionary which holds those scripts and any more we define. Answer the mutated data.

	Version 1 Package		-->		Version 2 Package
	1	name					1	name
	2	packagePathname			2	packagePathname
	3	comment					3	comment
	4	classNames				4	classNames
	5	methodNames				5	methodNames
	6	globalNames				6	globalNames
	7	prerequisiteNames			7	prerequisiteNames
	8	preinstall					8	singleFile
	9	postinstall				9	scripts
	10	singleFile"

	| preinstall postinstall newData scripts |
	newData := Array new: 9.
	newData replaceFrom: 1 to: 7 with: anArray startingAt: 1.
	newData at: 8 put: (anArray at: 10).
	scripts := IdentityDictionary new.
	preinstall := anArray at: 8.
	(preinstall notNil and: [preinstall notEmpty]) ifTrue: [scripts at: #preinstall put: preinstall].
	postinstall := anArray at: 9.
	(postinstall notNil and: [postinstall notEmpty])
		ifTrue: [scripts at: #postinstall put: postinstall].
	newData at: 9 put: scripts.
	^self stbConvertFromVersion2: newData!

stbConvertFromVersion2: anArray
	"Private - Convert version 2 packages to version 3. For package version 3, resources had been introduced into Dolphin and so resourceNames was added for tracking loose resources, similar to methodNames for loose methods.

	Version 2 Package		-->		Version 3 Package
	1	name					1	name
	2	packagePathname			2	packagePathname
	3	comment					3	comment
	4	classNames				4	classNames
	5	methodNames				5	methodNames
	6	globalNames				6	globalNames
	7	prerequisiteNames			7	prerequisiteNames
	8	singleFile					8	singleFile
	9	scripts					9	scripts
								10	resourceNames"

	^self stbConvertFromVersion3: (anArray copyWith: Set new)!

stbConvertFromVersion3: anArray
	"Private - Convert version 3 packages to version 4. The main change is the addition of an imageStripperBytes instance variable to hold a filed imageStripper to be associated with the package. We hold the image stripper in this form to allow filing of the package into images that do not have ImageStripper installed. Additionally we must convert the full stored pathname of the package to a name relative to the image base."

	"Version 3 Package		-->		Version 4 Package
	1	name					1	name
	2	packagePathname			2	packagePathname
	3	comment					3	comment
	4	classNames				4	classNames
	5	methodNames				5	methodNames
	6	globalNames				6	globalNames
	7	prerequisiteNames			7	prerequisiteNames
	8	singleFile					8	singleFile
	9	scripts					9	scripts
	10 	resourceNames			10	resourceNames
								11	imageStripperBytes"

	"Copy over adding a nil imageStripperBytes slot"

	| v4vars  |
	v4vars := anArray copyWith: nil.

	"Convert the imagePathName to a relative path"
	v4vars at: 2 put: (File relativePathOf: (anArray at: 2) to: SessionManager current imageBase).

	^self stbConvertFromVersion4: v4vars!

stbConvertFromVersion4: anArray
	"Private - Convert version 4 packages (Dolphin 1.0b2e) to version 5 (Dolphin 3.05).
	Adds an aboutBlock (12) and versionString (13) instance variables."

	| scripts |
	"Discard empty scripts"
	scripts := anArray at: 9.
	scripts := scripts select: [:each | each notEmpty].
	anArray at: 9 put: (scripts isEmpty ifFalse: [scripts]).
	^self stbConvertFromVersion5: (anArray resize: 13)!

stbConvertFromVersion5: anArray
	"Private - Convert version 5 (Dolphin 3.05) packages to version 6 for D5, and then D6 (new PAX format).
	singleFile instance variable is no longer used. The format was change again in D6 without updating the stbVersion - this was wrong but worked because the change was additive and the converter was tolerant.
	The resourceNames were no longer required because of the introduction of the literal method representation."

	"Version 5 Package		-->		Version 6 Package (D5)				Version 6 Package (D6)
	1	name					1	name						1	name
	2	packagePathname			2	packagePathname				2	packagePathname
	3	comment					3	comment                                         3	comment
	4	classNames				4	classNames					4	classNames
	5	methodNames				5	methodNames					5	methodNames
	6	globalNames				6	globalNames                                   6	globalNames
	7	prerequisiteNames			7	prerequisiteNames				7	prerequisiteNames
	8	singleFile					8	events						8	events
	9	scripts					9	scripts						9	scripts
	10 	resourceNames			10	resourceNames (not required)		10	doNotReuse
	11 	imageStripperBytes			11	imageStripperBytes				11	imageStripperBytes
	12 	aboutBlock				12	aboutBlock					12	aboutBlock
	13 	packageVersion			13	packageVersion				13	packageVersion
								14	manualPrerequisites			14	manualPrerequisites
								15	_unused2						15	timeStamp
																16	untracedGlobals"
	^self stbConvertFromVersion6: ((Array new: 16)
				replaceFrom: 1
					to: anArray size
					with: anArray
					startingAt: 1;
				at: 10 put: (anArray at: 8);
				at: 8 put: nil;
				yourself)!

stbConvertFromVersion6: anArray
	"Private - Convert version 6 to 7: Adds changeIndex and paxVersion instance variables."

	^self stbConvertFromVersion7: (anArray resize: 17)!

stbConvertFromVersion7: anArray
	"Private - Convert version 7 to 8: New format package using BindingReferences."

	| newPackage |
	"Last converter in the chain"
	newPackage := (anArray resize: 19) becomeA: self.
	newPackage upgradeToVersion2.
	^newPackage!

stbVersion
	"Answer the current binary filer version number for instances of the receiver."

	^8! !
!Kernel.Package class categoriesForMethods!
name:comment:!instance creation!public! !
stbConvertFrom:!binary filing!public! !
stbConvertFromVersion0:!binary filing!private! !
stbConvertFromVersion1:!binary filing!private! !
stbConvertFromVersion2:!binary filing!private! !
stbConvertFromVersion3:!binary filing!private! !
stbConvertFromVersion4:!binary filing!private! !
stbConvertFromVersion5:!binary filing!private! !
stbConvertFromVersion6:!binary filing!private! !
stbConvertFromVersion7:!binary filing!private! !
stbVersion!binary filing!public! !
!

"End of package definition"!

