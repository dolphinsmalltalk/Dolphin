| package |
package := Package name: 'Dolphin Legacy Package Support'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Legacy Package Support.
Copyright © Object Arts Ltd. 1997-2020. 

The classes and loose methods here are only required when loading packages saved from earlier Dolphin versions.'.

package basicPackageVersion: '6.1.1'.

package basicScriptAt: #postinstall put: 'Package binaryPacLoader: [:package :stream | package loadLegacyPAC: stream]'.
package basicScriptAt: #postuninstall put: 'Package binaryPacLoader: nil'.

package setClassNames: #(
	#{Kernel.Bytecode}
	#{Kernel.LegacyChunkSourceFiler}
	#{Smalltalk.MethodContext}
	#{Smalltalk.PoolConstantsDictionary}
).

package setMethodNames: #(
	#(#{Core.Class} #sharedPoolNames)
	#(#{Core.Class} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.Class} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:)
	#(#{Core.Class} #variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.Class} #variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.Class} #variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:)
	#(#{Core.ClassDescription} #sharedVariableString)
	#(#{Core.UndefinedObject} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:)
	#(#{Core.UndefinedObject} #subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:)
	#(#{Kernel.Package} #allResourceNames:)
	#(#{Kernel.Package} #basicLoadVersion4:filer:)
	#(#{Kernel.Package} #errorUnknownFileVersion:)
	#(#{Kernel.Package} #fileInClassDefinitions:)
	#(#{Kernel.Package} #loadGlobalsFromFiler:)
	#(#{Kernel.Package} #loadLegacyPAC:)
	#(#{Kernel.Package} #loadLegacyResources)
	#(#{Kernel.Package} #loadResourcesFromFiler:)
	#(#{Kernel.Package} #loadVersion1:filer:)
	#(#{Kernel.Package} #loadVersion2:filer:)
	#(#{Kernel.Package} #loadVersion3:filer:)
	#(#{Kernel.Package} #loadVersion4:filer:)
	#(#{Kernel.Package} #loadVersion5:filer:)
	#(#{Kernel.Package} #resourceNames)
	#(#{Kernel.Package} #script:)
	#(#{Kernel.Package} #script:put:)
	#(#{Kernel.Package} #versionLookup)
	#(#{Kernel.Package class} #binaryGlobalExtension)
	#(#{Kernel.Package class} #name:comment:)
).

package setPrerequisites: #(
	'..\Dolphin'
	'..\Dolphin Source Fileout'
).

package!

"Class Definitions"!

Core.Object subclass: #'Kernel.Bytecode'
	instanceVariableNames: 'instruction args jumpTarget ip'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object variableSubclass: #MethodContext
	instanceVariableNames: 'frame method receiver'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.PoolDictionary variableSubclass: #PoolConstantsDictionary
	instanceVariableNames: 'name'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.AbstractChunkSourceFiler subclass: #'Kernel.LegacyChunkSourceFiler'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Class methodsFor!

sharedPoolNames
	^imports collect: 
			[:each |
			(each valueOrNil ifNotNil: [:sharedPoolClass | Smalltalk oldNames lookup: sharedPoolClass])
				ifNil: [each unqualifiedName]]!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-8.0 packages."

	| subclass |
	#deprecated.
	subclass := self
				subclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				poolDictionaries: poolDictString.
	subclass class instanceVariableNames: classInstVarString.
	^subclass!

variableByteSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		variableByteSubclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

variableSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		variableSubclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

variableSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-8.0 packages"

	| subclass |
	#deprecated.
	subclass := self
				variableSubclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				imports: (self importsFromPoolsString: poolDictString).
	subclass class instanceVariableNames: classInstVarString.
	^subclass! !
!Core.Class categoriesForMethods!
sharedPoolNames!pool variables!public! !
subclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
!

!Core.ClassDescription methodsFor!

sharedVariableString
	^$\x20 join: self sharedPoolNames asSortedCollection! !
!Core.ClassDescription categoriesForMethods!
sharedVariableString!accessing!public! !
!

!Core.UndefinedObject methodsFor!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString
	"For loading pre-8.0 packages"

	#deprecated.
	^self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		imports: (self importsFromPoolsString: poolDictString)!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-8.0 packages"

	| subclass |
	#deprecated.
	subclass := self
				subclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				poolDictionaries: poolDictString.
	subclass class instanceVariableNames: classInstVarString.
	^subclass! !
!Core.UndefinedObject categoriesForMethods!
subclass:instanceVariableNames:classVariableNames:poolDictionaries:!class hierarchy-adding!public! !
subclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
!

!Kernel.Package methodsFor!

allResourceNames: resources
	"Private - Record the <Collection> of <Associations>s, resources, as the names of all resources
	in this package. This information is recorded only temporarily during package loading, and later
	it is generated dynamically."

	self propertyAt: #allResourceNames put: resources!

basicLoadVersion4: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 4."

	self declareVariables.
	self fileInClassDefinitions: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.
	self loadResourcesFromFiler: binaryFiler.

	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText!

errorUnknownFileVersion: foundVersion
	"Private - Raise an exception to inform that an attempt was made to load a
	package file of an unknown version."

	self error:
			'Unknown package file version found ', foundVersion displayString,
			'. Current version is ', self class packageFileVersion displayString!

fileInClassDefinitions: aFileStream
	"Private - Load all package classes from the filestream up to the end marker.
	Note that this is only used for loading binary legacy (pre 4.0) packages."

	| filer |
	aFileStream beText.
	filer := self sourceFilerOn: aFileStream.
	
	[filer atEnd ifTrue: [^self errorFileCorrupt].
	(Compiler evaluate: filer nextChunk logged: true) = 'end-class-definition']
			whileFalse.
	aFileStream skipSeparators.
	aFileStream next ~= $X ifTrue: [^self errorFileCorrupt].
	aFileStream beBinary!

loadGlobalsFromFiler: binaryFiler
	"Private - File in binary definitions of all the globals held by
	the receiver are directly or indirectly through class ownership.
	Note that this is only used for loading legacy (pre 4.0 packages."

	variableNames size timesRepeat: [binaryFiler next]!

loadLegacyPAC: aReadStream
	"Private - Load the package the receiver represents from the Dolphin 2.1/3.x format 
	(mixed STB binary and source text) on the <readableStream> argument, aReadStream."

	| binaryFiler version selector |
	aReadStream beBinary.
	binaryFiler := STBInFiler on: aReadStream.

	"Load the package. We ignore this (since it represents the receiver)."
	binaryFiler next.
	version := binaryFiler next.
	selector := self versionLookup at: version ifAbsent: [^self errorUnknownFileVersion: version].
	self paxVersion: 1.
	self fileInScript: #preinstall.
	self
		perform: selector
		with: aReadStream
		with: binaryFiler.
	self initializeGlobals.
	self initializeLegacyResources.
	self fileInScript: #postinstall!

loadLegacyResources
	"Private - Load all packaged resources for a source format (.PAX) package. Required for older packages that stored resources in separate files, rather than as STL-format array literals in methods."

	| resNames |
	resNames := self allResourceNames asArray.
	resNames do: 
			[:each |
			| viewResClass resIdClass rid filename resource |
			resIdClass := #{UI.ResourceIdentifier} value.
			rid := resIdClass class: (AbstractBindingReference pathString: each key home: Smalltalk) value name: each value.
			viewResClass := #{Smalltalk.ViewResource} value.
			filename := viewResClass generateFilenameFrom: rid inPackage: self.
			resource := viewResClass inSTBFileWithName: filename.
			rid assign: resource].
	self initializeLegacyResources!

loadResourcesFromFiler: binaryFiler
	"Private - File in binary definitions of all the resources held by
	the receiver are directly or indirectly through class ownership."

	| aResourceIdentifier resourceNames |
	resourceNames := OrderedCollection new.
	[(aResourceIdentifier := binaryFiler next) notNil] whileTrue: 
			[| resource |
			"Read in the binary resource"
			resource := binaryFiler next.
			aResourceIdentifier assign: resource.
			resourceNames add: aResourceIdentifier owningClass name -> aResourceIdentifier name].
	self allResourceNames: resourceNames!

loadVersion1: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 1."

	self vmVersionCheck: 0.
	self declareVariables.
	self fileInClassDefinitions: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.

	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText.
	self initializeGlobals!

loadVersion2: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 2."

	self vmVersionCheck: 0.
	self declareVariables.
	self fileInClassDefinitions: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.

	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText.
	self initializeGlobals!

loadVersion3: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 3."

	self vmVersionCheck: 0.
	self declareVariables.
	self fileInClassDefinitions: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.

	"Load in resources for each class"
	classNames size timesRepeat: 
			[| className resourceClass |
			className := binaryFiler next.
			resourceClass := self classFromName: className.
			binaryFiler next
				keysAndValuesDo: [:resourceName :resource | (UI.ResourceIdentifier class: resourceClass name: resourceName) assign: resource]].

	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText.
	self initializeGlobals!

loadVersion4: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 4."

	self vmVersionCheck: binaryFiler stream nextDWORD.
	self basicLoadVersion4: aFileStream filer: binaryFiler!

loadVersion5: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 5."

	self vmVersionCheck: binaryFiler next.

	"Apart from the VM version number, this format is the same as 4, so we just use
	the version 4 load."
	^self basicLoadVersion4: aFileStream filer: binaryFiler!

resourceNames
	"Required for boot and loading of pre-D6 packages.
	DO NOT USE"

	^Set new!

script: scriptSymbol
	#deprecated.	"In 4.0, but needed to load some old format packages"
	self scriptAt: scriptSymbol!

script: scriptSymbol put: aString 
	#deprecated.	"In 4.0, but needed to load some old format packages"
	self scriptAt: scriptSymbol put: aString!

versionLookup
	"This dictionary is used for loading legacy packages"

	^##(LookupTable new
		at: 1 put: #loadVersion1:filer:;
		at: 2 put: #loadVersion2:filer:;
		at: 3 put: #loadVersion3:filer:;
		at: 4 put: #loadVersion4:filer:;
		at: 5 put: #loadVersion5:filer:;
		shrink;
		yourself	"same format as 4, except VM version loaded here")	"same format as 4, except VM version loaded here"	"same format as 4, except VM version loaded here"! !
!Kernel.Package categoriesForMethods!
allResourceNames:!private!source filing! !
basicLoadVersion4:filer:!legacy package loading!private! !
errorUnknownFileVersion:!exceptions!legacy package loading!private! !
fileInClassDefinitions:!development!private!source filing! !
loadGlobalsFromFiler:!legacy package loading!private! !
loadLegacyPAC:!legacy package loading!private! !
loadLegacyResources!legacy package loading!private! !
loadResourcesFromFiler:!legacy package loading!private! !
loadVersion1:filer:!legacy package loading!private! !
loadVersion2:filer:!legacy package loading!private! !
loadVersion3:filer:!legacy package loading!private! !
loadVersion4:filer:!legacy package loading!private! !
loadVersion5:filer:!legacy package loading!private! !
resourceNames!legacy package loading!public! !
script:!legacy package loading!public! !
script:put:!legacy package loading!public! !
versionLookup!constants!legacy package loading!private! !
!

!Kernel.Package class methodsFor!

binaryGlobalExtension
	"Private - Answer the file extension for the files to which binary globals are stored."

	^ 'stb'!

name: nameString comment: commentString 
	#deprecated.	"In 4.0, but retained becaused needed to load some old format packages"
	^(self name: nameString)
		basicComment: commentString;
		yourself! !
!Kernel.Package class categoriesForMethods!
binaryGlobalExtension!constants!private! !
name:comment:!instance creation!public! !
!

"End of package definition"!

