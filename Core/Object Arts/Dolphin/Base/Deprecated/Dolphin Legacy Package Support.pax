| package |
package := Package name: 'Dolphin Legacy Package Support'.
package paxVersion: 1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Legacy Package Support.
Copyright (c) Object Arts Ltd. 1997-2006. 

The loose methods here are only required when loading packages saved from these earlier versions prior to 5.0. '.

package basicPackageVersion: '6.1.1'.

package basicScriptAt: #postinstall put: 'Package binaryPacLoader: [:package :stream | package loadLegacyPAC: stream]'.
package basicScriptAt: #postuninstall put: 'Package binaryPacLoader: nil'.

package classNames
	add: #LegacyBinaryPackageLoader;
	add: #MethodContext;
	yourself.

package methodNames
	add: #Package -> #basicLoadVersion4:filer:;
	add: #Package -> #errorUnknownFileVersion:;
	add: #Package -> #fileInClassDefinitions:;
	add: #Package -> #loadGlobalsFromFiler:;
	add: #Package -> #loadLegacyPAC:;
	add: #Package -> #loadLegacyResources;
	add: #Package -> #loadResourcesFromFiler:;
	add: #Package -> #loadVersion1:filer:;
	add: #Package -> #loadVersion2:filer:;
	add: #Package -> #loadVersion3:filer:;
	add: #Package -> #loadVersion4:filer:;
	add: #Package -> #loadVersion5:filer:;
	add: #Package -> #resourceNames;
	add: #Package -> #script:;
	add: #Package -> #script:put:;
	add: #Package -> #versionLookup;
	add: 'Package class' -> #name:comment:;
	add: 'Package class' -> #stbConvertFrom:;
	add: 'Package class' -> #stbConvertFromVersion0:;
	add: 'Package class' -> #stbConvertFromVersion1:;
	add: 'Package class' -> #stbConvertFromVersion2:;
	add: 'Package class' -> #stbConvertFromVersion3:;
	add: 'Package class' -> #stbConvertFromVersion4:;
	add: 'Package class' -> #stbConvertFromVersion5:;
	add: 'Package class' -> #stbConvertFromVersion6:;
	add: 'Package class' -> #stbVersion;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Dolphin').

package!

"Class Definitions"!

Object subclass: #LegacyBinaryPackageLoader
	instanceVariableNames: 'package stream binaryFiler'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object variableSubclass: #MethodContext
	instanceVariableNames: 'frame method receiver'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Loose Methods"!

!Package methodsFor!

basicLoadVersion4: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 4."

	self declareGlobals.
	self fileInClassDefinitions: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.
	self loadResourcesFromFiler: binaryFiler.

	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText!

errorUnknownFileVersion: foundVersion
	"Private - Raise an exception to inform that an attempt was made to load a
	package file of an unknown version."

	self error:
			'Unknown package file version found ', foundVersion displayString,
			'. Current version is ', self class packageFileVersion displayString!

fileInClassDefinitions: aFileStream 
	"Private - Load all package classes from the filestream up to the end marker.
	Note that this is only used for loading binary legacy (pre 4.0) packages."

	| filer |
	aFileStream beText.
	filer := ChunkSourceFiler on: aFileStream.
	
	[filer atEnd ifTrue: [^self errorFileCorrupt].
	(Compiler evaluate: filer nextChunk logged: true) = 'end-class-definition'] 
			whileFalse.
	aFileStream skipSeparators.
	aFileStream next ~= $X ifTrue: [^self errorFileCorrupt].
	aFileStream beBinary!

loadGlobalsFromFiler: binaryFiler
	"Private - File in binary definitions of all the globals held by
	the receiver are directly or indirectly through class ownership.
	Note that this is only used for loading legacy (pre 4.0 packages."

	globalNames size timesRepeat: [binaryFiler next]!

loadLegacyPAC: aReadStream 
	"Private - Load the package the receiver represents from the Dolphin 3.x format 
	(mixed STB binary and source text) on the <readableStream> argument, aReadStream."

	| binaryFiler version selector |
	aReadStream beBinary.
	binaryFiler := STBInFiler on: aReadStream.

	"Load the package. We ignore this (since it represents the receiver)."
	binaryFiler next.
	version := binaryFiler next.
	selector := self versionLookup at: version ifAbsent: [^self errorUnknownFileVersion: version].
	self fileInScript: #preinstall.
	self 
		perform: selector
		with: aReadStream
		with: binaryFiler.
	self initializeGlobals.
	self initializeLegacyResources.
	self fileInScript: #postinstall!

loadLegacyResources
	"Private - Load all packaged resources for a source format (.PAX) package."

	| resNames |
	resNames := self allResourceNames asArray.
	resNames do: 
			[:each | 
			| viewResClass resIdClass rid filename resource |
			resIdClass := Smalltalk at: #ResourceIdentifier.
			rid := resIdClass class: (self environment at: each key) name: each value.
			viewResClass := Smalltalk at: #ViewResource.
			filename := viewResClass generateFilenameFrom: rid inPackage: self.
			resource := viewResClass inSTBFileWithName: filename.
			rid assign: resource].
	self initializeLegacyResources!

loadResourcesFromFiler: binaryFiler 
	"Private - File in binary definitions of all the resources held by
	the receiver are directly or indirectly through class ownership."

	| aResourceIdentifier resourceNames |
	resourceNames := OrderedCollection new.
	[(aResourceIdentifier := binaryFiler next) notNil] whileTrue: 
			["Read in the binary resource"
			| resource |
			resource := binaryFiler next.
			aResourceIdentifier assign: resource.
			resourceNames add: aResourceIdentifier owningClass name -> aResourceIdentifier name].
	self allResourceNames: resourceNames!

loadVersion1: aFileStream filer: binaryFiler 
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 1."

	self vmVersionCheck: 0.
	self declareGlobals.
	self fileInClassDefinitions: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.

	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText.
	self initializeGlobals!

loadVersion2: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 2."

	self vmVersionCheck: 0.
	self declareGlobals.
	self fileInClassDefinitions: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.

	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText.
	self initializeGlobals!

loadVersion3: aFileStream filer: binaryFiler 
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 3."

	self vmVersionCheck: 0.
	self declareGlobals.
	self fileInClassDefinitions: aFileStream.
	self loadGlobalsFromFiler: binaryFiler.

	"Load in resources for each class"
	classNames size timesRepeat: 
			[| className resourceClass |
			className := binaryFiler next.
			resourceClass := self classFromName: className.
			binaryFiler next 
				keysAndValuesDo: [:resourceName :resource | (ResourceIdentifier class: resourceClass name: resourceName) assign: resource]].

	"File in any trailing source code of class/methods"
	self sourceManager fileInFrom: aFileStream beText.
	self initializeGlobals!

loadVersion4: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 4."

	self vmVersionCheck: binaryFiler stream nextDWORD.
	self basicLoadVersion4: aFileStream filer: binaryFiler!

loadVersion5: aFileStream filer: binaryFiler
	"Private - File in the objects owned by the receiver. The binaryFiler is positioned to
	a number of stored objects, organized into file version 5."

	self vmVersionCheck: binaryFiler next.

	"Apart from the VM version number, this format is the same as 4, so we just use
	the version 4 load."
	^self basicLoadVersion4: aFileStream filer: binaryFiler!

resourceNames
	"Required for boot and loading of pre-D6 packages.
	DO NOT USE"

	#deprecated.
	^Set new!

script: scriptSymbol
	#deprecated.	"In 4.0, but needed to load some old format packages"
	self scriptAt: scriptSymbol!

script: scriptSymbol put: aString 
	#deprecated.	"In 4.0, but needed to load some old format packages"
	self scriptAt: scriptSymbol put: aString!

versionLookup
	"This dictionary is used for loading legacy packages"

	^##((LookupTable new)
		at: 1 put: #loadVersion1:filer:;
		at: 2 put: #loadVersion2:filer:;
		at: 3 put: #loadVersion3:filer:;
		at: 4 put: #loadVersion4:filer:;
		at: 5 put: #loadVersion5:filer:;
		shrink;
		yourself	"same format as 4, except VM version loaded here")	"same format as 4, except VM version loaded here"! !

!Package categoriesForMethods!
basicLoadVersion4:filer:!binary filing!private! !
errorUnknownFileVersion:!binary filing!exceptions!private! !
fileInClassDefinitions:!development!private!source filing! !
loadGlobalsFromFiler:!binary filing!private! !
loadLegacyPAC:!binary filing!private! !
loadLegacyResources!binary filing!private! !
loadResourcesFromFiler:!binary filing!private! !
loadVersion1:filer:!binary filing!private! !
loadVersion2:filer:!binary filing!private! !
loadVersion3:filer:!binary filing!private! !
loadVersion4:filer:!binary filing!private! !
loadVersion5:filer:!binary filing!private! !
resourceNames!accessing!public! !
script:!operations!public! !
script:put:!operations!public! !
versionLookup!binary filing!constants!private! !
!

!Package class methodsFor!

name: nameString comment: commentString 
	#deprecated.	"In 4.0, but retained becaused needed to load some old format packages"
	^(self name: nameString)
		basicComment: commentString;
		yourself!

stbConvertFrom: anSTBClassFormat
	"Convert version 0 packages by mutating class names from Strings
	into Symbols. There is no layout change."

	| ver |
	ver := anSTBClassFormat version.
	Notification
		signal: 'Converting package from version ' , ver printString , ' to: ' , self stbVersion printString.
	ver == 6 ifTrue: [^[:data | self stbConvertFromVersion6: data]].
	ver == 5 ifTrue: [^[:data | self stbConvertFromVersion5: data]].
	ver == 4 ifTrue: [^[:data | self stbConvertFromVersion4: data]].
	ver == 3 ifTrue: [^[:data | self stbConvertFromVersion3: data]].
	ver == 2 ifTrue: [^[:data | self stbConvertFromVersion2: data]].
	ver == 1 ifTrue: [^[:data | self stbConvertFromVersion1: data]].
	ver == 0 ifTrue: [^[:data | self stbConvertFromVersion1: data]].
	^super stbConvertFrom: anSTBClassFormat
		
		!

stbConvertFromVersion0: anArray
	"Private - Convert version 0 packages by mutating class names from Strings	into Symbols. There is no layout change. Answer the mutated data.
	Version 0 packages preceeded even the first beta release, so there are probably none of these in the wild. Even if there were, the UI framework was radically different, so although they may be loadable they will not work.

	Version 0 Package		-->		Version 1 Package
	1	name					1	name
	2	packagePathname			2	packagePathname
	3	comment					3	comment
	4	classNames (Set)			4	classNames (IdentitySet)
	5	methodNames				5	methodNames
	6	globalNames (Set)			6	globalNames (IdentitySet)
	7	prerequisiteNames			7	prerequisiteNames
	8	preinstall					8	preinstall
	9	postinstall				9	postinstall
	10	singleFile					10	singleFile"

	anArray at: 4 put: ((anArray at: 4) collect: [:n | n asSymbol]) asIdentitySet.
	anArray at: 6 put: (anArray at: 6) asIdentitySet.
	^self stbConvertFromVersion1: anArray!

stbConvertFromVersion1: anArray
	"Private - Convert version 1 packages  to version2. The preinstall and postinstall instance variables are replaced by a dictionary which holds those scripts and any more we define. Answer the mutated data.

	Version 1 Package		-->		Version 2 Package
	1	name					1	name
	2	packagePathname			2	packagePathname
	3	comment					3	comment
	4	classNames				4	classNames
	5	methodNames				5	methodNames
	6	globalNames				6	globalNames
	7	prerequisiteNames			7	prerequisiteNames
	8	preinstall					8	singleFile
	9	postinstall				9	scripts
	10	singleFile"

	| preinstall postinstall newData scripts |
	newData := Array new: 9.
	newData replaceFrom: 1 to: 7 with: anArray startingAt: 1.
	newData at: 8 put: (anArray at: 10).
	scripts := IdentityDictionary new.
	preinstall := anArray at: 8.
	(preinstall notNil and: [preinstall notEmpty]) ifTrue: [scripts at: #preinstall put: preinstall].
	postinstall := anArray at: 9.
	(postinstall notNil and: [postinstall notEmpty])
		ifTrue: [scripts at: #postinstall put: postinstall].
	newData at: 9 put: scripts.
	^self stbConvertFromVersion2: newData!

stbConvertFromVersion2: anArray
	"Private - Convert version 2 packages to version 3. For package version 3, resources had been introduced into Dolphin and so resourceNames was added for tracking loose resources, similar to methodNames for loose methods.

	Version 2 Package		-->		Version 3 Package
	1	name					1	name
	2	packagePathname			2	packagePathname
	3	comment					3	comment
	4	classNames				4	classNames
	5	methodNames				5	methodNames
	6	globalNames				6	globalNames
	7	prerequisiteNames			7	prerequisiteNames
	8	singleFile					8	singleFile
	9	scripts					9	scripts
								10	resourceNames"

	^self stbConvertFromVersion3: (anArray copyWith: Set new)!

stbConvertFromVersion3: anArray
	"Private - Convert version 3 packages to version 4. The main change is the addition of an imageStripperBytes instance variable to hold a filed imageStripper to be associated with the package. We hold the image stripper in this form to allow filing of the package into images that do not have ImageStripper installed. Additionally we must convert the full stored pathname of the package to a name relative to the image base."

	"Version 3 Package		-->		Version 4 Package
	1	name					1	name
	2	packagePathname			2	packagePathname
	3	comment					3	comment
	4	classNames				4	classNames
	5	methodNames				5	methodNames
	6	globalNames				6	globalNames
	7	prerequisiteNames			7	prerequisiteNames
	8	singleFile					8	singleFile
	9	scripts					9	scripts
	10 	resourceNames			10	resourceNames
								11	imageStripperBytes"

	"Copy over adding a nil imageStripperBytes slot"

	| v4vars  |
	v4vars := anArray copyWith: nil.

	"Convert the imagePathName to a relative path"
	v4vars at: 2 put: (File relativePathOf: (anArray at: 2) to: SessionManager current imageBase).

	^self stbConvertFromVersion4: v4vars!

stbConvertFromVersion4: anArray
	"Private - Convert version 4 packages (Dolphin 1.0b2e) to version 5 (Dolphin 3.05).
	Adds an aboutBlock (12) and versionString (13) instance variables."

	| scripts |
	"Discard empty scripts"
	scripts := anArray at: 9.
	scripts := scripts select: [:each | each notEmpty].
	anArray at: 9 put: (scripts isEmpty ifFalse: [scripts]).
	^self stbConvertFromVersion5: (anArray resize: 13)!

stbConvertFromVersion5: anArray
	"Private - Convert version 5 (Dolphin 3.05) packages to version 6 for D5, and then D6 (new PAX format).
	singleFile instance variable is no longer used. The format was change again in D6 without updating the stbVersion - this was wrong but worked because the change was additive and the converter was tolerant.
	The resourceNames were no longer required because of the introduction of the literal method representation."

	"Version 5 Package		-->		Version 6 Package (D5)				Version 6 Package (D6)
	1	name					1	name						1	name
	2	packagePathname			2	packagePathname				2	packagePathname
	3	comment					3	comment                                         3	comment
	4	classNames				4	classNames					4	classNames
	5	methodNames				5	methodNames					5	methodNames
	6	globalNames				6	globalNames                                   6	globalNames
	7	prerequisiteNames			7	prerequisiteNames				7	prerequisiteNames
	8	singleFile					8	events						8	events
	9	scripts					9	scripts						9	scripts
	10 	resourceNames			10	resourceNames (not required)		10	doNotReuse
	11 	imageStripperBytes			11	imageStripperBytes				11	imageStripperBytes
	12 	aboutBlock				12	aboutBlock					12	aboutBlock
	13 	packageVersion			13	packageVersion				13	packageVersion
								14	manualPrerequisites			14	manualPrerequisites
								15	_unused2						15	timeStamp
																16	untracedGlobals"
	^self stbConvertFromVersion6: ((Array new: 16)
				replaceFrom: 1
					to: anArray size
					with: anArray
					startingAt: 1;
				at: 10 put: (anArray at: 8);
				at: 8 put: nil;
				yourself)!

stbConvertFromVersion6: anArray
	"Private - Convert version 6 to 7: Adds changeIndex and paxVersion instance variables."

	"End of the chain"
	^(anArray resize: 19) becomeA: self!

stbVersion
	"Answer the current binary filer version number for instances of the receiver."

	^7! !

!Package class categoriesForMethods!
name:comment:!instance creation!public! !
stbConvertFrom:!binary filing!public! !
stbConvertFromVersion0:!binary filing!private! !
stbConvertFromVersion1:!binary filing!private! !
stbConvertFromVersion2:!binary filing!private! !
stbConvertFromVersion3:!binary filing!private! !
stbConvertFromVersion4:!binary filing!private! !
stbConvertFromVersion5:!binary filing!private! !
stbConvertFromVersion6:!binary filing!private! !
stbVersion!binary filing!public! !
!

"End of package definition"!

