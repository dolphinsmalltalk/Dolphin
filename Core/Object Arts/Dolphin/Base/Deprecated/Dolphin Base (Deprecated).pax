| package |
package := Package name: 'Dolphin Base (Deprecated)'.
package paxVersion: 2;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Base System (Deprecated Classes and Methods)
Copyright (c) Object Arts Ltd 1997-2002. Portions copyright (c) CGI Group (Europe) Ltd, 1997.

This package includes legacy classes and methods from Dolphin''s base package that have been deprecated. If you have no requirement to use code imported from older versions of Dolphin, then this package can be safely uninstalled.
'.

package basicPackageVersion: '6.1'.


package setClassNames: #(
	#{ConformantArrayField}
	#{ConformantArrayPointerField}
	#{ConformantStructureArrayField}
	#{ConformantStructureArrayPointerField}
	#{MEMORY_BASIC_INFORMATION}
	#{OSVERSIONINFO}
	#{STBSymbolProxy}
).

package setMethodNames: #(
	#(#{_FPIEEE_RECORD} #causeCode)
	#(#{_FPIEEE_RECORD} #causeName)
	#(#{_FPIEEE_VALUE} #valueType)
	#(#{ArithmeticValue} #quoAndRem:)
	#(#{Behavior} #makeIndirect)
	#(#{Behavior} #makeNullTerminated)
	#(#{ByteCodeDispatcher} #byteCodeSegments)
	#(#{Category class} #categoryIcon)
	#(#{Character class} #safeCodePoint:)
	#(#{ChunkSourceFiler} #fileOutBinaryGlobal:)
	#(#{Class} #addClassVarName:)
	#(#{Class} #noClassCategoryName)
	#(#{ClassDescription} #defaultIconFrom:)
	#(#{CompilerNotification} #extra)
	#(#{CRTLibrary} #_controlfp:mask:)
	#(#{CRTLibrary} #_ecvt:count:dec:sign:)
	#(#{CRTLibrary} #_eof:)
	#(#{CRTLibrary} #_filelength:)
	#(#{CRTLibrary} #_finite:)
	#(#{CRTLibrary} #_fpclass:)
	#(#{CRTLibrary} #_gcvt:count:buffer:)
	#(#{CRTLibrary} #_gcvt_s:bufferSize:value:digits:)
	#(#{CRTLibrary} #_i64toa:string:radix:)
	#(#{CRTLibrary} #_logb:)
	#(#{CRTLibrary} #_ltoa:string:radix:)
	#(#{CRTLibrary} #_makepath:drive:dir:fname:ext:)
	#(#{CRTLibrary} #_putenv:)
	#(#{CRTLibrary} #_rotl:shift:)
	#(#{CRTLibrary} #_rotr:shift:)
	#(#{CRTLibrary} #_splitpath:drive:dir:fname:ext:)
	#(#{CRTLibrary} #_stricoll:string2:)
	#(#{CRTLibrary} #acos:)
	#(#{CRTLibrary} #asin:)
	#(#{CRTLibrary} #atan:)
	#(#{CRTLibrary} #atan:x:)
	#(#{CRTLibrary} #ceil:)
	#(#{CRTLibrary} #chmod:pmode:)
	#(#{CRTLibrary} #cos:)
	#(#{CRTLibrary} #exp:)
	#(#{CRTLibrary} #fabs:)
	#(#{CRTLibrary} #floor:)
	#(#{CRTLibrary} #fopen:mode:)
	#(#{CRTLibrary} #fopen_s:filename:mode:)
	#(#{CRTLibrary} #fread:size:count:stream:)
	#(#{CRTLibrary} #freopen:mode:stream:)
	#(#{CRTLibrary} #frexp:expptr:)
	#(#{CRTLibrary} #fseek:offset:origin:)
	#(#{CRTLibrary} #ftell:)
	#(#{CRTLibrary} #getenv:)
	#(#{CRTLibrary} #iswspace:)
	#(#{CRTLibrary} #ldexp:exp:)
	#(#{CRTLibrary} #log:)
	#(#{CRTLibrary} #log10:)
	#(#{CRTLibrary} #log2:)
	#(#{CRTLibrary} #memcpy:src:count:)
	#(#{CRTLibrary} #memmove:src:count:)
	#(#{CRTLibrary} #modf:intptr:)
	#(#{CRTLibrary} #pow:y:)
	#(#{CRTLibrary} #sin:)
	#(#{CRTLibrary} #sqrt:)
	#(#{CRTLibrary} #strcat:strSource:)
	#(#{CRTLibrary} #strerror:)
	#(#{CRTLibrary} #strncpy:strSource:count:)
	#(#{CRTLibrary} #tan:)
	#(#{CRTLibrary} #thread_chmod:pmode:)
	#(#{CRTLibrary} #thread_errno)
	#(#{Date} #evaluateYYMMDD:)
	#(#{Date} #monthIndex)
	#(#{Date} #weekday)
	#(#{Date} #weekdayIndex)
	#(#{Date class} #dateAndTimeNow)
	#(#{Date class} #dayOfWeek:)
	#(#{Date class} #nameOfDay:)
	#(#{Date class} #nameOfMonth:)
	#(#{Date class} #shortNameOfDay:)
	#(#{Date class} #shortNameOfMonth:)
	#(#{ExternalCallback class} #receiver:prototype:)
	#(#{ExternalCallback class} #receiver:prototype:closure:)
	#(#{ExternalCallback class} #receiver:selector:)
	#(#{ExternalCallback class} #receiver:selector:closure:)
	#(#{ExternalDescriptor class} #oneStringArg)
	#(#{ExternalLibrary} #invalidCall)
	#(#{ExternalStructure} #do:)
	#(#{ExternalStructure} #do:separatedBy:)
	#(#{File} #readCharacter)
	#(#{File class} #change:extension:)
	#(#{File class} #for:inAndBelow:do:)
	#(#{Integer} #digitSize)
	#(#{Integer} #highSWord)
	#(#{Integer} #lowSWord)
	#(#{KernelLibrary} #compareStringOrdinal:cchCount1:lpString2:cchCount2:bIgnoreCase:)
	#(#{KernelLibrary} #getDateFormat:dwFlags:lpDate:lpFormat:lpDateStr:cchDate:)
	#(#{KernelLibrary} #getFileSize:lpFileSizeHigh:)
	#(#{KernelLibrary} #getTimeFormat:dwFlags:lpTime:lpFormat:lpTimeStr:cchBuf:)
	#(#{KernelLibrary} #getVersionEx:)
	#(#{KernelLibrary} #lstrcmp:lpString2:)
	#(#{KernelLibrary} #lstrcmpi:lpString2:)
	#(#{KernelLibrary} #setFilePointer:lDistanceToMove:lpDistanceToMoveHigh:dwMoveMethod:)
	#(#{KernelLibrary class} #clear)
	#(#{Locale} #dateOrder)
	#(#{Locale} #dateSeparator)
	#(#{Locale} #isMonthBeforeDay)
	#(#{MessageBox} #abortRetryIgnore)
	#(#{MessageBox} #error)
	#(#{MessageBox} #fatalError)
	#(#{MessageBox} #ok)
	#(#{MessageBox} #okCancel)
	#(#{MessageBox} #prompt)
	#(#{MessageBox} #retryCancel)
	#(#{MessageBox} #systemModal)
	#(#{MessageBox} #taskModal)
	#(#{MessageBox} #yesNo)
	#(#{MessageBox} #yesNoCancel)
	#(#{MessageBoxAbstract} #notify)
	#(#{MessageBoxAbstract} #warning)
	#(#{Package} #addGlobalNamed:)
	#(#{Package} #includesGlobalNamed:)
	#(#{Package} #isBaseImagePackage)
	#(#{Package} #untracedGlobals)
	#(#{PackageManager} #addGlobalNamed:to:)
	#(#{PackageManager} #allGlobalAliases)
	#(#{PackageManager} #packageOfGlobalNamed:)
	#(#{Process} #fpeMask)
	#(#{Process} #fpeMask:)
	#(#{SortAlgorithm class} #sortBlock:)
	#(#{SortedCollection class} #value:value:)
	#(#{SourceFiler} #fileOutBinaryGlobal:)
	#(#{STBClassProxy class} #for:)
	#(#{STBCollectionProxy class} #for:)
	#(#{STBPrefix} #isLiteralPrefix)
	#(#{STBSingletonProxy class} #for:)
	#(#{STBSingletonProxy class} #for:using:)
	#(#{Stream} #nextOrNil)
	#(#{String} #asUnicodeString)
	#(#{String} #equals:)
	#(#{String class} #fromUnicodeString:)
	#(#{String class} #unicodeClass)
	#(#{Time} #hours)
	#(#{Time} #milliseconds)
	#(#{Time} #minutes)
	#(#{Time class} #dateAndTimeNow)
	#(#{Time class} #microsecondsToRun:)
	#(#{TimeStamp} #date:)
	#(#{TimeStamp} #dateAndTime)
	#(#{TimeStamp} #time:)
	#(#{WindowsLocale} #timeSeparator)
	#(#{WinMMLibrary} #timeGetTime)
).

package setVariableNames: #(
	#{UnicodeString}
).

package setAliasVariableNames: #(
	#{UnicodeString}
).

package setPrerequisites: #(
	'..\Dolphin'
	'..\Dolphin Conformant Array Fields'
	'..\Dolphin Legacy Date & Time'
	'..\Dolphin Message Box'
).

package!

"Class Definitions"!

ArrayField subclass: #ConformantArrayField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
StructureArrayField subclass: #ConformantStructureArrayField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ArrayPointerField subclass: #ConformantArrayPointerField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
StructureArrayPointerField subclass: #ConformantStructureArrayPointerField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Win32Structure subclass: #MEMORY_BASIC_INFORMATION
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_AllocationBase _OffsetOf_AllocationProtect _OffsetOf_BaseAddress _OffsetOf_Protect _OffsetOf_RegionSize _OffsetOf_State _OffsetOf_Type'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
OSVERSIONINFOEXW subclass: #OSVERSIONINFO
	instanceVariableNames: 'osName'
	classVariableNames: 'Current'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
STBProxy subclass: #STBSymbolProxy
	instanceVariableNames: 'string'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Variable Aliases"!

UnicodeString := Utf16String!


"Loose Methods"!

!_FPIEEE_RECORD methodsFor!

causeCode
	"Answer an <integer> which identifies the cause of the exception."

	#deprecated.	"Could be more than one cause"
	^(self cause bitAnd: 16r1F) highBit!

causeName
	"Answer the symbolic name of the type of floating point exception the receiver
	represents."

	#deprecated.	"Could be more than one cause"
	^self causeNames last! !
!_FPIEEE_RECORD categoriesFor: #causeCode!accessing!public! !
!_FPIEEE_RECORD categoriesFor: #causeName!accessing!public! !

!_FPIEEE_VALUE methodsFor!

valueType
	#deprecated.
	^self format! !
!_FPIEEE_VALUE categoriesFor: #valueType!accessing!public! !

!ArithmeticValue methodsFor!

quoAndRem: aNumber
	| quo |
	Notification deprecated.
	quo := self quo: aNumber.
	^{quo. self - (quo * aNumber)}! !
!ArithmeticValue categoriesFor: #quoAndRem:!arithmetic!public! !

!Behavior methodsFor!

makeIndirect
	Notification deprecated.
	self isIndirection: true!

makeNullTerminated
	Notification deprecated.
	self isNullTerminated: true! !
!Behavior categoriesFor: #makeIndirect!instance specification-accessing!private! !
!Behavior categoriesFor: #makeNullTerminated!instance specification-accessing!private! !

!ByteCodeDispatcher methodsFor!

byteCodeSegments
	#deprecated.
	^self segments! !
!ByteCodeDispatcher categoriesFor: #byteCodeSegments!accessing!public! !

!Category class methodsFor!

categoryIcon
	"Answer an Icon representing the Category objects which the receiver collects." 

	^self icon! !
!Category class categoriesFor: #categoryIcon!constants!public! !

!Character class methodsFor!

safeCodePoint: anInteger
	Notification deprecated.
	^self codePoint: anInteger ifInvalid: [Utf8Default]! !
!Character class categoriesFor: #safeCodePoint:!instance creation!public! !

!ChunkSourceFiler methodsFor!

fileOutBinaryGlobal: anAssociation 
	"File out the text representation of the non-<sourceObject> which is the value of the
	<Association>, anAssociation, onto the receiver's source stream. The key of the association
	is the global name. If the global is just an alias to a class, then we don't need to binary
	file it at all."

	| glob |
	#deprecated.
	glob := anAssociation value.
	(glob class isMeta and: [anAssociation key ~= glob name]) 
		ifTrue: 
			[stream
				nextPutAll: anAssociation key;
				nextPutAll: ' := ';
				print: anAssociation value;
				nextPut: $!!;
				cr.
			^self].
	stream
		nextPutAll: anAssociation key;
		nextPutAll: ' := ';
		print: Object;
		space;
		display: #fromBinaryStoreBytes:;
		space;
		cr.
	glob binaryStoreBytes base64StoreOn: stream.
	stream
		nextPut: $!!;
		cr! !
!ChunkSourceFiler categoriesFor: #fileOutBinaryGlobal:!public!source filing-file out! !

!Class methodsFor!

addClassVarName: aString
	#deprecated.	"Use addClassVarNamed:"
	^self addClassVarNamed: aString!

noClassCategoryName
	"Answer the String name of the ClassCategory used to mark that no
	category has been set for a Class."

	^self classCategoryClass unclassifiedName! !
!Class categoriesFor: #addClassVarName:!class variables!public! !
!Class categoriesFor: #noClassCategoryName!constants!public! !

!ClassDescription methodsFor!

defaultIconFrom: anExternalResourceLibrary
	"Answer a suitable default icon to use for this class. If anExternalResourceLibrary
	is, for some reason not open, then use the icon for the Object class."

	anExternalResourceLibrary asParameter isNull
		ifTrue: [^Object defaultIcon].
	^(self environment at: #Icon) fromId: self defaultIconName in: anExternalResourceLibrary.

	! !
!ClassDescription categoriesFor: #defaultIconFrom:!constants!public! !

!CompilerNotification methodsFor!

extra
	#deprecated.
	^extras isEmpty ifFalse: [extras anyOne]! !
!CompilerNotification categoriesFor: #extra!accessing!public! !

!CRTLibrary methodsFor!

_controlfp: newInteger mask: maskInteger
	<cdecl: dword _controlfp dword dword>
	#deprecated.	"Insecure - use _controlfp_s"
	^self invalidCall: _failureCode!

_ecvt: aFloat count: anInteger dec: decInteger sign: signInteger
	<cdecl: lpstr _ecvt double sdword sdword* sdword*>
	#deprecated.	"This function is considered insecure and should not be used - see MSDN"
	^self invalidCall: _failureCode!

_eof: handleInteger
	<cdecl: sdword _eof sdword>
	#deprecated. "Unused"
	^self invalidCall: _failureCode!

_filelength: handleInteger
	<cdecl: sdword _filelength sdword>
	#deprecated.
	^self invalidCall: _failureCode!

_finite: aFloat
	<cdecl: bool _finite double>
	#deprecated.
	^self invalidCall: _failureCode!

_fpclass: aFloat
	<cdecl: sdword _fpclass double>
	#deprecated.
	^self invalidCall: _failureCode!

_gcvt: aFloat count: anInteger buffer: aString
	<cdecl: char* _gcvt double sdword char*>
	#deprecated.	"Insecure - use _gcvt_s"
	^self invalidCall: _failureCode!

_gcvt_s: aString bufferSize: sizeInteger value: aFloat digits: digitsInteger
	<cdecl: sdword _gcvt_s char* intptr double sdword>
	#deprecated.
	^self invalidCall: _failureCode!

_i64toa: aSmallInteger string: aString radix: anInteger
	<cdecl: lpstr _i64toa sqword lpstr sdword>
	#deprecated.	"Insecure - see MSDN"
	^self invalidCall: _failureCode!

_logb: aFloat
	<cdecl: double _logb double>
	#deprecated.
	^self invalidCall: _failureCode!

_ltoa: aSmallInteger string: aString radix: anInteger
	<cdecl: lpstr _ltoa sdword lpstr sdword>
	#deprecated.	"Insecure - see MSDN"
	^self invalidCall: _failureCode!

_makepath: path drive: drive dir: dir fname: fname ext: ext
	<cdecl: void _makepath char* char* char* char* char*>
	#deprecated.	"Insecure. Use #_makepath_s:sizeInBytes:drive:dir:fname:ext:"
	^self invalidCall: _failureCode!

_putenv: aString
	<cdecl: sdword _putenv lpstr>
	#deprecated.	"Insecure - see MSDN"
	^self invalidCall: _failureCode!

_rotl: anUnsignedlInteger shift: anInteger
	<cdecl: dword _rotl dword sdword>
	#deprecated. "Unused"
	^self invalidCall: _failureCode!

_rotr: anUnsignedlInteger shift: anInteger
	<cdecl: dword _rotr dword sdword>
	#deprecated. "Unused"
	^self invalidCall: _failureCode!

_splitpath: path drive: drive dir: dir fname: fname ext: ext
	<cdecl: void _splitpath char* char* char* char* char*>
	#deprecated.	"Insecure - use _splitpath_s"
	^self invalidCall: _failureCode!

_stricoll: string1 string2: string2
	<cdecl: sdword _stricoll lpstr lpstr>
	#deprecated. "Unused"
	^self invalidCall: _failureCode!

acos: aFloat
	<cdecl: double acos double>
	#deprecated.
	^self invalidCall: _failureCode!

asin: aFloat
	<cdecl: double asin double>
	#deprecated.
	^self invalidCall: _failureCode!

atan: aFloat
	<cdecl: double atan double>
	#deprecated.
	^self invalidCall: _failureCode!

atan: yFloat x: xFloat
	<cdecl: double atan2 double double>
	#deprecated.
	^self invalidCall: _failureCode!

ceil: aFloat
	<cdecl: double ceil double>
	#deprecated.
	^self invalidCall: _failureCode!

chmod: aFilenameString pmode: aModeInteger
	#deprecated.
	^self _chmod: aFilenameString pmode: aModeInteger!

cos: aFloat
	<cdecl: double cos double>
	#deprecated.
	^self invalidCall: _failureCode!

exp: aFloat
	<cdecl: double exp double>
	#deprecated.
	^self invalidCall: _failureCode!

fabs: aFloat
	<cdecl: double fabs double>
	#deprecated.
	^self invalidCall: _failureCode!

floor: aFloat
	<cdecl: double floor double>
	#deprecated.
	^self invalidCall: _failureCode!

fopen: nameString mode: modeString
	<cdecl: handle fopen lpstr lpstr>
	#deprecated.	"Insecure"
	^self invalidCall: _failureCode!

fopen_s: pFile filename: nameString mode: modeString
	<cdecl: sdword fopen_s handle* lpstr lpstr>
	#deprecated.	"No longer used"
	^self invalidCall: _failureCode!

fread: buffer size: size count: count stream: aFILE
	<overlap cdecl: sdword fread lpvoid intptr intptr handle>
	#deprecated.	"Insecure - use fread_s"
	^self invalidCall: _failureCode!

freopen: pathString mode: modeString stream: anExternalHandle
	<cdecl: handle freopen char* char* handle>
	#deprecated.	"Insecured - see MSDN"
	^self invalidCall: _failureCode!

frexp: x expptr: expptr
	<cdecl: double frexp double sdword*>
	#deprecated.
	^self invalidCall: _failureCode!

fseek: aFILE offset: offsetInteger origin: originInteger
	<cdecl: sdword fseek handle sdword sdword>
	#deprecated. "Use _fseeki64:offset:origin:"
	^self invalidCall: _failureCode!

ftell: aFILE
	<cdecl: sdword ftell handle>
	#deprecated.	"Use #_ftelli64:"
	^self invalidCall: _failureCode!

getenv: varname
	<cdecl: lpstr getenv lpstr>
	#deprecated.	"Insecure - see MSDN"
	^self invalidCall: _failureCode!

iswspace: aCharacter
	<cdecl: bool iswspace char>
	#deprecated.	"Unused"
	^self invalidCall: _failureCode!

ldexp: aFloat exp: anInteger
	<cdecl: double ldexp double sdword>
	#deprecated.
	^self invalidCall: _failureCode!

log: aFloat
	<cdecl: double log double>
	#deprecated.
	^self invalidCall: _failureCode!

log10: aFloat
	<cdecl: double log10 double>
	#deprecated.
	^self invalidCall: _failureCode!

log2: aFloat
	<cdecl: double log2 double>
	#deprecated.
	^self invalidCall: _failureCode!

memcpy: dest src: src count: count
	<cdecl: lpvoid memcpy lpvoid lpvoid intptr>
	#deprecated.	"Insecure - see MSDN"
	^self invalidCall: _failureCode!

memmove: dest src: src count: count
	<cdecl: void* memmove void* void* intptr>
	#deprecated.	"Insecure - see MSDN"
	^self invalidCall: _failureCode!

modf: aFloat intptr: intFloatOut
	<cdecl: double modf double lpvoid>
	#deprecated.
	^self invalidCall: _failureCode!

pow: xFloat y: yFloat
	<cdecl: double pow double double>
	#deprecated.
	^self invalidCall: _failureCode!

sin: aFloat
	<cdecl: double sin double>
	#deprecated.
	^self invalidCall: _failureCode!

sqrt: aFloat
	<cdecl: double sqrt double>
	#deprecated.
	^self invalidCall: _failureCode!

strcat: strDestination strSource: strSource
	<cdecl: lpstr strcat lpstr lpstr>
	#deprecated.	"This function may cause buffer overruns so is insecure. Use strcat_s instead."
	^self invalidCall: _failureCode!

strerror: errno
	<cdecl: lpstr strerror sdword>
	#deprecated.	"Insecure - see MSDN"
	^self invalidCall: _failureCode!

strncpy: strDest strSource: strSource count: count
	<cdecl: lpvoid strncpy lpvoid lpvoid intptr>
	#deprecated.	"Insecure - see MSDN"
	^self invalidCall: _failureCode!

tan: aFloat
	<cdecl: double tan double>
	#deprecated.
	^self invalidCall: _failureCode!

thread_chmod: aFilenameString pmode: aModeInteger
	<overlap cdecl: sdword _chmod lpstr sdword>
	#deprecated. "Use CRTLibraryNonBlocking>>chmod:pmode:"
	^self invalidCall: _failureCode!

thread_errno
	<overlap cdecl: sdword _errno>
	#deprecated. "Use CRTLibraryNonBlocking>>errno"
	^self invalidCall: _failureCode! !
!CRTLibrary categoriesFor: #_controlfp:mask:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #_ecvt:count:dec:sign:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #_eof:!CRT functions-file handling!public! !
!CRTLibrary categoriesFor: #_filelength:!CRT functions-file handling!public! !
!CRTLibrary categoriesFor: #_finite:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #_fpclass:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #_gcvt:count:buffer:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #_gcvt_s:bufferSize:value:digits:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #_i64toa:string:radix:!CRT functions-data conversion!public! !
!CRTLibrary categoriesFor: #_logb:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #_ltoa:string:radix:!CRT functions-data conversion!public! !
!CRTLibrary categoriesFor: #_makepath:drive:dir:fname:ext:!CRT functions-file handling!public! !
!CRTLibrary categoriesFor: #_putenv:!CRT functions-process and environment control!public! !
!CRTLibrary categoriesFor: #_rotl:shift:!CRT functions-bit manipulation!public! !
!CRTLibrary categoriesFor: #_rotr:shift:!CRT functions-bit manipulation!public! !
!CRTLibrary categoriesFor: #_splitpath:drive:dir:fname:ext:!CRT functions-file handling!public! !
!CRTLibrary categoriesFor: #_stricoll:string2:!CRT functions-string manipulation!public! !
!CRTLibrary categoriesFor: #acos:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #asin:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #atan:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #atan:x:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #ceil:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #chmod:pmode:!CRT functions-file handling!public! !
!CRTLibrary categoriesFor: #cos:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #exp:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #fabs:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #floor:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #fopen:mode:!CRT functions-stream I/O!public! !
!CRTLibrary categoriesFor: #fopen_s:filename:mode:!CRT functions-stream I/O!public! !
!CRTLibrary categoriesFor: #fread:size:count:stream:!CRT functions-stream I/O!public! !
!CRTLibrary categoriesFor: #freopen:mode:stream:!CRT functions-stream I/O!public! !
!CRTLibrary categoriesFor: #frexp:expptr:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #fseek:offset:origin:!CRT functions-stream I/O!public! !
!CRTLibrary categoriesFor: #ftell:!CRT functions-stream I/O!public! !
!CRTLibrary categoriesFor: #getenv:!CRT functions-process and environment control!public! !
!CRTLibrary categoriesFor: #iswspace:!CRT functions-character classification!public! !
!CRTLibrary categoriesFor: #ldexp:exp:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #log:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #log10:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #log2:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #memcpy:src:count:!CRT functions-buffer manipulation!public! !
!CRTLibrary categoriesFor: #memmove:src:count:!CRT functions-buffer manipulation!public! !
!CRTLibrary categoriesFor: #modf:intptr:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #pow:y:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #sin:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #sqrt:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #strcat:strSource:!CRT functions-string manipulation!public! !
!CRTLibrary categoriesFor: #strerror:!CRT functions-string manipulation!public! !
!CRTLibrary categoriesFor: #strncpy:strSource:count:!CRT functions-string manipulation!public! !
!CRTLibrary categoriesFor: #tan:!CRT functions-floating point support!public! !
!CRTLibrary categoriesFor: #thread_chmod:pmode:!CRT functions-file handling!public! !
!CRTLibrary categoriesFor: #thread_errno!CRT functions-process and environment control!public! !

!Date methodsFor!

evaluateYYMMDD: aTriadicValuable
	Notification deprecated.
	^self dayMonthYearDo: [:d :m :y | aTriadicValuable value: y value: m value: d]!

monthIndex
	Notification deprecated.
	^self month!

weekday
	Notification deprecated.
	^Locale default dayOfWeekName: self dayOfWeek!

weekdayIndex
	Notification deprecated.
	^(self asDays + 1) \\ 7 + 1! !
!Date categoriesFor: #evaluateYYMMDD:!helpers!public! !
!Date categoriesFor: #monthIndex!accessing!public! !
!Date categoriesFor: #weekday!accessing!public! !
!Date categoriesFor: #weekdayIndex!accessing!public! !

!Date class methodsFor!

dateAndTimeNow 
	"Answer an Array whose first element is the current local Date and whose
	second element is the current local Time."

	"Use DateAndTime now"
	Notification deprecated. 
	^Time dateAndTimeNow!

dayOfWeek: dayName
	Notification deprecated.
	^Locale default dayOfWeek: dayName!

nameOfDay: dayIndex
	"Use Locale>>dayOfWeekName:, but note that it expects Sunday as the first day of the week."
	
	Notification deprecated.
	^Locale default dayOfWeekName: (dayIndex + 1) \\ 7!

nameOfMonth: monthIndex
	"Use Locale>>monthName:"

	Notification deprecated.
	^Locale default monthName: monthIndex!

shortNameOfDay: dayIndex
	"Use Locale>>dayOfWeekAbbreviation:, but note that it expects Sunday as the first day of the week."
	
	Notification deprecated.
	^Locale default dayOfWeekAbbreviation: (dayIndex + 1) \\ 7!

shortNameOfMonth: monthIndex
	Notification deprecated.
	^self monthAbbreviation: monthIndex! !
!Date class categoriesFor: #dateAndTimeNow!enquiries!public! !
!Date class categoriesFor: #dayOfWeek:!enquiries!public! !
!Date class categoriesFor: #nameOfDay:!enquiries!public! !
!Date class categoriesFor: #nameOfMonth:!enquiries!public! !
!Date class categoriesFor: #shortNameOfDay:!enquiries!public! !
!Date class categoriesFor: #shortNameOfMonth:!enquiries!public! !

!ExternalCallback class methodsFor!

receiver: anObject prototype: anExternalMethod
	#deprecated.	"Use #receiver:selector:descriptor:"
	self assert: 
			[(anExternalMethod isKindOf: ExternalMethod) 
				and: [anExternalMethod primitiveIndex == self callbackPrimitive]].
	^MessageCallback 
		receiver: anObject
		selector: anExternalMethod selector
		descriptor: anExternalMethod descriptor!

receiver: anObject prototype: anExternalMethod closure: extraObject
	#deprecated.	"Use #receiver:selector:descriptor: and #closure:"
	^(self receiver: anObject prototype: anExternalMethod) 
		closure: extraObject!

receiver: anObject selector: aSymbol
	#deprecated.	"Use #receiver:selector:descriptor:"
	^self receiver: anObject prototype: (anObject class definitionOf: aSymbol)!

receiver: anObject selector: aSymbol closure: extraObject
	#deprecated.	"Use #receiver:selector:descriptor: and #closure:"
	^(self receiver: anObject selector: aSymbol) closure: extraObject! !
!ExternalCallback class categoriesFor: #receiver:prototype:!instance creation!public! !
!ExternalCallback class categoriesFor: #receiver:prototype:closure:!instance creation!public! !
!ExternalCallback class categoriesFor: #receiver:selector:!instance creation!public! !
!ExternalCallback class categoriesFor: #receiver:selector:closure:!instance creation!public! !

!ExternalDescriptor class methodsFor!

oneStringArg
	"Answer a shared instance of the receiver describing a standard function
	with a single string argument."

	#deprecated.
	^self argumentTypes: 'lpstr'! !
!ExternalDescriptor class categoriesFor: #oneStringArg!instance creation!public! !

!ExternalLibrary methodsFor!

invalidCall
	"The primitive failure code is now an implicit temp of the primitive method, and so must be passed. The instance variable of Process formerly used to store the failure code is no longer used."

	Notification deprecated. 
	^self invalidCall: 0! !
!ExternalLibrary categoriesFor: #invalidCall!exceptions!public! !

!ExternalStructure methodsFor!

do: aOneArgumentBlock 
	#deprecated.
	self fieldsDo: aOneArgumentBlock!

do: operation separatedBy: separator 
	#deprecated.
	self fieldsDo: operation separatedBy: separator! !
!ExternalStructure categoriesFor: #do:!enumerating!public! !
!ExternalStructure categoriesFor: #do:separatedBy:!enumerating!public! !

!File methodsFor!

readCharacter
	"Answer the next Character from the file or nil if the receiver
	is positioned past the current EOF.
	Signal a FileException if an error occurs."

	| string |
	#deprecated.	"May read a partial character - better to open a stream on the file and read next character from that."
	string := String new: 1.
	^(self read: string count: 1) == 0 ifTrue: [nil] ifFalse: [string at: 1]! !
!File categoriesFor: #readCharacter!operations!public! !

!File class methodsFor!

change: aPathnameString extension: anExtensionString
	#deprecated.	"use #path:extension:"
	^self path: aPathnameString extension: anExtensionString!

for: matchString inAndBelow: dirString do: operation
	#deprecated.	"Use #forAll:in:do:"
	^self 
		forAll: matchString
		in: dirString
		do: [:each | operation value: each directory value: each]! !
!File class categoriesFor: #change:extension:!filename manipulation!public! !
!File class categoriesFor: #for:inAndBelow:do:!enumerating!public! !

!Integer methodsFor!

digitSize
	#deprecated.
	^self digitLength!

highSWord
	"Answers the high order signed word of the receiver (assumes the receiver is a 32-bit Integer)."

	#deprecated.
	^(DWORD fromInteger: self) highSWord
!

lowSWord
	"Answers the low order signed word of the receiver (assumes the receiver is a 32-bit Integer)."

	#deprecated.
	^(DWORD fromInteger: self) lowSWord
! !
!Integer categoriesFor: #digitSize!accessing!public! !
!Integer categoriesFor: #highSWord!bit manipulation!public! !
!Integer categoriesFor: #lowSWord!bit manipulation!public! !

!KernelLibrary methodsFor!

compareStringOrdinal: lpString1 cchCount1: cchCount1 lpString2: lpString2 cchCount2: cchCount2 bIgnoreCase: bIgnoreCase
	<stdcall: sdword CompareStringOrdinal lpwstr sdword lpwstr sdword bool>
	#deprecated.
	^self invalidCall: _failureCode!

getDateFormat: locale dwFlags: dwFlags lpDate: aWinSYSTEMTIME lpFormat: formatString lpDateStr: outputStringOutput cchDate: anInteger
	<stdcall: sdword GetDateFormatW dword dword void* lpwstr lpwstr sdword>
	#deprecated. "Deprecated by Microsoft - use GetDateFormatEx"
	^self invalidCall: _failureCode

!

getFileSize: hfile lpFileSizeHigh: lpFileSizeHigh
	<stdcall: dword GetFileSize handle dword*>
	#deprecated. "Use #getFileSizeEx:lpFileSize:"
	^self invalidCall: _failureCode!

getTimeFormat: locale dwFlags: dwFlags lpTime: aWinSYSTEMTIME lpFormat: formatString lpTimeStr: outputStringOutput cchBuf: anInteger
	<stdcall: sdword GetTimeFormatW dword dword void* lpwstr lpwstr sdword>
	#deprecated. "Deprecated by Microsoft - use GetTimeFormatEx instead"
	^self invalidCall: _failureCode

!

getVersionEx: anOSVERSIONINFO 
	"Populate the argument with extended OS version information. Answers whether the request succeeded.
		BOOL GetVersionEx(
			LPOSVERSIONINFO lpVersionInformation 
		);"

	<stdcall: bool GetVersionExW OSVERSIONINFO*>
	#deprecated.	"Deprecated by Microsoft, see https://msdn.microsoft.com/en-us/library/windows/desktop/ms724451(v=vs.140).aspx"
	^self invalidCall: _failureCode!

lstrcmp: aString1 lpString2: aString2
	<stdcall: sdword lstrcmpW lpwstr lpwstr>
	#deprecated.
	^self invalidCall: _failureCode!

lstrcmpi: aString1 lpString2: aString2
	<stdcall: sdword lstrcmpiW lpwstr lpwstr>
	#deprecated.
	^self invalidCall: _failureCode!

setFilePointer: aHandle lDistanceToMove: loInteger lpDistanceToMoveHigh: anAddress dwMoveMethod: senseOfMove
	<stdcall: dword SetFilePointer handle dword lpvoid dword>
	#deprecated. "Use #setFilePointerEx:liDistanceToMove:lpNewFilePointer:dwMoveMethod:"
	^self invalidCall: _failureCode! !
!KernelLibrary categoriesFor: #compareStringOrdinal:cchCount1:lpString2:cchCount2:bIgnoreCase:!public!win32 functions-national language support! !
!KernelLibrary categoriesFor: #getDateFormat:dwFlags:lpDate:lpFormat:lpDateStr:cchDate:!public!win32 functions-national language support! !
!KernelLibrary categoriesFor: #getFileSize:lpFileSizeHigh:!public!win32 functions-file management! !
!KernelLibrary categoriesFor: #getTimeFormat:dwFlags:lpTime:lpFormat:lpTimeStr:cchBuf:!public!win32 functions-national language support! !
!KernelLibrary categoriesFor: #getVersionEx:!public!win32 functions-system information! !
!KernelLibrary categoriesFor: #lstrcmp:lpString2:!public!win32 functions-string manipulation! !
!KernelLibrary categoriesFor: #lstrcmpi:lpString2:!public!win32 functions-string manipulation! !
!KernelLibrary categoriesFor: #setFilePointer:lDistanceToMove:lpDistanceToMoveHigh:dwMoveMethod:!public!win32 functions-file management! !

!KernelLibrary class methodsFor!

clear
	"Private - Clear down cached external function addresses and any default 
	instances of the receiver from previous runs. etc."

	super clear.
	OSVERSIONINFO clear
! !
!KernelLibrary class categoriesFor: #clear!initializing!private! !

!Locale methodsFor!

dateOrder
	"Answer the date ordering used in the receiver locale.
		0	Month - Day - Year
		1	Day - Month - Year
		2	Year - Month - Day."

	Notification deprecated. "Use dateFormat"
	^self getIntegerInfo: LOCALE_IDATE
!

dateSeparator
	"Answer the character used in the receiver locale to separate date components."

	Notification deprecated. "Use dateFormat"
	^self getStringInfo: LOCALE_SDATE!

isMonthBeforeDay
	"Answer true if the format for the receiver is expecting a month before a day"

	Notification deprecated. "Use dateFormat"
	^self dateOrder ~= 1! !
!Locale categoriesFor: #dateOrder!constants!public! !
!Locale categoriesFor: #dateSeparator!constants!public! !
!Locale categoriesFor: #isMonthBeforeDay!helpers!public! !

!MessageBox methodsFor!

abortRetryIgnore
	#deprecated.
	self buttonStyle: #abortRetryIgnore!

error
	#deprecated.
	self iconStyle: #error!

fatalError
	#deprecated.
	self beFatalError!

ok
	#deprecated.
	self buttonStyle: #ok!

okCancel
	#deprecated.
	self buttonStyle: #okCancel!

prompt
	#deprecated.
	self iconStyle: #prompt!

retryCancel
	#deprecated.
	self buttonStyle: #retryCancel!

systemModal
	#deprecated.
	self beSystemModal!

taskModal
	#deprecated.
	self beTaskModal!

yesNo
	#deprecated.
	self buttonStyle: #yesNo!

yesNoCancel
	#deprecated.
	self buttonStyle: #yesNoCancel! !
!MessageBox categoriesFor: #abortRetryIgnore!accessing-styles!public! !
!MessageBox categoriesFor: #error!modes!public! !
!MessageBox categoriesFor: #fatalError!accessing-styles!public! !
!MessageBox categoriesFor: #ok!accessing-styles!public! !
!MessageBox categoriesFor: #okCancel!accessing-styles!public! !
!MessageBox categoriesFor: #prompt!accessing-styles!public! !
!MessageBox categoriesFor: #retryCancel!accessing-styles!public! !
!MessageBox categoriesFor: #systemModal!accessing-styles!public! !
!MessageBox categoriesFor: #taskModal!accessing-styles!public! !
!MessageBox categoriesFor: #yesNo!accessing-styles!public! !
!MessageBox categoriesFor: #yesNoCancel!accessing-styles!public! !

!MessageBoxAbstract methodsFor!

notify
	#deprecated.
	self iconStyle: #notify!

warning
	#deprecated.
	self iconStyle: #warning! !
!MessageBoxAbstract categoriesFor: #notify!modes!public! !
!MessageBoxAbstract categoriesFor: #warning!modes!public! !

!Package methodsFor!

addGlobalNamed: globalName
	#deprecated.
	^self addVariableNamed: globalName!

includesGlobalNamed: globalName
	#deprecated.
	^self includesVariableNamed: globalName asQualifiedReference!

isBaseImagePackage
	"Answer true if the receiver is a basic component of Dolphin "

	#deprecated.
	^self isBasePackage!

untracedGlobals
	#deprecated.
	^self untracedVariables collect: [:each | each asSymbol]! !
!Package categoriesFor: #addGlobalNamed:!adding!public! !
!Package categoriesFor: #includesGlobalNamed:!public!testing! !
!Package categoriesFor: #isBaseImagePackage!public!testing! !
!Package categoriesFor: #untracedGlobals!accessing!public! !

!PackageManager methodsFor!

addGlobalNamed: globalName to: aPackageOrNil
	#deprecated.
	^self addVariableNamed: globalName asQualifiedReference to: aPackageOrNil!

allGlobalAliases
	#deprecated.
	^self allVariableAliases collect: [:each | each asSymbol]!

packageOfGlobalNamed: globalName 
	#deprecated.
	^self packageOfVariableNamed: globalName asQualifiedReference! !
!PackageManager categoriesFor: #addGlobalNamed:to:!adding!public! !
!PackageManager categoriesFor: #allGlobalAliases!enquiries!public! !
!PackageManager categoriesFor: #packageOfGlobalNamed:!public!searching! !

!Process methodsFor!

fpeMask
	#deprecated.	"Use Float class>>exceptionMask, or #fpControl"
	^fpControl bitAnd: CRTConstants._MCW_EM!

fpeMask: anInteger
	#deprecated.	"Use Float>>exceptionMask: or #setFpControl:mask:"
	^self setFpControl: anInteger mask: CRTConstants._MCW_EM! !
!Process categoriesFor: #fpeMask!accessing!public! !
!Process categoriesFor: #fpeMask:!accessing!private! !

!SortAlgorithm class methodsFor!

sortBlock: aDyadicValuable
	Notification deprecated.
	^self newSortBlock: aDyadicValuable! !
!SortAlgorithm class categoriesFor: #sortBlock:!instance creation!public! !

!SortedCollection class methodsFor!

value: anObject1 value: anObject2 
	"Private - Implement this part of the <dyadicValuable> protocol in order that the receiver
	can be its own default sort 'block' for historical reasons. This is no longer used as of
	Dolphin 6, and is deprecated in Dolphin 7.1"

	Notification deprecated.
	^anObject1 <= anObject2! !
!SortedCollection class categoriesFor: #value:value:!evaluating!private! !

!SourceFiler methodsFor!

fileOutBinaryGlobal: anAssociation 
	"File out the text representation of the non-<sourceObject>
	which is the value of the <Association>, anAssociation, to the
	source stream. The key of the association is the global name."

	#deprecated.
	^self subclassResponsibility! !
!SourceFiler categoriesFor: #fileOutBinaryGlobal:!public!source filing! !

!STBClassProxy class methodsFor!

for: aClass 
	#deprecated.
	^self forClass: aClass! !
!STBClassProxy class categoriesFor: #for:!instance creation!public! !

!STBCollectionProxy class methodsFor!

for: aCollection 
	#deprecated.
	^self forCollection: aCollection! !
!STBCollectionProxy class categoriesFor: #for:!instance creation!public! !

!STBPrefix methodsFor!

isLiteralPrefix
	#deprecated.
	^dword anyMask: LiteralPrefixMask! !
!STBPrefix categoriesFor: #isLiteralPrefix!public!testing! !

!STBSingletonProxy class methodsFor!

for: aClass 
	#deprecated.
	^self forClass: aClass!

for: aClass using: aSelectorSymbol 
	#deprecated.
	^self forClass: aClass using: aSelectorSymbol! !
!STBSingletonProxy class categoriesFor: #for:!instance creation!public! !
!STBSingletonProxy class categoriesFor: #for:using:!instance creation!public! !

!Stream methodsFor!

nextOrNil
	#deprecated.
	^self nextAvailable! !
!Stream categoriesFor: #nextOrNil!accessing!public! !

!String methodsFor!

asUnicodeString
	Notification deprecated.
	^self asUtf16String!

equals: comperand
	Notification deprecated.	"As of v7.1.6, Strings and Symbols with the same characters are always equal."
	^self = comperand! !
!String categoriesFor: #asUnicodeString!converting!public! !
!String categoriesFor: #equals:!comparing!public! !

!String class methodsFor!

fromUnicodeString: anAddressOrUnicodeString
	#deprecated.
	^self fromUtf16String: anAddressOrUnicodeString!

unicodeClass
	#deprecated.
	^self utf16Class! !
!String class categoriesFor: #fromUnicodeString:!instance creation!public! !
!String class categoriesFor: #unicodeClass!constants!public! !

!Time methodsFor!

hours
	Notification deprecated.
	^self hour24!

milliseconds
	Notification deprecated.
	^self millisecond!

minutes
	Notification deprecated.
	^self minute! !
!Time categoriesFor: #hours!accessing!public! !
!Time categoriesFor: #milliseconds!accessing!public! !
!Time categoriesFor: #minutes!accessing!public! !

!Time class methodsFor!

dateAndTimeNow
	"Answer an Array whose first element is the current local Date and whose
	second element is the current local Time."

	| now |
	"Use DateAndTime now"
	Notification deprecated.
	now := DateAndTime now.
	^{now asDate. now asTime}!

microsecondsToRun: timedBlock
	"Answer the number of microseconds consumed by the evaluation of timedBlock
	(including the overhead)."

	^timedBlock timeToRun asMicroseconds asInteger! !
!Time class categoriesFor: #dateAndTimeNow!accessing!public! !
!Time class categoriesFor: #microsecondsToRun:!operations!public! !

!TimeStamp methodsFor!

date: aDate
	"Timestamps are immutable and should be initialized at creation time."

	Notification deprecated.
	self isImmutable: false.
	date := aDate
!

dateAndTime
	"Answer a two element Array containing the date and time."

	Notification deprecated.
	^{self date. self time}!

time: aTime
	"Timestamps are immutable and should be initialized at creation time."

	Notification deprecated.
	self isImmutable: false.
	time := aTime
! !
!TimeStamp categoriesFor: #date:!accessing!public! !
!TimeStamp categoriesFor: #dateAndTime!accessing!public! !
!TimeStamp categoriesFor: #time:!accessing!public! !

!WindowsLocale methodsFor!

timeSeparator
	"Answer the character used in the receiver locale to separate time components."

	Notification deprecated. "Use timeFormat"
	^self getStringInfo: LOCALE_STIME! !
!WindowsLocale categoriesFor: #timeSeparator!constants!public! !

!WinMMLibrary methodsFor!

timeGetTime
	<stdcall: dword timeGetTime>
	#deprecated.	"Use Time class>>millisecondClockValue (which is highly accurate, and does not wrap after ~49.7 days either)"
	^self invalidCall: _failureCode! !
!WinMMLibrary categoriesFor: #timeGetTime!public!win32 functions-timer! !

"End of package definition"!

