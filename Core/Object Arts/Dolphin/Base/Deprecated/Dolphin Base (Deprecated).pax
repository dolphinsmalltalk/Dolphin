| package |
package := Package name: 'Dolphin Base (Deprecated)'.
package paxVersion: 1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Base System (Deprecated Classes and Methods)
Copyright (c) Object Arts Ltd 1997-2002. Portions copyright (c) CGI Group (Europe) Ltd, 1997.

This package includes legacy classes and methods from Dolphin''s base package that have been deprecated. If you have no requirement to use code imported from older versions of Dolphin, then this package can be safely uninstalled.
'.

package basicPackageVersion: '6.1'.

package basicScriptAt: #postinstall put: '#(#UnicodeString)
	do: [:each | (Smalltalk bindingFor: each) isDeprecated: true]'.

package classNames
	add: #ConformantArrayField;
	add: #ConformantArrayPointerField;
	add: #ConformantStructureArrayField;
	add: #ConformantStructureArrayPointerField;
	add: #MEMORY_BASIC_INFORMATION;
	add: #STBSymbolProxy;
	yourself.

package methodNames
	add: #_FPIEEE_RECORD -> #causeCode;
	add: #_FPIEEE_RECORD -> #causeName;
	add: #_FPIEEE_VALUE -> #valueType;
	add: #ArithmeticValue -> #quoAndRem:;
	add: #Behavior -> #makeIndirect;
	add: #Behavior -> #makeNullTerminated;
	add: #ByteCodeDispatcher -> #byteCodeSegments;
	add: #Class -> #allSharedPoolNames;
	add: #Class -> #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:;
	add: #Class -> #variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:;
	add: #Class -> #variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:;
	add: #Class -> #variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:;
	add: #ClassDescription -> #allSharedPoolNames;
	add: #ClassDescription -> #allSharedPools;
	add: #ClassDescription -> #sharedPoolNames;
	add: #ClassDescription -> #sharedPools;
	add: #ClassDescription -> #sharedPoolsDo:;
	add: #CompilerNotification -> #extra;
	add: #CRTLibrary -> #__iscsym:;
	add: #CRTLibrary -> #__iscsymf:;
	add: #CRTLibrary -> #_chdir:;
	add: #CRTLibrary -> #_chmod:pmode:;
	add: #CRTLibrary -> #_spawnvp:cmdname:argv:;
	add: #CRTLibrary -> #_strnicmp:string2:count:;
	add: #CRTLibrary -> #_strrev:;
	add: #CRTLibrary -> #_wgetcwd:maxlen:;
	add: #CRTLibrary -> #iswcntrl:;
	add: #CRTLibrary -> #iswgraph:;
	add: #CRTLibrary -> #iswprint:;
	add: #CRTLibrary -> #iswpunct:;
	add: #CRTLibrary -> #memset:c:count:;
	add: #CRTLibrary -> #strpbrk:strCharSet:;
	add: #CRTLibrary -> #wcsncmp:string2:count:;
	add: #ExternalLibrary -> #invalidCall;
	add: #ExternalStructure -> #do:;
	add: #ExternalStructure -> #do:separatedBy:;
	add: #File -> #readCharacter;
	add: #Integer -> #digitSize;
	add: #KernelLibrary -> #compareStringOrdinal:cchCount1:lpString2:cchCount2:bIgnoreCase:;
	add: #KernelLibrary -> #getDateFormat:dwFlags:lpDate:lpFormat:lpDateStr:cchDate:;
	add: #KernelLibrary -> #getFileSize:lpFileSizeHigh:;
	add: #KernelLibrary -> #getTimeFormat:dwFlags:lpTime:lpFormat:lpTimeStr:cchBuf:;
	add: #KernelLibrary -> #lstrcmp:lpString2:;
	add: #KernelLibrary -> #lstrcmpi:lpString2:;
	add: #KernelLibrary -> #setFilePointer:lDistanceToMove:lpDistanceToMoveHigh:dwMoveMethod:;
	add: #Locale -> #dateOrder;
	add: #Locale -> #dateSeparator;
	add: #Locale -> #isMonthBeforeDay;
	add: #MessageBox -> #abortRetryIgnore;
	add: #MessageBox -> #error;
	add: #MessageBox -> #fatalError;
	add: #MessageBox -> #ok;
	add: #MessageBox -> #okCancel;
	add: #MessageBox -> #prompt;
	add: #MessageBox -> #retryCancel;
	add: #MessageBox -> #systemModal;
	add: #MessageBox -> #taskModal;
	add: #MessageBox -> #yesNo;
	add: #MessageBox -> #yesNoCancel;
	add: #MessageBoxAbstract -> #notify;
	add: #MessageBoxAbstract -> #warning;
	add: #Package -> #addGlobalNamed:;
	add: #Package -> #includesGlobalNamed:;
	add: #Package -> #isBaseImagePackage;
	add: #Package -> #untracedGlobals;
	add: #PackageManager -> #addGlobalNamed:to:;
	add: #PackageManager -> #allGlobalAliases;
	add: #PackageManager -> #packageOfGlobalNamed:;
	add: #STBPrefix -> #isLiteralPrefix;
	add: #Stream -> #nextOrNil;
	add: #String -> #asUnicodeString;
	add: #String -> #equals:;
	add: #TimeStamp -> #date:;
	add: #TimeStamp -> #dateAndTime;
	add: #TimeStamp -> #time:;
	add: #UndefinedObject -> #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:;
	add: #UserLibrary -> #isCharAlpha:;
	add: #UserLibrary -> #isCharAlphaNumeric:;
	add: #UserLibrary -> #isCharLower:;
	add: #UserLibrary -> #isCharUpper:;
	add: #VMLibrary -> #isWindows10OrGreater;
	add: #VMLibrary -> #isWindows7OrGreater;
	add: #VMLibrary -> #isWindows7SP1OrGreater;
	add: #VMLibrary -> #isWindows8OrGreater;
	add: #VMLibrary -> #isWindows8Point1OrGreater;
	add: #VMLibrary -> #isWindowsServer;
	add: #VMLibrary -> #isWindowsVersionOrGreater:wMinorVersion:wServicePackMajor:;
	add: #VMLibrary -> #isWindowsVistaOrGreater;
	add: #VMLibrary -> #isWindowsVistaSP1OrGreater;
	add: #VMLibrary -> #isWindowsVistaSP2OrGreater;
	add: #VMLibrary -> #isWindowsXPOrGreater;
	add: #VMLibrary -> #shortName;
	add: #WindowsLocale -> #timeSeparator;
	add: #WinMMLibrary -> #timeGetTime;
	add: 'Category class' -> #categoryIcon;
	add: 'Character class' -> #safeCodePoint:;
	add: 'Class class' -> #foldLiteralStrings;
	add: 'CompiledMethod class' -> #fromString:;
	add: 'Compiler class' -> #compileDebugExpression:in:evaluationPools:;
	add: 'Compiler class' -> #compileDebugMethod:in:;
	add: 'Compiler class' -> #compileExpression:in:flags:;
	add: 'Compiler class' -> #evaluate:for:evaluationPools:;
	add: 'Compiler class' -> #evaluate:for:evaluationPools:logged:;
	add: 'Compiler class' -> #evaluate:for:evaluationPools:logged:ifFail:;
	add: 'Compiler class' -> #evaluate:for:logged:;
	add: 'Delay class' -> #resolution;
	add: 'Delay class' -> #resolution:do:;
	add: 'Delay class' -> #resolution:set:;
	add: 'File class' -> #change:extension:;
	add: 'File class' -> #for:inAndBelow:do:;
	add: 'FunctionDescriptor class' -> #fromString:;
	add: 'NTLibrary class' -> #isWine;
	add: 'SortAlgorithm class' -> #sortBlock:;
	add: 'SortedCollection class' -> #value:value:;
	add: 'STBClassProxy class' -> #for:;
	add: 'STBCollectionProxy class' -> #for:;
	add: 'STBSingletonProxy class' -> #for:;
	add: 'STBSingletonProxy class' -> #for:using:;
	add: 'String class' -> #fromId:;
	add: 'String class' -> #fromId:in:;
	add: 'String class' -> #fromUnicodeString:;
	add: 'String class' -> #unicodeClass;
	add: 'Time class' -> #microsecondsToRun:;
	yourself.

package globalNames
	add: #UnicodeString;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	add: #UnicodeString;
	yourself).

package setPrerequisites: #(
	'..\Dolphin'
	'..\Dolphin Conformant Array Fields'
	'..\Dolphin Legacy Date & Time'
	'..\Dolphin Message Box').

package!

"Class Definitions"!

ArrayField subclass: #ConformantArrayField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
StructureArrayField subclass: #ConformantStructureArrayField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ArrayPointerField subclass: #ConformantArrayPointerField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
StructureArrayPointerField subclass: #ConformantStructureArrayPointerField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
STBProxy subclass: #STBSymbolProxy
	instanceVariableNames: 'string'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Win32Structure subclass: #MEMORY_BASIC_INFORMATION
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_AllocationBase _OffsetOf_AllocationProtect _OffsetOf_BaseAddress _OffsetOf_Protect _OffsetOf_RegionSize _OffsetOf_State _OffsetOf_Type'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!

UnicodeString := Utf16String!


"Loose Methods"!

!_FPIEEE_RECORD methodsFor!

causeCode
	"Answer an <integer> which identifies the cause of the exception."

	#deprecated.	"Could be more than one cause"
	^(self cause bitAnd: 16r1F) highBit!

causeName
	"Answer the symbolic name of the type of floating point exception the receiver
	represents."

	#deprecated.	"Could be more than one cause"
	^self causeNames last! !
!_FPIEEE_RECORD categoriesForMethods!
causeCode!accessing!public! !
causeName!accessing!public! !
!

!_FPIEEE_VALUE methodsFor!

valueType
	#deprecated.
	^self format! !
!_FPIEEE_VALUE categoriesForMethods!
valueType!accessing!public! !
!

!ArithmeticValue methodsFor!

quoAndRem: aNumber
	| quo |
	Notification deprecated.
	quo := self quo: aNumber.
	^{quo. self - (quo * aNumber)}! !
!ArithmeticValue categoriesForMethods!
quoAndRem:!arithmetic!public! !
!

!Behavior methodsFor!

makeIndirect
	Notification deprecated.
	self isIndirection: true!

makeNullTerminated
	Notification deprecated.
	self isNullTerminated: true! !
!Behavior categoriesForMethods!
makeIndirect!instance specification-accessing!private! !
makeNullTerminated!instance specification-accessing!private! !
!

!ByteCodeDispatcher methodsFor!

byteCodeSegments
	#deprecated.
	^self segments! !
!ByteCodeDispatcher categoriesForMethods!
byteCodeSegments!accessing!public! !
!

!Category class methodsFor!

categoryIcon
	"Answer an Icon representing the Category objects which the receiver collects." 

	^self icon! !
!Category class categoriesForMethods!
categoryIcon!constants!public! !
!

!Character class methodsFor!

safeCodePoint: anInteger
	Notification deprecated.
	^self codePoint: anInteger ifInvalid: [Utf8Default]! !
!Character class categoriesForMethods!
safeCodePoint:!instance creation!public! !
!

!Class methodsFor!

allSharedPoolNames
	#deprecated.
	^self allSharedPools collect: [:each | each name]!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString category: aCategoryOrString
	"If aClassSymbol is not an existing class then create and answer a new fixed pointer subclass,
	otherwise modify the class with name aClassSymbol to have the indicated features and answer it.
	Primarily present for backwards compatibility with Smalltalk-80."

	Notification deprecated.
	^(self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		poolDictionaries: poolDictString)
		categories: {ClassCategory name: aCategoryOrString};
		yourself!

variableByteSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString category: aCategoryOrString
	"If aClassSymbol is not an existing class then create an answer a new variable byte subclass,
	otherwise modify the class with name aClassSymbol to have the indicated features and answer 
	it. Primarily present for backwards compatibility with Smalltalk-80."

	Notification deprecated.
	^(self
		variableByteSubclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		poolDictionaries: poolDictString)
		categories: {ClassCategory name: aCategoryOrString};
		yourself!

variableByteSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-7.2 packages."

	| subclass |
	#deprecated.
	subclass := self
				variableByteSubclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				poolDictionaries: poolDictString.
	subclass class instanceVariableNames: classInstVarString.
	^subclass!

variableSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString category: aCategoryOrString
	"If aClassSymbol is not an existing class then create and answer a new variable pointer 
	subclass, otherwise modify the class with name aClassSymbol to have the indicated features and 
	answer it. Primarily intended for backwards compatibility with Smalltalk-80."

	#deprecated.
	^(self
		variableSubclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		poolDictionaries: poolDictString)
		categories: {ClassCategory name: aCategoryOrString};
		yourself! !
!Class categoriesForMethods!
allSharedPoolNames!pool variables!public! !
subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:!class hierarchy-adding!public! !
variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:!class hierarchy-adding!public! !
variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:!class hierarchy-adding!public! !
!

!Class class methodsFor!

foldLiteralStrings
	Notification deprecated.
	^self foldLiterals at: #strings! !
!Class class categoriesForMethods!
foldLiteralStrings!operations!public! !
!

!ClassDescription methodsFor!

allSharedPoolNames
	#deprecated.
	^self allSharedPools collect: [:each | each name]!

allSharedPools
	| pools seen |
	#deprecated.
	pools := Array writeStream: 5.
	seen := IdentitySet new.
	self instanceClass withAllSuperclassesDo: 
			[:c |
			c sharedPoolsDo: [:each | (seen addNewElement: each) ifTrue: [pools nextPut: each]]].
	^pools contents!

sharedPoolNames
	"Answer a <sequencedReadableCollection> of <Symbol>s, being the names of the shared pool
	dictionaries that are specified locally in the receiver (pools are inherited in Dolphin), in
	order of precedence."

	Notification deprecated.
	^self instanceClass sharedPoolNames!

sharedPools
	| pools |
	#deprecated.
	pools := OrderedCollection new.
	self sharedPoolsDo: [:each | pools addLast: each].
	^pools!

sharedPoolsDo: aMonadicValuable
	#deprecated.
	self
		importedNamespacesDo: [:each | (each inheritsFrom: SharedPool) ifTrue: [aMonadicValuable value: each]]! !
!ClassDescription categoriesForMethods!
allSharedPoolNames!pool variables!public! !
allSharedPools!pool variables!public! !
sharedPoolNames!pool variables!public! !
sharedPools!pool variables!public! !
sharedPoolsDo:!pool variables!public! !
!

!CompiledMethod class methodsFor!

fromString: aString
	"Answers the CompiledMethod identified by aString or nil if none is found."

	| className stream |
	Notification deprecated.
	stream := aString readStream.
	className := stream upToAll: '>>'.
	stream atEnd ifTrue: [^nil].
	(className endsWith: ' class')
		ifTrue: [className := (className allButLast: 6) asQualifiedReference meta]
		ifFalse: [className := className asQualifiedReference].
	^className valueOrNil
		ifNotNil: 
			[:theClass |
			| selector |
			stream peekFor: $#.
			selector := stream upToEnd asSymbol.
			theClass compiledMethodAt: selector ifAbsent: []]! !
!CompiledMethod class categoriesForMethods!
fromString:!converting!development!public! !
!

!Compiler class methodsFor!

compileDebugExpression: aString in: aClass evaluationPools: anArray
	Notification deprecated.
	^self
		compileDebugExpression: aString
		in: aClass
		environment: nil
		evaluationPools: anArray!

compileDebugMethod: aString in: aClass
	Notification deprecated.
	^self
		compileDebugMethod: aString
		in: aClass
		environment: nil!

compileExpression: aString in: aBehaviorOrNil flags: anInteger
	Notification deprecated.
	^self
		compileExpression: aString
		in: aBehaviorOrNil
		environment: nil
		flags: anInteger!

evaluate: aString for: anObject evaluationPools: anArray
	Notification deprecated.
	^self
		evaluate: aString
		for: anObject
		environment: nil
		evaluationPools: anArray
		logged: false!

evaluate: aString for: anObject evaluationPools: anArray logged: aBoolean
	Notification deprecated.
	^self
		evaluate: aString
		for: anObject
		environment: nil
		evaluationPools: anArray
		logged: aBoolean!

evaluate: aString for: anObject evaluationPools: anArray logged: aBoolean ifFail: failBlock
	Notification deprecated.
	^self
		evaluate: aString
		for: anObject
		environment: nil
		evaluationPools: anArray
		logged: aBoolean
		ifFail: failBlock!

evaluate: aString for: anObject logged: aBoolean
	Notification deprecated.
	^self
		evaluate: aString
		for: anObject
		evaluationPools: nil
		logged: aBoolean! !
!Compiler class categoriesForMethods!
compileDebugExpression:in:evaluationPools:!compiling!public! !
compileDebugMethod:in:!compiling!public! !
compileExpression:in:flags:!compiling!public! !
evaluate:for:evaluationPools:!evaluating!public! !
evaluate:for:evaluationPools:logged:!evaluating!public! !
evaluate:for:evaluationPools:logged:ifFail:!evaluating!public! !
evaluate:for:logged:!evaluating!public! !
!

!CompilerNotification methodsFor!

extra
	#deprecated.
	^extras isEmpty ifFalse: [extras anyOne]! !
!CompilerNotification categoriesForMethods!
extra!accessing!public! !
!

!CRTLibrary methodsFor!

__iscsym: aCharacter
	"Answer whether the argument is a letter, underscore, or digit.
		int __iscsym(int c)"

	<cdecl: bool __iscsym char>
	#deprecated.	"No longer used"
	^self invalidCall: _failureCode!

__iscsymf: aCharacter
	"Answer whether the argument is a letter or underscore.
		int __iscsymf(int c)"

	<cdecl: bool __iscsymf char>
	#deprecated.	"No longer used"
	^self invalidCall: _failureCode!

_chdir: aString
	"Change the current working directory to that identified by the path, aString.

		int _chdir( const char *dirname);"

	<cdecl: sdword _chdir lpstr>
	#deprecated. "In favour of KernelLibrary>>setCurrentDirectory:, as this did not handle Unicode"
	^self invalidCall: _failureCode!

_chmod: aFilenameString pmode: aModeInteger
	<cdecl: sdword _chmod lpstr sdword>
	#deprecated.
	^self invalidCall: _failureCode!

_spawnvp: mode cmdname: aString argv: argv
	"Spawn a new process.

		int _spawnv( int mode, const char *cmdname, const char *const *argv );

	Implementation Note: Overlapped so as to block only the calling process, as the
	spawned external process may run for a lengthy time.
	"

	<overlap cdecl: sdword _spawnvp sdword lpstr lpvoid>
	#deprecated. "Not used; see ExternalProcess contribution"
	^self invalidCall: _failureCode!

_strnicmp: string1 string2: string2 count: count
	"Answer the result of a case insensitive string comparison between string1 and
	string2, comparing only the first, count, characters. Answer <0, 0, or >0 according to
	whether the first count characters of are lexicographically less than, equal to, or greater
	than the first count characters of string2."

	<cdecl: sdword _strnicmp lpstr lpstr intptr>
	#deprecated ."Not used"
	^self invalidCall: _failureCode!

_strrev: aString
	"Answer aString, reversed.

		char *_strrev( char *string );

	N.B. We ignore the return value, as it will be a pointer to the argument,
	and the functions works 'in-place'"

	<cdecl: void _strrev lpstr>
	#deprecated. "Not used"
	^self invalidCall: _failureCode!

_wgetcwd: aString maxlen: anInteger
	<cdecl: lpvoid _wgetcwd lpwstr sdword>
	#deprecated. "In favour of KernelLibrary>>getCurrentDirectory:lpBuffer:"
	^self invalidCall: _failureCode!

iswcntrl: aCharacter
	"Answer whether the argument is a control character.
		int iswcntrl( wint_t c )"

	<cdecl: bool iswcntrl char>
	#deprecated.	"Doesn't work correctly for chars outside BMP"
	^self invalidCall: _failureCode!

iswgraph: aCharacter
	"Answer whether the argument is a printable character other than a space.
		int iswgraph( wint_t c )"

	<cdecl: bool iswgraph char>
	#deprecated. "Doesn't work correctly for chars outside BMP"
	^self invalidCall: _failureCode!

iswprint: aCharacter
	"Answer whether the argument is a printable character.
		int iswprint( wint_t c )"

	<cdecl: bool iswprint char>
	#deprecated. "Doesn't work correctly for chars outside BMP"
	^self invalidCall: _failureCode!

iswpunct: aCharacter
	"Answer whether the argument is a punctuation character.
		int iswpunct( wint_t c )"

	<cdecl: bool iswpunct char>
	#deprecated. "Doesn't work correctly for chars outside BMP"
	^self invalidCall: _failureCode!

memset: dest c: c count: count
	"Fill a block of memory.
				void *memset( void *dest, int c, size_t count );
	"

	<cdecl: sdword memset lpvoid sdword intptr>
	#deprecated. "Not used. If required define KernelLibrary FillMemory/RtlFillMemory"
	^self invalidCall: _failureCode!

strpbrk: string strCharSet: strCharSet
	"Answer a pointer to the first occurrence of any of the characters
	from the <String>, strCharSet, in the <String>, string.

		char *strpbrk( const char *string, const char *strCharSet 
	"

	<cdecl: char* strpbrk char* char*>
	#deprecated. "Unused. CRT string functions are generally not useful because they stop at null terminators."
	^self invalidCall: _failureCode!

wcsncmp: string1 string2: string2 count: count
	"Answer the order between the <Utf16String> arguments, string1 and string2,
	considering up to <integer>, count, characters.

		int wcscmp( const wchar_t *string1, const wchar_t *string2, size_t count );
	"

	<cdecl: sdword wcsncmp lpwstr lpwstr intptr>
	#deprecated. "Unused. CRT string functions are generally not useful because they stop at null terminators."
	^self invalidCall: _failureCode! !
!CRTLibrary categoriesForMethods!
__iscsym:!CRT functions-character classification!public! !
__iscsymf:!CRT functions-character classification!public! !
_chdir:!CRT functions-directory control!public! !
_chmod:pmode:!CRT functions-file handling!public! !
_spawnvp:cmdname:argv:!CRT functions-process and environment control!public! !
_strnicmp:string2:count:!CRT functions-string manipulation!public! !
_strrev:!CRT functions-string manipulation!public! !
_wgetcwd:maxlen:!CRT functions-directory control!public! !
iswcntrl:!CRT functions-character classification!public! !
iswgraph:!CRT functions-character classification!public! !
iswprint:!CRT functions-character classification!public! !
iswpunct:!CRT functions-character classification!public! !
memset:c:count:!CRT functions-buffer manipulation!public! !
strpbrk:strCharSet:!CRT functions-string manipulation!public! !
wcsncmp:string2:count:!CRT functions-string manipulation!public! !
!

!Delay class methodsFor!

resolution
	Notification deprecated.
	^self timerResolution!

resolution: aDuration do: aNiladicValuable
	Notification deprecated.
	self withTimerResolution: aDuration do: aNiladicValuable!

resolution: aDuration set: aBoolean
	Notification deprecated.
	^self timerResolution: aDuration set: aBoolean! !
!Delay class categoriesForMethods!
resolution!constants!public! !
resolution:do:!operations!public! !
resolution:set:!helpers!public! !
!

!ExternalLibrary methodsFor!

invalidCall
	"The primitive failure code is now an implicit temp of the primitive method, and so must be passed. The instance variable of Process formerly used to store the failure code is no longer used."

	Notification deprecated.
	^self invalidCall: Failed! !
!ExternalLibrary categoriesForMethods!
invalidCall!exceptions!public! !
!

!File methodsFor!

readCharacter
	"Answer the next Character from the file or nil if the receiver
	is positioned past the current EOF.
	Signal a FileException if an error occurs."

	| string |
	#deprecated.	"May read a partial character - better to open a stream on the file and read next character from that."
	string := String new: 1.
	^(self read: string count: 1) == 0 ifTrue: [nil] ifFalse: [string at: 1]! !
!File categoriesForMethods!
readCharacter!operations!public! !
!

!File class methodsFor!

change: aPathnameString extension: anExtensionString
	#deprecated.	"use #path:extension:"
	^self path: aPathnameString extension: anExtensionString!

for: matchString inAndBelow: dirString do: operation
	#deprecated.	"Use #forAll:in:do:"
	^self 
		forAll: matchString
		in: dirString
		do: [:each | operation value: each directory value: each]! !
!File class categoriesForMethods!
change:extension:!filename manipulation!public! !
for:inAndBelow:do:!enumerating!public! !
!

!FunctionDescriptor class methodsFor!

fromString: aString
	Notification deprecated.
	^self fromString: aString environment: Smalltalk! !
!FunctionDescriptor class categoriesForMethods!
fromString:!instance creation!public! !
!

!Integer methodsFor!

digitSize
	#deprecated.
	^self digitLength! !
!Integer categoriesForMethods!
digitSize!accessing!public! !
!

!KernelLibrary methodsFor!

compareStringOrdinal: lpString1 cchCount1: cchCount1 lpString2: lpString2 cchCount2: cchCount2 bIgnoreCase: bIgnoreCase
	<stdcall: sdword CompareStringOrdinal lpwstr sdword lpwstr sdword bool>
	#deprecated.
	^self invalidCall: _failureCode!

getDateFormat: locale dwFlags: dwFlags lpDate: aWinSYSTEMTIME lpFormat: formatString lpDateStr: outputStringOutput cchDate: anInteger
	<stdcall: sdword GetDateFormatW dword dword void* lpwstr lpwstr sdword>
	#deprecated. "Deprecated by Microsoft - use GetDateFormatEx"
	^self invalidCall: _failureCode

!

getFileSize: hfile lpFileSizeHigh: lpFileSizeHigh
	<stdcall: dword GetFileSize handle dword*>
	#deprecated. "Use #getFileSizeEx:lpFileSize:"
	^self invalidCall: _failureCode!

getTimeFormat: locale dwFlags: dwFlags lpTime: aWinSYSTEMTIME lpFormat: formatString lpTimeStr: outputStringOutput cchBuf: anInteger
	<stdcall: sdword GetTimeFormatW dword dword void* lpwstr lpwstr sdword>
	#deprecated. "Deprecated by Microsoft - use GetTimeFormatEx instead"
	^self invalidCall: _failureCode

!

lstrcmp: aString1 lpString2: aString2
	<stdcall: sdword lstrcmpW lpwstr lpwstr>
	#deprecated.
	^self invalidCall: _failureCode!

lstrcmpi: aString1 lpString2: aString2
	<stdcall: sdword lstrcmpiW lpwstr lpwstr>
	#deprecated.
	^self invalidCall: _failureCode!

setFilePointer: aHandle lDistanceToMove: loInteger lpDistanceToMoveHigh: anAddress dwMoveMethod: senseOfMove
	<stdcall: dword SetFilePointer handle dword lpvoid dword>
	#deprecated. "Use #setFilePointerEx:liDistanceToMove:lpNewFilePointer:dwMoveMethod:"
	^self invalidCall: _failureCode! !
!KernelLibrary categoriesForMethods!
compareStringOrdinal:cchCount1:lpString2:cchCount2:bIgnoreCase:!public!win32 functions-national language support! !
getDateFormat:dwFlags:lpDate:lpFormat:lpDateStr:cchDate:!public!win32 functions-national language support! !
getFileSize:lpFileSizeHigh:!public!win32 functions-file management! !
getTimeFormat:dwFlags:lpTime:lpFormat:lpTimeStr:cchBuf:!public!win32 functions-national language support! !
lstrcmp:lpString2:!public!win32 functions-string manipulation! !
lstrcmpi:lpString2:!public!win32 functions-string manipulation! !
setFilePointer:lDistanceToMove:lpDistanceToMoveHigh:dwMoveMethod:!public!win32 functions-file management! !
!

!Locale methodsFor!

dateOrder
	"Answer the date ordering used in the receiver locale.
		0	Month - Day - Year
		1	Day - Month - Year
		2	Year - Month - Day."

	Notification deprecated.	"Use dateFormat"
	^self getIntegerInfo: LOCALE_IDATE!

dateSeparator
	"Answer the character used in the receiver locale to separate date components."

	Notification deprecated.	"Use dateFormat"
	^self getStringInfo: LOCALE_SDATE!

isMonthBeforeDay
	"Answer true if the format for the receiver is expecting a month before a day"

	Notification deprecated.	"Use dateFormat"
	^self dateOrder ~= 1! !
!Locale categoriesForMethods!
dateOrder!constants!public! !
dateSeparator!constants!public! !
isMonthBeforeDay!helpers!public! !
!

!MessageBox methodsFor!

abortRetryIgnore
	#deprecated.
	self buttonStyle: #abortRetryIgnore!

error
	#deprecated.
	self iconStyle: #error!

fatalError
	#deprecated.
	self beFatalError!

ok
	#deprecated.
	self buttonStyle: #ok!

okCancel
	#deprecated.
	self buttonStyle: #okCancel!

prompt
	#deprecated.
	self iconStyle: #prompt!

retryCancel
	#deprecated.
	self buttonStyle: #retryCancel!

systemModal
	#deprecated.
	self beSystemModal!

taskModal
	#deprecated.
	self beTaskModal!

yesNo
	#deprecated.
	self buttonStyle: #yesNo!

yesNoCancel
	#deprecated.
	self buttonStyle: #yesNoCancel! !
!MessageBox categoriesForMethods!
abortRetryIgnore!accessing-styles!public! !
error!modes!public! !
fatalError!accessing-styles!public! !
ok!accessing-styles!public! !
okCancel!accessing-styles!public! !
prompt!accessing-styles!public! !
retryCancel!accessing-styles!public! !
systemModal!accessing-styles!public! !
taskModal!accessing-styles!public! !
yesNo!accessing-styles!public! !
yesNoCancel!accessing-styles!public! !
!

!MessageBoxAbstract methodsFor!

notify
	#deprecated.
	self iconStyle: #notify!

warning
	#deprecated.
	self iconStyle: #warning! !
!MessageBoxAbstract categoriesForMethods!
notify!modes!public! !
warning!modes!public! !
!

!NTLibrary class methodsFor!

isWine
	Notification deprecated.	"Use `NtDll isWine`"
	^self default isWine! !
!NTLibrary class categoriesForMethods!
isWine!public!testing! !
!

!Package methodsFor!

addGlobalNamed: globalName
	#deprecated.
	^self addVariableNamed: globalName!

includesGlobalNamed: globalName
	#deprecated.
	^self includesVariableNamed: globalName asQualifiedReference!

isBaseImagePackage
	"Answer true if the receiver is a basic component of Dolphin "

	#deprecated.
	^self isBasePackage!

untracedGlobals
	#deprecated.
	^self untracedVariables collect: [:each | each asSymbol]! !
!Package categoriesForMethods!
addGlobalNamed:!adding!public! !
includesGlobalNamed:!public!testing! !
isBaseImagePackage!public!testing! !
untracedGlobals!accessing!public! !
!

!PackageManager methodsFor!

addGlobalNamed: globalName to: aPackageOrNil
	#deprecated.
	^self addVariableNamed: globalName asQualifiedReference to: aPackageOrNil!

allGlobalAliases
	#deprecated.
	^self allVariableAliases collect: [:each | each asSymbol]!

packageOfGlobalNamed: globalName 
	#deprecated.
	^self packageOfVariableNamed: globalName asQualifiedReference! !
!PackageManager categoriesForMethods!
addGlobalNamed:to:!adding!public! !
allGlobalAliases!enquiries!public! !
packageOfGlobalNamed:!public!searching! !
!

!SortAlgorithm class methodsFor!

sortBlock: aDyadicValuable
	Notification deprecated.
	^self newSortBlock: aDyadicValuable! !
!SortAlgorithm class categoriesForMethods!
sortBlock:!instance creation!public! !
!

!SortedCollection class methodsFor!

value: anObject1 value: anObject2
	"Private - Implement this part of the <dyadicValuable> protocol in order that the receiver
	can be its own default sort 'block' for historical reasons. This is no longer used as of
	Dolphin 6, and is deprecated in Dolphin 7.1"

	Notification deprecated.
	^anObject1 <= anObject2! !
!SortedCollection class categoriesForMethods!
value:value:!evaluating!private! !
!

!STBClassProxy class methodsFor!

for: aClass 
	#deprecated.
	^self forClass: aClass! !
!STBClassProxy class categoriesForMethods!
for:!instance creation!public! !
!

!STBCollectionProxy class methodsFor!

for: aCollection 
	#deprecated.
	^self forCollection: aCollection! !
!STBCollectionProxy class categoriesForMethods!
for:!instance creation!public! !
!

!STBPrefix methodsFor!

isLiteralPrefix
	#deprecated.
	^dword anyMask: LiteralPrefixMask! !
!STBPrefix categoriesForMethods!
isLiteralPrefix!public!testing! !
!

!STBSingletonProxy class methodsFor!

for: aClass 
	#deprecated.
	^self forClass: aClass!

for: aClass using: aSelectorSymbol 
	#deprecated.
	^self forClass: aClass using: aSelectorSymbol! !
!STBSingletonProxy class categoriesForMethods!
for:!instance creation!public! !
for:using:!instance creation!public! !
!

!Stream methodsFor!

nextOrNil
	#deprecated.
	^self nextAvailable! !
!Stream categoriesForMethods!
nextOrNil!accessing!public! !
!

!String methodsFor!

asUnicodeString
	Notification deprecated.
	^self asUtf16String!

equals: comperand
	Notification deprecated.	"As of v7.1.6, Strings and Symbols with the same characters are always equal."
	^self = comperand! !
!String categoriesForMethods!
asUnicodeString!converting!public! !
equals:!comparing!public! !
!

!String class methodsFor!

fromId: anInteger
	Notification deprecated.
	^self fromResourceId: anInteger!

fromId: resourceId in: anExternalLibraryOrHandle
	Notification deprecated.
	^self fromResourceId: resourceId in: anExternalLibraryOrHandle!

fromUnicodeString: anAddressOrUnicodeString
	#deprecated.
	^self fromUtf16String: anAddressOrUnicodeString!

unicodeClass
	#deprecated.
	^self utf16Class! !
!String class categoriesForMethods!
fromId:!instance creation!public! !
fromId:in:!instance creation!public! !
fromUnicodeString:!instance creation!public! !
unicodeClass!constants!public! !
!

!ExternalStructure methodsFor!

do: aOneArgumentBlock 
	#deprecated.
	self fieldsDo: aOneArgumentBlock!

do: operation separatedBy: separator 
	#deprecated.
	self fieldsDo: operation separatedBy: separator! !
!ExternalStructure categoriesForMethods!
do:!enumerating!public! !
do:separatedBy:!enumerating!public! !
!

!Time class methodsFor!

microsecondsToRun: timedBlock
	"Answer the number of microseconds consumed by the evaluation of timedBlock
	(including the overhead)."

	^timedBlock timeToRun asMicroseconds asInteger! !
!Time class categoriesForMethods!
microsecondsToRun:!operations!public! !
!

!TimeStamp methodsFor!

date: aDate
	"Timestamps are immutable and should be initialized at creation time."

	Notification deprecated.
	self isImmutable: false.
	date := aDate!

dateAndTime
	"Answer a two element Array containing the date and time."

	Notification deprecated.
	^{self date. self time}!

time: aTime
	"Timestamps are immutable and should be initialized at creation time."

	Notification deprecated.
	self isImmutable: false.
	time := aTime! !
!TimeStamp categoriesForMethods!
date:!accessing!public! !
dateAndTime!accessing!public! !
time:!accessing!public! !
!

!UndefinedObject methodsFor!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString category: aCategoryOrString
	Notification deprecated.
	^(self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		poolDictionaries: poolDictString)
		categories: {ClassCategory name: aCategoryOrString};
		yourself! !
!UndefinedObject categoriesForMethods!
subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:!class hierarchy-adding!public! !
!

!UserLibrary methodsFor!

isCharAlpha: aCharacter
	<stdcall: bool IsCharAlphaW char>
	#deprecated. "Does not yield Unicode compliant results."
	^self invalidCall: _failureCode!

isCharAlphaNumeric: aCharacter
	<stdcall: bool IsCharAlphaNumericW char>
	#deprecated.	"Does not yield Unicode compliant results."
	^self invalidCall: _failureCode!

isCharLower: aCharacter
	<stdcall: bool IsCharLowerW char>
	#deprecated.	"Does not yield Unicode compliant results."
	^self invalidCall: _failureCode!

isCharUpper: aCharacter
	<stdcall: bool IsCharUpperW char>
	#deprecated. "Does not yield Unicode compliant results."
	^self invalidCall: _failureCode! !
!UserLibrary categoriesForMethods!
isCharAlpha:!public!win32 functions-string manipulation! !
isCharAlphaNumeric:!public!win32 functions-string manipulation! !
isCharLower:!public!win32 functions-string manipulation! !
isCharUpper:!public!win32 functions-string manipulation! !
!

!VMLibrary methodsFor!

isWindows10OrGreater
	Notification deprecated.
	^KernelLibrary default isWindows10OrGreater!

isWindows7OrGreater
	Notification deprecated.
	^KernelLibrary default isWindows7OrGreater!

isWindows7SP1OrGreater
	Notification deprecated.
	^KernelLibrary default isWindows7SP1OrGreater!

isWindows8OrGreater
	Notification deprecated.
	^KernelLibrary default isWindows8OrGreater!

isWindows8Point1OrGreater
	Notification deprecated.
	^KernelLibrary default isWindows8Point1OrGreater!

isWindowsServer
	Notification deprecated.
	^KernelLibrary default isWindowsServer!

isWindowsVersionOrGreater: wMajorVersion wMinorVersion: wMinorVersion wServicePackMajor: wServicePackMajor
	Notification deprecated.
	^KernelLibrary default
		isWindowsVersionOrGreater: wMajorVersion
		wMinorVersion: wMinorVersion
		wServicePackMajor: wServicePackMajor!

isWindowsVistaOrGreater
	Notification deprecated.
	^KernelLibrary default isWindowsVistaOrGreater!

isWindowsVistaSP1OrGreater
	Notification deprecated.
	^KernelLibrary default isWindowsVistaSP1OrGreater!

isWindowsVistaSP2OrGreater
	Notification deprecated.
	^KernelLibrary default isWindowsVistaSP2OrGreater!

isWindowsXPOrGreater
	Notification deprecated.
	^KernelLibrary default isWindowsXPOrGreater!

shortName
	"Answer the localised short name for Dolphin."
	Notification deprecated.
	^String fromId: 129 in: self! !
!VMLibrary categoriesForMethods!
isWindows10OrGreater!public!win32 functions-version helpers! !
isWindows7OrGreater!public!win32 functions-version helpers! !
isWindows7SP1OrGreater!public!win32 functions-version helpers! !
isWindows8OrGreater!public!win32 functions-version helpers! !
isWindows8Point1OrGreater!public!win32 functions-version helpers! !
isWindowsServer!public!win32 functions-version helpers! !
isWindowsVersionOrGreater:wMinorVersion:wServicePackMajor:!public!win32 functions-version helpers! !
isWindowsVistaOrGreater!public!win32 functions-version helpers! !
isWindowsVistaSP1OrGreater!public!win32 functions-version helpers! !
isWindowsVistaSP2OrGreater!public!win32 functions-version helpers! !
isWindowsXPOrGreater!public!win32 functions-version helpers! !
shortName!accessing!public! !
!

!WindowsLocale methodsFor!

timeSeparator
	"Answer the character used in the receiver locale to separate time components."

	Notification deprecated.	"Use timeFormat"
	^self getStringInfo: LOCALE_STIME! !
!WindowsLocale categoriesForMethods!
timeSeparator!constants!public! !
!

!WinMMLibrary methodsFor!

timeGetTime
	<stdcall: dword timeGetTime>
	#deprecated.	"Use Time class>>millisecondClockValue (which is highly accurate, and does not wrap after ~49.7 days either)"
	^self invalidCall: _failureCode! !
!WinMMLibrary categoriesForMethods!
timeGetTime!public!win32 functions-timer! !
!

"End of package definition"!

