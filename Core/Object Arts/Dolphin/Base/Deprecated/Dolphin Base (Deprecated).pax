| package |
package := Package name: 'Dolphin Base (Deprecated)'.
package paxVersion: 1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Base System (Deprecated Classes and Methods)
Copyright (c) Object Arts Ltd 1997-2002. Portions copyright (c) CGI Group (Europe) Ltd, 1997.

This package includes legacy classes and methods from Dolphin''s base package that have been deprecated. If you have no requirement to use code imported from older versions of Dolphin, then this package can be safely uninstalled.
'.

package basicPackageVersion: '6.1'.

package basicScriptAt: #postinstall put: '#(#UnicodeString)
	do: [:each | (Smalltalk bindingFor: each) isDeprecated: true]'.

package classNames
	add: #ConformantArrayField;
	add: #ConformantArrayPointerField;
	add: #ConformantStructureArrayField;
	add: #ConformantStructureArrayPointerField;
	add: #MEMORY_BASIC_INFORMATION;
	add: #Win32Structure;
	yourself.

package methodNames
	add: #_FPIEEE_RECORD -> #causeCode;
	add: #_FPIEEE_RECORD -> #causeName;
	add: #_FPIEEE_VALUE -> #valueType;
	add: #AbstractWindowsLocale -> #dateOrder;
	add: #AbstractWindowsLocale -> #dateSeparator;
	add: #ArithmeticValue -> #quoAndRem:;
	add: #Behavior -> #allInstVarNames;
	add: #Behavior -> #instVarNames;
	add: #Behavior -> #makeIndirect;
	add: #Behavior -> #makeNullTerminated;
	add: #BoundsError -> #receiver:;
	add: #ByteArray -> #asAnsiString;
	add: #ByteArray -> #asString;
	add: #ByteArray -> #byteAtOffset:;
	add: #ByteArray -> #byteAtOffset:put:;
	add: #ByteCodeDispatcher -> #byteCodeSegments;
	add: #Character -> #asAnsiString;
	add: #Class -> #addSharedPool:;
	add: #Class -> #allSharedPoolNames;
	add: #Class -> #variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:;
	add: #Class -> #variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:;
	add: #Class -> #variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:;
	add: #ClassDescription -> #allSharedPoolNames;
	add: #ClassDescription -> #allSharedPools;
	add: #ClassDescription -> #sharedPoolNames;
	add: #ClassDescription -> #sharedPools;
	add: #ClassDescription -> #sharedPoolsDo:;
	add: #CompilerNotification -> #extra;
	add: #CRTLibrary -> #_spawnvp:cmdname:argv:;
	add: #Dictionary -> #at:ifAbsentPutValue:;
	add: #EventMessageSend -> #receiver:;
	add: #ExternalLibrary -> #invalidCall;
	add: #ExternalStructure -> #do:;
	add: #ExternalStructure -> #do:separatedBy:;
	add: #File -> #readCharacter;
	add: #Integer -> #digitSize;
	add: #Integer -> #printStringRadix:showRadix:;
	add: #KernelLibrary -> #getTimeFormat:dwFlags:lpTime:lpFormat:lpTimeStr:cchBuf:;
	add: #Locale -> #isMonthBeforeDay;
	add: #MessageNotUnderstood -> #receiver:;
	add: #MessageSend -> #receiver:;
	add: #Metaclass -> #instVarNames:;
	add: #NotFoundError -> #receiver:;
	add: #NUMBERFMTW -> #thousandSeparator;
	add: #NUMBERFMTW -> #thousandSeparator:;
	add: #Object -> #errorCantHold:;
	add: #Package -> #addGlobalNamed:;
	add: #Package -> #includesGlobalNamed:;
	add: #Package -> #isBaseImagePackage;
	add: #Package -> #untracedGlobals;
	add: #PackageManager -> #addGlobalNamed:to:;
	add: #PackageManager -> #allGlobalAliases;
	add: #PackageManager -> #packageOfGlobalNamed:;
	add: #Stream -> #nextOrNil;
	add: #String -> #asUnicodeString;
	add: #String -> #equals:;
	add: #TimeStamp -> #date:;
	add: #TimeStamp -> #dateAndTime;
	add: #TimeStamp -> #time:;
	add: #UndefinedObject -> #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:;
	add: #View -> #enable:;
	add: #VMLibrary -> #isWindows10OrGreater;
	add: #VMLibrary -> #isWindows7OrGreater;
	add: #VMLibrary -> #isWindows7SP1OrGreater;
	add: #VMLibrary -> #isWindows8OrGreater;
	add: #VMLibrary -> #isWindows8Point1OrGreater;
	add: #VMLibrary -> #isWindowsServer;
	add: #VMLibrary -> #isWindowsVersionOrGreater:wMinorVersion:wServicePackMajor:;
	add: #VMLibrary -> #isWindowsVistaOrGreater;
	add: #VMLibrary -> #isWindowsVistaSP1OrGreater;
	add: #VMLibrary -> #isWindowsVistaSP2OrGreater;
	add: #VMLibrary -> #isWindowsXPOrGreater;
	add: #VMLibrary -> #shortName;
	add: 'Category class' -> #categoryIcon;
	add: 'Character class' -> #safeCodePoint:;
	add: 'Class class' -> #foldLiteralStrings;
	add: 'Compiler class' -> #compileDebugExpression:in:evaluationPools:;
	add: 'Compiler class' -> #compileDebugMethod:in:;
	add: 'Compiler class' -> #compileExpression:in:flags:;
	add: 'Compiler class' -> #evaluate:for:evaluationPools:;
	add: 'Compiler class' -> #evaluate:for:evaluationPools:logged:;
	add: 'Compiler class' -> #evaluate:for:evaluationPools:logged:ifFail:;
	add: 'Compiler class' -> #evaluate:for:logged:;
	add: 'Delay class' -> #resolution;
	add: 'Delay class' -> #resolution:do:;
	add: 'Delay class' -> #resolution:set:;
	add: 'File class' -> #change:extension:;
	add: 'File class' -> #for:inAndBelow:do:;
	add: 'File class' -> #maxPath;
	add: 'File class' -> #pathBuffer;
	add: 'FunctionDescriptor class' -> #fromString:;
	add: 'NTLibrary class' -> #isWine;
	add: 'SortAlgorithm class' -> #sortBlock:;
	add: 'SortedCollection class' -> #value:value:;
	add: 'String class' -> #ansiClass;
	add: 'String class' -> #fromId:;
	add: 'String class' -> #fromId:in:;
	add: 'String class' -> #fromUnicodeString:;
	add: 'String class' -> #unicodeClass;
	add: 'Time class' -> #microsecondsToRun:;
	yourself.

package globalNames
	add: #UnicodeString;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	add: #UnicodeString;
	yourself).

package setPrerequisites: #(
	'..\Dolphin'
	'..\Dolphin Conformant Array Fields'
	'..\Dolphin Legacy Date & Time'
	'..\..\MVP\Base\Dolphin MVP Base').

package!

"Class Definitions"!

ArrayField subclass: #ConformantArrayField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

StructureArrayField subclass: #ConformantStructureArrayField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ArrayPointerField subclass: #ConformantArrayPointerField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

StructureArrayPointerField subclass: #ConformantStructureArrayPointerField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ExternalStructure subclass: #MEMORY_BASIC_INFORMATION
	instanceVariableNames: ''
	classVariableNames: '_MEMORY_BASIC_INFORMATION_Size _OffsetOf_AllocationBase _OffsetOf_AllocationProtect _OffsetOf_BaseAddress _OffsetOf_Protect _OffsetOf_RegionSize _OffsetOf_State _OffsetOf_Type'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ExternalStructure subclass: #Win32Structure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!

UnicodeString := Utf16String!


"Loose Methods"!

!_FPIEEE_RECORD methodsFor!

causeCode
	"Answer an <integer> which identifies the cause of the exception."

	#deprecated.	"Could be more than one cause"
	^(self cause bitAnd: 16r1F) highBit!

causeName
	"Answer the symbolic name of the type of floating point exception the receiver
	represents."

	#deprecated.	"Could be more than one cause"
	^self causeNames last! !

!_FPIEEE_RECORD categoriesForMethods!
causeCode!accessing!public! !
causeName!accessing!public! !
!

!_FPIEEE_VALUE methodsFor!

valueType
	#deprecated.
	^self format! !

!_FPIEEE_VALUE categoriesForMethods!
valueType!accessing!public! !
!

!AbstractWindowsLocale methodsFor!

dateOrder
	"Answer the date ordering used in the receiver locale.
		0	Month - Day - Year
		1	Day - Month - Year
		2	Year - Month - Day."

	Notification deprecated.	"Use dateFormat"
	^self getIntegerInfo: LOCALE_IDATE!

dateSeparator
	"Answer the character used in the receiver locale to separate date components."

	Notification deprecated.	"Use dateFormat"
	^self getStringInfo: LOCALE_SDATE! !

!AbstractWindowsLocale categoriesForMethods!
dateOrder!constants!public! !
dateSeparator!constants!public! !
!

!ArithmeticValue methodsFor!

quoAndRem: aNumber
	| quo |
	Notification deprecated.
	quo := self quo: aNumber.
	^{quo. self - (quo * aNumber)}! !

!ArithmeticValue categoriesForMethods!
quoAndRem:!arithmetic!public! !
!

!Behavior methodsFor!

allInstVarNames
	"Answer an <Array> of the <readableString> names of the receiver's instance variables, 
	those specified in the receiver and in all of its superclasses. The array ordering is the order 
	in which the variables are stored and accessed by the interpreter."

	#deprecated.
	^self allInstanceVariableNames!

instVarNames
	#deprecated.
	^self instanceVariableNames!

makeIndirect
	Notification deprecated.
	self isIndirection: true!

makeNullTerminated
	Notification deprecated.
	self isNullTerminated: true! !

!Behavior categoriesForMethods!
allInstVarNames!instance variables!public! !
instVarNames!instance variables!public! !
makeIndirect!instance specification-accessing!private! !
makeNullTerminated!instance specification-accessing!private! !
!

!BoundsError methodsFor!

receiver: anObject
	#deprecated.	"Should only be set on instantiation with other identity variables - use receiver:index:"
	receiver := anObject! !

!BoundsError categoriesForMethods!
receiver:!accessing!public! !
!

!ByteArray methodsFor!

asAnsiString
	"Answer an ANSI-encoded String the characters of have the same encoding as the byte elements of the receiver."

	| size |
	Notification deprecated. "Avoid using AnsiStrings - they cannot represent many code points, and cannot be reliably interchanged with other systems that may be using a different code page."
	size := self basicSize.
	^self
		replaceBytesOf: (AnsiString new: size)
		from: 1
		to: size
		startingAt: 1!

asString
	"Assuming that the receiver contains the bytes of an ANSI string, return that string."

	Notification deprecated. "This method is too generic: These days it is somewhat unlikely that the bytes are ANSI code-page encoded - more likely UTF-8 or UTF-16, but we can't know for sure. We also can't maintain backwards compatibility with the previous assumption of ANSI encoding, code page unspecified. You should use #asUtf8String for UTF-8, or #asUtf16String for UTF-16."
	^self asAnsiString!

byteAtOffset: anInteger
	"Soft deprecated. Retain in applications that still refer to the old FFI class names, e.g. BYTE."

	^self uint8AtOffset: anInteger!

byteAtOffset: anInteger put: aByte
	"Soft deprecated. Retain in applications that still refer to the old FFI class names, e.g. BYTE."

	^self uint8AtOffset: anInteger put: aByte! !

!ByteArray categoriesForMethods!
asAnsiString!public! !
asString!converting!public! !
byteAtOffset:!accessing!public! !
byteAtOffset:put:!accessing!public! !
!

!ByteCodeDispatcher methodsFor!

byteCodeSegments
	#deprecated.
	^self segments! !

!ByteCodeDispatcher categoriesForMethods!
byteCodeSegments!accessing!public! !
!

!Category class methodsFor!

categoryIcon
	"Answer an Icon representing the Category objects which the receiver collects." 

	^self icon! !

!Category class categoriesForMethods!
categoryIcon!constants!public! !
!

!Character methodsFor!

asAnsiString
	"Answer a new ANSI-encoded <String> whose sole element is the receiver. It is an error if
	the receiver's code point cannot be represented in ANSI encoding."

	Notification deprecated. "Avoid using AnsiStrings - they cannot represent many code points at all, and cannot be reliably interchanged with other systems that may be using a different code page."
	^AnsiString with: self! !

!Character categoriesForMethods!
asAnsiString!converting!public! !
!

!Character class methodsFor!

safeCodePoint: anInteger
	Notification deprecated.
	^self codePoint: anInteger ifInvalid: [Replacement]! !

!Character class categoriesForMethods!
safeCodePoint:!instance creation!public! !
!

!Class methodsFor!

addSharedPool: aPoolDictionary
	"Add the argument, aPoolDictionary, as one of the pool dictionaries referenced by the
	receiver, but lower in precedence than any previously added pools. It is an error if the
	dictionary is already one of the pools.
	Note: This is a low-level operation and does not recompile affected classes. Generally 
	speaking any modification to a class should be made through a <ClassBuilder>."

	| poolName pools |
	Notification deprecated.
	poolName := aPoolDictionary asQualifiedReference.
	pools := self imports.
	(pools includes: poolName) ifTrue: [^self error: 'Pool is already referenced by this class'].
	self imports: (pools copyWith: poolName)!

allSharedPoolNames
	#deprecated.
	^self allSharedPools collect: [:each | each name]!

variableByteSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString category: aCategoryOrString
	"If aClassSymbol is not an existing class then create an answer a new variable byte subclass,
	otherwise modify the class with name aClassSymbol to have the indicated features and answer 
	it. Primarily present for backwards compatibility with Smalltalk-80."

	Notification deprecated.
	^(self
		variableByteSubclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		poolDictionaries: poolDictString)
		categories: {ClassCategory name: aCategoryOrString};
		yourself!

variableByteSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString classInstanceVariableNames: classInstVarString
	"For loading pre-7.2 packages."

	| subclass |
	#deprecated.
	subclass := self
				variableByteSubclass: aClassSymbol
				instanceVariableNames: instVarString
				classVariableNames: classVarString
				poolDictionaries: poolDictString.
	subclass class instanceVariableNames: classInstVarString.
	^subclass!

variableSubclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString category: aCategoryOrString
	"If aClassSymbol is not an existing class then create and answer a new variable pointer 
	subclass, otherwise modify the class with name aClassSymbol to have the indicated features and 
	answer it. Primarily intended for backwards compatibility with Smalltalk-80."

	#deprecated.
	^(self
		variableSubclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		poolDictionaries: poolDictString)
		categories: {ClassCategory name: aCategoryOrString};
		yourself! !

!Class categoriesForMethods!
addSharedPool:!pool variables!public! !
allSharedPoolNames!pool variables!public! !
variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:!class hierarchy-adding!public! !
variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:classInstanceVariableNames:!class hierarchy-adding!public! !
variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:!class hierarchy-adding!public! !
!

!Class class methodsFor!

foldLiteralStrings
	Notification deprecated.
	^self foldLiterals at: #strings! !

!Class class categoriesForMethods!
foldLiteralStrings!operations!public! !
!

!ClassDescription methodsFor!

allSharedPoolNames
	#deprecated.
	^self allSharedPools collect: [:each | each name]!

allSharedPools
	| pools seen |
	#deprecated.
	pools := Array writeStream: 5.
	seen := IdentitySet new.
	self instanceClass withAllSuperclassesDo: 
			[:c |
			c sharedPoolsDo: [:each | (seen addNewElement: each) ifTrue: [pools nextPut: each]]].
	^pools contents!

sharedPoolNames
	"Answer a <sequencedReadableCollection> of <Symbol>s, being the names of the shared pool
	dictionaries that are specified locally in the receiver (pools are inherited in Dolphin), in
	order of precedence."

	Notification deprecated.
	^self instanceClass sharedPoolNames!

sharedPools
	| pools |
	#deprecated.
	pools := OrderedCollection new.
	self sharedPoolsDo: [:each | pools addLast: each].
	^pools!

sharedPoolsDo: aMonadicValuable
	#deprecated.
	self instanceClass
		importedNamespacesDo: [:each | (each inheritsFrom: SharedPool) ifTrue: [aMonadicValuable value: each]]! !

!ClassDescription categoriesForMethods!
allSharedPoolNames!pool variables!public! !
allSharedPools!pool variables!public! !
sharedPoolNames!pool variables!public! !
sharedPools!pool variables!public! !
sharedPoolsDo:!pool variables!public! !
!

!Compiler class methodsFor!

compileDebugExpression: aString in: aClass evaluationPools: anArray
	Notification deprecated.
	^self
		compileDebugExpression: aString
		in: aClass
		environment: nil
		evaluationPools: anArray!

compileDebugMethod: aString in: aClass
	Notification deprecated.
	^self
		compileDebugMethod: aString
		in: aClass
		environment: nil!

compileExpression: aString in: aBehaviorOrNil flags: anInteger
	Notification deprecated.
	^self
		compileExpression: aString
		in: aBehaviorOrNil
		environment: nil
		flags: anInteger!

evaluate: aString for: anObject evaluationPools: anArray
	Notification deprecated.
	^self
		evaluate: aString
		for: anObject
		environment: nil
		evaluationPools: anArray
		logged: false!

evaluate: aString for: anObject evaluationPools: anArray logged: aBoolean
	Notification deprecated.
	^self
		evaluate: aString
		for: anObject
		environment: nil
		evaluationPools: anArray
		logged: aBoolean!

evaluate: aString for: anObject evaluationPools: anArray logged: aBoolean ifFail: failBlock
	Notification deprecated.
	^self
		evaluate: aString
		for: anObject
		environment: nil
		evaluationPools: anArray
		logged: aBoolean
		ifFail: failBlock!

evaluate: aString for: anObject logged: aBoolean
	Notification deprecated.
	^self
		evaluate: aString
		for: anObject
		evaluationPools: nil
		logged: aBoolean! !

!Compiler class categoriesForMethods!
compileDebugExpression:in:evaluationPools:!compiling!public! !
compileDebugMethod:in:!compiling!public! !
compileExpression:in:flags:!compiling!public! !
evaluate:for:evaluationPools:!evaluating!public! !
evaluate:for:evaluationPools:logged:!evaluating!public! !
evaluate:for:evaluationPools:logged:ifFail:!evaluating!public! !
evaluate:for:logged:!evaluating!public! !
!

!CompilerNotification methodsFor!

extra
	#deprecated.
	^extras isEmpty ifFalse: [extras anyOne]! !

!CompilerNotification categoriesForMethods!
extra!accessing!public! !
!

!CRTLibrary methodsFor!

_spawnvp: mode cmdname: aString argv: argv
	"Spawn a new process.

		int _spawnv( int mode, const char *cmdname, const char *const *argv );

	Implementation Note: Overlapped so as to block only the calling process, as the
	spawned external process may run for a lengthy time.
	"

	<overlap cdecl: sdword _spawnvp sdword lpstr lpvoid>
	#deprecated. "Not used; see ExternalProcess contribution"
	^self invalidCall: _failureCode! !

!CRTLibrary categoriesForMethods!
_spawnvp:cmdname:argv:!CRT functions-process and environment control!public! !
!

!Delay class methodsFor!

resolution
	Notification deprecated.
	^self timerResolution!

resolution: aDuration do: aNiladicValuable
	Notification deprecated.
	self withTimerResolution: aDuration do: aNiladicValuable!

resolution: aDuration set: aBoolean
	Notification deprecated.
	^self timerResolution: aDuration set: aBoolean! !

!Delay class categoriesForMethods!
resolution!constants!public! !
resolution:do:!operations!public! !
resolution:set:!helpers!public! !
!

!Dictionary methodsFor!

at: keyObject ifAbsentPutValue: valueObject
	#deprecated.	"With the addition of Object>>value, this is redundant"
	^self at: keyObject ifAbsentPut: valueObject! !

!Dictionary categoriesForMethods!
at:ifAbsentPutValue:!accessing!public! !
!

!ExternalLibrary methodsFor!

invalidCall
	"The primitive failure code is now an implicit temp of the primitive method, and so must be passed. The instance variable of Process formerly used to store the failure code is no longer used."

	Notification deprecated.
	^self invalidCall: Failed fromFrame: Processor activeProcess topFrame sender! !

!ExternalLibrary categoriesForMethods!
invalidCall!exceptions!public! !
!

!EventMessageSend methodsFor!

receiver: anObject
	#deprecated.	"Should only be set on instantiation with other identity variables - use receiver:selector:arguments:"
	self basicAt: 1 put: anObject! !

!EventMessageSend categoriesForMethods!
receiver:!accessing!public! !
!

!File methodsFor!

readCharacter
	"Answer the next Character from the file or nil if the receiver
	is positioned past the current EOF.
	Signal a FileException if an error occurs."

	| string |
	#deprecated.	"May read a partial character - better to open a stream on the file and read next character from that."
	string := String new: 1.
	^(self read: string count: 1) == 0 ifTrue: [nil] ifFalse: [string at: 1]! !

!File categoriesForMethods!
readCharacter!operations!public! !
!

!File class methodsFor!

change: aPathnameString extension: anExtensionString
	#deprecated.	"use #path:extension:"
	^self path: aPathnameString extension: anExtensionString!

for: matchString inAndBelow: dirString do: operation
	#deprecated.	"Use #forAll:in:do:"
	^self 
		forAll: matchString
		in: dirString
		do: [:each | operation value: each directory value: each]!

maxPath
	"Answers the maximum number of characters in a file pathname"

	#deprecated.	"Not compatible with long paths"
	^MAX_PATH!

pathBuffer
	"Answer a buffer of sufficient size to contain a full path."

	#deprecated. "Not long filename compatible"
	^Utf16String newFixed: MAX_PATH! !

!File class categoriesForMethods!
change:extension:!filename manipulation!public! !
for:inAndBelow:do:!enumerating!public! !
maxPath!constants!public! !
pathBuffer!helpers!public! !
!

!FunctionDescriptor class methodsFor!

fromString: aString
	Notification deprecated.
	^self fromString: aString environment: Smalltalk! !

!FunctionDescriptor class categoriesForMethods!
fromString:!instance creation!public! !
!

!Integer methodsFor!

digitSize
	#deprecated.
	^self digitLength!

printStringRadix: base showRadix: flag
	"Answer a String which represents the receiver in the radix, base (an Integer).
	The radix prefix is included if the boolean flag is true."

	| aStream |
	aStream := String writeStream: 16.
	self printOn: aStream base: base showRadix: flag.
	^aStream contents! !

!Integer categoriesForMethods!
digitSize!accessing!public! !
printStringRadix:showRadix:!printing!public! !
!

!KernelLibrary methodsFor!

getTimeFormat: locale dwFlags: dwFlags lpTime: aWinSYSTEMTIME lpFormat: formatString lpTimeStr: outputStringOutput cchBuf: anInteger
	<stdcall: sdword GetTimeFormatW dword dword void* lpwstr lpwstr sdword>
	#deprecated. "Deprecated by Microsoft - use GetTimeFormatEx instead"
	^self invalidCall: _failureCode

! !

!KernelLibrary categoriesForMethods!
getTimeFormat:dwFlags:lpTime:lpFormat:lpTimeStr:cchBuf:!public!win32 functions-national language support! !
!

!Locale methodsFor!

isMonthBeforeDay
	"Answer true if the format for the receiver is expecting a month before a day"

	Notification deprecated.	"Use dateFormat"
	^self dateOrder ~= 1! !

!Locale categoriesForMethods!
isMonthBeforeDay!helpers!public! !
!

!MessageNotUnderstood methodsFor!

receiver: anObject
	#deprecated.	"Should only be set on instantiation with other identity variables - use receiver:message:"
	receiver := anObject! !

!MessageNotUnderstood categoriesForMethods!
receiver:!accessing!public! !
!

!MessageSend methodsFor!

receiver: anObject
	#deprecated.	"Should only be set on instantiation with other identity variables - use receiver:selector:arguments:"
	receiver := anObject.
! !

!MessageSend categoriesForMethods!
receiver:!accessing!public! !
!

!Metaclass methodsFor!

instVarNames: aString
	#deprecated.
	self instanceVariableNames: aString! !

!Metaclass categoriesForMethods!
instVarNames:!class hierarchy-mutating!instance variables!public! !
!

!NotFoundError methodsFor!

receiver: anObject
	#deprecated.	"Should only be set on instantiation with other identity variables - use receiver:object:"
	receiver := anObject! !

!NotFoundError categoriesForMethods!
receiver:!accessing!public! !
!

!NTLibrary class methodsFor!

isWine
	Notification deprecated.	"Use `NtDll isWine`"
	^self default isWine! !

!NTLibrary class categoriesForMethods!
isWine!public!testing! !
!

!NUMBERFMTW methodsFor!

thousandSeparator
	"This should really be called groupSeparator, and will be deprecated in the next release."

	Notification deprecated.
	^self groupSeparator!

thousandSeparator: aString
	Notification deprecated.
	self groupSeparator: aString! !

!NUMBERFMTW categoriesForMethods!
thousandSeparator!accessing!public! !
thousandSeparator:!accessing!public! !
!

!Object methodsFor!

errorCantHold: anObject
	#deprecated.
	^self error: ('Can''t hold <1p>' expandMacrosWith: anObject)! !

!Object categoriesForMethods!
errorCantHold:!exceptions!public! !
!

!Package methodsFor!

addGlobalNamed: globalName
	#deprecated.
	^self addVariableNamed: globalName!

includesGlobalNamed: globalName
	#deprecated.
	^self includesVariableNamed: globalName asQualifiedReference!

isBaseImagePackage
	"Answer true if the receiver is a basic component of Dolphin "

	#deprecated.
	^self isBasePackage!

untracedGlobals
	#deprecated.
	^self untracedVariables collect: [:each | each asSymbol]! !

!Package categoriesForMethods!
addGlobalNamed:!adding!public! !
includesGlobalNamed:!public!testing! !
isBaseImagePackage!public!testing! !
untracedGlobals!accessing!public! !
!

!PackageManager methodsFor!

addGlobalNamed: globalName to: aPackageOrNil
	#deprecated.
	^self addVariableNamed: globalName asQualifiedReference to: aPackageOrNil!

allGlobalAliases
	#deprecated.
	^self allVariableAliases collect: [:each | each asSymbol]!

packageOfGlobalNamed: globalName 
	#deprecated.
	^self packageOfVariableNamed: globalName asQualifiedReference! !

!PackageManager categoriesForMethods!
addGlobalNamed:to:!adding!public! !
allGlobalAliases!enquiries!public! !
packageOfGlobalNamed:!public!searching! !
!

!SortAlgorithm class methodsFor!

sortBlock: aDyadicValuable
	Notification deprecated.
	^self newSortBlock: aDyadicValuable! !

!SortAlgorithm class categoriesForMethods!
sortBlock:!instance creation!public! !
!

!SortedCollection class methodsFor!

value: anObject1 value: anObject2
	"Private - Implement this part of the <dyadicValuable> protocol in order that the receiver
	can be its own default sort 'block' for historical reasons. This is no longer used as of
	Dolphin 6, and is deprecated in Dolphin 7.1"

	Notification deprecated.
	^anObject1 <= anObject2! !

!SortedCollection class categoriesForMethods!
value:value:!evaluating!private! !
!

!Stream methodsFor!

nextOrNil
	#deprecated.
	^self nextAvailable! !

!Stream categoriesForMethods!
nextOrNil!accessing!public! !
!

!String methodsFor!

asUnicodeString
	Notification deprecated.
	^self asUtf16String!

equals: comperand
	Notification deprecated.	"As of v7.1.6, Strings and Symbols with the same characters are always equal."
	^self = comperand! !

!String categoriesForMethods!
asUnicodeString!converting!public! !
equals:!comparing!public! !
!

!String class methodsFor!

ansiClass
	#deprecated.	"Not used"
	^AnsiString!

fromId: anInteger
	Notification deprecated.
	^self fromResourceId: anInteger!

fromId: resourceId in: anExternalLibraryOrHandle
	Notification deprecated.
	^self fromResourceId: resourceId in: anExternalLibraryOrHandle!

fromUnicodeString: anAddressOrUnicodeString
	#deprecated.
	^self fromUtf16String: anAddressOrUnicodeString!

unicodeClass
	#deprecated.
	^self utf16Class! !

!String class categoriesForMethods!
ansiClass!constants!public! !
fromId:!instance creation!public! !
fromId:in:!instance creation!public! !
fromUnicodeString:!instance creation!public! !
unicodeClass!constants!public! !
!

!ExternalStructure methodsFor!

do: aOneArgumentBlock 
	#deprecated.
	self fieldsDo: aOneArgumentBlock!

do: operation separatedBy: separator 
	#deprecated.
	self fieldsDo: operation separatedBy: separator! !

!ExternalStructure categoriesForMethods!
do:!enumerating!public! !
do:separatedBy:!enumerating!public! !
!

!Time class methodsFor!

microsecondsToRun: timedBlock
	"Answer the number of microseconds consumed by the evaluation of timedBlock
	(including the overhead)."

	^timedBlock timeToRun asMicroseconds asInteger! !

!Time class categoriesForMethods!
microsecondsToRun:!operations!public! !
!

!TimeStamp methodsFor!

date: aDate
	"Timestamps are immutable and should be initialized at creation time."

	Notification deprecated.
	self isImmutable: false.
	date := aDate!

dateAndTime
	"Answer a two element Array containing the date and time."

	Notification deprecated.
	^{self date. self time}!

time: aTime
	"Timestamps are immutable and should be initialized at creation time."

	Notification deprecated.
	self isImmutable: false.
	time := aTime! !

!TimeStamp categoriesForMethods!
date:!accessing!public! !
dateAndTime!accessing!public! !
time:!accessing!public! !
!

!UndefinedObject methodsFor!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString poolDictionaries: poolDictString category: aCategoryOrString
	Notification deprecated.
	^(self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		poolDictionaries: poolDictString)
		categories: {ClassCategory name: aCategoryOrString};
		yourself! !

!UndefinedObject categoriesForMethods!
subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:!class hierarchy-adding!public! !
!

!View methodsFor!

enable: aBoolean
	"Sent from state in old view resources"

	#deprecated.
	self isEnabled: aBoolean! !

!View categoriesForMethods!
enable:!operations!public! !
!

!VMLibrary methodsFor!

isWindows10OrGreater
	Notification deprecated.
	^Kernel32 isWindows10OrGreater!

isWindows7OrGreater
	Notification deprecated.
	^Kernel32 isWindows7OrGreater!

isWindows7SP1OrGreater
	Notification deprecated.
	^Kernel32 isWindows7SP1OrGreater!

isWindows8OrGreater
	Notification deprecated.
	^Kernel32 isWindows8OrGreater!

isWindows8Point1OrGreater
	Notification deprecated.
	^Kernel32 isWindows8Point1OrGreater!

isWindowsServer
	Notification deprecated.
	^Kernel32 isWindowsServer!

isWindowsVersionOrGreater: wMajorVersion wMinorVersion: wMinorVersion wServicePackMajor: wServicePackMajor
	Notification deprecated.
	^Kernel32
		isWindowsVersionOrGreater: wMajorVersion
		wMinorVersion: wMinorVersion
		wServicePackMajor: wServicePackMajor!

isWindowsVistaOrGreater
	Notification deprecated.
	^true!

isWindowsVistaSP1OrGreater
	Notification deprecated.
	^Kernel32 isWindowsVistaSP1OrGreater!

isWindowsVistaSP2OrGreater
	Notification deprecated.
	^Kernel32 isWindowsVistaSP2OrGreater!

isWindowsXPOrGreater
	Notification deprecated.
	^Kernel32 isWindowsXPOrGreater!

shortName
	"Answer the localised short name for Dolphin."
	Notification deprecated.
	^String fromId: 129 in: self! !

!VMLibrary categoriesForMethods!
isWindows10OrGreater!public!win32 functions-version helpers! !
isWindows7OrGreater!public!win32 functions-version helpers! !
isWindows7SP1OrGreater!public!win32 functions-version helpers! !
isWindows8OrGreater!public!win32 functions-version helpers! !
isWindows8Point1OrGreater!public!win32 functions-version helpers! !
isWindowsServer!public!win32 functions-version helpers! !
isWindowsVersionOrGreater:wMinorVersion:wServicePackMajor:!public!win32 functions-version helpers! !
isWindowsVistaOrGreater!public!win32 functions-version helpers! !
isWindowsVistaSP1OrGreater!public!win32 functions-version helpers! !
isWindowsVistaSP2OrGreater!public!win32 functions-version helpers! !
isWindowsXPOrGreater!public!win32 functions-version helpers! !
shortName!accessing!public! !
!

"End of package definition"!

