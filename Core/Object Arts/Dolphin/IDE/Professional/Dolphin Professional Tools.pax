| package |
package := Package name: 'Dolphin Professional Tools'.
package paxVersion: 2.1;
	environmentName: #{Tools};
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Professional Additional Tools.
Copyright (c) Object Arts Ltd, 2001-2006.

This package contains the additional tools (excluding Refactoring Browser extensions), over and above those in Dolphin Community Edition, that are included in Dolphin Professional. These tools are:

Idea Space - A workspace organisation tool that allows you to group together multiple tools as tabs within a single top-level shell.

Method Explorer - A drill-down method browser capable of showing the results of multiple searches.

ProcessMonitor - Displays a dynamically updating task list, much like the Windows NT/2K Task Manager, that can be used to monitor thread activity, attach debuggers to running processes, terminate processes, and change their priorities. Apart from revealing quite a lot about the inner workings of Dolphin, this can be a very useful tool for debugging in multi-threaded situations. 

SourceBrowser - A tool for viewing and managing the list of changed "source" objects (e.g. classes and packages) in a development system. It can be used to file them out, remove or add the changed flag, and make the underlying files writeable or readonly. It is particularly useful in conjunction with a file based source code control system such as SourceSafe or CVS.

System Browser - A class browser that includes a package filter, so that one can refine that part of the hierarchy displayed in the browser to only those parts relevant to a group of selected packages.'.

package basicPackageVersion: '6.2'.

package basicScriptAt: #postinstall put: 'Tools.EnvironmentBrowserShell initializeTool'.

package setClassNames: #(
	#{Tools.AXControlBrowser}
	#{Tools.ChoosePackagedClassDialog}
	#{Tools.ClassDiagramPlugin}
	#{Tools.DebugInfoPlugin}
	#{Tools.Disassembler}
	#{Tools.EnvironmentBrowserShell}
	#{Tools.IdeaSpaceShell}
	#{Tools.PackagedClassSelector}
	#{Tools.PackagedResourceIdentifierDialog}
	#{Tools.ProcessMonitor}
	#{Tools.ProfessionalSmalltalkSystem}
	#{Tools.ResourceListPlugin}
	#{Tools.SystemBrowserShell}
	#{Tools.UnitTestPlugin}
).

package setMethodNames: #(
	#(#{Core.Class} #correspondingTestCase)
	#(#{Core.ClassDescription} #correspondingTestCase)
	#(#{Core.Metaclass} #correspondingTestCase)
	#(#{Core.Process} #priorityName)
	#(#{Kernel.ProcessorScheduler} #nameOfPriority:)
	#(#{Smalltalk.StyledContainer class} #publishedAspectsOfInstances)
	#(#{Tools.ClassBrowserAbstract} #toggleLocalHierarchy)
	#(#{Tools.Debugger} #queryToggleDisassembly:)
	#(#{Tools.Debugger} #toggleDisassembly)
	#(#{Tools.PackageSelector} #browseDeployed)
	#(#{Tools.PackageSelector} #browsePackageSources)
	#(#{Tools.PackageSelector} #browseSources)
	#(#{Tools.SmalltalkSystem} #openIdeaSpace)
	#(#{Tools.SmalltalkSystem} #updateHelpMenus)
	#(#{Tools.SmalltalkToolShell} #addToNewIdeaSpace)
	#(#{Tools.SmalltalkToolShell} #browseSystem)
	#(#{Tools.SmalltalkToolShell} #canMoveToIdeaSpace)
	#(#{Tools.SmalltalkToolShell} #destroy)
	#(#{Tools.SmalltalkToolShell} #dragToolToIdeaSpace)
	#(#{Tools.SmalltalkToolShell} #exit)
	#(#{Tools.SmalltalkToolShell class} #addToNewIdeaSpace:)
	#(#{Tools.SmalltalkToolShell class} #dragToolToIdeaSpace:)
	#(#{Tools.SmalltalkWorkspaceDocument} #addToNewIdeaSpace)
	#(#{Tools.SmalltalkWorkspaceDocument} #browseSources)
	#(#{Tools.SmalltalkWorkspaceDocument} #canMoveToIdeaSpace)
	#(#{Tools.SmalltalkWorkspaceDocument} #destroy)
	#(#{Tools.SmalltalkWorkspaceDocument} #dragToolToIdeaSpace)
	#(#{Tools.SmalltalkWorkspaceDocument} #exit)
	#(#{UI.LinkButton class} #publishedAspectsOfInstances)
	#(#{UI.SlideyInneyOuteyThing class} #example1)
	#(#{UI.SlideyInneyOuteyThing class} #publishedAspectsOfInstances)
	#(#{UI.SysLinkView class} #publishedAspectsOfInstances)
	#(#{UI.SysLinkView class} #publishedEventsOfInstances)
	#(#{UI.Toolbar class} #resource_Idea_space_card_tools)
	#(#{XProgramming.SUnit.TestCase class} #correspondingTestCase)
).

package setPrerequisites: #(
	'..\..\ActiveX\Automation\ActiveX Automation'
	'..\..\ActiveX\Connection Points\ActiveX Connection Points'
	'..\..\ActiveX\OCX\ActiveX Control Hosting'
	'..\Base\Development System'
	'..\..\Base\Dolphin'
	'..\..\MVP\Base\Dolphin Base Dialogs'
	'..\..\MVP\Base\Dolphin Basic Geometry'
	'..\..\MVP\Presenters\Boolean\Dolphin Boolean Presenter'
	'..\..\MVP\Views\Cards\Dolphin Card Containers'
	'..\..\MVP\Views\Buttons\Dolphin Check Buttons'
	'..\..\MVP\Views\Common Controls\Dolphin Common Controls'
	'..\..\MVP\Dialogs\Common\Dolphin Common Dialogs'
	'..\Community Edition\Dolphin Community Edition Tools'
	'..\..\MVP\Views\Control Bars\Dolphin Control Bars'
	'..\..\MVP\Graphics\Dolphin GDI Graphics'
	'..\..\MVP\Presenters\Image\Dolphin Image Presenter'
	'..\..\MVP\Models\List\Dolphin List Models'
	'..\..\MVP\Presenters\List\Dolphin List Presenter'
	'..\..\System\Filer\Dolphin Literal Filer'
	'..\..\System\Win32\MessageBox\Dolphin Message Box'
	'..\..\MVP\Base\Dolphin MVP Base'
	'..\..\MVP\Views\Buttons\Dolphin Push Buttons'
	'..\..\MVP\Presenters\Radio\Dolphin Radio Buttons'
	'..\..\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\..\MVP\Views\Sliding Tray\Dolphin Slidey-Inney-Outey Thing'
	'..\..\MVP\Views\Splitter\Dolphin Splitter Control'
	'..\..\MVP\Views\Styled Views\Dolphin Styled Views'
	'..\..\MVP\Views\SysLink\Dolphin SysLink Control'
	'..\..\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\..\MVP\Icons\Dolphin Text Tile Icons'
	'..\..\MVP\Models\Tree\Dolphin Tree Models'
	'..\..\MVP\Type Converters\Dolphin Type Converters'
	'..\..\MVP\Models\Value\Dolphin Value Models'
	'..\..\ActiveX\COM\OLE COM'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Refactorings\RBRefactorings'
	'..\..\..\..\Contributions\Camp Smalltalk\SUnit\SUnit'
	'..\..\..\..\Contributions\Camp Smalltalk\SUnit\SUnitPreload'
	'..\..\ActiveX\Shell\Windows Shell'
	'..\..\ActiveX\Components\XML DOM\XML DOM'
).

package!

"Class Definitions"!

Kernel.InstructionInterpreter
	subclass: #'Tools.Disassembler'
	instanceVariableNames: 'stream'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.CommunityEditionSmalltalkSystem
	subclass: #'Tools.ProfessionalSmalltalkSystem'
	instanceVariableNames: 'systemBrowserClass ideaSpaceClass packagedResourceIdentifierDialogClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.ClassBrowserPlugin
	subclass: #'Tools.ClassDiagramPlugin'
	instanceVariableNames: 'classesPresenter'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.ClassBrowserPlugin
	subclass: #'Tools.DebugInfoPlugin'
	instanceVariableNames: 'disassemblyPresenter sourcePresenter textMapPresenter toggleDebugPresenter toggleOptimisedPresenter method'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.ClassBrowserPlugin
	subclass: #'Tools.ResourceListPlugin'
	instanceVariableNames: 'resourcesPresenter flags'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'ShowInheritedResourcesMask' -> 16r1. 'ShowSubclassResourcesMask' -> 16r2 }!
Tools.ClassBrowserPlugin
	subclass: #'Tools.UnitTestPlugin'
	instanceVariableNames: 'result icon autoSwitchProcess defectsPresenter modePresenter detailsPresenter'
	classVariableNames: 'AutoSwitchDelay ErrorColor FailColor NoTestsColor PassColor RunningColor'
	imports: #(#{XProgramming.SUnit private})
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.ClassSelector
	subclass: #'Tools.PackagedClassSelector'
	instanceVariableNames: 'packagesPresenter'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.ResourceIdentifierDialog
	subclass: #'Tools.PackagedResourceIdentifierDialog'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.ChooseClassDialog
	subclass: #'Tools.ChoosePackagedClassDialog'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.SmalltalkToolShell
	subclass: #'Tools.AXControlBrowser'
	instanceVariableNames: 'site windowStatus inspector eventsPresenter flags traceWindow progId'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'TraceMask' -> 16r1 }!
Tools.SmalltalkToolShell
	subclass: #'Tools.IdeaSpaceShell'
	instanceVariableNames: 'cardsPresenter backgroundPresenter defaultMenuBar cardHistory filename'
	classVariableNames: 'Watermark'
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.SmalltalkToolShell
	subclass: #'Tools.ProcessMonitor'
	instanceVariableNames: 'listPresenter updateInterval'
	classVariableNames: 'UpdateIntervals'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.ClassBrowserAbstract
	subclass: #'Tools.EnvironmentBrowserShell'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.ClassBrowserAbstract
	subclass: #'Tools.SystemBrowserShell'
	instanceVariableNames: ''
	classVariableNames: 'AutoSelectPackages'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Class methodsFor!

correspondingTestCase
	"Answer a corresponding <TestCase> class that can be used to unit test the receiver. Answer nil if
	an appropriate test case is not available"

	| testsEnvironment |
	testsEnvironment := environment at: #Tests ifAbsent: [environment].
	#('Test' 'Tests' 'TestCase' 'TestCases') do: 
			[:each |
			| testName |
			testName := self name , each.
			(testsEnvironment lookup: testName) ifNotNil: [:testClass | ^testClass]].
	^nil! !
!Core.Class categoriesForMethods!
correspondingTestCase!development!public! !
!

!Core.ClassDescription methodsFor!

correspondingTestCase
	"Answer a corresponding <TestCase> class that can be used to unit test the receiver. Answer nil if an appropriate test case is not available"

	^self subclassResponsibility! !
!Core.ClassDescription categoriesForMethods!
correspondingTestCase!development!public! !
!

!Core.Metaclass methodsFor!

correspondingTestCase
	"Answer a corresponding <TestCase> class that can be used to unit test the receiver. Answer nil if an appropriate test case is not available"

	^instanceClass correspondingTestCase! !
!Core.Metaclass categoriesForMethods!
correspondingTestCase!development!public! !
!

!Core.Process methodsFor!

priorityName
	"Answer symbolic name of the receiver's priority (see ProcessorScheduler)."

	^Processor nameOfPriority: self priority
! !
!Core.Process categoriesForMethods!
priorityName!accessing!public! !
!

!Kernel.ProcessorScheduler methodsFor!

nameOfPriority: anInteger
	"Answer the name of the specified priority"

	^#(#systemBasePriority #systemBackgroundPriority #userBackgroundPriority #userLowerPriority #userSchedulingPriority #userBoostedPriority #userInterruptPriority #lowIOPriority #highIOPriority #timingPriority)
		at: anInteger
		ifAbsent: #unknownPriority! !
!Kernel.ProcessorScheduler categoriesForMethods!
nameOfPriority:!enquiries!public! !
!

!StyledContainer class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	aspects
		add: ((Aspect name: #styledPen
					chooseFrom: #('nil' 'StyledPen solid' 'StyledPen dotted' 'StyledPen dashed' 'StyledPen dashDot' 'StyledPen dashDotDot'))
					beImmutable;
					beNullable;
					yourself);
		add: ((Aspect name: #styledShadow chooseFrom: #('nil' 'StyledShadow new'))
					beImmutable;
					beNullable;
					yourself);
		add: ((Aspect name: #styledBrush
					chooseFrom: #('nil' 'StyledGradientBrush black' 'StyledGradientBrush white' 'StyledGradientBrush face3dTopToBottomFade' 'StyledGradientBrush face3dLeftToRightFade' 'StyledGradientBrush face3dTopLeftToBottomRightFade'))
					beNullable;
					yourself);
		add: ((Aspect name: #cornerRadii)
					beNonNullable;
					beImmutable;
					yourself);
		add: (Aspect boolean: #isAntialiased);
		add: ((Aspect collection: #edges addEvaluationFrom: #('#left' '#right' '#top' '#bottom'))
					beImmutable;
					beNonNullable;
					yourself).
	^aspects! !
!StyledContainer class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Tools.ClassBrowserAbstract methodsFor!

toggleLocalHierarchy
	"Toggle between the entire hierarchy and showing only the current class and its subclasses."

	<commandQuery: #queryToggleLocalHierarchy:>
	| instClass actualClass |
	self promptToSaveChanges ifFalse: [^self].

	"Use the selected class rather than the actual class, so always follows instance hierarchy"
	instClass := self selectedClass.
	actualClass := self actualClass.
	self isLocalHierarchyMode: self isLocalHierarchyMode not.
	self isLocalHierarchyMode
		ifTrue: 
			["Toggled into local hierarchy mode"
			self displayLocalHierarchyOf: instClass.
			self actualClass: actualClass]
		ifFalse: 
			["Toggled out of local hierarchy mode..."
			classesPresenter model: self model classHierarchy.
			actualClass notNil ifTrue: [self actualClass: actualClass]].
	self validateUserInterface! !
!Tools.ClassBrowserAbstract categoriesForMethods!
toggleLocalHierarchy!commands-actions!public! !
!

!Tools.Debugger methodsFor!

queryToggleDisassembly: aCommandQuery
	aCommandQuery
		isEnabled: true;
		isChecked: self isDisassembled!

toggleDisassembly
	"Private - Switch between source/disassembly modes."

	<commandQuery: #queryToggleDisassembly:>
	self beDisassembled: self isDisassembled not.
	sourcePresenter
		isReadOnly: self isDisassembled;
		isAutoParseEnabled: (self isDisassembled not and: [sourcePresenter class isAutoParseEnabled]).
	self displayFrame! !
!Tools.Debugger categoriesForMethods!
queryToggleDisassembly:!commands-queries!private! !
toggleDisassembly!commands-actions!private! !
!

!Tools.PackageSelector methodsFor!

browseDeployed
	"Open a new <EnvironmentBrowserShell> on the deployed application content as read from the stripper log."

	[self developmentSystem browseDeployedPackage: self singlePackage] on: Error
		do: 
			[:ex |
			MessageBox new
				headline: 'Error browsing <1d>' << self singlePackage;
				detailsText: ex description;
				errorMsg: 'Invalid Manifest']!

browsePackageSources
	"Private - Open a browser on the sources for the currently selected package."

	| packages |
	packages := self packages select: [:each | each isUsingPAX].
	packages size ~= self packages size
		ifTrue: 
			[MessageBox
				notify: 'Some of the selected packages are not using PAX source mode.
These will be omitted from the Source Browser display.'].
	SourceBrowser forSourcesOfPackages: packages!

browseSources
	"Private - Open a browser on the sources for the currently selected package."

	self browsePackageSources! !
!Tools.PackageSelector categoriesForMethods!
browseDeployed!commands!public! !
browsePackageSources!commands!private! !
browseSources!commands!private! !
!

!Tools.SmalltalkSystem methodsFor!

openIdeaSpace
	"Create a new IdeaSpace by opening a template file"

	^IdeaSpaceShell open!

updateHelpMenus
	"Private -  Make changes to the Help menus in the SystemBrowserShell menu bar and then evaluate the following to propagate the changes to all the other relevant views:

		SmalltalkSystem current updateHelpMenus
	"

	| view helpmenu toolShells |
	view := (ResourceIdentifier class: SystemBrowserShell name: 'Default view')
				loadWithContext: View desktop.
	helpmenu := (view menuBar findCommand: #help) binaryStoreBytes.
	view destroy.
	toolShells := (SmalltalkToolShell allSubclasses copyWith: SmalltalkWorkspaceDocument)
				inject: Set new
				into: 
					[:set :each |
					set addAll: each resourceIdentifiers.
					set].
	self viewResourcesMatching: [:rid | toolShells includes: rid]
		do: 
			[:vc |
			vc composingView menuBar
				ifNotNil: 
					[:menuBar |
					(menuBar findCommand: #help)
						ifNotNil: [:oldHelpMenu | menuBar replaceItem: oldHelpMenu with: (Object fromBinaryStoreBytes: helpmenu)]].
			true]! !
!Tools.SmalltalkSystem categoriesForMethods!
openIdeaSpace!commands!public! !
updateHelpMenus!private!utilities! !
!

!Tools.SmalltalkToolShell methodsFor!

addToNewIdeaSpace
	<commandQuery: #canMoveToIdeaSpace>
	^self class addToNewIdeaSpace: self!

browseSystem
	"Open a new system browser on Object."

	^self developmentSystem browseSystem!

canMoveToIdeaSpace
	^self isIdeaSpaceCard not and: [self class canUseIdeaSpace]!

destroy
	"Attempt to forcibly close the receiver's view. If this is an IdeaSpace card then we ask the IdeaSpace to destroy it."

	self isIdeaSpaceCard ifTrue: [^self ideaSpace destroyCard: self].
	^super destroy!

dragToolToIdeaSpace
	<commandQuery: #canMoveToIdeaSpace>
	^self class dragToolToIdeaSpace: self!

exit
	"Attempt to close the receiver's view. If this is an IdeaSpace card then we ask the IdeaSpace to close it."

	self isIdeaSpaceCard ifTrue: [^self ideaSpace closeCard: self].
	^super exit! !
!Tools.SmalltalkToolShell categoriesForMethods!
addToNewIdeaSpace!public! !
browseSystem!commands-actions!public! !
canMoveToIdeaSpace!private!testing! !
destroy!commands-actions!public! !
dragToolToIdeaSpace!public! !
exit!commands-actions!public! !
!

!Tools.SmalltalkToolShell class methodsFor!

addToNewIdeaSpace: aSmalltalkToolShell
	IdeaSpaceShell show absorbCard: aSmalltalkToolShell!

dragToolToIdeaSpace: aSmalltalkToolShell
	| shellFinder ideaSpaceFound |
	shellFinder := VisualShellFinder for: IdeaSpaceShell.
	shellFinder
		foundCursor: (Icon fromId: 'IDEASPACESHELLADD.ICO');
		notFoundCursor: (Icon fromId: 'IDEASPACESHELLADDDISABLED.ICO');
		findObject.
	ideaSpaceFound := shellFinder value.
	ideaSpaceFound isNil ifTrue: [^self].
	ideaSpaceFound absorbCard: aSmalltalkToolShell! !
!Tools.SmalltalkToolShell class categoriesForMethods!
addToNewIdeaSpace:!public! !
dragToolToIdeaSpace:!public! !
!

!Tools.SmalltalkWorkspaceDocument methodsFor!

addToNewIdeaSpace
	<commandQuery: #canMoveToIdeaSpace>
	^IdeaSpaceShell addToNewIdeaSpace: self!

browseSources
	"Open a new source browser on the entire system sources"
	
	self model browseSources!

canMoveToIdeaSpace
	^self isIdeaSpaceCard not!

destroy
	"Attempt to forcibly close the receiver's view. If this is an IdeaSpace card then we ask the IdeaSpace to destroy it."

	self isIdeaSpaceCard ifTrue: [^self ideaSpace destroyCard: self].
	^super destroy!

dragToolToIdeaSpace
	<commandQuery: #canMoveToIdeaSpace>
	^IdeaSpaceShell dragToolToIdeaSpace: self!

exit
	"Attempt to close the receiver's view. If this is an IdeaSpace card then we ask the IdeaSpace to close it."

	self isIdeaSpaceCard ifTrue: [^self ideaSpace closeCard: self].
	^super exit! !
!Tools.SmalltalkWorkspaceDocument categoriesForMethods!
addToNewIdeaSpace!public! !
browseSources!commands-actions!public! !
canMoveToIdeaSpace!private!testing! !
destroy!commands-actions!public! !
dragToolToIdeaSpace!public! !
exit!commands-actions!public! !
!

!UI.LinkButton class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| answer |
	answer := super publishedAspectsOfInstances.
	answer
		add: (Aspect multilineString: #text);
		add: (Aspect name: #commandDescription) beReadOnly;
		yourself.
	^answer! !
!UI.LinkButton class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!UI.SlideyInneyOuteyThing class methodsFor!

example1
	"
	self example1
	"

	| s cards tree l t |
	s := SlideyInneyOuteyThing new showShell.
	s isTrayResizable: true.
	s animation: #slide.
	cards := s tray.
	cards name: 'cards'.
	s parentView layoutManager: ProportionalLayout new.
	s parentView addSubView: Splitter new.
	tree := cards addSubView: TreeView new.
	tree model: Tools.ClassHierarchyModel withAllClasses.
	tree viewMode: #smallIcons.
	t := s parentView addSubView: UI.Scintilla.ScintillaView new.
	t text: Object comment.
	tree arrangement: 'Tree'.
	l := cards addSubView: ListView new.
	l arrangement: 'List'.
	l model list: View methodDictionary keys asSortedCollection!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	#(#layoutManager #isTransparent #isTabStop #isGroupStop #isDragSource #isDropTarget)
		do: [:each | aspects removeKey: each].
	#(#isHiddenOnUnpin #isTrayResizable #isCardChangeAnimated)
		do: [:each | aspects add: (Aspect boolean: each)].
	aspects add: (Aspect symbol: #animation from: ##(Animations keys asSortedArray)).
	^aspects! !
!UI.SlideyInneyOuteyThing class categoriesForMethods!
example1!examples!public! !
publishedAspectsOfInstances!constants!public! !
!

!UI.SysLinkView class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^super publishedAspectsOfInstances
		add: (Aspect multilineString: #text);
		yourself!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #linkClicked:;
    		yourself.
    ! !
!UI.SysLinkView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!UI.Toolbar class methodsFor!

resource_Idea_space_card_tools
	"Answer the literal data from which the 'Idea space card tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	Tools.ViewComposer openOn: (UI.ResourceIdentifier class: self selector: #resource_Idea_space_card_tools)
	"

	^#(#'!!STL' 6 2118 10 #{UI.STBViewProxy} #{UI.Toolbar} 38 #{Core.Array} 28 nil nil 50 2 8 1409289036 131137 32 nil nil nil 517 nil nil nil 32 6 #{Graphics.Color} #default 8 1853287488 550 #{Core.IdentityDictionary} 0 nil nil nil 162 5 52135 1094 1 #{UI.ToolbarIconButton} 32 1 1350 4 #{UI.CommandDescription} #cardHistoryBack 8 'Back' 1 1 838 4 #{Graphics.Icon} nil true 1030 #{Graphics.ImageFromStringResourceInitializer} 8 'HistoryBack.ico' 838 1 #{External.ResourceLibrary} 8 'dolphindr8.dll' 65541 nil 52135 52137 210 32 1 242 #cardHistoryForward 8 'Forward' 1 1 290 nil true 322 8 'HistoryForward.ico' 384 65541 nil 52137 52139 210 32 1 242 #moveCardLeft 8 'Move Card Left' 1 1 2374 2 #{Graphics.TextTileIcon} 8 $◀ 8 'Cambria' nil 114 #menuHilight nil nil 1 nil nil 52139 52141 210 32 1 242 #moveCardRight 8 'Move Card Right' 1 1 562 8 $▶ 8 'Cambria' nil 624 nil nil 1 nil nil 52141 52143 210 32 1 242 #closeCard 8 'Close This Card' 1 1 562 8 $✖ nil nil nil nil nil 1 nil nil 52143 50 7 582 1 #{UI.ToolbarSeparator} 32 1 224 416 834 32 1 512 640 736 nil nil 1 nil nil nil nil nil 262 #{Core.MessageSequence} 50 1 774 #{Core.MessageSend} #createAt:extent: 50 2 518 #{Graphics.Point} 6143 21 978 263 51 32 262 #{OS.WINDOWPLACEMENT} 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 11 0 0 10 0 0 0 130 12 0 0 35 0 0 0] 8 #() 978 193 193 nil 29)! !
!UI.Toolbar class categoriesForMethods!
resource_Idea_space_card_tools!public!resources-views! !
!

!XProgramming.SUnit.TestCase class methodsFor!

correspondingTestCase
	^self! !
!XProgramming.SUnit.TestCase class categoriesForMethods!
correspondingTestCase!public! !
!

"End of package definition"!

