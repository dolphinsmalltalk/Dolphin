| package |
package := Package name: 'Scintilla View Generator'.
package paxVersion: 2.1;
	basicComment: 'Tool to regenerate ScintillaView when upgrading to a new version of Scintilla.

You will need to download the Scintilla source matching the binary version of Scintilla (downloadable as part of the Scite editor package). Extract the source from the zip, and copy the Scintilla.iface file to the scintilla view package folder, overwriting the existing one. This should be checked in for documentary purposes.

It is suggested that you run the generator in preview mode, which is the default. The ScintillaView is an integral part of the Dolphin IDE, so if the regeneration fails, or introduces issues, Dolphin may crash or become unusable. In preview mode the generator will open a "Rewrite Changes Browser" showing all of the added, modified, and removed methods. These may be perused to identify unexpected changes, or to look for opportunities to add higher-level wrappers for new features.'.


package setClassNames: #(
	#{Tools.Scintilla}
	#{Tools.Scintilla.BoolTypeReference}
	#{Tools.Scintilla.ColourAlphaTypeReference}
	#{Tools.Scintilla.ColourTypeReference}
	#{Tools.Scintilla.EnumTypeReference}
	#{Tools.Scintilla.EventDefinition}
	#{Tools.Scintilla.FunctionDefinition}
	#{Tools.Scintilla.InterfaceDefinition}
	#{Tools.Scintilla.IntTypeReference}
	#{Tools.Scintilla.KeyModTypeReference}
	#{Tools.Scintilla.LineTypeReference}
	#{Tools.Scintilla.ParameterDefinition}
	#{Tools.Scintilla.PointerTypeReference}
	#{Tools.Scintilla.PositionTypeReference}
	#{Tools.Scintilla.ScintillaViewGenerator}
	#{Tools.Scintilla.TypeReference}
	#{Tools.Scintilla.VoidTypeReference}
).

package setPrerequisites: #(
	'..\Base\Development System'
	'..\..\Base\Dolphin'
	'..\..\MVP\Dialogs\Common\Dolphin Common Dialogs'
	'..\..\MVP\Graphics\Dolphin GDI Graphics'
	'Dolphin Refactoring Browser'
	'..\..\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Change Objects\RBChangeObjects'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Refactorings\RBRefactorings'
	'..\..\System\Compiler\Smalltalk Parser'
).

package!

"Class Definitions"!

Tools subclass: #'Tools.Scintilla'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Tools.Scintilla.InterfaceDefinition'
	instanceVariableNames: 'id name isDeprecated comment selector constName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Tools.Scintilla.ParameterDefinition'
	instanceVariableNames: 'name typeName typeRef'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Tools.Scintilla.ScintillaViewGenerator'
	instanceVariableNames: 'events commentQueue lexerConstantPrefixes previewChanges commands parsingDeprecated model constantsPool generatedSelectors aliases functions defaultReturnValues'
	classVariableNames: ''
	imports: #(#{UI.Scintilla})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Tools.Scintilla.TypeReference'
	instanceVariableNames: ''
	classVariableNames: 'Enums TypeMap'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.InterfaceDefinition subclass: #'Tools.Scintilla.EventDefinition'
	instanceVariableNames: 'args'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.InterfaceDefinition subclass: #'Tools.Scintilla.FunctionDefinition'
	instanceVariableNames: 'funcType returnType lParam wParam returnTypeName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.TypeReference subclass: #'Tools.Scintilla.BoolTypeReference'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.TypeReference subclass: #'Tools.Scintilla.ColourTypeReference'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.TypeReference subclass: #'Tools.Scintilla.IntTypeReference'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.TypeReference subclass: #'Tools.Scintilla.PointerTypeReference'
	instanceVariableNames: 'name objectClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.TypeReference subclass: #'Tools.Scintilla.VoidTypeReference'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.ColourTypeReference subclass: #'Tools.Scintilla.ColourAlphaTypeReference'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.IntTypeReference subclass: #'Tools.Scintilla.EnumTypeReference'
	instanceVariableNames: 'name prefix values defaultValueName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.IntTypeReference subclass: #'Tools.Scintilla.KeyModTypeReference'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.IntTypeReference subclass: #'Tools.Scintilla.PositionTypeReference'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.Scintilla.PositionTypeReference subclass: #'Tools.Scintilla.LineTypeReference'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"End of package definition"!

