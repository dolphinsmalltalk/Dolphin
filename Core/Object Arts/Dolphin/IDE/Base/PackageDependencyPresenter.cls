"Filed out from Dolphin Smalltalk"!

Presenter subclass: #PackageDependencyPresenter
	instanceVariableNames: 'treePresenter tracesPresenter traces packages'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

PackageDependencyPresenter guid: (GUID fromString: '{183e540c-f682-44d4-ac9c-77d4e4ca9487}')!

PackageDependencyPresenter isAbstract: true!

PackageDependencyPresenter comment: 'PackageDependencyPresenter is the abstract superclass of the development tool windows which display a tree representing the dependency relationships between packages. Subclasses show emphasise either the pre-requisite relationship (where the children of a package in the tree are the pre-requisistes for that package) or dependency relationship (where the children of a package in the tree are the packages dependent upon it, i.e. of which it is itself a pre-requisite).

Instance Variables:
	prerequisitesPresenter	<TreePresenter> holding the dependency tree.
	tracesPresenter			<ListPresenter> holding the list of traces.
	traces					<IdentityDictionary> of traces generated by Package>>tracePrerequisites.
	packages				<Package>s at the root of the tree for which dependency relationships are being displayed.
'!

!PackageDependencyPresenter categoriesForClass!MVP-Presenters!MVP-Resources-IDE Tools! !

!PackageDependencyPresenter methodsFor!

browsePackages
	"Browse the currently selected prerequisite package."

	self selectedPair ifNotNil: [:selected | selected key browse]!

browseTrace
	"Browse the currently selected trace object."

	| trace |
	trace := tracesPresenter selections.
	trace notEmpty ifTrue: [
		trace first first browse]!

buildChildNodes: aCollection for: aTreeNode 
	^(aCollection asSortedCollection: Package defaultSortBlock) collect: [:p | p -> aTreeNode]!

childrenFor: aTreeNode 
	"Private - Answer a <sequencedReadableCollection> of the child nodes below the package
	dependency tree node argument."

	^self subclassResponsibility!

choosePackage
	"Prompt for the user to repackage the selected objects."

	| pkg newPkg dependees |
	dependees := IdentitySet new.
	tracesPresenter selections do: [:t | dependees add: t first].
	"Default to moving the selected objects to the pre-requisite package"
	pkg := self prerequisitePackage.
	pkg == Package uncommitted ifTrue: [pkg := nil].
	newPkg := PackagePrompter 
				showModalOn: pkg asValue
				caption: 'Re-package dependencies...'
				default: nil.
	newPkg isNil ifFalse: [self queryMoveObjects: dependees toPackage: newPkg]!

clear
	"Clear down the receiver"

	self packages: #()!

createComponents
	"Create the presenters contained by the receiver"

	super createComponents.
	treePresenter := self add: TreePresenter new name: 'tree'.
	tracesPresenter := self add: ListPresenter new name: 'traces'!

createSchematicWiring
	"Create the trigger wiring for the receiver"

	super createSchematicWiring.
	treePresenter
		when: #selectionChanged
			send: #onPackageSelected
			to: self;
		when: #actionPerformed
			send: #browsePackages
			to: self.
	tracesPresenter 
		when: #actionPerformed
		send: #browseTrace
		to: self.
	self packageManager 
		when: #prerequisitesReset:
		send: #onPrerequisitesReset:
		to: self!

dependencyModelWithRoots: anOrderedCollection 
	^(ExpandingTreeModel withRoots: anOrderedCollection)
		getChildrenBlock: [:each | self childrenFor: each];
		yourself!

dependentPackage
	^self subclassResponsibility!

initialize
	super initialize.
	packages := #()!

onPackageSelected
	"Private - One of the packages in the dependency tree has been selected. Populate the
	traces presenter with a list of all of the dependency relationships between the selected
	package and its parent in the tree."

	| pair |
	pair := self selectedPair.
	(pair notNil and: [pair value notNil]) 
		ifTrue: 
			[tracesPresenter 
				list: ((self prerequisiteTraceFor: self dependentPackage) at: self prerequisitePackage
						ifAbsent: [#()])]
		ifFalse: [tracesPresenter clear]!

onPrerequisitesReset
	"Private - The pre-requisites of a package have been reset, so the dependency tree must be
	rebuilt."

	"Implementation Note: In order to avoid having to immediately calculate the pre-requisites
	of all the pre-requisites of a package when the tree view asks if the root nodes have any
	children, we put the starting package in as the single root. This is also more consistent
	from a usability point of view, since when selected the pre-requisites list shows the
	dependencies on the parent node. It does mean we need to treat selection of the root as a
	special case however."

	| selected |
	selected := self selectedPair.
	traces := LookupTable new.
	treePresenter
		selectionOrNil: nil;
		model: (self dependencyModelWithRoots: (packages collect: [:each | each -> nil])).
	self selectedPair: selected!

onPrerequisitesReset: updatee
	"Private - The <Package>, updatee, has reset its prerequisites, so we need to rebuild the
	dependency tree to reflect any changes. We could do this more efficiently by locating the
	relevant nodes and collapsing only those, but at present we opt for the simple approach of
	collapsing the entire tree."

	self onPrerequisitesReset!

onViewClosed
	"Sent by the receiver's view when it has been closed.
	Disconnect from any events triggered by the devlopment system"

	super onViewClosed.
	self packageManager removeEventsTriggeredFor: self!

onViewOpened
	"Received when the receiver's view has been connected. "

	super onViewOpened.
	self packageManager youShouldBeProcessingEvents!

packageManager
	"Private - Answer the current PackageManager."

	^Package manager

!

packages
	"Answer the packages for which the receiver is showing dependency trees."

	^packages!

packages: aPackageCollection 
	"Set the packages which the constitute the roots of the dependency tree."

	packages := aPackageCollection.
	self onPrerequisitesReset!

prerequisitePackage
	^self subclassResponsibility!

prerequisiteTraceFor: aPackage
	"Private - Answer the pre-requisite trace for the specified package.
	We cache the info. for speed."

	^traces at: aPackage ifAbsentPut: [Cursor wait showWhile: [aPackage tracePrerequisites]]!

queryCommand: aCommandQuery 
	"Private - Enter details about a potential command for the receiver 
	into the <CommandQuery> argument."

	| selector |
	selector := aCommandQuery commandSymbol.
	#toggleStatusIcons == selector 
		ifTrue: 
			[aCommandQuery
				isEnabled: true;
				isChecked: treePresenter view viewMode == #smallIcons.
			^true].
	#browseTrace == selector 
		ifTrue: 
			[aCommandQuery isEnabled: tracesPresenter selectionOrNil size = 1.
			^true].
	#browsePackages == selector 
		ifTrue: 
			[aCommandQuery isEnabled: treePresenter hasSelection.
			^true].
	#choosePackage == selector 
		ifTrue: 
			[aCommandQuery isEnabled: tracesPresenter hasSelection.
			^true].
	^super queryCommand: aCommandQuery!

queryMoveObjects: aCollection toPackage: aPackage 
	"Private - Move the array of packageable objects, anArray, to the specified package."

	| stream max sorted |
	stream := String writeStream.
	stream nextPutAll: 'Are you sure you would like to move '.
	aCollection size = 1 
		ifTrue: [stream nextPutAll: 'the following object']
		ifFalse: 
			[stream
				nextPutAll: 'these ';
				display: aCollection size;
				nextPutAll: ' objects'].
	stream
		nextPutAll: ' to the package ';
		print: aPackage name;
		nextPut: $?;
		cr.
	sorted := aCollection asSortedCollection: [:a :b | a displayString <= b displayString].
	max := 30.
	sorted 
		from: 1
		to: (aCollection size min: max)
		do: 
			[:each | 
			stream
				crtab;
				display: each].
	aCollection size > max 
		ifTrue: 
			[stream
				crtab;
				nextPutAll: '... and ';
				print: aCollection size - max;
				nextPutAll: ' other items ...'].
	stream
		cr;
		cr;
		nextPutAll: 'Press Yes to repackage the object(s), or No to abort the operation'.
	(MessageBox confirm: stream contents) ifFalse: [^self].
	aCollection do: [:each | each owningPackage: aPackage]!

selectedPair
	"Answer the currently selected depedendency node."

	^treePresenter selectionOrNil!

selectedPair: anAssociation 
	"Set the currently selected prerequisite package."

	anAssociation notNil 
		ifTrue: [treePresenter selection: anAssociation ifAbsent: []]
		ifFalse: [treePresenter resetSelection]!

toggleStatusIcons
	treePresenter view 
		viewMode: (treePresenter view viewMode == #noIcons ifTrue: [#smallIcons] ifFalse: [#noIcons])! !

!PackageDependencyPresenter categoriesForMethods!
browsePackages!commands!public! !
browseTrace!commands!public! !
buildChildNodes:for:!helpers!private! !
childrenFor:!helpers!private! !
choosePackage!helpers!private! !
clear!commands!public! !
createComponents!initializing!public! !
createSchematicWiring!initializing!public! !
dependencyModelWithRoots:!helpers!private! !
dependentPackage!accessing!private! !
initialize!initializing!private! !
onPackageSelected!event handling!private! !
onPrerequisitesReset!event handling!private! !
onPrerequisitesReset:!event handling!private! !
onViewClosed!event handling!public! !
onViewOpened!event handling!public! !
packageManager!constants!private! !
packages!accessing!public! !
packages:!accessing!public! !
prerequisitePackage!accessing!private! !
prerequisiteTraceFor:!event handling!private! !
queryCommand:!commands!private! !
queryMoveObjects:toPackage:!helpers!private! !
selectedPair!accessing!public! !
selectedPair:!accessing!public! !
toggleStatusIcons!commands!public! !
!

!PackageDependencyPresenter class methodsFor!

icon
	"Answers an Icon that can be used to represent this class"

	^Package icon!

resource_Default_view
	"Answer the literal data from which the 'Default view' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Default_view)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.ContainerView) 34 15 nil nil 34 2 8 1409482752 131073 416 nil 327686 ##(Smalltalk.Color) #default nil 519 nil nil nil 416 1180166 ##(Smalltalk.ProportionalLayout) 138 ##(Smalltalk.Dictionary) 34 3 721414 ##(Smalltalk.Association) 410 ##(Smalltalk.Splitter) 34 12 nil 416 34 2 8 1140850688 1 608 nil 496 nil 519 nil nil nil 1510470 1 ##(Smalltalk.DraggableViewInteractor) 608 nil 1 #left nil nil nil 328198 ##(Smalltalk.Point) 1 1 706 9 9 nil 720 nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[0 0 0 0 80 0 0 0 82 2 0 0 85 0 0 0] 193 640 8 '' 608 3 8 #() 706 193 193 nil 27 1 578 410 ##(Smalltalk.ListView) 34 45 nil 416 34 2 8 1140920393 1 1008 590662 2 ##(Smalltalk.ListModel) 138 144 8 #() nil 1310726 ##(Smalltalk.IdentitySearchPolicy) 496 nil 7 265030 4 ##(Smalltalk.Menu) nil true 34 2 984134 2 ##(Smalltalk.CommandMenuItem) 1 1180998 4 ##(Smalltalk.CommandDescription) #browseTrace 8 'Browse' 1 1 nil nil nil 1218 1 1250 #choosePackage 8 'Package...' 1 1 nil nil nil 8 '' nil 1 nil nil nil nil nil nil nil 1008 nil 8 1795768528 ##(Smalltalk.BasicListAbstract) nil 1049926 1 ##(Smalltalk.IconImageManager) nil nil nil 706 65 65 nil nil 138 144 34 3 920646 5 ##(Smalltalk.ListViewColumn) 8 'Owned' 507 #left ##(Smalltalk.BasicListAbstract) 787814 3 ##(Smalltalk.BlockClosure) 0 nil 1180966 ##(Smalltalk.CompiledExpression) 2 1 ##(Smalltalk.UndefinedObject) 8 'doIt' 8 '[:a :b | a displayString < b displayString]' 8 #[30 105 17 158 18 158 128 106] #displayString 1520 7 513 nil 459270 ##(Smalltalk.Message) #first 8 #() nil 1008 ##(Smalltalk.IconicListAbstract) 3 nil nil 1458 8 'Dependency' 337 #left ##(Smalltalk.BasicListAbstract) 1618 #<= 8 #() 1618 #last 1648 nil 1008 nil 1 nil nil 1458 8 'Prerequisite Object' 339 #left ##(Smalltalk.BasicListAbstract) 1506 0 nil 1538 2 1 ##(Smalltalk.UndefinedObject) 8 'doIt' 8 '[:a :b | a displayString < b displayString]' 8 #[30 105 17 158 18 158 128 106] #displayString 1776 7 513 nil 1506 0 nil 1538 1 83886081 ##(Smalltalk.UndefinedObject) 8 'doIt' 8 '[:a | a at: 2]' 8 #[29 105 17 64 148 106] 1856 7 257 nil nil 1008 ##(Smalltalk.IconicListAbstract) 1 nil nil #report 8 #() nil 131173 nil 1 nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil 754 138 144 34 2 818 #createWindow: 34 1 866 898 8 #[0 0 0 0 85 0 0 0 82 2 0 0 227 0 0 0] 193 1040 8 'Owned' 1008 818 #contextMenu: 34 1 1184 1008 3 8 #() 706 193 193 nil 35 524806 ##(Smalltalk.Fraction) 24567 10361 578 410 ##(Smalltalk.TreeView) 34 27 nil 416 34 2 8 1140916775 1 2208 590918 3 ##(Smalltalk.TreeModel) nil 1152 525062 ##(Smalltalk.TreeNode) nil nil nil 170 192 1120 496 nil 7 1170 nil true 34 2 1218 1 1250 #browsePackages 8 'Browse' 1 1 nil nil nil 1218 1 1250 #toggleStatusIcons 8 'Show Status Icons' 1 1 nil nil nil 8 '' nil 1 nil nil nil nil nil nil nil 2208 nil 8 1795466160 1506 0 nil 1538 3 1 ##(Smalltalk.UndefinedObject) 8 'doIt' 8 '[:a | a key name]' 8 #[31 105 17 158 159 106] #key #name 2512 7 257 nil 1506 0 nil 1538 7 1 1504 8 'doIt' 8 '[:each |  (each key hasCyclicPrerequisites or: [each key hasUncommittedPrerequisites]) not icon 
	imageIndex]' 8 #[35 105 226 0 159 119 58 112 226 0 160 161 162 163 106] #key #hasCyclicPrerequisites #hasUncommittedPrerequisites #not #icon #imageIndex 2592 7 257 nil 1392 nil nil nil nil nil 170 176 1120 nil #smallIcons 11 170 ##(Smalltalk.PluggableLookupTable) 1120 754 138 144 34 2 818 #createWindow: 34 1 866 898 8 #[0 0 0 0 0 0 0 0 82 2 0 0 80 0 0 0] 193 2240 8 '' 2208 818 #contextMenu: 34 1 2352 2208 3 8 #() 706 193 193 nil 27 2162 693 519 true 170 192 34 4 1008 8 'traces' 2208 8 'tree' nil 754 138 144 34 1 818 #createWindow: 34 1 866 898 8 #[255 14 0 0 10 0 0 0 81 17 0 0 237 0 0 0] 193 448 8 '' 416 1 34 3 2208 608 1008 706 193 193 nil 27 )! !

!PackageDependencyPresenter class categoriesForMethods!
icon!constants!public! !
resource_Default_view!public!resources-views! !
!

