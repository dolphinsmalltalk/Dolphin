| package |
package := Package name: 'Development System Tests'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{OS.Tests.VersionResourceTest}
	#{Tools.Tests}
	#{Tools.Tests.CreateSubclassDialogTest}
	#{Tools.Tests.ImageListViewTest}
	#{Tools.Tests.KeyedAspectTest}
	#{Tools.Tests.MenuPainterTest}
	#{Tools.Tests.MethodCategoryEnvironmentTest}
	#{Tools.Tests.MethodSearchTest}
	#{Tools.Tests.PackageEnvironmentTest}
	#{Tools.Tests.ParseContextTest}
	#{Tools.Tests.ProductReleaseTest}
	#{Tools.Tests.SmalltalkSystemTest}
	#{Tools.Tests.SmalltalkWorkspaceTest}
	#{Tools.Tests.SourceBrowserTest}
	#{Tools.Tests.STBDebuggerTest}
	#{Tools.Tests.STLDebuggerTest}
	#{Tools.Tests.StStyler}
	#{Tools.Tests.STxDebuggerTest}
).

package setMethodNames: #(
	#(#{External.Tests.INTEGERTest} #testPrintOnNull)
	#(#{External.Tests.INTEGERTest} #testPrintOnSigned)
	#(#{External.Tests.INTEGERTest} #testPrintOnUnsigned)
	#(#{Kernel.Tests.ParserErrorTest} #testInfoHardBreakpoint)
	#(#{Kernel.Tests.ParserErrorTest} #testInfoSupersendsOther)
	#(#{Kernel.Tests.ParserErrorTest} #testInfoUnreferencedArg)
	#(#{Kernel.Tests.ParserErrorTest} #testWarningUsesBooleanClass)
	#(#{Kernel.Tests.ParserErrorTest} #testWarnMsgUnimplemented)
	#(#{Kernel.Tests.ParserErrorTest} #testWarnUndefinedSelector)
	#(#{Kernel.Tests.ParserErrorTest} #testWarnUnimplementedAbstractMethod)
	#(#{UI.Scintilla.Tests.ScintillaViewTest} #testStyleRunsFromTo)
	#(#{UI.Tests.BorderLayoutTest} #testResourceBrowserPreview)
).

package setPrerequisites: #(
	'Development System'
	'..\..\Base\Dolphin'
	'..\..\Base\Dolphin Additional Sort Algorithms'
	'..\..\Base\Tests\Dolphin Base Tests'
	'..\..\MVP\Base\Dolphin Basic Geometry'
	'..\..\System\Filer\Dolphin Binary Filer'
	'..\..\MVP\Dialogs\Common\Dolphin Common Dialogs'
	'..\..\MVP\Dialogs\Common\Dolphin Common Font Dialog'
	'..\Community Edition\Dolphin Community Edition Tools'
	'..\..\MVP\Graphics\Dolphin GDI Graphics'
	'..\..\System\Filer\Dolphin Literal Filer (Old versions)'
	'..\..\System\Filer\Dolphin Literal Out Filer'
	'..\..\MVP\Base\Dolphin MVP Base'
	'..\..\MVP\Tests\Dolphin MVP Tests'
	'..\..\Installation Manager\Dolphin Products'
	'..\..\MVP\Presenters\Text\Dolphin Rich Text Presenter'
	'..\..\MVP\Views\Scintilla\Tests\Dolphin Scintilla View Tests'
	'..\..\System\Filer\Dolphin STx Filer Core'
	'..\..\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\..\MVP\Type Converters\Dolphin Type Converters'
	'..\..\MVP\Models\Value\Dolphin Value Models'
	'..\..\Lagoon\Lagoon Image Stripper'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Environments\RBEnvironments'
	'..\..\..\..\Contributions\Refactory\RBNamespaces'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Refactorings\RBRefactorings'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\SmallLint\RBSmallLint'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Tests\RBTests'
	'..\..\System\Compiler\Smalltalk Compiler'
	'..\..\System\Compiler\Tests\Smalltalk Compiler Tests'
	'..\..\System\Compiler\Smalltalk Parser'
	'..\..\..\..\Contributions\Camp Smalltalk\SUnit\SUnit'
	'..\..\..\..\Contributions\Camp Smalltalk\SUnit\SUnitPreload'
).

package!

"Class Definitions"!

Tools
	subclass: #'Tools.Tests'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{XProgramming.SUnit})
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.ParseNodeVisitor
	subclass: #'Tools.Tests.StStyler'
	instanceVariableNames: 'view arrayDepth'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Tests.DolphinTest
	subclass: #'Tools.Tests.CreateSubclassDialogTest'
	instanceVariableNames: 'subject'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Tests.DolphinTest
	subclass: #'Tools.Tests.KeyedAspectTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Tests.DolphinTest
	subclass: #'Tools.Tests.MenuPainterTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Tests.DolphinTest
	subclass: #'Tools.Tests.MethodSearchTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Tests.DolphinTest
	subclass: #'Tools.Tests.ParseContextTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Tests.DolphinTest
	subclass: #'Tools.Tests.ProductReleaseTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Tests.DolphinTest
	subclass: #'Tools.Tests.SmalltalkSystemTest'
	instanceVariableNames: 'devsys'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Tests.DolphinTest
	subclass: #'Tools.Tests.STxDebuggerTest'
	instanceVariableNames: ''
	classVariableNames: 'TestVar'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Tests.DolphinTest
	subclass: #'OS.Tests.VersionResourceTest'
	instanceVariableNames: 'updatePath sourceModule sourceSize sourceBytes'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.Tests.PresenterTest
	subclass: #'Tools.Tests.SmalltalkWorkspaceTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.Tests.PresenterTest
	subclass: #'Tools.Tests.SourceBrowserTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.Tests.ImageViewAbstractTest
	subclass: #'Tools.Tests.ImageListViewTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Tools.Tests.STxDebuggerTest
	subclass: #'Tools.Tests.STBDebuggerTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Tools.Tests.STxDebuggerTest
	subclass: #'Tools.Tests.STLDebuggerTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.Tests.BrowserEnvironmentTest
	subclass: #'Tools.Tests.MethodCategoryEnvironmentTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Refactory.Browser.Tests.BrowserEnvironmentTest
	subclass: #'Tools.Tests.PackageEnvironmentTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!External.Tests.INTEGERTest methodsFor!

testPrintOnNull
	| subject |
	subject := UInt32 new.
	self assert: subject printString equals: 'an UInt32(0)'!

testPrintOnSigned
	| subject |
	subject := Int32 fromInteger: 123.
	self assert: subject printString equals: 'an Int32(123)'!

testPrintOnUnsigned
	| subject |
	subject := UInt32 fromInteger: 123.
	self assert: subject printString equals: 'an UInt32(16r7B)'! !

!External.Tests.INTEGERTest categoriesForMethods!
testPrintOnNull!public!unit tests! !
testPrintOnSigned!public!unit tests! !
testPrintOnUnsigned!public!unit tests! !
!

!Kernel.Tests.ParserErrorTest methodsFor!

testInfoHardBreakpoint
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testInfoHardBreakpoint #testInfoHardBreakpointInBlock) do: 
			[:each | 
			self 
				parseMethodInfo: each
				rangeBlock: 
					[:source | 
					| start |
					start := source indexOfSubCollection: 'self halt'.
					start to: start + 8]
				code: CInfoHardBreakpoint]!

testInfoSupersendsOther
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testInfoSupersendsOther) do: 
			[:each | 
			self 
				parseMethodInfo: each
				rangeBlock: 
					[:source | 
					| start |
					start := source indexOfSubCollection: 'super'.
					start 
						to: (source 
								nextIndexOf: Character cr
								from: start
								to: source size) - 1]
				code: CInfoSupersendsOther]!

testInfoUnreferencedArg
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testInfoUnreferencedArgBlock #testInfoUnreferencedArgMethod: #testInfoUnreferencedArgOptimizedBlock) 
		do: 
			[:each | 
			self 
				parseMethodInfo: each
				rangeBlock: 
					[:source | 
					| start |
					start := source lastIndexOf: $a.
					start to: start]
				code: CInfoUnreferencedArg]!

testWarningUsesBooleanClass
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testWarningUsesTrue #testWarningUsesFalse) do: 
			[:each |
			self
				parseMethodWarning: each
				rangeBlock: 
					[:source |
					| start name |
					name := each asPhrase subStrings last.
					start := source indexOfSubCollection: name startingAt: each size + 1.
					start to: start + name size - 1]
				code: CWarnUsesBooleanClass]!

testWarnMsgUnimplemented
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testWarnMsgUnimplementedBySelf #testWarnMsgUnimplementedBySuper #testWarnMsgUnimplementedByConst #testWarnMsgUnimplementedByNil)
		do: 
			[:each |
			self
				parseMethodWarning: each
				rangeBlock: 
					[:source |
					| start name |
					name := each asPhrase subStrings last.
					start := source
								findString: name
								startingAt: each size + 1
								ignoreCase: true.
					start to: (source
								nextIndexOf: $.
								from: start
								to: source size) - 1]
				code: CWarnMsgUnimplemented]!

testWarnUndefinedSelector
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testWarnUndefinedSelector) do: 
			[:each |
			self
				parseMethodWarning: each
				rangeBlock: 
					[:source |
					| start |
					start := source indexOfSubCollection: 'self'.
					start to: (source
								nextIndexOf: $.
								from: start
								to: source size) - 1]
				code: CWarnUndefinedSelector]!

testWarnUnimplementedAbstractMethod
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testWarnUnimplementedAbstractMethod) do: 
			[:each |
			self
				parseMethodWarning: each
				rangeBlock: 
					[:source |
					| start msg |
					msg := 'self subclassResponsibility'.
					start := source indexOfSubCollection: msg.
					start to: start + msg size - 1]
				code: CWarnUnimplementedAbstractMethod]! !

!Kernel.Tests.ParserErrorTest categoriesForMethods!
testInfoHardBreakpoint!public!unit tests! !
testInfoSupersendsOther!public!unit tests! !
testInfoUnreferencedArg!public!unit tests! !
testWarningUsesBooleanClass!public!unit tests! !
testWarnMsgUnimplemented!public!unit tests! !
testWarnUndefinedSelector!public!unit tests! !
testWarnUnimplementedAbstractMethod!public!unit tests! !
!

!UI.Scintilla.Tests.ScintillaViewTest methodsFor!

testStyleRunsFromTo
	| tokens expected styler |
	presenter textStyles: Tools.SmalltalkWorkspace textStyles.
	presenter stylerClass: Tools.SmalltalkExpressionStyler.
	styler := Tools.Tests.StStyler new.
	#('' ' ' ' 	 ' ' a' 'a ' ' a ' ' a #a' 'a #a ' ' a #a ' ' a #a 1.2 '''' ''blah blah'' (') do: 
			[:text |
			presenter text: text.
			presenter restyleAll.
			tokens := (presenter styleRunsFrom: 1 to: presenter textLength) asArray.
			expected := (Scanner on: presenter text readStream) upToEnd
						collect: [:each | (styler styleNameFor: each) -> (text copyFrom: each start to: each stop)].
			self assert: tokens equals: expected]! !

!UI.Scintilla.Tests.ScintillaViewTest categoriesForMethods!
testStyleRunsFromTo!public!unit tests! !
!

!UI.Tests.BorderLayoutTest methodsFor!

testResourceBrowserPreview
	"#1758"

	| resourceId resourceView bmp toolbox resources |
	resourceId := ResourceIdentifier class: Tools.ResourceBrowser name: 'Default view'.
	resourceView := Tools.DesignDesktopView default loadViewResource: resourceId resource forEdit: false.
	bmp := resourceView notNil
				ifTrue: 
					[resourceView invalidateLayoutDeeply.
					Bitmap fromView: resourceView]
				ifFalse: [Error icon].
	toolbox := resourceView viewNamed: 'resourceToolbox'.
	resources := resourceView viewNamed: 'resources'.
	self assert: (resources viewNamed: 'resources') extent x equals: resources extent x.
	resourceView destroy! !

!UI.Tests.BorderLayoutTest categoriesForMethods!
testResourceBrowserPreview!public!unit tests! !
!

"End of package definition"!

