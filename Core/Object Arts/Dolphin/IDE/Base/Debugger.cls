"Filed out from Dolphin Smalltalk 7"!

SmalltalkToolShell subclass: #Debugger
	instanceVariableNames: 'process topFrame temp tempCount depth flags breakWhen stackPresenter sourcePresenter tempsPresenter inspectorPresenter breakAction suspendingList _method refactoringTool'
	classVariableNames: 'AnimateMask AnimatePause DefaultStackDepth DisassemblyMask EnableDynamicMenus MainMask RestartOnMethodSave ResumableMask RunMask ShowWalkbacks SkipTable StackDepthIncrement'
	poolDictionaries: 'CompilerFlags OpcodePool'
	classInstanceVariableNames: ''!
Debugger guid: (GUID fromString: '{87b4c6bd-026e-11d3-9fd7-00a0cc3e4a32}')!
Debugger addClassConstant: 'AnimateMask' value: 16r10!
Debugger addClassConstant: 'DisassemblyMask' value: 16r4!
Debugger addClassConstant: 'MainMask' value: 16r1!
Debugger addClassConstant: 'ResumableMask' value: 16r8!
Debugger addClassConstant: 'RunMask' value: 16r2!
Debugger addClassConstant: 'StackDepthIncrement' value: 16r64!
Debugger comment: 'Debugger is a <SmalltalkToolShell> that implements the standard debugging tool. The debugger is usually invoked from a walkback dialog by pressing the Debug button. Walkbacks are displayed in the development environment when a breakpoint (''self halt'') is encountered, or when an unhandled exception occurs. It is also possible to configure the system so that debuggers are opened automatically when breakpoints are encountered or errors occur (see the Debugger options in Dolphin Options), though this is not particularly recommended as it can make the system crash if the error or breakpoint is in some code that is itself used by the Debugger.

Dolphin''s Debugger does not simulate execution as in some Smalltalk''s, but instead uses the VM''s built-in debugging event generation to run the code and interrupt it at appropriate points. This results in more consistent and faster execution, although note that the debugger will recompile methods being stepped through to insert breakpoints and this may cause some peephole compiler optimisations to be lost.

The protocol <debugEventHandler> shows the messages sent (indirectly via Processor) by the VM when debug events occur such as breakpoints and single-steps. These debug events could quite easily be used for other purposes such as profiling tools. However note that this protocol is private, and may change in future versions. It is worth noting that single-step events are generated by hooking into the message dispatch mechanism in such a way that has no measurable effect on the speed of normal operation, and breakpoints are generated by inserting a breakpoint instruction rather than by performing conditional tests (i.e. the VM does not contain any code to support debugging which would slow down normal operation, and hence there is no separate debug/release build).

Dolphin serializes callback returns to maintain LIFO order on the machine stack even in the presence of multiple threads of execution (Smalltalk Processes) and thus it is quite feasible to debug into callbacks which route through external code such as parts of the OS, for example one can step into a SendMessage call and break in the Dolphin window procedure. One can also debug through COM method invocations, even back into Dolphin, and set breakpoints in COM method implementations that will be actioned even when the COM object is being hosted by an external client such as VB. However this is a Smalltalk debugger, and one cannot use it to debug into external code written in other languages.

Caution: Although modifying the Debugger can be fun it is quite easy to crash the system if a mistake is made. You should also note that if you develop your own custom view the use of a virtual ListView for the stack presenter is not recommended since the stack may change dynamically and become momentarily invalid at just the point that the control requests display details.

Instance Variables:
	process				<Process> being debugged.
	topFrame			<StackFrame> which is at the top of the debugger''s stack.
	temp				<Object> the contents of the currently selected instance variable.
	tempCount			<integer> count of temporaries in the currently selected stack frame.
	depth				<integer> count of stack frames currently listed.
	flags				<integer> flags controlling the debugger''s behaviour.
	breakWhen			<monadicValuable> used to determine the next execution should be interrupted.
	stackPresenter		<ListPresenter> used to display the stack frames.
	sourcePresenter		<SmalltalkWorkspace> holding the source/this assembly of the selected frame.
	tempsPresenter		<ListPresenter> holding the list of temporaries in the selected frame.
	inspectorPresenter	<SmalltalkWorkspace>  holding the value of the selected temporary variable.
	breakAction			<niladicValuable>. The second half of a composite action to be performed after an unwind.
	suspendingList		<Semaphore> on which debugged process was suspended when interrupted (or nil if none).
	_method			<CompiledCode>. Method associated with selected frame.
	refactoringTool		<MethodRefactoringTool>. Implements method refactorings (in DPRO only).

Class Variables:
	AnimateMask		<integer> bit-mask for testing/setting the animation flag
	AnimatePause		<integer> delay between steps when animating.
	DefaultStackDepth 	<integer> initial depth of the process stack display
	DisassemblyMask	<integer> bit-mask for testing/setting the disassembly view flag
	EnableDynamicMenus	<boolean> option controlling whether dynamic menus are build and displayed or not.
	MainMask			<integer> bit-mask for testing/setting the main Process flag
	RestartOnMethodSave	<boolean> option controlling whether saving a modified method restarts the frame
	ResumableMask		<integer> bit-mask for testing/setting the resumable Process flag
	RunMask 			<integer> bit-mask for testing/setting the running flag.
	ShowWalkbacks		<boolean> option controlling whether walkback dialogs are displayed or not
	SkipMethods		<LookupTable> of methods not to break in.
	StackDepthIncrement	<integer> number of frames by which to increase the depth of the stack on request.
	TerminateOnClose	<Symbol>. Option controlling action on closing debugger in respect of the debugged process.
	ArgumentClasses	<Set> of <Class>. Generic classes to be used in place of specific classes when naming auto-generated arguments for the Implement In command.
'!
!Debugger categoriesForClass!MVP-Presenters!MVP-Resources-IDE Tools! !
!Debugger methodsFor!

accept
	"Private - Saves the current method source, restarting the method frame if the system
	options so indicate."

	"Implementation Note: Because we don't employ a separate presenter for the inspector text
	pane, we need to test the focus to see how to act on the command."

	inspectorPresenter hasFocus 
		ifTrue: [self acceptVariableValue]
		ifFalse: [self accept: self class restartOnMethodSave methodSource: self source]!

accept: aBoolean methodSource: aString 
	"Private - Saves the current method source, optionally restarting the frame depending on the
	value of the <Boolean> argument.."

	| method originalSelection hadErrors devsys |
	originalSelection := sourcePresenter view selectionRange.
	method := self selectedMethod.
	hadErrors := false.
	devsys := self systemModel.
	
	[devsys 
		compile: aString
		in: method methodClass
		categories: nil
		package: nil
		extraFlags: Interactive] 
			on: devsys compilationWarningClass
			do: 
				[:cw | 
				cw
					toTrace;
					resume]
			on: Compiler errorClass
			do: 
				[:ce | 
				hadErrors 
					ifFalse: 
						[hadErrors := true.
						sourcePresenter
							text: aString;
							selectionRange: ce range].
				ce okCancel].
	hadErrors ifTrue: [^self].
	sourcePresenter view selectionRange: originalSelection.
	aBoolean ifTrue: [self restartMethod] ifFalse: [sourcePresenter isModified: false]!

acceptNoRestart
	"Private - Saves the current method source without restarting the frame (i.e. the debugged
	process becomes out of sync. with the current method)."

	self accept: false methodSource: self source!

acceptVariableValue
	"Private - Evaluate an expression in the inspectorPresenter and save the result as the new
	value of the selected variable in the temps list."

	"If there is no selection then the entire workspace is selected for consistency with saving
	method source. This also works rather better with word wrap too."

	| newValue |
	inspectorPresenter view hasSelection ifFalse: [inspectorPresenter view selectAll].

	"Evaluate the new value and keep a copy of the old value for undo purposes"
	newValue := inspectorPresenter evaluateItIfFail: [^self].
	self setSelectedVariableTo: newValue!

addToCommandRoute: route 
	"Update the <OrderedCollection>, path, with the receiver's contribution to the command path
	held by the <CommandPolicy>, route. Answer the next <Presenter> to visit.
	The receiver is guaranteed not to be on the command path already."

	"Implementation Note: We add our method refactoring tool to the command route, but only in
	DPRO"

	refactoringTool notNil ifTrue: [route appendTarget: refactoringTool].
	^super addToCommandRoute: route!

allFrames
	"Private - Include all stack frames in the call stack. There cannot possibly be any more
	than the size of the process."

	self depth: process size!

animatePause
	"Answer the number of milliseconds to pause between each step when animating the debugged
	process."

	^self class animatePause
!

beAnimated: aBoolean
	"Private - Set/reset the animation flag."

	flags := flags mask: AnimateMask set: aBoolean!

beBroken
	"Private - Set the break flag."

	flags := flags maskClear: RunMask.	"no longer running"
	Processor enableInterrupts.
	self mainView enable

	!

beDisassembled: aBoolean
	"Private - Set/reset the receiver's disassembly flag."

	flags := flags mask: DisassemblyMask set: aBoolean!

beRunning
	"Private - Put the debugger and process into debug run mode."

	process debugger: self.
	flags := flags maskSet: RunMask!

blockedRestartWarning: message 
	"Private - There seems to be a later callback from the outside world which needs to return
	before the debugged process can unwind an earlier callback. Refresh the display to show
	where it is blocked, and then warn the user, giving them the opportunity to bang out."

	| resp mb |
	topFrame := process topFrame.
	self populateStackModel.
	mb := MessageBox new.
	mb buttonStyle: #okCancel.
	mb caption: ('Restarting <1p>>><2s>...' expandMacrosWith: message receiver class name
				with: message selector).
	resp := mb 
				warning: 'The stack unwind required to restart this frame is currently blocked, probably due to a Debugger or dialog opened after this one.

To allow the restart to complete, you will need to find and close any such windows, in the meantime this debugger will be disabled.
Alternatively you can cancel this operation, which will stop this debugging session.'.
	resp == #cancel ifTrue: [process terminate]!

break: interruptFrame 
	"Private - Break the debugged process at the specified break, and refresh the receiver's
	display (unless updates are deferred, i.e. the debugger is performing a composite operation
	which is only partially completed)."

	self beBroken.
	self isInCompositeOp 
		ifTrue: 
			[topFrame := interruptFrame.
			"Complete the composite op, but not in the debugged process"
			breakAction postToMessageQueue.
			breakAction := nil]
		ifFalse: 
			["Update the display if not part way through a composite operation"
			(topFrame = interruptFrame and: [self frame index <= interruptFrame index]) 
				ifTrue: [self refreshFrame]
				ifFalse: 
					[topFrame := interruptFrame.
					self populateStackModel]].
	self suspend
	"N.B. There must be no further code after this point"!

breakFrame: aStackFrame 
	"Private - Set the frame on which to break."

	self makeDebugFrame: aStackFrame.
	self breakWhen: [:iFrame | iFrame index <= aStackFrame index]!

breakWhen: discriminator 
	"Private - Set the break decision test to the monadic valuable, discriminator. The argument
	to the valuable is the StackFrame interrupted by a soft-breakpoint. If the discriminator
	answers false, then execution will continue to the next soft-breakpoint."

	"Implementation Note: The discriminator should complete its operation as quickly as
	possible, because it is evaluated with async. events disabled, and because the debugger will
	run debugged processes at a snail like pace at times."

	breakWhen addLast: discriminator!

browseDefinitions
	"Private - Open a new method browser on the definitions of the of the currently selected
	stack frame's selector."

	self browseDefinitionsMatching: (MethodSearch newSelector: self selectedMethod selector)
		in: self searchEnvironment!

browseDefinitionsMatching: aMethodSearch in: aBrowserEnvironment 
	| definitions |
	definitions := OrderedCollection 
				with: (self systemModel definitionsMatching: aMethodSearch in: aBrowserEnvironment).
	self selectedMethod 
		ifNotNil: 
			[:method | 
			definitions add: (self systemModel definitionsMatching: aMethodSearch
						in: (aBrowserEnvironment forClassHierarchyOf: method methodClass))].
	self systemModel browseMethodsInEnvironments: definitions!

browseDefinitionsOfSelector: aSymbol in: aBrowserEnvironment 
	"Private - Opens a MethodBrowser on all the methods whose selectors match the specified
	<readableString> pattern in the scope of the specified <BrowserEnvironment>."

	self browseDefinitionsMatching: (MethodSearch newSelector: aSymbol) in: aBrowserEnvironment!

browseHierarchy
	"Private - Open a new class browser on the currently selected method or the system classes
	if there is no selection."

	"If we are attempting to browse a #doesNotUnderstand: method then we want to browse the
	original receiver's class since that's where we'll most likely want to implement the
	method."

	self selectedMethod selector = #doesNotUnderstand: 
		ifTrue: [self systemModel browseHierarchy: self frame receiver class]
		ifFalse: [self systemModel browseClassHierarchyOfMethod: self selectedMethod]!

browseIt
	"Open a default browser on the current method"

	tempsPresenter hasFocus ifTrue: [self browseVariableClass] ifFalse: [self browseHierarchy]!

browseMessages
	"Private - Browse the definitions of one of the messages sent within the method of the
	currently selected stack frame. Prompt for which message to actually browse."

	self model browseMessagesSentBy: self selectedMethod in: self searchEnvironment!

browseMethodInheritanceChain
	"Private - Open a method browser displaying the definitions of the currently selected stack
	frame's method's selector in its superclass chain."

	self model browseMethodHierarchyFrom: self selectedMethod!

browseReferences
	"Context-sensitive 'Browse References' command. In this case browse refs. to the 
	current selector."

	self browseReferencesMatching: (MethodSearch newSelector: self selectedMethod selector)
		in: self searchEnvironment!

browseReferencesMatching: aMethodSearch in: aBrowserEnvironment 
	| references |
	references := OrderedCollection 
				with: (self systemModel referencesMatching: aMethodSearch in: aBrowserEnvironment).
	self selectedMethod 
		ifNotNil: 
			[:method | 
			references add: (self systemModel referencesMatching: aMethodSearch
						in: (aBrowserEnvironment forClassHierarchyOf: method methodClass))].
	self systemModel browseMethodsInEnvironments: references!

browseReferencesToLiteral: anObject in: aBrowserEnvironment 
	"Private - Opens a MethodBrowser on all the methods that refer to aString from their literal frames
	(aString is normally a symbolic selector), within the scope of the specified
	<BrowserEnvironment>."

	self browseReferencesMatching: (MethodSearch newLiteral: anObject) in: aBrowserEnvironment!

browseSystem
	"Open a new system browser on the currently selected method or the system classes if there
	is no selection."

	"If we are attempting to browse a #doesNotUnderstand: method then we want to browse the
	original receiver's class since that's where we'll most likely want to implement the
	method."

	(self selectedMethod selector = #doesNotUnderstand: or: [self selectedMethod isExpression]) 
		ifTrue: [self model browseSystem: self frame receiver class]
		ifFalse: [self model browseSystemOnMethod: self selectedMethod]!

browseVariableClass
	temp browse!

buildParseTree
	^self selectedMethod 
		ifNotNil: 
			[:method | 
			method isExpression 
				ifTrue: [SmalltalkParser parseExpression: method getSource in: method methodClass]
				ifFalse: [SmalltalkParser parseExistingMethodNoError: method]]!

canImplementMessage
	"Private - Answer whether the receiver can implement a stub for the message associated with 
	the current stack frame."

	| frame selector method |
	frame := self frame.
	(frame isNil or: [(frame := frame homeFrame) isNil]) ifTrue: [^false].
	method := frame method.
	selector := method selector.
	^(selector == #doesNotUnderstand: and: [Compiler isValidSelector: frame arguments first selector]) 
		or: [(Compiler isValidSelector: selector) and: [method methodClass ~= frame receiver class]]!

canSaveMethod
	"Private - Answer whether the text of the method displayed in the receiver can be saved."

	^self hasEditableMethodSelected!

clearCachedMethodInfo
	_method := nil.
	sourcePresenter clearParseTree!

continue: aProcess with: anObject
	| frame |
	process debugger: nil.
	frame := aProcess suspendedFrame.
	self
		beBroken;
		caption: aProcess printString;
		process: aProcess topFrame: frame;
		return: anObject toFrame: frame!

createComponents
	"Create the presenters contained by the receiver"

	super createComponents.
	stackPresenter := self 
				add: ListPresenter new
				name: 'stack'
				helpId: 10882.
	tempsPresenter := self 
				add: ListPresenter new
				name: 'temps'
				helpId: 10883.
	inspectorPresenter := self 
				add: self workspaceClass new
				name: 'inspector'
				helpId: 10884.
	sourcePresenter := self 
				add: Smalltalk developmentSystem methodWorkspaceClass new yourself
				name: 'source'
				helpId: 10885.
	sourcePresenter areVariableTipsEnabled: true.
	refactoringTool := self systemModel newMethodRefactoringToolFor: self!

createSchematicWiring
	"Create the trigger wiring for the receiver"

	super createSchematicWiring.
	self 
		when: #closeRequested:
		send: #onCloseRequested:
		to: self.
	stackPresenter
		when: #selectionChanging:
			send: #onFrameSelectionChanging:
			to: self;
		when: #selectionChanged
			send: #onFrameSelected
			to: self;
		when: #actionPerformed
			send: #browseIt
			to: self.
	tempsPresenter
		when: #selectionChanged
			send: #onTempSelected
			to: self;
		when: #actionPerformed
			send: #inspectIt
			to: self.
	sourcePresenter 
		when: #expressionEvaluated:
		send: #onExpressionEvaluated:
		to: self.
	inspectorPresenter 
		when: #expressionEvaluated:
		send: #onExpressionEvaluated:
		to: self.
	(self model)
		when: #methodUpdated:
			send: #onMethodUpdated:
			to: self;
		when: #methodRemoved:
			send: #onMethodRemoved:
			to: self!

cursorIPRange
	"Private - Answer the IP range which includes the current cursor position in the source
	pane."

	| pos map i start end frame |
	frame := self frame.
	self makeDebugFrame: frame.	"first make sure it is a debug frame."
	pos := sourcePresenter view caretPosition.
	map := frame textMap.
	i := map findFirst: [:a | a value includes: pos].
	i == 0 
		ifTrue: 
			[pos < map first value first 
				ifTrue: 
					[start := 1.
					end := map first key]
				ifFalse: 
					[start := map last key.
					end := self selectedMethod byteCodes size]]
		ifFalse: 
			[start := (map at: i) key.
			end := i == map size ifTrue: [self selectedMethod byteCodes size] ifFalse: [(map at: i + 1) key]].
	^start to: end!

debugState: aString
	"Private - Set the subcaption for the debugger which displays something about the state of
	the debugger."

	self caption: process name printString, ' [', aString, ']'!

defaultHelpId
	^10881!

depth
	"Private - Answer the requested stack depth to be displayed by the receiver (the actual
	stack depth may be less if there are insufficient frames)."

	^depth!

depth: anInteger 
	"Private - Set the stack depth displayed by the receiver.

	Note the use of #selectionByIndex rather than #selection, this is because the identity
	relationship between the existing values frames and those present after populateStackModel
	may not hold."

	| selectionIndex |
	depth := anInteger.
	process isNil ifTrue: [^self].
	selectionIndex := stackPresenter view selectionByIndex.
	self populateStackModel.
	(selectionIndex between: 1 and: depth) 
		ifTrue: [stackPresenter view selectionByIndex: selectionIndex]!

displayFrame
	"Private - Update the receiver to reflect the selected stack frame."

	self frame isNil ifTrue: [^self].
	self displaySource.
	self updateTemporaries!

displaySource
	"Private - Refresh the receiver's source display to reflect a newly selected frame."

	| method text styler |
	sourcePresenter evaluationContext: self frame receiver.
	method := self selectedMethod.
	self isDisassembled 
		ifTrue: 
			[styler := Smalltalk developmentSystem disassemblyStylerClass.
			text := method disassembly]
		ifFalse: 
			[styler := method stylerClass.
			text := method getSource].
	sourcePresenter
		text: text;
		stylerClass: styler;
		isModified: false.
	self setSourceSelection!

displayTemp
	"Private - Inspect the selected temporary, anObject."

	inspectorPresenter text: (self class debugPrintStringFor: temp)

	"Rather than change the context to the temp, I think I prefer it to remain as the frame receiver.
	The temp can be accessed by name"
	"inspectorPresenter evaluationContext: temp."
	!

emitKeywordSignatureFor: aMessage in: aClass on: aPuttableStream 
	| argNames instVars |
	argNames := OrderedCollection new.
	instVars := aClass allInstVarNames.
	argNames addAll: instVars.
	aMessage selector keywords with: aMessage arguments
		do: 
			[:keyword :arg | 
			| x argName argNameStem |
			aPuttableStream
				nextPutAll: keyword;
				space.
			argName := argNameStem := self nameForArgument: arg.
			x := 1.
			[argNames includes: argName] whileTrue: [argName := argNameStem , (x := x + 1) displayString].
			argNames add: argName.
			aPuttableStream
				nextPutAll: argName;
				space].
	^argNames copyFrom: instVars size + 1!

findBlockHome: aBlockFrame 
	| home method |
	home := aBlockFrame homeFrame.
	home notNil ifTrue: [^home].
	"Its a block without an outer ref, so we don't really know where its home frame is. Best we
	can do is to assume it is the nearest frame for the same method."
	home := aBlockFrame sender.
	method := aBlockFrame method.
	[home isNil or: [home isBlockFrame not and: [home method == method]]] 
		whileFalse: [home := home sender].
	^home!

findHomeFrame: aStackFrame 
	^aStackFrame isBlockFrame ifTrue: [self findBlockHome: aStackFrame] ifFalse: [aStackFrame]!

frame
	"Private - Answer the currently selected stack frame."

	^stackPresenter selectionOrNil!

frameCalledFrom: frame
	"Private - Answer the frame called from the <StackFrame>, frame, which 
	must not be the top frame. This is done by a sequential search from the top frame."

	 | calledFrame nextFrame |
	nextFrame := topFrame.
	[	calledFrame := nextFrame.
		nextFrame := calledFrame sender.
		nextFrame = frame] whileFalse.
	^calledFrame!

frames
	"Private - Answer the list of stack frames"

	^stackPresenter list!

generateStubFor: aMessage inClass: aClass 
	^(self systemModel 
		compile: (self stubTextFor: aMessage inClass: aClass)
		in: aClass
		categories: #()
		package: nil
		extraFlags: 0) method 
		notNil!

hasEditableMethodSelected
	^(self isRunning or: [self isAnimating]) not 
		and: [self isDisassembled not and: [self hasMethodSelected]]!

hasEditableMethodsSelected
	^self hasEditableMethodSelected!

hasMethodSelected
	^self selectedMethod notNil and: [self selectedMethod isExpression not]!

initialize
	"Private - Initialize the receiver"

	super initialize.
	depth := DefaultStackDepth.
	flags := 0.
	breakWhen := OrderedCollection new!

inspectIt
	"Private - Open an inspector on the currently selected temporary."

	temp inspect!

inspectReferences
	"Private - Open a new Inspector on all the objects which references the currently selected temporary."

	| refs |
	refs := temp allReferences copyWithout: self.
	refs isEmpty 
		ifTrue: 
			[MessageBox 
				notify: ('There are no additional references to:<n><t><1p>' expandMacrosWith: tempsPresenter selection first)]
		ifFalse: [refs inspect]!

isAnimating
	"Private - Answer whether the receiver is in 'Animate' mode (i.e. repeatedly single-stepping
	through the debugged code)."

	^flags anyMask: AnimateMask!

isDisassembled
	"Private - Answer whether the receiver is in disassembly mode."

	^flags anyMask: DisassemblyMask
!

isFrameRestartable
	"Private - Answer whether the selected frame is restartable. Some methods, such as callback
	entry points, cannot be restarted at all, others not reliably."

	^self frame isRestartable!

isInCompositeOp
	"Private - Answer whether the receiver is performing a composite operation (if so then
	display updates should be deferred)."

	^breakAction notNil!

isMain: aBoolean
	"Private - Set the isMain flag."

	flags := flags mask: MainMask set: aBoolean!

isResumable
	"Private - Answer whether the process the receiver is debugging is resumable."

	^flags anyMask: ResumableMask
!

isRunning
	"Private - Answer whether the process the receiver is debugging is currently running."

	^flags anyMask: RunMask!

killProcess
	"Private - Kill the debugged process, if the user confirms that that is his wish."

	| mb |
	mb := MessageBox new.
	mb buttonStyle: #okCancel.
	^(mb warning: 'Process will be terminated without unwinding') == #ok 
		ifTrue: 
			["Killing process will not run the unwind blocks, so the debugger will not
			 get closed, we must therefore force that here."
			process
				debugger: nil;
				kill.
			self view close]!

mainView
	"Private - Answer the debuggers main composite view which contains all the views which
	display something about the current execution state."

	^self view viewNamed: 'main'!

makeDebugFrame: aStackFrame 
	"Private - Mutate the specified stack frame into a debug stack frame with a debug method and
	suitably modified IP."

	aStackFrame isNil 
		ifFalse: 
			[aStackFrame makeDebug.
			_method := nil]!

markMethodAsUnbound: oldMethod
	| list selector methodClass |
	self isRunning ifTrue: [^self].
	list := stackPresenter model.
	selector := oldMethod selector.
	methodClass := oldMethod methodClass.
	list keysAndValuesDo: 
			[:eachIndex :eachFrame | 
			| eachMethod |
			eachMethod := eachFrame method.
			(eachMethod selector == selector and: [eachMethod methodClass == methodClass]) 
				ifTrue: [list refreshAtIndex: eachIndex]]!

moreFrames
	"Private - Increase the number of stack frames displayed in the call stack."

	self depth: depth + StackDepthIncrement!

nameForArgument: anObject 
	^self systemModel nameForArgument: anObject!

nilVariable
	"Private - Nil the currently selected variable or stack slot."

	self setSelectedVariableTo: nil!

onAboutToDisplayMenu: aMenu 
	"The system is about to display the <Menu>, popup, this is our chance
	to fiddle with it."

	super onAboutToDisplayMenu: aMenu.
	self class enableDynamicMenus ifFalse: [^self].
	aMenu name == #implementDNUMenu 
		ifTrue: 
			[self populateImplementMenu: aMenu.
			^self].
	"Otherwise pass on to the dev. system model to populate message menus"
	self model 
		populateMessagesMenus: aMenu
		fromMethods: (Array with: self selectedMethod)
		environment: self searchEnvironment!

onBreak: pFrame
	"Private - A break interrupt has been intercepted, take control once more. The argument is
	the process frame address. N.B. This method is entered with async events disabled, and it is
	important not to attempt anything which will cause a callback with interrupts disabled."

	| interruptFrame |
	process size.
	interruptFrame := process frameAtAddress: pFrame.
	[breakWhen isEmpty] whileFalse: 
			[(breakWhen last value: interruptFrame)
				ifTrue: [breakWhen removeLast]
				ifFalse: [^Processor enableInterrupts]	"re-enable further debug events"].
	(((self skipMaskFor: interruptFrame method) allMask: 1) and: [self isInCompositeOp not])
		ifTrue: 
			["Step through..."
			self assert: [interruptFrame method isDebugMethod].
			^process
				step;
				suspend].
	"We can now safely update the windows (with interrupts re-enabled)"
	self break: interruptFrame
	"N.B. There must be no further code after this point"!

onCloseRequested: boolValueHolder 
	"Private - A request to close the view onto this presenter has occurred. The close will
	proceed unless we set the value holder argument to false. The debugged process will be
	terminated depending on the setting of the user response."

	| response |
	boolValueHolder value: self promptToSaveChanges.
	(boolValueHolder value not or: [process isNil]) ifTrue: [^self].
	process debugger == self ifFalse: [^self].
	response := self terminateOnClose.
	response == #yes 
		ifTrue: [process terminate]
		ifFalse: 
			[response == #no 
				ifTrue: 
					[Transcript
						display: 'Detaching from debugged process ';
						print: process;
						cr.
					self resumeProcess]
				ifFalse: [boolValueHolder value: false]]!

onExpressionEvaluated: result
	"Private - An expression has been evaluated in one of the receiver's workspace panes. Copy
	back the values from the workspace variable pool into same named temporaries in case they
	have been assigned."

	| frame pool |
	frame := self frame.
	pool := inspectorPresenter workspacePool.
	frame temps
		do: [:each | (frame getOuter: (each at: 2)) at: (each at: 3) put: (pool lookup: each first)]!

onFrameSelected
	"Private - The selected stack frame/method has changed. Refresh the other models
	appropriately"

	| frame |
	self clearCachedMethodInfo.
	frame := self frame.
	frame notNil 
		ifTrue: [self displayFrame]
		ifFalse: 
			[sourcePresenter clear.
			tempsPresenter clear]!

onFrameSelectionChanging: aSelectionChangingEvent
	self onPromptToSaveChanges: aSelectionChangingEvent!

onHalt: aStackFrame 
	"Private - A hard coded breakpoint has been hit in the process being debugged by the
	receiver, so take control. The argument is the stack frame containing the halt."

	self assert: [aStackFrame process == process].
	self beBroken.
	self beAnimated: false.
	self debugState: 'Hard breakpoint'.
	topFrame := aStackFrame.
	self populateStackModel.
	process debugger: self.
	self suspendProcess!

onMethodRemoved: aCompiledMethod 
	self markMethodAsUnbound: aCompiledMethod!

onMethodUpdated: aCompilationResult 
	"Private - The development system has updated or removed a <CompiledMethod>. Refresh any
	relevant stack frames to indicate that they are now unbound if they use the old method."

	| oldMethod |
	oldMethod := aCompilationResult oldMethod.
	self markMethodAsUnbound: oldMethod!

onPromptToSaveChanges: aSelectionChangingEvent
	^sourcePresenter prompt: 'source' toSaveChanges: aSelectionChangingEvent!

onStep: pFrame 
	"Private - A step interrupt has been intercepted, take control once more. The argument is
	the process frame 'address'. This event will only occur after the the activation of a new
	method or block. Most 'step's actually result in a break interrupt when the next soft
	breakpoint is hit. N.B. This method is entered with async events disabled."

	"Implementation Note: There are a sequence of early out tests we perform to avoid breaking
	to early, or in the wrong place:
		-	the debugger is already at a breakpoint (i.e. the interrupt arrived after a hard break)
		-	an attempt is being made to step into a method which may, for example, cause
			a deadlock by hogging a global critical section, or which is configured to be
			skipped for some other reason.
		-	the stepped into frame has been interrupted before any instructions are run (i.e
			it is not a debug frame), so we want to continue to run to the first breakpoint."

	| interruptFrame method skipMask |
	self assert: [Processor activeProcess == process].
	self isRunning ifFalse: [^Processor enableInterrupts].	"already broken"
	process size.
	interruptFrame := process frameAtAddress: pFrame.
	method := interruptFrame method.
	"Transcript
		display: 'onStep in ';
		display: interruptFrame;
		display: ' breakAction = ';
		print: breakAction;
		display: ' breakWhen = ';
		print: breakWhen;
		cr."
	skipMask := self skipMaskFor: method.
	(skipMask allMask: 2) 
		ifTrue: 
			["Step over the method (break on return)"
			"Transcript
				display: breakWhen size + 1;
				display: ': Skip over';
				display: method;
				display: ' when frame index < ';
				display: interruptFrame index;
				cr."
			self breakWhen: [:iFrame | iFrame index < interruptFrame index].
			^Processor enableInterrupts].
	(skipMask allMask: 1) 
		ifTrue: 
			["Step through the method - do not break in this method, but do break in any it calls"
			"Transcript
				display: 'Skip through ';
				display: method;
				display: ' break when frame index ~= ';
				print: interruptFrame index;
				cr."
			method isDebugMethod ifFalse: [self makeDebugFrame: interruptFrame].
			^process
				step;
				suspend].
	"If not currently a debug frame, ..."
	method isDebugMethod 
		ifFalse: 
			["... have just stepped into a new method. Continue to the first breakpoint, or whenever supposed to stop"
			self makeDebugFrame: interruptFrame.
			^Processor enableInterrupts].
	"If stopped on first instruction of evaluated block, then continue to first breakpoint"
	(interruptFrame isBlockFrame and: [interruptFrame ip = interruptFrame block initialIP]) 
		ifTrue: 
			[self assert: [method isDebugMethod].
			^Processor enableInterrupts].
	self break: interruptFrame
	"N.B. There must be no further code after this point"!

onTempSelected
	"Private - A selection has been made in the temporaries list, update the inspector model."

	(temp := tempsPresenter selectionOrNil) isNil 
		ifFalse: 
			[temp := temp second.
			self displayTemp.
			inspectorPresenter view enable]
		ifTrue: 
			[(inspectorPresenter view)
				clear;
				disable]!

onTerminate
	"Private - The debugged process is about to terminate, so if this is the receiver's process,
	close the receiver."

	process debugger: nil.
	self view close!

onViewClosed
	"Private - Sent by the receiver's view when it has been closed. Disconnect from any events
	triggered by the devlopment system"

	super onViewClosed.
	self model removeEventsTriggeredFor: self!

onWalkback: titleString topFrame: aStackFrame resumable: aBoolean 
	"Private - Bring up a walkback window on the receiver with the specified title and with
	aStackFrame as the top frame of the stack trace."

	self beBroken.
	self beAnimated: false.
	self caption: titleString.
	topFrame := aStackFrame.
	self populateStackModel.
	self resumable: aBoolean.
	self assert: [process debugger == self].
	self suspendProcess!

parseContext
	^self selectedMethod ifNotNil: [:method | method methodClass]!

parseTree
	^sourcePresenter parseTree!

performMethodsRefactoring: aMonadicValuable name: aString 
	self promptToSaveChanges ifFalse: [^self].
	^sourcePresenter executeRefactoring: aMonadicValuable with: self selectedMethods!

populateImplementMenu: aMenu 
	"Private - Build the menu which lists the classes into which a stub can be generated for
	messages which were either not understood, or not implemented directly by the receiver's
	class. The receiver's class is the first, default, item on the menu, and is separated from
	the superclasses that also don't implement the message (if any) by a divider."

	| frame method selector superclasses receiver msg class current |
	frame := self frame homeFrame.
	method := frame method.
	selector := method selector.
	msg := selector == #doesNotUnderstand: 
				ifTrue: [frame arguments first]
				ifFalse: 
					[self assert: [method methodClass ~= frame receiver class].
					Message selector: selector arguments: frame arguments].
	receiver := frame receiver.
	class := receiver class.
	aMenu clear.
	aMenu addCommand: (MessageSend 
				receiver: self
				selector: #restartWithStubFor:inClass:
				arguments: (Array with: msg with: receiver class))
		description: class name.
	superclasses := OrderedCollection new.
	
	[current := class superclass.
	class := current.
	current notNil 
		and: [selector == #doesNotUnderstand: or: [(current includesSelector: selector) not]]] 
			whileTrue: [superclasses addLast: current].
	superclasses notEmpty 
		ifTrue: 
			[aMenu addSeparator.
			superclasses do: 
					[:each | 
					| cmd |
					cmd := MessageSend 
								receiver: self
								selector: #restartWithStubFor:inClass:
								arguments: (Array with: msg with: each).
					aMenu addCommand: cmd description: each name]].
	aMenu setDefault: 1!

populateStackModel
	"Private - Create and set the stack model list from the first 'depth' frames below the
	current topFrame of the current process."

	"Suppress selection reset event caused by refreshing the list"

	stackPresenter noEventsDo: [stackPresenter list: (topFrame getFrames: depth)].
	stackPresenter selectionOrNil: topFrame!

prevIPOfFrame: aStackFrame 
	"Private - Answer the IP of the instruction before that at which the IP of the <StackFrame>,
	frame, is currently pointing."

	^aStackFrame method byteCodeDispatcher prevIP: aStackFrame ip!

process: aProcess topFrame: aStackFrame 
	"Private - Sets the process being debugged and the top stack frame (of interest). The stack
	frame list is populated."

	topFrame := aStackFrame.
	self isMain: aProcess isMain.
	process := aProcess.
	process debugger: self.
	self populateStackModel.
	tempsPresenter selectionByIndex: 1 ifAbsent: []!

promptToSaveChanges
	"Private - Hook for prompting the user if the method text has been modified."

	^self onPromptToSaveChanges: (SelectionChangingEvent forSource: self)!

queryCommand: aCommandQuery 
	"Private - Enter details about a potential command for the receiver into the 
	<CommandQuery>."

	| selector running runnable animating |
	selector := aCommandQuery commandSymbol.
	animating := self isAnimating.
	running := self isRunning or: [animating].
	runnable := running not and: [self isResumable].
	#nilVariable == selector 
		ifTrue: 
			[aCommandQuery isEnabled: tempsPresenter selectionByIndex > 1.
			^true].
	#accept == selector 
		ifTrue: 
			[inspectorPresenter hasFocus 
				ifTrue: [aCommandQuery isEnabled: tempsPresenter selectionByIndex > 1]
				ifFalse: [aCommandQuery isEnabled: self canSaveMethod].
			^true].
	#browseVariableClass == selector 
		ifTrue: 
			[aCommandQuery isEnabled: tempsPresenter selectionByIndex > 0.
			^true].
	selector == #userBreak 
		ifTrue: 
			[aCommandQuery isEnabled: (running and: [animating not]).
			^true].
	(#(#resumeProcess #runProcess) identityIncludes: selector) 
		ifTrue: 
			[aCommandQuery isEnabled: runnable.
			^true].
	selector == #toggleDisassembly 
		ifTrue: 
			[aCommandQuery
				isEnabled: true;
				isChecked: self isDisassembled.
			^true].
	selector == #toggleAnimation 
		ifTrue: 
			[aCommandQuery
				isEnabled: (runnable or: [animating]);
				isChecked: animating.
			^true].
	(#(#moreFrames #allFrames) identityIncludes: selector) 
		ifTrue: 
			[aCommandQuery isEnabled: (running not and: [self depth <= self frames size]).
			^true].
	#showNextStatement == selector 
		ifTrue: 
			[aCommandQuery isEnabled: running not.
			^true].
	#terminateProcess == selector 
		ifTrue: 
			[aCommandQuery isEnabled: process isTerminated not.
			^true].
	(#(#definitionsMenu #referencesMenu) identityIncludes: selector) 
		ifTrue: 
			[aCommandQuery isEnabled: true.
			^true].
	^(self queryFrameCommand: aCommandQuery) or: [super queryCommand: aCommandQuery]!

queryFrameCommand: aCommandQuery 
	"Private - All of these commands required that a stack frame be selected"
	| selector running runnable animating frame |
	frame := self frame.
	selector := aCommandQuery commandSymbol.
	animating := self isAnimating.
	running := self isRunning or: [animating].
	runnable := running not and: [self isResumable].
	"Note that the implement menu is not just for DNUs any more, but any message which is not directly
	 implemented by its receiver."
	selector == #implementDNUMenu 
		ifTrue: 
			[aCommandQuery 
				isEnabled: (running not and: [self class enableDynamicMenus and: [self canImplementMessage]]).
			^true].
	#browseMethodInheritanceChain == selector 
		ifTrue: 
			[aCommandQuery 
				isEnabled: (self selectedMethod ifNil: [false] ifNotNil: [:method | method isOverride]).
			^true].
	#messagesMenu == selector 
			ifTrue: 
				[aCommandQuery isEnabled: (self class enableDynamicMenus and: [self selectedMethod notNil]).
				^true].
	(#(#stepOver #stepOut) identityIncludes: selector) 
		ifTrue: 
			[aCommandQuery isEnabled: (runnable and: [frame notNil]).
			^true].
	selector == #returnFromMessage 
		ifTrue: 
			[aCommandQuery isEnabled: (running not and: [frame notNil and: [frame sender notNil]]).
			^true].
	selector == #restartFrame 
		ifTrue: 
			[aCommandQuery isEnabled: (running not and: [frame notNil and: [frame isRestartable]]).
			^true].
	selector == #stepInto 
		ifTrue: 
			["Can only step-into in the top stack frame"
			aCommandQuery isEnabled: (runnable and: [frame = topFrame]).
			^true].
	selector == #runToCursor 
		ifTrue: 
			["Can run to cursor if not in disassembly view"
			aCommandQuery isEnabled: (runnable and: [frame notNil and: [self isDisassembled not]]).
			^true].
	selector == #acceptNoRestart 
		ifTrue: 
			[aCommandQuery isEnabled: self canSaveMethod.
			^true].
	^false!

refreshFrame
	"Private - Update the receiver's display of the existing frame."

	self clearCachedMethodInfo.
	self isDisassembled ifTrue: [self displaySource] ifFalse: [self setSourceSelection].
	self updateTemporaries!

restartBlock: aBlockClosure inFrame: aStackFrame 
	"Private - Restart the block frame argument, which is now atop the stack, so that it is
	broken on its first breakpoint."

	| sp bp tempStart envTemps |
	aStackFrame ip: aBlockClosure initialIP.
	"Reset the blocks SP so that any extraneous crud is removed when we return to it. Note that
	we must account for the blocks arguments and stack temps. We want to leave the sp pointing
	at the last entry in the frame (i..e the desired Top of Stack)"
	bp := aStackFrame bp.
	sp := bp + aBlockClosure localCount + aStackFrame frameSize - 1.
	aStackFrame sp: sp.
	"Nil out the stack temps"
	tempStart := bp + aBlockClosure argumentCount + aBlockClosure size.
	tempStart to: tempStart + aBlockClosure stackTempCount - 1 do: [:i | process at: i put: nil].
	"And the environment temps, if any"
	envTemps := aBlockClosure envTempCount.
	envTemps > 0 
		ifTrue: 
			[| context |
			context := aStackFrame outer.
			1 to: envTemps do: [:i | context at: i put: nil]].
	"Step to the first breakpoint in the block as otherwise user will need to do a redundant
	step operation"
	self breakWhen: [:iFrame | true].
	self stepInFrame: aStackFrame!

restartBlockFrame: aStackFrame 
	"Private - Unwind to the <BlockFrame>, frame, of the debugged process and reset 
	to the block's initial IP so that the block starts executing from its beginning again.
	Note that temporaries in the block may have previously set values."

	"Implementation Note: This is somewhat easier that restarting a method, since blocks
	are designed to be restarted easily, and because we can't restart a modified block anyway
	(we have to restart the block's home method)."

	| method block |
	block := aStackFrame block.
	method := block method.
	(method isUnbound and: [method isExpression not]) 
		ifTrue: 
			[| home prompt |
			home := self findBlockHome: aStackFrame.
			prompt := 'The home method of the block would appear to have been modified'.
			(home notNil and: [home isRestartable]) 
				ifTrue: 
					[(MessageBox confirm: prompt , '.

Would you like to restart the entire method instead?'
						caption: 'Restarting a block in ' , method displayString , ' ...') 
							ifTrue: [^self restartMethodFrame: home]]
				ifFalse: [MessageBox notify: prompt , ', but is not restartable.']].
	aStackFrame makeDebug.
	aStackFrame = topFrame 
		ifTrue: [self restartBlock: block inFrame: aStackFrame]
		ifFalse: 
			["We need to unwind any frames above the selected one"

			| calledFrame priority |
			calledFrame := self frameCalledFrom: aStackFrame.
			self breakWhen: [:iFrame | iFrame index <= calledFrame index].
			priority := process priority.
			breakAction := 
					[process priority: priority.
					self restartBlock: block inFrame: aStackFrame.
					self populateStackModel].
			process
				priority: Processor highIOPriority;
				interruptWith: [calledFrame return: nil]]!

restartFrame
	"Private - Unwind the currently selected frame and reset the IP so that the method starts
	executing from its beginning again."

	self restartFrameWithFocus: false!

restartFrame: frame 
	"Private - Unwind the <StackFrame>, frame, of the debugged process and reset the IP so that
	the method starts executing from its beginning again."

	self debugState: 'Restart ' , frame displayString.
	self resumable: true.	"override any non-resumable error"
	frame isBlockFrame ifTrue: [self restartBlockFrame: frame] ifFalse: [self restartMethodFrame: frame]!

restartFrameWithFocus: aBoolean 
	| frame |
	frame := self frame.
	"Restart requiring an unwind may be blocked by another debugger, so disable view until
	completed"
	self mainView disable.
	"We must allow the command msg to return before processing the restart as otherwise the
	debugged process may get blocked when attempting to unwind an earlier callback"
	
	[self restartFrame: frame.
	aBoolean ifTrue: [sourcePresenter setFocus]] postToMessageQueue!

restartMethod
	| home |
	home := self findHomeFrame: self frame.
	(home notNil and: [home isRestartable]) ifTrue: [self restartMethodFrame: home]!

restartMethodFrame: frame 
	"Private - Unwind the <StackFrame>, frame, of the debugged process and resend the message
	which caused the method to be activated, breaking at the start of the method."

	"Implementation Note: Generally this is fairly simple - we just save the receiver and args,
	unwind the stack back to the sender (i.e. one below selected frame), wind back the sender's
	ip so that the next thing it does will be a debug break immediately before the pertinent
	send, push the receiver and args back on the stack, and then step into the method again.
	Complications arise where the restarted frame resulted from a special control primitive such
	as #perform:, since we then need to redo the perform which requires that we push the
	selector and possibly that we push the arguments as an array (in the case of
	#perform:withArguments:)."

	| sender args receiver ip interp sent received argArray isPerform priority |
	self assert: [frame isRestartable].
	self debugState: 'Restart ' , frame displayString.
	self resumable: true.	"override any non-resumable error"

	"Save the receiver and arguments as we'll need to re-push these for the resend"
	args := frame arguments.
	receiver := frame receiver.
	received := frame method selector.
	sender := frame sender.
	self makeDebugFrame: sender.

	"Locate the actual message send instruction"
	interp := sender method byteCodeDispatcher.
	ip := sender ip.
	
	[ip := interp prevIP: ip.
	interp ip: ip.
	"Interpret the instruction to find the actual selector sent (might be #perform:, etc)"
	(sent := interp peekForSelector) isNil] 
			whileTrue.

	"Was it a special message, like #perform, which adjusts the stack in some way?"
	argArray := isPerform := false.
	"To avoid penalizing ordinary selectors starting with #perform:, etc, we don't do anything special unless the selector
	 executed was different from that sent."
	sent ~~ received 
		ifTrue: 
			[(sent beginsWith: #perform:) 
				ifTrue: 
					["One of the #perform: family of methods..., so need to push the selector to be performed"
					isPerform := true.
					sent == #perform:withArgumentsAt:descriptor: ifTrue: [^Sound warningBeep].
					argArray := sent == #perform:withArguments:.
					received == #doesNotUnderstand: 
						ifTrue: 
							[| msg |
							msg := args first.
							received := msg selector.
							args := msg arguments]]
				ifFalse: 
					[received == #doesNotUnderstand: 
						ifTrue: 
							["self assert: [sent == args first selector]."
							args := args first arguments]
						ifFalse: 
							[sent == #value:withArguments: 
								ifTrue: 
									[args := (Array new: 2)
												at: 1 put: receiver;
												at: 2 put: args;
												yourself.
									receiver := frame method]
								ifFalse: 
									["Some other control message which we haven't catered for yet (please report)"
									self mainView enable.
									^self 
										error: 'Sorry, it is not currently possible to restart this frame. Please report to Dolphin support']]]].

	"After this point we start to modify the process state, and so there is no going back..."

	"Note: Deduct 1 to get back to the soft breakpoint which always immediately precedes a message send"
	sender ip: ip - 1.
	self assert: [(sender method byteCodes at: sender ip) == 0].
	priority := process priority.

	"Set the action to be performed on next break to be the operations needed to resend"
	breakAction := 
			[| sp |
			process priority: priority.
			"Push back the receiver and args (note that this may corrupt the frames above, so they must be  removed)"
			sp := sender sp.
			process at: sp put: receiver.

			"If a perform then we need to push the actual selector"
			isPerform ifTrue: [process at: (sp := sp + 1) put: received].

			"Push the arguments to the previously sent selector, either individually or as an array (e.g. for 
			 #perform:withArguments:)"
			argArray 
				ifTrue: [process at: (sp := sp + 1) put: args]
				ifFalse: [args do: [:arg | process at: (sp := sp + 1) put: arg]].
			sender sp: sp.

			"Now resize the proc to remove any extraneous crud and set up the suspended frame to be the sender"
			process
				resize: sp;
				suspendedFrame: sender.

"Transcript display: 'Stepping in frame '; display: sender; cr."
			"And step back into the method again"
			self breakWhen: [:iFrame | true].
			self stepInFrame: sender].

	"Unwind any frames above and including the selected one - running the breakAction when
	finished. Note that we temporarily boost the priority of the process to ensure it runs."
	process priority: Processor highIOPriority.
	self return: nil fromFrame: frame.
	process isWaiting ifFalse: [^self].
	"The unwind appears to be blocked, give it a little more time..."
	Processor sleep: 100.
	process isWaiting 
		ifTrue: 
			[self blockedRestartWarning: (MessageSend 
						receiver: receiver
						selector: sent
						arguments: args)]!

restartWithStubFor: aMessage inClass: aClass 
	"Private - Generate a simple stub implementation for the specified <Message> in the
	specified class, and restart the frame."

	(self generateStubFor: aMessage inClass: aClass) ifTrue: [self restartFrameWithFocus: true]!

resumable: aBoolean
	"Private - Set the receiver's resumable flag."

	flags := flags mask: ResumableMask set: aBoolean!

resume
	"Private - Restart the debugged process from the point at which it was last suspended. This
	might involve being resuspended on a Semaphore."

	| list |
	list := suspendingList.
	suspendingList := nil.
	"isMain ifTrue: [ SessionManager inputState main: process ]."
	process resume: list!

resumeProcess
	"Private - Restart the debugged process from the point at which it was last suspended. This
	might involve being resuspended on a Semaphore."

	process debugger: nil.
	self view close ifFalse: [process debugger: self] ifTrue: [self resume]!

return: anObject fromFrame: aStackFrame 
	"Private - Return the specified value to the sender of the specified <StackFrame> (assumed
	to be in the process being debugged)."

	suspendingList := nil.
	self makeDebugFrame: aStackFrame sender.
	self breakWhen: [:iFrame | iFrame index < aStackFrame index].
	process interruptWith: [aStackFrame return: anObject]!

return: anObject toFrame: aStackFrame 
	"Private - Return the specified value to the specified <StackFrame> (assumed to be in the
	process being debugged)."

	suspendingList := nil.
	self makeDebugFrame: aStackFrame sender.
	self breakWhen: [:iFrame | iFrame index <= aStackFrame index].
	process interruptWith: [Processor returnValue: anObject toFrame: aStackFrame index]!

returnFromMessage
	"Private - Step out of the currently selected frame (i.e. return to its sender) answering a
	return value for which the user is prompted (may be any expression). Also resets the
	non-resumable flag allowing debugging to continue after a non-continuable error."

	| frame expression returnValue receiver loopCookie |
	frame := self frame.
	receiver := frame receiver.
	expression := String new.
	loopCookie := Object new.
	
	[(expression := Prompter 
				on: expression
				prompt: 'Please enter return value expression:'
				caption: 'Return from...') isNil 
		ifTrue: [^self].	"cancelled"
	returnValue := expression isEmpty 
				ifTrue: [receiver]
				ifFalse: 
					[| compilerClass |
					compilerClass := receiver basicClass compilerClass.
					
					[compilerClass 
						evaluate: expression
						for: receiver
						evaluationPools: inspectorPresenter allPools
						logged: false] 
							on: compilerClass errorClass
							do: 
								[:cn | 
								MessageBox errorMsg: cn errorMessage , String lineDelimiter , String lineDelimiter , 'Please try again.'
									caption: 'Error in expression...'.
								loopCookie]].
	returnValue == loopCookie] 
			whileTrue.
	self debugState: 'Return from...'.
	self resumable: true.	"override any non-resumable error"
	self return: returnValue fromFrame: frame!

runDebuggedProcess
	"Private - Run the debugged process to the next breakpoint or step interrupt."

	self promptToSaveChanges ifFalse: [^self].
	self beRunning.
	self resume!

runProcess
	"Private - Run the debugged process to the next breakpoint or step interrupt."

	self debugState: 'Run to Next Breakpoint'.
	self breakWhen: [:iFrame | false].
	self mainView disable.
	self runDebuggedProcess!

runToCursor
	"Private - Step to the last breakpoint immediately before the current caret position in the
	source pane."

	| ipInterval method frame |
	self debugState: 'Run to Cursor'.
	ipInterval := self cursorIPRange.
	frame := self frame.
	(self findHomeFrame: frame) ifNotNil: [:home | frame := home].
	method := frame method.
	"More useful to run to next frame with same method than same frame, as then works nicely
	with blocks (which we would otherwise not run into). This may however prevent running to
	cursor in a block further down the stack."
	self breakWhen: 
			[:iFrame | 
			iFrame index < frame index or: [iFrame method = method and: [ipInterval includes: iFrame ip]]].
	self mainView disable.
	self runDebuggedProcess!

saveNewMethod: aString 
	self accept: self class restartOnMethodSave methodSource: aString!

searchEnvironment
	^self systemModel systemEnvironment!

selectedMethod
	"Answer the method in the currently selected stack frame, or nil if none."

	_method isNil 
		ifTrue: [_method := self frame ifNotNil: [:frame | frame method]].
	^_method!

selectedMethods
	^self selectedMethod ifNil: [#()] ifNotNil: [:method | Array with: method]!

selectedNode
	"Private - Answer an <StProgramNode> to represent the syntactic element which is currently
	selected, or which the caret is over in the source pane."

	^sourcePresenter selectedNode!

selectionIP
	"Private - Answer the IP of the expression to select in the workspace. This will be the ip
	of the next instruction for the top frame (so that the code which is about to be executed is
	selected) and the ip of last executed instruction in frames below that."

	| frame ip prevIP |
	frame := self frame.
	ip := frame ip.
	(ip = 1 or: [self isDisassembled]) ifTrue: [^ip].
	prevIP := self prevIPOfFrame: frame.
	^(frame = topFrame and: [(frame method byteCodes at: prevIP) = Break]) 
		ifTrue: [ip]
		ifFalse: [prevIP]!

setInitialFocus
	"Received when the receiver's view is first opened; set focus to the source workspace."

	sourcePresenter setFocus!

setSelectedVariableTo: anObject 
	| index varName info |
	index := tempsPresenter selectionByIndex.
	info := tempsPresenter list at: index.
	info at: 2 put: anObject.
	temp := self variableAtIndex: index put: anObject.
	varName := info first trimBlanks.
	varName notEmpty ifTrue: [inspectorPresenter workspacePool at: varName put: anObject].
	tempsPresenter model refreshAtIndex: index.
	self displayTemp!

setSourceSelection
	"Private - Refresh the receiver's source selection to reflect the 'current' IP in the
	selected frame. Note that the range of source selected will depend on whether the top-most
	frame is selected, or an inactive frame down the stack. For the active frame the expression
	that will next be executed is selected. For an older frame the expression that is currently
	being executed (i.e. the message send that suspended the frame) is selected."

	| ip |
	ip := self selectionIP.
	ip isNil ifTrue: [^self].
	self isDisassembled 
		ifTrue: 
			["There are two lines of header text before the bytecode disassembly starts"
			sourcePresenter selectLine: (self selectedMethod indexOfIP: ip) + 2]
		ifFalse: 
			[sourcePresenter selectionRange: (self sourceRangeAt: ip inTextMap: self selectedMethod textMap)]!

setVariablesList: anOrderedCollection 
	"Private - Set the temporary variables list to an <OrderedCollection> of name-value pairs.
	Attempt to maintain any existing temporary selection by name, failing that select the first
	entry (self). If there is no selection, then maintain that state."

	| oldSelection newSelection |
	oldSelection := tempsPresenter selectionByIndex.
	newSelection := oldSelection > 1 
				ifTrue: 
					[| varName index |
					varName := (tempsPresenter list at: oldSelection) first.
					index := anOrderedCollection findFirst: [:each | each first = varName].
					index = 0 ifTrue: [1] ifFalse: [index]]
				ifFalse: [oldSelection].
	tempsPresenter list: anOrderedCollection.
	tempsPresenter selectionByIndex: newSelection!

showNextStatement
	self frame = topFrame 
		ifTrue: [self setSourceSelection]
		ifFalse: [stackPresenter selection: topFrame]!

skipMaskFor: aCompiledMethod
	^(SkipTable lookup: aCompiledMethod methodClass)
		ifNil: [0]
		ifNotNil: [:selectors | selectors at: aCompiledMethod selector ifAbsent: [0]]!

source
	^sourcePresenter source!

sourceRangeAt: anInteger inTextMap: aTextMap
	^(aTextMap lookup: (self frame findIP: anInteger inTextMap: aTextMap))
		ifNil: [1 to: 0]
		ifNotNil: [:entry | entry value]!

step
	"Private - Step into the next message send. This involves resuming for a single message send
	or until a breakpoint is hit."

	breakWhen removeAll.
	self stepInFrame: self frame!

stepInFrame: frame 
	"Private - Step into the next message send in the specified <StackFrame>. This involves
	resuming for a single message send or until a breakpoint is hit. Note that we don't actually
	step if the process was suspended while waiting on a Semaphore. Instead we just return to
	waiting on the Semaphore."

	self makeDebugFrame: frame.
	self makeDebugFrame: frame sender.
	self beRunning.
	suspendingList class == Semaphore 
		ifTrue: [self resume]
		ifFalse: 
			[suspendingList := nil.
			process step]!

stepInto
	"Private - Process a command to step into the next message send. This can only be done from the top
	stack frame."

	self debugState: 'Step Into'.
	self step!

stepOut
	"Private - Step out of the currently selected frame (i.e. return to its sender)."

	| frame |
	self debugState: 'Step Out'.
	frame := self frame.
	self makeDebugFrame: frame sender.
	self breakWhen: [:iFrame | iFrame index < frame index].		"break when returned from selected frame"
	self runDebuggedProcess!

stepOver
	"Private - Step to the next expression in the currently selected frame. Note that this
	should not stop on a breakpoint in any block homed lower in the stack."

	| frame |
	self beRunning.
	self debugState: 'Step over'.
	frame := self frame.
	self breakFrame: frame.
	self makeDebugFrame: frame sender.
	self resume!

stubTextFor: aMessage inClass: aClass 
	| source body |
	source := String writeStream: 128.
	body := '^Error notYetImplemented'.
	aMessage argumentCount == 0 
		ifTrue: 
			[source nextPutAll: aMessage selector.
			(aClass allInstVarNames includes: aMessage selector asString) 
				ifTrue: [body := '^<1s>' expandMacrosWith: aMessage selector]]
		ifFalse: 
			[aMessage argumentCount == 1 
				ifTrue: 
					[aMessage selector isInfix 
						ifTrue: 
							[source
								nextPutAll: aMessage selector;
								space;
								nextPutAll: (self nameForArgument: aMessage arguments first)]
						ifFalse: 
							[| name argNames |
							argNames := self 
										emitKeywordSignatureFor: aMessage
										in: aClass
										on: source.
							name := aMessage selector allButLast.
							(aClass allInstVarNames includes: name) 
								ifTrue: [body := '<1s> := <2s>' expandMacrosWith: name with: argNames first]]]
				ifFalse: 
					[self 
						emitKeywordSignatureFor: aMessage
						in: aClass
						on: source]].
	source
		crtab;
		nextPutAll: body.
	^source contents!

suspend
	"Private - Suspend the process being debugged following a debug event."

	self isAnimating
		ifTrue: [
			[KernelLibrary default sleep: self animatePause. self step] forkAt: Processor userSchedulingPriority.
			process suspend]
		ifFalse: [
			self debugState: 'break'.
			self suspendProcess]!

suspendProcess
	"Private - Suspend the process being debugged."

	"Record the process' suspending list before suspending it so that we can restore it later on
	resume"

	suspendingList := process suspendingList.
	process isTerminated ifFalse: [process suspendUnconditionally]
	"N.B. There must be no further code after this point or the receiver will end up stepping
	through it for ever."!

terminateOnClose
	"Private - Answer on of #yes, #no, or #cancel to indicate whether the debugged process will
	be terminated when the receiver is closed."

	| mb response |
	process isTerminated ifTrue: [^#yes	"Terminating a process which is already dead is benign"].
	mb := MessageBox new.
	mb isSuppressible: true.
	mb uniqueId: [self] method.
	mb defaultButton: 1.
	mb caption: 'Closing Debugger...'.
	mb 
		text: 'Do you wish to terminate the debugged process (recommended)?

N.B. If you suppress this dialog then in future the debugged process will ALWAYS be terminated, regardless of the choice you make now. Should you wish to detach from a debugged process and allow it to continue to run, then you can use the Debug/Go(Detach) command on the main menu. '.
	mb iconStyle: #prompt.
	mb buttonStyle: #yesNo.
	response := mb open.
	^response!

terminateProcess
	"Private - Terminate the debugged process. Note that terminating a process will close any
	attached debugger, so we don't need to do anything other than just request the process
	terminate."

	| mb |
	self beAnimated: false.
	mb := MessageBox new.
	mb
		isSuppressible: true;
		uniqueId: [self] method.
	^(mb confirm: 'Are you sure you want to terminate the process?') ifTrue: [process terminate]!

toggleAnimation
	"Private - Start/stop animating the debugged process. At the moment this is mainly a bit of
	fun, rather than anything of serious utility. It is also handy for stress testing the
	debugger."

	| newState |
	newState := self isAnimating not.
	self beAnimated: newState.
	newState ifFalse: [^self].
	self debugState: 'Animate'.
	self step!

toggleDisassembly
	"Private - Switch between source/disassembly modes."

	(Smalltalk includesKey: #Disassembler) 
		ifFalse: 
			[MessageBox warning: self selectedMethod disassembly.
			^self].
	self beDisassembled: self isDisassembled not.
	sourcePresenter
		isReadOnly: self isDisassembled;
		isAutoParseEnabled: (self isDisassembled not and: [sourcePresenter class isAutoParseEnabled]).
	self displayFrame!

updateTemporaries
	"Private - Refresh the receiver's temporaries list model."

	| temps pool frame varList receiver base extra class |
	frame := self frame.
	temps := frame temps.
	tempCount := temps size.
	receiver := frame receiver.
	extra := frame stackWorkspace.
	class := receiver basicClass.
	varList := OrderedCollection new: 1 + tempCount + class instSize + extra.
	varList addLast: (Array with: 'self' with: receiver).
	class allInstVarNames 
		keysAndValuesDo: [:i :each | varList addLast: (Array with: '   ' , each with: (receiver instVarAt: i))].

	"The evaluation context of the inspector becomes the frames receiver."
	inspectorPresenter evaluationContext: receiver.
	pool := inspectorPresenter
				newVariablePool;
				workspacePool.
	"Copy out the temporaries into the workspace variable pools so that they
	can be used in expressions in the source and inspector panes, and add them
	into the variables list."
	temps do: 
			[:each | 
			"The compiler temp map may contain entries for unused temps that are not allocated a slot in the frame - these have an index of 0"
			| i |
			i := each third.
			i > 0 
				ifTrue: 
					[| tempValue tempName |
					tempName := each first.
					tempValue := (frame getOuter: each second) at: i.
					pool at: tempName put: tempValue.
					varList addLast: (Array with: tempName with: tempValue)]].

	"Add any extra used stack slots onto the variables list"
	base := frame index + frame frameSize.
	0 to: extra - 1
		do: [:i | varList addLast: (Array with: '_stack' , i displayString with: (process at: base + i))].
	frame method evaluationPools 
		ifNotNil: 
			[:evalPools | 
			evalPools notEmpty 
				ifTrue: 
					[evalPools first isNil ifFalse: [pool addAll: evalPools first associations].
					inspectorPresenter 
						evaluationPools: (evalPools copyFrom: 2 to: evalPools size) , inspectorPresenter evaluationPools]].

	"Source presenter should share the same pools"
	sourcePresenter
		workspacePool: pool;
		evaluationPools: inspectorPresenter evaluationPools;
		evaluationContext: receiver.
	self setVariablesList: varList!

userBreak
	"Private - The user deliberately broke a process running in the debugger from the menu."

	self assert: [process ~~ Processor activeProcess].
	self beAnimated: false.
	self beBroken; suspend.
	topFrame := process topFrame.
	self populateStackModel
	
	!

variableAtIndex: anInteger put: anObject 
	"Private - Set the value of the temporary at the specified <integer> index in the temporaries
	list."

	| frame receiver tempsOffset index |
	anInteger < 2 ifTrue: [self errorSubscriptBounds: anInteger].
	index := anInteger - 1.
	frame := self frame.
	receiver := frame receiver.
	tempsOffset := receiver basicClass instSize.
	^index <= tempsOffset 
		ifTrue: [receiver instVarAt: index put: anObject]
		ifFalse: 
			[| offset |
			offset := index - tempsOffset.
			offset <= tempCount 
				ifTrue: [frame at: offset put: anObject]
				ifFalse: 
					["Stack working value selected"
					offset := frame sp - offset + tempCount + 1.
					"If on the topFrame, then break before message send not in it"
					frame = topFrame ifTrue: [offset := offset + 1].
					process at: offset put: anObject]]! !
!Debugger categoriesFor: #accept!commands!private! !
!Debugger categoriesFor: #accept:methodSource:!operations!private! !
!Debugger categoriesFor: #acceptNoRestart!commands!private! !
!Debugger categoriesFor: #acceptVariableValue!commands!private! !
!Debugger categoriesFor: #addToCommandRoute:!commands!public! !
!Debugger categoriesFor: #allFrames!commands!private! !
!Debugger categoriesFor: #animatePause!accessing!private! !
!Debugger categoriesFor: #beAnimated:!modes!private! !
!Debugger categoriesFor: #beBroken!modes!private! !
!Debugger categoriesFor: #beDisassembled:!private!testing! !
!Debugger categoriesFor: #beRunning!modes!private! !
!Debugger categoriesFor: #blockedRestartWarning:!operations!private! !
!Debugger categoriesFor: #break:!operations!private! !
!Debugger categoriesFor: #breakFrame:!commands!private! !
!Debugger categoriesFor: #breakWhen:!accessing!private! !
!Debugger categoriesFor: #browseDefinitions!commands!private! !
!Debugger categoriesFor: #browseDefinitionsMatching:in:!private! !
!Debugger categoriesFor: #browseDefinitionsOfSelector:in:!private! !
!Debugger categoriesFor: #browseHierarchy!commands!private! !
!Debugger categoriesFor: #browseIt!commands!public! !
!Debugger categoriesFor: #browseMessages!commands!private! !
!Debugger categoriesFor: #browseMethodInheritanceChain!commands!private! !
!Debugger categoriesFor: #browseReferences!browsing!commands!public! !
!Debugger categoriesFor: #browseReferencesMatching:in:!private! !
!Debugger categoriesFor: #browseReferencesToLiteral:in:!browsing!private! !
!Debugger categoriesFor: #browseSystem!commands!public! !
!Debugger categoriesFor: #browseVariableClass!commands!private! !
!Debugger categoriesFor: #buildParseTree!commands!private! !
!Debugger categoriesFor: #canImplementMessage!private!testing! !
!Debugger categoriesFor: #canSaveMethod!private!testing! !
!Debugger categoriesFor: #clearCachedMethodInfo!helpers!private! !
!Debugger categoriesFor: #continue:with:!operations!private! !
!Debugger categoriesFor: #createComponents!initializing!public! !
!Debugger categoriesFor: #createSchematicWiring!initializing!public! !
!Debugger categoriesFor: #cursorIPRange!commands!private! !
!Debugger categoriesFor: #debugState:!private!updating! !
!Debugger categoriesFor: #defaultHelpId!public! !
!Debugger categoriesFor: #depth!accessing!private! !
!Debugger categoriesFor: #depth:!accessing!private! !
!Debugger categoriesFor: #displayFrame!private!updating! !
!Debugger categoriesFor: #displaySource!private!updating! !
!Debugger categoriesFor: #displayTemp!private!updating! !
!Debugger categoriesFor: #emitKeywordSignatureFor:in:on:!helpers!private! !
!Debugger categoriesFor: #findBlockHome:!helpers!private! !
!Debugger categoriesFor: #findHomeFrame:!helpers!private! !
!Debugger categoriesFor: #frame!accessing!private! !
!Debugger categoriesFor: #frameCalledFrom:!accessing!operations!private! !
!Debugger categoriesFor: #frames!accessing!private! !
!Debugger categoriesFor: #generateStubFor:inClass:!helpers!private! !
!Debugger categoriesFor: #hasEditableMethodSelected!public!testing! !
!Debugger categoriesFor: #hasEditableMethodsSelected!public!testing! !
!Debugger categoriesFor: #hasMethodSelected!public!testing! !
!Debugger categoriesFor: #initialize!initializing!private! !
!Debugger categoriesFor: #inspectIt!commands!private! !
!Debugger categoriesFor: #inspectReferences!commands!private! !
!Debugger categoriesFor: #isAnimating!private!testing! !
!Debugger categoriesFor: #isDisassembled!private!testing! !
!Debugger categoriesFor: #isFrameRestartable!private!testing! !
!Debugger categoriesFor: #isInCompositeOp!private!testing! !
!Debugger categoriesFor: #isMain:!accessing!private! !
!Debugger categoriesFor: #isResumable!private!testing! !
!Debugger categoriesFor: #isRunning!private!testing! !
!Debugger categoriesFor: #killProcess!commands!private! !
!Debugger categoriesFor: #mainView!accessing!private! !
!Debugger categoriesFor: #makeDebugFrame:!helpers!private! !
!Debugger categoriesFor: #markMethodAsUnbound:!helpers!private! !
!Debugger categoriesFor: #moreFrames!commands!private! !
!Debugger categoriesFor: #nameForArgument:!helpers!private! !
!Debugger categoriesFor: #nilVariable!commands!private! !
!Debugger categoriesFor: #onAboutToDisplayMenu:!event handling!public! !
!Debugger categoriesFor: #onBreak:!event handling!private! !
!Debugger categoriesFor: #onCloseRequested:!event handling!private! !
!Debugger categoriesFor: #onExpressionEvaluated:!event handling!private! !
!Debugger categoriesFor: #onFrameSelected!event handling!private! !
!Debugger categoriesFor: #onFrameSelectionChanging:!event handling!private! !
!Debugger categoriesFor: #onHalt:!event handling!private! !
!Debugger categoriesFor: #onMethodRemoved:!event handling!private! !
!Debugger categoriesFor: #onMethodUpdated:!event handling!private! !
!Debugger categoriesFor: #onPromptToSaveChanges:!event handling!private! !
!Debugger categoriesFor: #onStep:!event handling!private! !
!Debugger categoriesFor: #onTempSelected!event handling!private! !
!Debugger categoriesFor: #onTerminate!event handling!private! !
!Debugger categoriesFor: #onViewClosed!event handling!private! !
!Debugger categoriesFor: #onWalkback:topFrame:resumable:!event handling!private! !
!Debugger categoriesFor: #parseContext!accessing!public! !
!Debugger categoriesFor: #parseTree!commands!private! !
!Debugger categoriesFor: #performMethodsRefactoring:name:!private!refactoring! !
!Debugger categoriesFor: #populateImplementMenu:!helpers!private! !
!Debugger categoriesFor: #populateStackModel!private!updating! !
!Debugger categoriesFor: #prevIPOfFrame:!accessing!private! !
!Debugger categoriesFor: #process:topFrame:!accessing!initializing!private! !
!Debugger categoriesFor: #promptToSaveChanges!commands!private! !
!Debugger categoriesFor: #queryCommand:!commands!private! !
!Debugger categoriesFor: #queryFrameCommand:!commands!private! !
!Debugger categoriesFor: #refreshFrame!private!updating! !
!Debugger categoriesFor: #restartBlock:inFrame:!operations!private! !
!Debugger categoriesFor: #restartBlockFrame:!operations!private! !
!Debugger categoriesFor: #restartFrame!commands!private! !
!Debugger categoriesFor: #restartFrame:!operations!private! !
!Debugger categoriesFor: #restartFrameWithFocus:!commands!private! !
!Debugger categoriesFor: #restartMethod!operations!private! !
!Debugger categoriesFor: #restartMethodFrame:!operations!private! !
!Debugger categoriesFor: #restartWithStubFor:inClass:!commands!private! !
!Debugger categoriesFor: #resumable:!modes!private! !
!Debugger categoriesFor: #resume!operations!private! !
!Debugger categoriesFor: #resumeProcess!commands!private! !
!Debugger categoriesFor: #return:fromFrame:!operations!private! !
!Debugger categoriesFor: #return:toFrame:!operations!private! !
!Debugger categoriesFor: #returnFromMessage!commands!private! !
!Debugger categoriesFor: #runDebuggedProcess!operations!private! !
!Debugger categoriesFor: #runProcess!operations!private! !
!Debugger categoriesFor: #runToCursor!commands!private! !
!Debugger categoriesFor: #saveNewMethod:!commands!public! !
!Debugger categoriesFor: #searchEnvironment!commands!private! !
!Debugger categoriesFor: #selectedMethod!accessing!public! !
!Debugger categoriesFor: #selectedMethods!accessing!public! !
!Debugger categoriesFor: #selectedNode!accessing!private! !
!Debugger categoriesFor: #selectionIP!accessing!private! !
!Debugger categoriesFor: #setInitialFocus!operations!public! !
!Debugger categoriesFor: #setSelectedVariableTo:!commands!private! !
!Debugger categoriesFor: #setSourceSelection!private!updating! !
!Debugger categoriesFor: #setVariablesList:!private!updating! !
!Debugger categoriesFor: #showNextStatement!commands!private! !
!Debugger categoriesFor: #skipMaskFor:!helpers!private! !
!Debugger categoriesFor: #source!accessing!private! !
!Debugger categoriesFor: #sourceRangeAt:inTextMap:!helpers!private! !
!Debugger categoriesFor: #step!operations!private! !
!Debugger categoriesFor: #stepInFrame:!operations!private! !
!Debugger categoriesFor: #stepInto!commands!private! !
!Debugger categoriesFor: #stepOut!commands!private! !
!Debugger categoriesFor: #stepOver!commands!private! !
!Debugger categoriesFor: #stubTextFor:inClass:!helpers!private! !
!Debugger categoriesFor: #suspend!operations!private! !
!Debugger categoriesFor: #suspendProcess!operations!private! !
!Debugger categoriesFor: #terminateOnClose!private!testing! !
!Debugger categoriesFor: #terminateProcess!commands!private! !
!Debugger categoriesFor: #toggleAnimation!commands!private! !
!Debugger categoriesFor: #toggleDisassembly!commands!private! !
!Debugger categoriesFor: #updateTemporaries!private!updating! !
!Debugger categoriesFor: #userBreak!commands!private! !
!Debugger categoriesFor: #variableAtIndex:put:!helpers!private! !

Debugger methodProtocol: #debugEventHandler attributes: #(#readOnly) selectors: #(#onBreak: #onHalt: #onStep: #onTerminate #onWalkback:topFrame:resumable:)!

!Debugger class methodsFor!

animatePause
	"Answer the number of milliseconds that instances of the receiver will pause between each step when 
	animating debugged processes."

	^AnimatePause!

animatePause: anInteger 
	"Set the number of milliseconds that instances of the receiver will pause between each step when 
	animating debugged processes."

	AnimatePause := anInteger!

debugPrintStringFor: anObject
	"Private - Answer the debugging string representation of the argument."

	^[anObject debugPrintString] on: Error
		do: [:ex | 'an invalid ' , anObject basicClass name , ' {' , ex description , '}']!

defaultAdditionalAccelerators
	^super defaultAdditionalAccelerators , #(#(#renameIt 'F2'))!

defaultStackDepth
	^DefaultStackDepth!

defaultStackDepth: anInteger
	DefaultStackDepth := anInteger!

displayOn: aStream
	"Append, to aStream, a String whose characters are a representation of the receiver as a user
	would want to see it."

	aStream nextPutAll: 'Debugger'
!

enableDynamicMenus
	"Answer whether dynamic menus can be used in instances of the receiver. These can be
	disabled to allow the dynamic menu framework to be debugged more easily."

	^EnableDynamicMenus!

enableDynamicMenus: aBoolean
	"Set whether dynamic menus can be used in instances of the receiver. These can be
	disabled to allow the dynamic menu framework to be debugged more easily."

	EnableDynamicMenus := aBoolean!

icon
	"Answers an Icon that can be used to represent this class"

	^##(self) defaultIcon!

initialize
	"Initialize the class variables of the receiver

		self initialize
	"

	| debugEmptyBlock |
	self addClassConstant: 'StackDepthIncrement' value: 100.
	DefaultStackDepth := 40.
	self addClassConstant: 'MainMask' value: 16r1.
	self addClassConstant: 'RunMask' value: 16r2.
	self addClassConstant: 'DisassemblyMask' value: 16r4.
	self addClassConstant: 'ResumableMask' value: 16r8.
	self addClassConstant: 'AnimateMask' value: 16r10.
	self addClassVariable: 'AnimatePause' value: 200.
	self restartOnMethodSave: true.
	self enableDynamicMenus: true.
	self showWalkbacks: true.
	Smalltalk developmentSystem registerTool: self.
	self interrupts do: [:each | ProcessorScheduler interruptSelectors at: each first put: each second].
	self initializeSkipTable.
	"Set up the debug empty block"
	VMLibrary default primRegistryAt: 8 put: nil.
	debugEmptyBlock := VMLibrary default emptyBlock method asDebugMethod value.
	debugEmptyBlock method isImmutable: true.
	VMLibrary default primRegistryAt: 8 put: debugEmptyBlock!

initializeSkipTable
	"Initialize the table of methods to be skipped (in one way or another) when debugging.
		Debugger initializeSkipTable

	The idea of the skip table is to prevent the implementation of certain parts of the system
	(e.g. exception handling) from surfacing unduly when debugging - i.e. one doesn't want
	to repeatedly step through system code. The debugger may be instructed to step over
	individual methods in one of several ways according to the skip type, which is a bit mask:

		1	- Does not break in the method itself, but will step into subsidiary methods.
		2 	- Does not break in the method or any of its subsidiary methods.
	"

	"Note that most entries are made through membership of special method categories. We need to
	add here only those class/selector pairs where the actual method implementation is in a
	superclass"

	SkipTable := LookupTable new.
	self
		skipSelector: #valueWithArguments:
			of: EventMessageSend
			type: 1.
	"skipSelector: #at:ifAbsent: of: SharedLookupTable type: 0"
	DebuggerMethodCategory initialize!

interrupts
	^#(#(3 #onBreak:) #(4 #singleStep:))!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	^(super publishedAspects)
		add: (Aspect boolean: #showWalkbacks);
		add: (Aspect boolean: #restartOnMethodSave);
		add: (Aspect boolean: #enableDynamicMenus);
		add: ((Aspect integer: #animatePause)
					isNullable: false;
					yourself);
		yourself!

resource_Basic_debugger
	"Answer the literal data from which the 'Basic debugger' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Basic_debugger)
	"

	^#(#'!!STL' 4 788558 10 ##(Smalltalk.STBViewProxy) ##(Smalltalk.DebuggerShellView) 34 27 nil nil 8 #(13565952 65536) 416 nil 655878 ##(Smalltalk.ThemeColor) #toolBackground nil 517 nil nil nil 416 788230 ##(Smalltalk.BorderLayout) 1 1 nil nil nil nil 410 ##(Smalltalk.ContainerView) 34 15 nil 416 34 2 8 1140850688 131073 528 nil nil nil 5 nil nil nil 528 1180166 ##(Smalltalk.ProportionalLayout) 138 ##(Smalltalk.Dictionary) 34 2 721414 ##(Smalltalk.Association) 410 ##(Smalltalk.ReferenceView) 34 14 nil 528 34 2 8 1140916224 131073 688 nil nil nil 21 265030 4 ##(Smalltalk.Menu) nil true 34 16 984134 2 ##(Smalltalk.CommandMenuItem) 1 1180998 4 ##(Smalltalk.CommandDescription) #accept 8 '&Accept' 1 1 nil nil nil 802 1 834 #acceptNoRestart 8 'Acce&pt No Restart' 1 1 nil nil nil 983366 1 ##(Smalltalk.DividerMenuItem) 4097 802 1 834 #runToCursor 8 '&Run to Cursor' 1 1 nil nil nil 802 1 834 #toggleBreakpoint 8 'T&oggle Breakpoint' 1 1 nil nil nil 802 1 834 #toggleDisassembly 8 'Disasse&mbly' 1 1 nil nil nil 930 4097 754 nil true 34 9 802 1 834 #undo 8 '&Undo' 1 1 nil nil nil 930 4097 802 1 834 #cutSelection 8 'Cu&t' 1 1 nil nil nil 802 1 834 #copySelection 8 '&Copy' 1 1 nil nil nil 802 1 834 #pasteClipboard 8 '&Paste' 1 1 nil nil nil 802 1 834 #clearSelection 8 'De&lete' 1 1 nil nil nil 930 4097 802 1 834 #selectAll 8 '&Select All' 1 1 nil nil nil 802 1 834 #clear 8 'Cle&ar' 1 1 nil nil nil 8 '&Edit' nil 134217729 nil nil nil nil nil 930 4097 802 1 834 #browseIt 8 'Bro&wse It' 1 1 nil nil nil 802 1 834 #displayIt 8 '&Display It' 1 1 nil nil nil 802 1 834 #evaluateIt 8 'E&valuate It' 1 1 nil nil nil 802 1 834 #debugIt 8 'Deb&ug It' 1 1 nil nil nil 802 1 834 #inspectIt 8 '&Inspect It' 1 1 nil nil nil 930 4097 754 nil true 34 2 802 1 834 #browseDefinitions 8 '&Definitions...' 1 1 nil nil nil 802 1 834 #browseReferences 8 '&References...' 1 1 nil nil nil 8 '&Browse' nil 134217729 nil nil nil nil nil 8 '&Workspace' nil 134217729 nil nil nil nil nil nil nil 688 1180230 1 ##(Smalltalk.ResourceIdentifier) ##(Smalltalk.MethodWorkspace) #resource_Debugger_source nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 2 721670 ##(Smalltalk.MessageSend) #createAt:extent: 34 2 328198 ##(Smalltalk.Point) 1 347 2114 1169 337 688 2066 #contextMenu: 34 1 768 688 983302 ##(Smalltalk.WINDOWPLACEMENT) 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 173 0 0 0 72 2 0 0 85 1 0 0] 8 #() 2114 193 193 nil 27 3 658 410 ##(Smalltalk.Splitter) 34 12 nil 528 34 2 8 1140850688 1 2288 nil nil nil 517 nil nil nil 1510470 1 ##(Smalltalk.DraggableViewInteractor) 2288 nil 1 #left nil nil nil 2114 1 1 2114 9 9 nil 2384 nil 2002 138 144 34 1 2066 #createAt:extent: 34 2 2114 1 337 2114 1169 11 2288 2194 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 168 0 0 0 72 2 0 0 173 0 0 0] 8 #() 2256 nil 27 1 true 170 192 34 2 688 8 'source' nil 2002 138 144 34 1 2066 #createAt:extent: 34 2 2114 1 1 2114 1169 683 528 2194 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 85 1 0 0] 34 3 410 ##(Smalltalk.ContainerView) 34 15 nil 528 34 2 8 1140850688 131073 2784 nil nil nil 5 nil nil nil 2784 594 138 ##(Smalltalk.Dictionary) 34 5 658 410 ##(Smalltalk.ListBox) 34 17 nil 2784 34 2 8 1144062209 1 2912 590662 2 ##(Smalltalk.ListModel) 138 144 2240 nil 1310726 ##(Smalltalk.IdentitySearchPolicy) 786694 ##(Smalltalk.ColorDefault) 8 4278190080 nil 5 754 nil true 34 2 802 1 834 #inspectIt 8 '&Inspect' 1 1 nil nil nil 802 1 834 #inspectReferences 8 'Inspect &References' 1 1 nil nil nil 8 '&Inspect' nil 134217729 nil nil nil nil nil nil nil 2912 nil 8 1914995680 459270 ##(Smalltalk.Message) #first 8 #() 2240 false 2002 138 144 34 3 2066 #createAt:extent: 34 2 2114 521 1 2114 219 337 2912 2066 #contextMenu: 34 1 3104 2912 2066 #horizontalExtent: 8 #(0) 2912 2194 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 4 1 0 0 0 0 0 0 113 1 0 0 168 0 0 0] 8 #() 2256 nil 27 524806 ##(Smalltalk.Fraction) 1415 675 658 410 ##(Smalltalk.ReferenceView) 34 14 nil 2784 34 2 8 1140916224 131073 3584 nil nil nil 21 nil nil nil 3584 1970 ##(Smalltalk.SmalltalkWorkspace) #resource_Default_view nil 2002 138 144 34 1 2066 #createAt:extent: 34 2 2114 749 1 2114 421 337 3584 2194 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 118 1 0 0 0 0 0 0 72 2 0 0 168 0 0 0] 2240 2256 nil 27 9 658 410 ##(Smalltalk.ListBox) 34 17 nil 2784 34 2 8 1144062209 1 3824 2978 138 144 2240 nil 3040 3072 nil 5 754 nil true 34 11 802 1 834 #stepInto 8 'Step &Into' 1269 5 nil nil nil 802 1 834 #stepOver 8 'Step O&ver' 1267 5 nil nil nil 802 1 834 #stepOut 8 'Step O&ut' 5365 1 nil nil nil 802 1 834 #returnFromMessage 8 'Retur&n ...' 1 1 nil nil nil 802 1 834 #restartFrame 8 '&Restart' 1 1 nil nil nil 754 nil true 8 #() 8 'Im&plement in' #implementDNUMenu 134217729 nil nil nil nil nil 930 4097 802 1 834 #moreFrames 8 '&More' 1 1 nil nil nil 802 1 834 #allFrames 8 'A&ll' 1 1 nil nil nil 930 4097 754 nil true 34 4 802 1 834 #browseDefinitions 8 '&Definitions' 1 1 nil nil nil 802 1 834 #browseReferences 8 '&References' 1 1 nil nil nil 802 1 834 #browseMessages 8 '&Messages...' 1 1 nil nil nil 802 1 834 #browseMethodInheritanceChain 8 'In&heritance Chain' 1 1 nil nil nil 8 '&Browse' nil 134217729 nil nil nil nil nil 8 '&Debug' nil 134217729 nil nil nil nil nil nil nil 3824 nil 8 1914995680 ##(Smalltalk.BasicListAbstract) 2240 false 2002 138 144 34 3 2066 #createAt:extent: 34 2 2114 1 1 2114 511 337 3824 2066 #contextMenu: 34 1 3920 3824 2066 #horizontalExtent: 8 #(0) 3824 2194 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 255 0 0 0 168 0 0 0] 8 #() 2256 nil 27 3538 3305 675 658 410 ##(Smalltalk.Splitter) 34 12 nil 2784 34 2 8 1140850688 1 4896 nil nil nil 517 nil nil nil 2354 4896 nil 1 #left nil nil nil 2384 2400 nil 2384 nil 2002 138 144 34 1 2066 #createAt:extent: 34 2 2114 739 1 2114 11 337 4896 2194 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 113 1 0 0 0 0 0 0 118 1 0 0 168 0 0 0] 8 #() 2256 nil 27 1 658 410 ##(Smalltalk.Splitter) 34 12 nil 2784 34 2 8 1140850688 1 5152 nil nil nil 517 nil nil nil 2354 5152 nil 1 #left nil nil nil 2384 2400 nil 2384 nil 2002 138 144 34 1 2066 #createAt:extent: 34 2 2114 511 1 2114 11 337 5152 2194 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 4 1 0 0 168 0 0 0] 8 #() 2256 nil 27 1 false 170 192 34 6 3584 8 'inspector' 3824 8 'stack' 2912 8 'temps' nil 2002 138 144 34 1 2066 #createAt:extent: 34 2 2114 1 1 2114 1169 337 2784 2194 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 168 0 0 0] 34 5 3824 5152 2912 4896 3584 2256 nil 27 2288 688 2256 nil 27 170 192 34 2 528 8 'main' nil 461638 4 ##(Smalltalk.MenuBar) nil true 34 7 754 nil true 34 8 802 1 834 #fileNew 8 '&New' 9373 1 nil nil nil 802 1 834 #fileOpen 8 '&Open...' 9375 1 nil nil nil 802 1 834 #fileFileIn 8 '&File In...' 1 1 nil nil nil 930 4097 802 1 834 #saveImage 8 'Sa&ve Image' 1 1 nil nil nil 802 1 834 #smalltalkExit 8 'E&xit Dolphin' 1 1 nil nil nil 930 4097 802 1 834 #exit 8 'Close' 17639 1 nil nil nil 8 '&File' nil 134217729 nil nil 42975 nil nil 754 nil true 34 13 802 1 834 #undo 8 '&Undo' 9397 1 nil nil nil 930 4097 802 1 834 #cutSelection 8 'Cu&t' 9393 1 nil nil nil 802 1 834 #copySelection 8 '&Copy' 9351 1 nil nil nil 802 1 834 #pasteClipboard 8 '&Paste' 9389 1 nil nil nil 802 1 834 #editDelete 8 '&Delete' 1 1 nil nil nil 754 nil true 34 2 802 1 834 #reformatSource 8 '&Source' 9391 1 nil nil nil 802 1 834 #reformatComment 8 '&Comment' 9367 1 nil nil nil 8 'Ref&ormat' nil 134217729 nil nil 42991 nil nil 930 4097 802 1 834 #selectAll 8 'Select &All' 9347 1 nil nil nil 930 4097 802 1 834 #editFind 8 '&Find...' 9357 1 nil nil nil 802 1 834 #findNext 8 'Find &Next' 1253 1 nil nil nil 802 1 834 #findReplace 8 '&Replace...' 9361 1 nil nil nil 8 '&Edit' nil 134217729 nil nil 43001 nil nil 754 nil true 34 17 802 1 834 #browseIt 8 '&Browse It' 9349 1 nil nil nil 802 1 834 #displayIt 8 '&Display It' 9353 1 nil nil nil 802 1 834 #evaluateIt 8 '&Evaluate It' 9355 1 nil nil nil 802 1 834 #inspectIt 8 '&Inspect It' 9363 1 nil nil nil 802 1 834 #debugIt 8 'Deb&ug It' 1 1 nil nil nil 802 1 834 #fileItIn 8 'Fi&le It In' 1 1 nil nil nil 930 4097 802 1 834 #browseDefinitions 8 'Defi&nitions...' 1271 1 nil nil nil 802 1 834 #browseReferences 8 '&References...' 5367 1 nil nil nil 930 4097 802 2097153 834 #accept 8 '&Accept' 9383 1 nil nil nil 802 1 834 #reformatAccept 8 'Refor&mat/Accept' 13479 1 nil nil nil 802 1 834 #acceptNoRestart 8 'Acce&pt No Restart' 1 1 nil nil nil 930 4097 754 nil true 34 13 802 1 834 #renameVariable 8 'Re&name <1d>...' 1 1 nil nil nil 930 4097 802 1 834 #extractToTemporary 8 'Extract to &Temporary...' 9385 1 nil nil nil 802 1 834 #extractMethod 8 'E&xtract Method...' 9371 1 nil nil nil 802 1 834 #extractToComponent 8 'Extract to &Component...' 1 1 nil nil nil 802 1 834 #inlineMessage 8 'Inline &Message' 13467 1 nil nil nil 930 4097 802 1 834 #inlineTemporary 8 '&Inline Temporary' 13481 1 nil nil nil 802 1 834 #moveTempToInnerScope 8 'Move to Inner &Scope' 9655 1 nil nil nil 802 1 834 #convertTempToInstVar 8 'Con&vert to Instance Variable' 1 1 nil nil nil 930 4097 802 1 834 #inlineParameter 8 'In&line Parameter' 1 1 nil nil nil 802 1 834 #removeParameter 8 'Remove &Parameter' 1 1 nil nil nil 8 'Re&factorings' #codeRefactoringsMenu 134217729 nil nil 43045 nil nil 930 4097 754 nil true 34 7 802 1 834 #toggleAutoCompletion 8 '&Auto-complete' 1 1 nil nil nil 802 1 834 #toggleIndentationGuides 8 'Indentation &Guides' 1 1 nil nil nil 802 1 834 #toggleLineEndings 8 'Line &Endings' 1 1 nil nil nil 802 1 834 #toggleLineNumbers 8 'Line N&umbers' 1 1 nil nil nil 802 1 834 #toggleStyling 8 '&Syntax Coloring' 1 1 nil nil nil 802 1 834 #toggleWhitespace 8 'W&hitespace' 1 1 nil nil nil 802 1 834 #toggleWordWrap 8 '&Word Wrap' 1 1 nil nil nil 8 '&Options' nil 134217729 nil nil 43061 nil nil 8 '&Workspace' nil 134217729 nil nil 43063 nil nil 754 nil true 34 22 802 1 834 #resumeProcess 8 'G&o/detach' 1257 1 nil nil nil 802 1 834 #toggleAnimation 8 '&Animate' 1 1 nil nil nil 802 1 834 #terminateProcess 8 '&Terminate' 5353 1 nil nil nil 802 1 834 #killProcess 8 '&Kill' 1 1 nil nil nil 802 1 834 #userBreak 8 '&Break' 1 1 nil nil nil 930 4097 802 1 834 #stepInto 8 'Step &Into' 1269 5 nil nil nil 802 1 834 #stepOver 8 'Step O&ver' 1267 5 nil nil nil 802 1 834 #stepOut 8 'Step O&ut' 5365 1 nil nil nil 802 1 834 #runToCursor 8 'Run to &Cursor' 9459 1 nil nil nil 802 1 834 #runProcess 8 '&Run' 9449 1 nil nil nil 802 1 834 #restartFrame 8 'R&estart' 13545 1 nil nil nil 802 1 834 #returnFromMessage 8 'Retur&n ...' 1 1 nil nil nil 930 4097 754 nil true 8 #() 8 'Im&plement in' #implementDNUMenu 134217729 nil nil 43089 nil nil 754 nil true 34 14 754 nil true 34 3 802 1 834 #renameMethod 8 'All...' 1 1 nil nil nil 802 1 834 #renameMethodInHierarchy 8 'In &Hierarchy...' 1 1 nil nil nil 802 1 834 #renameMethodInPackage 8 'In &Package...' 1 1 nil nil nil 8 'Re&name' nil 134217729 nil nil 43097 nil nil 802 1 834 #safeRemoveMethods 8 'Rem&ove' 1 1 nil nil nil 930 4097 802 1 834 #addParameter 8 'Add &Parameter...' 1 1 nil nil nil 754 nil true 8 #() 8 'Remo&ve Parameter' #removeParameterMenu 134217729 nil nil 43103 nil nil 754 nil true 8 #() 8 'Rena&me Parameter' #renameParameterMenu 134217729 nil nil 43105 nil nil 754 nil true 8 #() 8 '&Inline Parameter' #inlineParameterMenu 134217729 nil nil 43107 nil nil 930 4097 754 nil true 8 #() 8 'Rename &Temporary' #renameTempMenu 134217729 nil nil 43109 nil nil 754 nil true 8 #() 8 'Convert Temp to Inst. Var.' #convertTempToInstVarMenu 134217729 nil nil 43111 nil nil 930 4097 802 1 834 #inlineAllSelfSends 8 'Inline &Self Sends' 1 1 nil nil nil 802 1 834 #pushUpMethods 8 'Push &Up' 1 1 nil nil nil 802 1 834 #pushDownMethods 8 'Push &Down' 1 1 nil nil nil 8 'Refactorin&gs' #methodRefactoringsMenu 134217729 nil nil 43119 nil nil 930 4097 802 1 834 #toggleBreakpoint 8 'Toggle Breakpoint' 1265 1 nil nil nil 802 1 834 #toggleDisassembly 8 'Disasse&mbly' 9461 1 nil nil nil 802 1 834 #showNextStatement 8 'Show Ne&xt Statement' 17621 1 nil nil nil 930 4097 754 nil true 34 2 802 1 834 #moreFrames 8 '&More' 1 1 nil nil nil 802 1 834 #allFrames 8 'A&ll' 1 1 nil nil nil 8 'Call &Stack' nil 134217729 nil nil 43131 nil nil 8 '&Debug' nil 134217729 nil nil 43133 nil nil 754 nil true 8 #() 8 '&Tools' #toolsMenu 134217729 nil nil 43135 nil nil 754 nil true 8 #() 8 'Wi&ndow' #windowMenu 134217729 nil nil 43137 nil nil 754 nil true 34 15 802 1 834 #helpContents 8 '&Contents' 1025 1 nil nil nil 802 1 834 #help 8 'On this &Tool' 1249 1 nil nil nil 802 1 834 #helpWhatsThis 8 'What''s This?' 5345 1 nil nil nil 930 4097 802 1 834 #learnSmalltalk 8 'Learn Smalltalk' 1 1 nil nil nil 930 4097 802 1 834 #helpWhatsNew 8 'What''s &New' 1 1 nil nil nil 802 1 834 #helpGuidedTour 8 '&Guided Tour' 1 1 nil nil nil 802 1 834 #helpTutorials 8 'Tutorials' 1 1 nil nil nil 930 4097 802 1 834 #objectArtsHomePage 8 'Object Arts Homepage' 1 1 nil nil nil 802 1 834 #dolphinNewsgroup 8 'Dolphin Newsgroup/Forum' 1 1 nil nil nil 802 1 834 #dolphinWikiWeb 8 'Dolphin WikiWeb' 1 1 nil nil nil 930 4097 802 1 834 #aboutDolphin 8 '&About Dolphin Smalltalk' 1 1 nil nil nil 8 '&Help' nil 134217729 nil nil 43161 nil nil 8 '' nil 134217729 nil nil nil nil nil nil nil nil 1 nil nil nil nil 1 nil nil 2002 138 144 34 2 2066 #createAt:extent: 34 2 2114 313 313 2114 1201 801 416 2066 #updateMenuBar 2240 416 2194 8 #[44 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 156 0 0 0 156 0 0 0 244 2 0 0 44 2 0 0] 34 1 528 2256 nil 27 )!

resource_Default_view
	"Answer the literal data from which the 'Default view' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Default_view)
	"

	^#(#'!!STL' 4 788558 10 ##(Smalltalk.STBViewProxy) ##(Smalltalk.DebuggerShellView) 34 27 nil nil 8 #(13565952 65536) 416 nil 655878 ##(Smalltalk.ThemeColor) #toolBackground nil 549 nil nil nil 416 788230 ##(Smalltalk.BorderLayout) 1 1 410 ##(Smalltalk.Toolbar) 34 25 nil 416 34 2 8 1140853580 1 528 nil nil nil 519 nil nil nil 528 786694 ##(Smalltalk.ColorDefault) 8 4278190080 8 1915204752 170 192 34 10 410 ##(Smalltalk.ReferenceView) 34 14 nil 528 34 2 8 1140850688 131073 688 nil nil nil 7 nil nil nil 688 1180230 1 ##(Smalltalk.ResourceIdentifier) ##(Smalltalk.Toolbar) #resource_Search_tools nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createAt:extent: 34 2 328198 ##(Smalltalk.Point) 615 1 898 437 51 688 983302 ##(Smalltalk.WINDOWPLACEMENT) 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 51 1 0 0 0 0 0 0 13 2 0 0 25 0 0 0] 8 #() 898 193 193 nil 27 8 'searchTools' 410 ##(Smalltalk.ReferenceView) 34 14 nil 528 34 2 8 1140850688 131073 1040 nil nil nil 7 nil nil nil 1040 754 ##(Smalltalk.Toolbar) #resource_Debugger_tools nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 201 51 898 293 51 1040 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 100 0 0 0 25 0 0 0 246 0 0 0 50 0 0 0] 992 1008 nil 27 8 'debuggerTools' 410 ##(Smalltalk.ReferenceView) 34 14 nil 528 34 2 8 1140850688 131073 1280 nil nil nil 7 nil nil nil 1280 754 ##(Smalltalk.Toolbar) #resource_Workspace_tools nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 1 51 898 201 51 1280 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 25 0 0 0 100 0 0 0 50 0 0 0] 992 1008 nil 27 8 'workspaceTools' 410 ##(Smalltalk.ReferenceView) 34 14 nil 528 34 2 8 1140850688 131073 1520 nil nil nil 7 nil nil nil 1520 754 ##(Smalltalk.Toolbar) #resource_Image_tools nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 1 1 898 63 51 1520 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 31 0 0 0 25 0 0 0] 992 1008 nil 27 8 'imageTools' 410 ##(Smalltalk.ReferenceView) 34 14 nil 528 34 2 8 1140850688 131073 1760 nil nil nil 7 nil nil nil 1760 754 ##(Smalltalk.Toolbar) #resource_Smalltalk_tools nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 63 1 898 553 51 1760 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 31 0 0 0 0 0 0 0 51 1 0 0 25 0 0 0] 992 1008 nil 27 8 'smalltalkTools' 170 192 992 138 144 992 nil nil 1 nil 898 33 33 nil nil 656198 1 ##(Smalltalk.FlowLayout) 1 1 1 786 138 144 34 2 850 #createAt:extent: 34 2 898 1 1 898 1169 101 528 850 #updateSizePosted 992 528 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 50 0 0 0] 34 5 1520 1760 688 1280 1040 1008 nil 27 nil nil nil 410 ##(Smalltalk.ContainerView) 34 15 nil 416 34 2 8 1140850688 131073 2256 nil nil nil 7 nil nil nil 2256 1180166 ##(Smalltalk.ProportionalLayout) 138 ##(Smalltalk.Dictionary) 34 2 721414 ##(Smalltalk.Association) 410 ##(Smalltalk.Splitter) 34 12 nil 2256 34 2 8 1140850688 1 2416 nil nil nil 519 nil nil nil 1510470 1 ##(Smalltalk.DraggableViewInteractor) 2416 nil 1 #left nil nil nil 898 1 1 898 9 9 nil 2512 nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 1 287 898 1169 11 2416 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 143 0 0 0 72 2 0 0 148 0 0 0] 8 #() 1008 nil 27 1 2386 410 ##(Smalltalk.ReferenceView) 34 14 nil 2256 34 2 8 1140916224 131073 2720 nil nil nil 23 nil nil nil 2720 754 ##(Smalltalk.MethodWorkspace) #resource_Debugger_source nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 1 297 898 1169 287 2720 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 148 0 0 0 72 2 0 0 35 1 0 0] 992 1008 nil 27 3 true 170 192 34 2 2720 8 'source' nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 1 101 898 1169 583 2256 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 50 0 0 0 72 2 0 0 85 1 0 0] 34 3 410 ##(Smalltalk.ContainerView) 34 15 nil 2256 34 2 8 1140850688 131073 3152 nil nil nil 7 nil nil nil 3152 2322 138 ##(Smalltalk.Dictionary) 34 3 2386 410 ##(Smalltalk.Splitter) 34 12 nil 3152 34 2 8 1140850688 1 3280 nil nil nil 519 nil nil nil 2482 3280 nil 1 #left nil nil nil 2512 2528 nil 2512 nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 521 1 898 11 287 3280 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 4 1 0 0 0 0 0 0 9 1 0 0 143 0 0 0] 8 #() 1008 nil 27 1 2386 410 ##(Smalltalk.ContainerView) 34 15 nil 3152 34 2 8 1140850688 131073 3536 nil nil nil 7 nil nil nil 3536 2322 170 176 34 4 410 ##(Smalltalk.ListView) 34 30 nil 3536 34 2 8 1140949069 1025 3648 590662 2 ##(Smalltalk.ListModel) 138 144 992 nil 1310726 ##(Smalltalk.IdentitySearchPolicy) 608 nil 7 265030 4 ##(Smalltalk.Menu) nil true 34 8 984134 2 ##(Smalltalk.CommandMenuItem) 1 1180998 4 ##(Smalltalk.CommandDescription) #inspectIt 8 '&Inspect' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'BasicInspector.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil nil nil 3842 1 3874 #inspectReferences 8 'Inspect &References' 1 1 nil nil nil 983366 1 ##(Smalltalk.DividerMenuItem) 4097 3842 1 3874 #nilVariable 8 'Set to &Nil' 1 1 nil nil nil 4098 4097 3842 1 3874 #browseVariableClass 8 '&Browse Class' 1 1 nil nil nil 4098 4097 3842 1 3874 #refreshVariables 8 'Re&fresh' 1 1 nil nil nil 8 '&Inspect' nil 134217729 nil nil nil nil nil nil nil 3648 nil 8 1915211424 459270 ##(Smalltalk.Message) #first 8 #() nil 1049926 1 ##(Smalltalk.IconImageManager) nil 787814 3 ##(Smalltalk.BlockClosure) 0 nil 1180966 ##(Smalltalk.CompiledExpression) 3 1 ##(Smalltalk.UndefinedObject) 8 'doIt' 8 '[:each | Debugger debugPrintStringFor: each]' 8 #[31 105 45 17 177 106] 2386 #Debugger ##(Smalltalk.Debugger) #debugPrintStringFor: 4432 7 257 nil nil nil nil nil 138 144 34 2 920646 5 ##(Smalltalk.ListViewColumn) 8 'Variable' 301 #left ##(Smalltalk.BasicListAbstract) 4338 #<= 8 #() 4418 0 nil 4450 2 1 ##(Smalltalk.UndefinedObject) 8 'doIt' 8 '[:each | each first]' 8 #[30 105 17 158 106] #first 4656 7 257 nil nil 3648 nil 1 nil nil 4578 8 'Value' 331 #left 4418 0 nil 4450 3 1 ##(Smalltalk.UndefinedObject) 8 'doIt' 8 '[:each | Debugger debugPrintStringFor: each]' 8 #[31 105 45 17 177 106] 2386 #Debugger ##(Smalltalk.Debugger) #debugPrintStringFor: 4768 7 257 nil 4338 #<= 8 #() 4418 0 nil 4450 2 1 ##(Smalltalk.UndefinedObject) 8 'doIt' 8 '[:each | each second]' 8 #[30 105 17 158 106] #second 4896 7 257 nil nil 3648 nil 3 nil nil #report 992 nil 131143 nil 34 4 nil nil 898 1 1 nil 786 138 144 34 3 850 #createAt:extent: 34 2 898 1 1 898 639 207 3648 850 #contextMenu: 34 1 3808 3648 850 #text: 34 1 8 'Variable' 3648 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 63 1 0 0 103 0 0 0] 8 #() 1008 nil 27 7 410 ##(Smalltalk.ReferenceView) 34 14 nil 3536 34 2 8 1140916224 131073 5248 nil nil nil 23 nil nil nil 5248 754 ##(Smalltalk.SmalltalkWorkspace) #resource_Default_view nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 1 217 898 639 71 5248 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 108 0 0 0 63 1 0 0 143 0 0 0] 992 1008 nil 27 3 true 170 192 34 4 3648 8 'temps' 5248 8 'inspector' 590342 ##(Smalltalk.Rectangle) 898 1 1 898 1 1 786 138 144 34 1 850 #createAt:extent: 34 2 898 531 1 898 639 287 3536 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 9 1 0 0 0 0 0 0 72 2 0 0 143 0 0 0] 34 3 3648 410 ##(Smalltalk.Splitter) 34 12 nil 3536 34 2 8 1140850688 1 5760 nil nil nil 519 nil nil nil 2482 5760 nil 1 #left nil nil nil 2512 2528 nil 2512 nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 1 207 898 639 11 5760 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 103 0 0 0 63 1 0 0 108 0 0 0] 8 #() 1008 nil 27 5248 1008 nil 27 13 2386 410 ##(Smalltalk.ListBox) 34 17 nil 3152 34 2 8 1144062209 1025 6016 3714 138 144 992 nil 3776 608 nil 7 3794 nil true 34 13 3842 1 3874 #stepInto 8 'Step &Into' 1269 5 3922 nil true 3968 8 'StepInto.ico' 4016 nil nil 3842 1 3874 #stepOver 8 'Step O&ver' 1267 5 3922 nil true 3968 8 'StepOver.ico' 4016 nil nil 3842 1 3874 #stepOut 8 'Step O&ut' 5365 1 3922 nil true 3968 8 'StepOut.ico' 4016 nil nil 3842 1 3874 #restartFrame 8 '&Restart' 1 1 788806 1 ##(Smalltalk.TextTileIcon) $\x2B6E 8 'Cambria' nil nil nil nil 1 nil nil nil nil 3842 1 3874 #returnFromMessage 8 'Retur&n ...' 1 1 6434 $\x23CE 8 'Cambria' nil nil nil nil 1 nil nil nil nil 4098 4097 3794 nil true 8 #() 8 'Im&plement in' #implementDNUMenu 134217729 nil nil nil nil nil 3794 nil true 34 16 3842 1 3874 #renameMethod 8 'Re&name...' 1 1 nil nil nil 3842 1 3874 #renameMethodReferences 8 'Rename Re&ferences...' 1 1 nil nil nil 3842 1 3874 #safeRemoveMethods 8 'Rem&ove' 1 5 nil nil nil 4098 4097 3842 1 3874 #addParameter 8 'Add &Parameter...' 1 1 nil nil nil 3794 nil true 8 #() 8 'Remo&ve Parameter' #removeParameterMenu 134217729 nil nil nil nil nil 3794 nil true 8 #() 8 'Rena&me Parameter' #renameParameterMenu 134217729 nil nil nil nil nil 3794 nil true 8 #() 8 '&Inline Parameter' #inlineParameterMenu 134217729 nil nil nil nil nil 4098 4097 3794 nil true 8 #() 8 'Rename &Temporary' #renameTempMenu 134217729 nil nil nil nil nil 3794 nil true 8 #() 8 'Convert Temp to Inst. Var.' #convertTempToInstVarMenu 134217729 nil nil nil nil nil 4098 4097 3842 1 3874 #inlineAllSelfSends 8 'Inline &Self Sends' 1 1 nil nil nil 3842 1 3874 #pushUp 8 'Push &Up' 1 1 nil nil nil 3842 1 3874 #pushDown 8 'Push &Down' 1 1 nil nil nil 3842 1 3874 #moveMethod 8 'Move to &Component...' 1 1 nil nil nil 8 'Refactorin&gs' #methodRefactoringsMenu 134217729 3922 nil true 3968 8 'Refactoring.ico' 4016 nil nil nil nil 4098 4097 3842 1 3874 #moreFrames 8 '&More' 1 1 nil nil nil 3842 1 3874 #allFrames 8 'A&ll' 1 1 nil nil nil 4098 4097 3794 nil true 34 5 3794 nil true 34 1 3842 1 3874 #browseDefinitions 8 'Browse Defi&nitions' 247 1 nil nil nil 8 '&Definitions Of' #definitionsMenu 134217729 nil nil nil nil nil 3794 nil true 34 1 3842 1 3874 #browseReferences 8 'Browse &References' 4343 1 nil nil nil 8 '&References To' #referencesMenu 134217729 nil nil nil nil nil 3842 1 3874 #browseMethodInheritanceChain 8 '&Inheritance Chain' 1 1 nil nil nil 4098 4097 3842 1 3874 #browseMethodHistory 8 '&Change History in Image' 1 1 3922 nil true 3968 8 'MethodHistory.ico' 4016 nil nil 8 '&Browse' nil 134217729 nil nil nil nil nil 8 '&Debug' nil 134217729 nil nil nil nil nil nil nil 6016 nil 8 1914995680 ##(Smalltalk.BasicListAbstract) 992 nil 786 138 144 34 3 850 #createAt:extent: 34 2 898 1 1 898 521 287 6016 850 #contextMenu: 34 1 6112 6016 850 #horizontalExtent: 8 #(0) 6016 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 4 1 0 0 143 0 0 0] 8 #() 1008 nil 27 524806 ##(Smalltalk.Fraction) 3305 675 false 170 192 34 2 6016 8 'stack' nil 786 138 144 34 1 850 #createAt:extent: 34 2 898 1 1 898 1169 287 3152 946 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 143 0 0 0] 34 3 6016 3280 3536 1008 nil 27 2416 2720 1008 nil 27 170 192 34 4 2256 8 'main' 528 8 'toolbar' nil 461638 4 ##(Smalltalk.MenuBar) nil true 34 8 3794 nil true 34 8 3842 1 3874 #fileNew 8 '&New Workspace' 9373 1 3922 nil true 3968 8 'NewWorkspace.ico' 4016 nil nil 3842 1 3874 #fileOpen 8 '&Open Workspace...' 9375 1 3922 nil true 3968 8 'OpenWorkspace.ico' 4016 nil nil 3842 1 3874 #fileFileIn 8 '&File In...' 1 1 nil nil nil 4098 4097 3842 1 3874 #saveImage 8 'Sa&ve Image' 1 1 3922 nil true 3968 8 'Snapshot.ico' 4016 nil nil 3842 1 3874 #smalltalkExit 8 'E&xit Dolphin' 1 1 3922 nil true 3968 8 'PowerSwitch.ico' 4016 nil nil 4098 4097 3842 1 3874 #exit 8 'Close' 17639 1 6434 $\x2716 nil nil nil nil nil 1 nil nil nil nil 8 '&File' nil 134217729 nil nil 46179 nil nil 3794 nil true 34 13 3842 1 3874 #undo 8 '&Undo' 9397 1 3922 nil true 3968 8 'EditUndo.ico' 4016 nil nil 4098 4097 3842 1 3874 #cutSelection 8 'Cu&t' 9393 1 3922 nil true 3968 8 'EditCut.ico' 4016 nil nil 3842 1 3874 #copySelection 8 '&Copy' 9351 1 3922 nil true 3968 8 'EditCopy.ico' 4016 nil nil 3842 1 3874 #pasteClipboard 8 '&Paste' 9389 1 3922 nil true 3968 8 'EditPaste.ico' 4016 nil nil 3842 1 3874 #editDelete 8 '&Delete' 1 1 3922 nil true 3968 8 'EditClear.ico' 4016 nil nil 3794 nil true 34 2 3842 1 3874 #reformatSource 8 '&Source' 9391 1 nil nil nil 3842 1 3874 #reformatComment 8 '&Comment' 9367 1 nil nil nil 8 'Ref&ormat' nil 134217729 nil nil 46195 nil nil 4098 4097 3842 1 3874 #selectAll 8 'Select &All' 9347 1 nil nil nil 4098 4097 3842 1 3874 #editFind 8 '&Find...' 9357 1 3922 nil true 3968 47 786694 ##(Smalltalk.ShellLibrary) nil nil 3842 1 3874 #findNext 8 'Find &Next' 1253 1 3922 nil true 3968 8 'FindNext.ico' 4016 nil nil 3842 1 3874 #findReplace 8 '&Replace...' 9361 1 nil nil nil 8 '&Edit' nil 134217729 nil nil 46205 nil nil 3794 nil true 34 17 3842 1 3874 #browseIt 8 '&Browse It' 9349 1 3922 nil true 3968 8 'ClassBrowserShell.ico' 4016 nil nil 3842 1 3874 #displayIt 8 '&Display It' 9353 1 3922 nil true 3968 8 'DisplayIt.ico' 4016 nil nil 3842 1 3874 #evaluateIt 8 '&Evaluate It' 9355 1 3922 nil true 3968 8 'EvaluateIt.ico' 4016 nil nil 3842 1 3874 #inspectIt 8 '&Inspect It' 9363 1 3936 nil nil 3842 1 3874 #debugIt 8 'Deb&ug It' 1 1 3922 nil true 3968 8 'Debugger.ico' 4016 nil nil 3842 1 3874 #fileItIn 8 'Fi&le It In' 1 1 nil nil nil 4098 4097 3842 1 3874 #browseDefinitions 8 'Defi&nitions...' 1271 1 nil nil nil 3842 1 3874 #browseReferences 8 '&References...' 5367 1 nil nil nil 4098 4097 3842 2097153 3874 #accept 8 '&Accept' 9383 1 6434 $\x2714 8 'Segoe UI Emoji' nil 262406 ##(Smalltalk.ARGB) 8 4278222848 nil nil 1 nil nil nil nil 3842 1 3874 #reformatAccept 8 'Refor&mat/Accept' 13479 1 nil nil nil 3842 1 3874 #acceptNoRestart 8 'Acce&pt No Restart' 1 1 nil nil nil 4098 4097 3794 nil true 34 13 3842 1 3874 #renameVariable 8 'Re&name <1d>...' 1 1 nil nil nil 4098 4097 3842 1 3874 #extractToTemporary 8 'Extract to &Temporary...' 9385 1 nil nil nil 3842 1 3874 #extractMethod 8 'E&xtract Method...' 9371 1 nil nil nil 3842 1 3874 #extractToComponent 8 'Extract to &Component...' 1 1 nil nil nil 3842 1 3874 #inlineMessage 8 'Inline &Message' 13467 1 nil nil nil 4098 4097 3842 1 3874 #inlineTemporary 8 '&Inline Temporary' 13481 1 nil nil nil 3842 1 3874 #moveTempToInnerScope 8 'Move to Inner &Scope' 9655 1 nil nil nil 3842 1 3874 #convertTempToInstVar 8 'Con&vert to Instance Variable' 1 1 nil nil nil 4098 4097 3842 1 3874 #inlineParameter 8 'In&line Parameter' 1 1 nil nil nil 3842 1 3874 #removeParameter 8 'Remove &Parameter' 1 1 nil nil nil 8 'Re&factorings' #codeRefactoringsMenu 134217729 3922 nil true 3968 8 'Refactoring.ico' 4016 nil 46249 nil nil 4098 4097 3794 nil true 34 7 3842 1 3874 #toggleAutoCompletion 8 '&Auto-complete' 1 1 nil nil nil 3842 1 3874 #toggleIndentationGuides 8 'Indentation &Guides' 1 1 nil nil nil 3842 1 3874 #toggleLineEndings 8 'Line &Endings' 1 1 6434 $¶ 8 'Arial' nil nil nil nil 1 nil nil nil nil 3842 1 3874 #toggleLineNumbers 8 'Line N&umbers' 1 1 nil nil nil 3842 1 3874 #toggleStyling 8 '&Syntax Coloring' 1 1 nil nil nil 3842 1 3874 #toggleWhitespace 8 'W&hitespace' 1 1 nil nil nil 3842 1 3874 #toggleWordWrap 8 '&Word Wrap' 1 1 nil nil nil 8 '&Options' nil 134217729 3922 nil true 3968 8 'Preferences.ico' 4016 nil 46265 nil nil 8 '&Workspace' nil 134217729 nil nil 46267 nil nil 3794 nil true 34 22 3842 1 3874 #resumeProcess 8 'G&o/detach' 1257 1 nil nil nil 3842 1 3874 #toggleAnimation 8 '&Animate' 1 1 nil nil nil 3842 1 3874 #terminateProcess 8 '&Terminate' 5353 1 nil nil nil 3842 1 3874 #killProcess 8 '&Kill' 1 1 nil nil nil 3842 1 3874 #userBreak 8 '&Break' 1 1 nil nil nil 4098 4097 3842 1 3874 #stepInto 8 'Step &Into' 1269 5 3922 nil true 3968 8 'StepInto.ico' 4016 nil nil 3842 1 3874 #stepOver 8 'Step O&ver' 1267 5 3922 nil true 3968 8 'StepOver.ico' 4016 nil nil 3842 1 3874 #stepOut 8 'Step O&ut' 5365 1 3922 nil true 3968 8 'StepOut.ico' 4016 nil nil 3842 1 3874 #runToCursor 8 'Run to &Cursor' 9459 1 3922 nil true 3968 8 'RunToCursor.ico' 4016 nil nil 3842 1 3874 #runProcess 8 '&Run' 9449 1 3922 nil true 3968 8 'Run.ico' 4016 nil nil 3842 1 3874 #restartFrame 8 'R&estart' 13545 1 6434 $\x2B6E 8 'Cambria' nil nil nil nil 1 nil nil nil nil 3842 1 3874 #returnFromMessage 8 'Retur&n ...' 1 1 6434 $\x23CE 8 'Cambria' nil nil nil 1 1 nil nil nil nil 4098 4097 3794 nil true 8 #() 8 'Im&plement in' #implementDNUMenu 134217729 nil nil 46293 nil nil 3794 nil true 34 14 3794 nil true 34 3 3842 1 3874 #renameMethod 8 'All...' 1 1 nil nil nil 3842 1 3874 #renameMethodInHierarchy 8 'In &Hierarchy...' 1 1 nil nil nil 3842 1 3874 #renameMethodInPackage 8 'In &Package...' 1 1 nil nil nil 8 'Re&name' nil 134217729 nil nil 46301 nil nil 3842 1 3874 #safeRemoveMethods 8 'Rem&ove' 1 1 nil nil nil 4098 4097 3842 1 3874 #addParameter 8 'Add &Parameter...' 1 1 nil nil nil 3794 nil true 8 #() 8 'Remo&ve Parameter' #removeParameterMenu 134217729 nil nil 46307 nil nil 3794 nil true 8 #() 8 'Rena&me Parameter' #renameParameterMenu 134217729 nil nil 46309 nil nil 3794 nil true 8 #() 8 '&Inline Parameter' #inlineParameterMenu 134217729 nil nil 46311 nil nil 4098 4097 3794 nil true 8 #() 8 'Rename &Temporary' #renameTempMenu 134217729 nil nil 46313 nil nil 3794 nil true 8 #() 8 'Convert Temp to Inst. Var.' #convertTempToInstVarMenu 134217729 nil nil 46315 nil nil 4098 4097 3842 1 3874 #inlineAllSelfSends 8 'Inline &Self Sends' 1 1 nil nil nil 3842 1 3874 #pushUpMethods 8 'Push &Up' 1 1 nil nil nil 3842 1 3874 #pushDownMethods 8 'Push &Down' 1 1 nil nil nil 8 'Refactorin&gs' #methodRefactoringsMenu 134217729 3922 nil true 3968 8 'Refactoring.ico' 4016 nil 46323 nil nil 4098 4097 3842 1 3874 #toggleBreakpoint 8 'Toggle Breakpoint' 1265 1 nil nil nil 3842 1 3874 #toggleDisassembly 8 'Disasse&mbly' 9461 1 nil nil nil 3842 1 3874 #showNextStatement 8 'Show Ne&xt Statement' 17621 1 3922 nil true 3968 8 'ShowNextStatement.ico' 4016 nil nil 4098 4097 3794 nil true 34 2 3842 1 3874 #moreFrames 8 '&More' 1 1 nil nil nil 3842 1 3874 #allFrames 8 'A&ll' 1 1 nil nil nil 8 'Call &Stack' nil 134217729 nil nil 46335 nil nil 8 '&Debug' nil 134217729 nil nil 46337 nil nil 3794 nil true 34 3 3842 1 3874 #undoChange 8 '&Undo <1d>' 1 1 3922 nil true 3968 8 'EditUndo.ico' 4016 nil nil 3842 1 3874 #redoChange 8 '&Redo <1d>' 1 1 3922 nil true 3968 8 'EditRedo.ico' 4016 nil nil 3842 1 3874 #clearChangeHistory 8 'Clear Change &History' 1 1 3922 nil true 3968 8 'MethodHistoryErase.ico' 4016 nil nil 8 'H&istory' nil 134217729 nil nil 46345 nil nil 3794 nil true 8 #() 8 '&Tools' #toolsMenu 134217729 nil nil 46347 nil nil 3794 nil true 8 #() 8 'Wi&ndow' #windowMenu 134217729 nil nil 46349 nil nil 3794 nil true 34 15 3842 1 3874 #helpContents 8 '&Contents' 1025 1 3922 nil true 3968 8 'Help.ico' 4016 nil nil 3842 1 3874 #help 8 'On this &Tool' 1249 1 nil nil nil 3842 1 3874 #helpWhatsThis 8 'What''s This?' 5345 1 nil nil nil 4098 4097 3842 1 3874 #learnSmalltalk 8 'Learn Smalltalk' 1 1 nil nil nil 4098 4097 3842 1 3874 #helpWhatsNew 8 'What''s &New' 1 1 nil nil nil 3842 1 3874 #helpGuidedTour 8 '&Guided Tour' 1 1 nil nil nil 3842 1 3874 #helpTutorials 8 'Tutorials' 1 1 nil nil nil 4098 4097 3842 1 3874 #objectArtsHomePage 8 'Object Arts Homepage' 1 1 3922 nil true 3968 8 '!!APPLICATION' 4016 nil nil 3842 1 3874 #dolphinNewsgroup 8 'Dolphin Newsgroup/Forum' 1 1 nil nil nil 3842 1 3874 #dolphinWikiWeb 8 'Dolphin WikiWeb' 1 1 nil nil nil 4098 4097 3842 1 3874 #aboutDolphin 8 '&About Dolphin Smalltalk' 1 1 6434 $\x1F42C nil nil 196934 1 ##(Smalltalk.RGB) 17741887 nil nil 1 nil nil nil nil 8 '&Help' nil 134217729 nil nil 46373 nil nil 8 '' nil 134217729 nil nil nil nil nil nil nil nil 1 nil nil nil nil 1 nil nil 786 138 144 34 2 850 #createAt:extent: 34 2 898 3839 21 898 1201 801 416 850 #updateMenuBar 992 416 946 8 #[44 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 7 0 0 10 0 0 0 215 9 0 0 154 1 0 0] 34 2 528 2256 1008 nil 27 )!

restartOnMethodSave
	"Answer true if instances of the receiver automatically restart a stack frame when the
	method is saved in that frame."

	^RestartOnMethodSave!

restartOnMethodSave: aBoolean 
	"Sets whether instances of the receiver automatically restart a frame in which the method is
	modified and saved."

	RestartOnMethodSave := aBoolean!

show: titleString process: aProcess topFrame: aStackFrame resumable: aBoolean
	"Private - Show an instance of the receiver on the <Process>, aProcess, configured appropriately
	for the other arguments."

	Cursor wait showWhile: [
		self create
			caption: titleString;
			process: aProcess topFrame: aStackFrame;
			resumable: aBoolean;
			show]!

showWalkbacks
	"Answer true if a walkback is brought up before the debugger"

	^ShowWalkbacks!

showWalkbacks: aBoolean
	"Set the option indicating whether a walkback is brought up before the debugger to aBoolean"

	ShowWalkbacks := aBoolean!

skipSelector: aSymbol of: aBehavior maskClear: maskInteger
	(self skipTable lookup: aBehavior)
		ifNotNil: 
			[:classTable |
			(classTable lookup: aSymbol)
				ifNotNil: 
					[:mask |
					| newMask |
					newMask := mask maskClear: maskInteger.
					newMask = 0
						ifTrue: 
							[classTable removeKey: aSymbol.
							classTable isEmpty ifTrue: [self skipTable removeKey: aBehavior]]
						ifFalse: [classTable at: aSymbol put: newMask]]]!

skipSelector: aSymbol of: aBehavior maskSet: maskInteger 
	| classTable |
	classTable := self skipTable at: aBehavior ifAbsentPut: [IdentityDictionary new].
	classTable at: aSymbol put: ((classTable at: aSymbol ifAbsent: [0]) bitOr: maskInteger)!

skipSelector: selector of: behavior type: typeMask 
	"Private - Add the specified method to the set of those skipped by the debugger
	The typeMask specifies what type of skip-over the Debugger will perform when
	encountering a debug halt/step in the method:
		1	- Does not break in the method itself, but will step into methods it in turn calls.
		2 	- Does not break in the method or any of its subsidiary methods.
		4	- The method is a critical section and cannot be safely debugged. Do not stop regardless of debug mode."

	(self skipTable at: behavior ifAbsentPut: [IdentityDictionary new]) at: selector put: typeMask!

skipTable
	^SkipTable ifNil: [SkipTable := LookupTable new]!

uninitialize
	"Private - Uninitialize the receiver prior to remove from the system."

	self interrupts do: [:each | ProcessorScheduler interruptSelectors at: each first put: #unusedInterrupt:]!

unskipSelector: aSymbol of: aClass
	"Private - Remove the specified method to the set of those skipped by the debugger."

	(self skipTable lookup: aClass) ifNotNil: [:selectors | selectors removeKey: aSymbol ifAbsent: []]! !
!Debugger class categoriesFor: #animatePause!options!public! !
!Debugger class categoriesFor: #animatePause:!options!public! !
!Debugger class categoriesFor: #debugPrintStringFor:!helpers!private! !
!Debugger class categoriesFor: #defaultAdditionalAccelerators!constants!private! !
!Debugger class categoriesFor: #defaultStackDepth!accessing!public! !
!Debugger class categoriesFor: #defaultStackDepth:!accessing!public! !
!Debugger class categoriesFor: #displayOn:!displaying!public! !
!Debugger class categoriesFor: #enableDynamicMenus!options!public! !
!Debugger class categoriesFor: #enableDynamicMenus:!options!public! !
!Debugger class categoriesFor: #icon!constants!public! !
!Debugger class categoriesFor: #initialize!initializing!public! !
!Debugger class categoriesFor: #initializeSkipTable!initializing!public! !
!Debugger class categoriesFor: #interrupts!constants!private! !
!Debugger class categoriesFor: #publishedAspects!public! !
!Debugger class categoriesFor: #resource_Basic_debugger!public!resources-views! !
!Debugger class categoriesFor: #resource_Default_view!public!resources-views! !
!Debugger class categoriesFor: #restartOnMethodSave!options!public! !
!Debugger class categoriesFor: #restartOnMethodSave:!options!public! !
!Debugger class categoriesFor: #show:process:topFrame:resumable:!instance creation!private! !
!Debugger class categoriesFor: #showWalkbacks!options!public! !
!Debugger class categoriesFor: #showWalkbacks:!options!public! !
!Debugger class categoriesFor: #skipSelector:of:maskClear:!accessing!private! !
!Debugger class categoriesFor: #skipSelector:of:maskSet:!accessing!private! !
!Debugger class categoriesFor: #skipSelector:of:type:!accessing!private! !
!Debugger class categoriesFor: #skipTable!accessing!public! !
!Debugger class categoriesFor: #uninitialize!initializing!private! !
!Debugger class categoriesFor: #unskipSelector:of:!accessing!private! !

