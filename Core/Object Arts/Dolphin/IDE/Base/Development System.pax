| package |
package := Package name: 'Development System'.
package paxVersion: 1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Development System.
    Copyright (c) Object Arts Ltd, 1997-2007. Portions Copyright (c) CGI Group (Europe) Ltd, 1997.
    
This package contains the basic/essential Dolphin Smalltalk development system tools and support, for example the Class, Method and Package browsers. 
'.

package basicPackageVersion: '2016.7.0.4'.

package classNames
	add: #AbstractPublishedAspectInspector;
	add: #AllMethodsCategory;
	add: #AnonymousKeyedAspect;
	add: #AnonymousKeyedAspectBatchAccessor;
	add: #Aspect;
	add: #AspectAccessor;
	add: #AspectEditorDialog;
	add: #AspectInspector;
	add: #AstPlugin;
	add: #BasicInspector;
	add: #BasicKeyedAspect;
	add: #BatchAspectAccessor;
	add: #BrowserSemanticAnalyser;
	add: #CategoryPrompter;
	add: #CategoryTreeModel;
	add: #ChangedMethodsCategory;
	add: #ChooseClassDialog;
	add: #ClassAspectPlugin;
	add: #ClassBrowserAbstract;
	add: #ClassBrowserPlugin;
	add: #ClassBrowserShell;
	add: #ClassCommentPlugin;
	add: #ClassHierarchyModel;
	add: #ClassHierarchySelector;
	add: #ClassListSelector;
	add: #ClassSelector;
	add: #CommandMenuItemDialog;
	add: #CompiledMethodInspector;
	add: #CompiledMethodSearchPolicy;
	add: #CreateSubclassDialog;
	add: #Debugger;
	add: #DebuggerMethodCategory;
	add: #DebuggerShellView;
	add: #DesignDesktopView;
	add: #DevelopmentSessionManager;
	add: #DictionaryInspector;
	add: #DolphinMoveClassChange;
	add: #DpiSensitiveAspect;
	add: #FlipperInspector;
	add: #Grabber;
	add: #ImageListView;
	add: #IndexedInstVarBatchAccessor;
	add: #InspectorAbstract;
	add: #InspectorShell;
	add: #InstVarAspect;
	add: #InstVarInspector;
	add: #IntermediateCategory;
	add: #InvalidInstallationError;
	add: #KeyedAspect;
	add: #KeyedAspectBatch;
	add: #KeyedAspectBatchAccessor;
	add: #MenuBarComposer;
	add: #MenuBarPainter;
	add: #MenuComposer;
	add: #MenuComposerArena;
	add: #MenuComposerView;
	add: #MenuDialog;
	add: #MenuItemDialog;
	add: #MenuPainter;
	add: #MessageNodeCollector;
	add: #MethodBrowser;
	add: #MethodBrowserShell;
	add: #MethodCategorizationPolicy;
	add: #MethodCategoryEnvironment;
	add: #MethodExplorerShell;
	add: #MethodPrivacyCategory;
	add: #MethodProtocolEnvironment;
	add: #MethodSearch;
	add: #MethodSourceSearch;
	add: #MethodWorkspace;
	add: #PackageBrowserShell;
	add: #PackageDependencyPresenter;
	add: #PackageDependents;
	add: #PackageEnvironment;
	add: #PackageFolder;
	add: #PackageHierarchyModel;
	add: #PackagePrerequisites;
	add: #PackagePrompter;
	add: #PackageSelector;
	add: #PackedReferencesCategory;
	add: #PluggableEnvironment;
	add: #PluggableVirtualMethodCategory;
	add: #PopupMenuPainter;
	add: #PropertyInspector;
	add: #PublishedAspectInspector;
	add: #ReferencesCategory;
	add: #ResourceBrowser;
	add: #ResourceIdentifierDialog;
	add: #ResourceListPresenter;
	add: #ResourcePreview;
	add: #ResourceToolboxPresenter;
	add: #SequenceableCollectionInspector;
	add: #SetBatchAspectAccessor;
	add: #SingleChunkReader;
	add: #SingleUnarySendMethodCategory;
	add: #SmalltalkExpressionStyler;
	add: #SmalltalkMethodStyler;
	add: #SmalltalkSearchPresenter;
	add: #SmalltalkStyler;
	add: #SmalltalkStylingScanner;
	add: #SmalltalkSystem;
	add: #SmalltalkSystemFolder;
	add: #SmalltalkSystemIcon;
	add: #SmalltalkSystemShell;
	add: #SmalltalkToolShell;
	add: #SmalltalkWorkspace;
	add: #SmalltalkWorkspaceDocument;
	add: #SpecialReferencesCategory;
	add: #STBDebugger;
	add: #StructureInspector;
	add: #TwinLevelInspector;
	add: #UnclassifiedMethodsCategory;
	add: #ValueWorkspace;
	add: #ViewComposer;
	add: #ViewComposerArena;
	add: #VirtualMethodCategory;
	add: #VisualObjectFinder;
	add: #VisualShellFinder;
	add: #WalkbackDialog;
	yourself.

package methodNames
	add: #_FPIEEE_RECORD -> #printFieldsOn:limit:;
	add: #_FPIEEE_VALUE -> #printFieldsOn:limit:;
	add: #AbstractCHARField -> #characterCreationMessage;
	add: #AbstractCHARField -> #printAccessorExpression:on:;
	add: #AbstractDocumentShell -> #saveStateOn:;
	add: #AndEnvironment -> #includesResource:;
	add: #Array -> #assignToResourceIdentifier:;
	add: #ArrayedCollection -> #newBatchAccessor;
	add: #ArrayField -> #printAccessorExpressionSuffixOn:;
	add: #ArrayField -> #printMutatorBody:on:;
	add: #ArrayPointerField -> #printAccessorExpressionSuffixOn:;
	add: #ArrayPointerField -> #printMutatorBody:on:;
	add: #Association -> #debugPrintString;
	add: #Behavior -> #changedMethods;
	add: #Behavior -> #hasAbstractMethods;
	add: #Behavior -> #isAbstract;
	add: #Behavior -> #methodFor:;
	add: #Behavior -> #searchForInTool:;
	add: #Behavior -> #whichClassDefinesInstVar:;
	add: #Behavior -> #whichMethodsContainSource:;
	add: #Behavior -> #whichMethodsOnlySelfSend:;
	add: #Behavior -> #whichMethodsReferTo:;
	add: #Behavior -> #whichSelectorsReferTo:;
	add: #BlockClosure -> #cpuCyclesToRun;
	add: #BlockFrame -> #debugIpFor:;
	add: #BlockFrame -> #isRestartable;
	add: #BlockFrame -> #makeDebug;
	add: #BlockFrame -> #mapInitialIpFrom:to:;
	add: #Boolean -> #literalTextStyle;
	add: #BOOLField -> #newAspect:class:;
	add: #BOOLField -> #printAccessorExpressionSuffixOn:;
	add: #BorderLayout -> #arrangementAspect;
	add: #BrowserEnvironment -> #allMethods;
	add: #BrowserEnvironment -> #allResourcesDo:;
	add: #BrowserEnvironment -> #browse;
	add: #BrowserEnvironment -> #definitionsOf:;
	add: #BrowserEnvironment -> #dynamicReferencesTo:;
	add: #BrowserEnvironment -> #forClassHierarchyFrom:;
	add: #BrowserEnvironment -> #forMethodCategories:;
	add: #BrowserEnvironment -> #forPackages:;
	add: #BrowserEnvironment -> #includesMethod:;
	add: #BrowserEnvironment -> #includesMethodUncached:;
	add: #BrowserEnvironment -> #openEditor;
	add: #BrowserEnvironment -> #search;
	add: #BrowserEnvironment -> #search:;
	add: #BrowserEnvironmentWrapper -> #includesResource:;
	add: #BrowserEnvironmentWrapper -> #openEditor;
	add: #Character -> #literalTextStyle;
	add: #CHARField -> #accessorMessage;
	add: #CHARField -> #characterCreationMessage;
	add: #Class -> #changeIndex;
	add: #Class -> #changeIndexValue:;
	add: #Class -> #isAbstract;
	add: #Class -> #isChanged:;
	add: #Class -> #isDeprecated;
	add: #Class -> #methodChanged:;
	add: #Class -> #notifyPackageOfChange;
	add: #Class -> #renameClassVar:to:;
	add: #ClassDescription -> #browse;
	add: #ClassDescription -> #categoriesFor:are:;
	add: #ClassDescription -> #commentStamp:prior:;
	add: #ClassDescription -> #copy:from:;
	add: #ClassDescription -> #copy:from:categories:;
	add: #ClassDescription -> #copy:from:classified:;
	add: #ClassDescription -> #copyAll:from:;
	add: #ClassDescription -> #copyAll:from:classified:;
	add: #ClassDescription -> #copyAllCategoriesFrom:;
	add: #ClassDescription -> #copyCategory:from:;
	add: #ClassDescription -> #copyCategory:from:classified:;
	add: #ClassDescription -> #isDeprecated;
	add: #ClassDescription -> #methodsFor:;
	add: #ClassDescription -> #methodsFor:stamp:;
	add: #ClassDescription -> #newInstanceAspect:class:;
	add: #ClassDescription -> #privateMethods;
	add: #ClassDescription -> #publicMethods;
	add: #ClassDescription -> #renameInstVar:to:;
	add: #ClassEnvironment -> #includesResource:;
	add: #ClassEnvironment -> #openEditor;
	add: #Collection -> #aspectDisplayOn:;
	add: #Collection -> #debugPrintString;
	add: #Collection -> #maxDebugPrint;
	add: #Collection -> #newBatchAccessor;
	add: #Collection -> #publishedAspects;
	add: #Collection -> #publishedKeyedAspects;
	add: #Collection -> #publishedKeyedAspectsBatchSize;
	add: #COLORREFField -> #newAspect:class:;
	add: #COLORREFField -> #printAccessorExpression:on:;
	add: #COLORREFField -> #printMutatorValueOn:parameter:;
	add: #ComboBox -> #visualObjectAtPoint:;
	add: #CommandMenuItem -> #edit;
	add: #CompiledCode -> #alternateInspectorClass;
	add: #CompiledCode -> #asDebugMethod;
	add: #CompiledCode -> #decodeHeaderOn:;
	add: #CompiledCode -> #disassembly;
	add: #CompiledCode -> #hasCompilationIssues;
	add: #CompiledCode -> #indexOfIP:;
	add: #CompiledCode -> #isAbstract;
	add: #CompiledCode -> #isDeprecated;
	add: #CompiledCode -> #isSimpleSelfSend:;
	add: #CompiledCode -> #stylerClass;
	add: #CompiledExpression -> #asDebugMethod;
	add: #CompiledExpression -> #stylerClass;
	add: #CompiledMethod -> #asDebugMethod;
	add: #CompiledMethod -> #browse;
	add: #CompiledMethod -> #icon;
	add: #CompiledMethod -> #infoTip;
	add: #CompiledMethod -> #searchForInTool:;
	add: #CompiledMethod -> #stylerClass;
	add: #CompileFailedMethod -> #asDebugMethod;
	add: #CompilerNotification -> #okToContinue;
	add: #DateTimeCommonControl -> #publishedAspects;
	add: #Dictionary -> #alternateInspectorClass;
	add: #Dictionary -> #debugPrintString;
	add: #Dictionary -> #newBatchAccessor;
	add: #Dictionary -> #publishedAspects;
	add: #DOUBLEField -> #newAspect:class:;
	add: #EmbeddedField -> #printAccessorExpression:on:;
	add: #ExternalArray -> #printOn:;
	add: #ExternalArray -> #publishedAspects;
	add: #ExternalArray -> #publishedKeyedAspects;
	add: #ExternalArray -> #publishedKeyedAspectsBatchSize;
	add: #ExternalField -> #autoGenCategories;
	add: #ExternalField -> #autoGenComment;
	add: #ExternalField -> #makeInstanceName:;
	add: #ExternalField -> #printAccessor:on:;
	add: #ExternalField -> #printAccessorBody:on:;
	add: #ExternalField -> #printAccessorExpression:on:;
	add: #ExternalField -> #printAccessorExpressionSuffixOn:;
	add: #ExternalField -> #printMutator:on:;
	add: #ExternalField -> #printMutatorBody:on:;
	add: #ExternalField -> #printOffsetExpression:on:;
	add: #ExternalField -> #printOffsetExpression:on:extra:;
	add: #ExternalField -> #valueParameterName;
	add: #ExternalInteger -> #printOn:;
	add: #ExternalIntegerBytes -> #debugPrintString;
	add: #ExternalIntegerBytes -> #publishedKeyedAspects;
	add: #ExternalRectangle -> #displayOn:;
	add: #ExternalRectangle -> #printOn:;
	add: #ExternalStructure -> #alternateInspectorClass;
	add: #ExternalStructure -> #printableFields;
	add: #ExternalStructure -> #printCyclicRefOn:;
	add: #ExternalStructure -> #printFields:on:limit:;
	add: #ExternalStructure -> #printFieldsOn:limit:;
	add: #ExternalStructure -> #printOn:;
	add: #ExternalStructure -> #publishedAspects;
	add: #FILETIME -> #printOn:;
	add: #FillerField -> #printAccessorExpression:on:;
	add: #FillerField -> #printMutatorBody:on:;
	add: #FLOATField -> #newAspect:class:;
	add: #FramingLayout -> #arrangementAspect;
	add: #HANDLEField -> #printAccessorExpressionSuffixOn:;
	add: #Interval -> #debugPrintString;
	add: #Interval -> #newBatchAccessor;
	add: #KernelLibrary -> #queryThreadCycleTime:cycleTime:;
	add: #LargeInteger -> #debugPrintString;
	add: #LayoutManager -> #arrangementAspect;
	add: #ListControlView -> #visualObjectAtPoint:;
	add: #LOGBRUSH -> #printFieldsOn:limit:;
	add: #LOGPEN -> #printFieldsOn:limit:;
	add: #LPVOIDField -> #newAspect:class:;
	add: #LPVOIDField -> #printAccessorExpressionSuffixOn:;
	add: #LVITEMW -> #printableFields;
	add: #Menu -> #edit;
	add: #Menu -> #painterClass;
	add: #MenuBar -> #painterClass;
	add: #Metaclass -> #changeIndex;
	add: #Metaclass -> #isChanged:;
	add: #Metaclass -> #isDeprecated;
	add: #Metaclass -> #methodChanged:;
	add: #MethodProtocol -> #icon;
	add: #MoenTreeView -> #visualObjectAtPoint:;
	add: #MSG -> #printOn:;
	add: #Number -> #literalTextStyle;
	add: #Object -> #alternateInspectorClass;
	add: #Object -> #aspectDisplayOn:;
	add: #Object -> #basicInspect;
	add: #Object -> #browse;
	add: #Object -> #currentPublishedAspectsAsLiteralsMap;
	add: #Object -> #debugPrintString;
	add: #Object -> #halt;
	add: #Object -> #inspect;
	add: #Object -> #inspectorClass;
	add: #Object -> #newAspect:class:;
	add: #Object -> #publicAccessorAspects;
	add: #Object -> #publishedAspects;
	add: #Object -> #publishedEvents;
	add: #Object -> #searchForInTool:;
	add: #OrEnvironment -> #includesResource:;
	add: #Package -> #browse;
	add: #Package -> #defaultAbout;
	add: #Package -> #defaultAboutBitmap;
	add: #Package -> #fileLocator;
	add: #Package -> #icon;
	add: #Package -> #publishedAspects;
	add: #Package -> #searchForInTool:;
	add: #PackageManager -> #getVersionInfoFor:;
	add: #PackageManager -> #isConnected;
	add: #PackageManager -> #sourceControl;
	add: #PointerField -> #printAccessorExpression:on:;
	add: #PointerField -> #printMutatorBody:on:;
	add: #PoolConstantsDictionary -> #browse;
	add: #PoolConstantsDictionary -> #errorModify:value:;
	add: #PoolConstantsDictionary -> #referencesTo:;
	add: #PoolDictionary -> #aspectDisplayOn:;
	add: #Process -> #attachDebugger:topFrame:resumable:;
	add: #Process -> #debug;
	add: #Process -> #debug:topFrame:resumable:;
	add: #Process -> #debuggerClass;
	add: #Process -> #halt:cause:;
	add: #Process -> #primStep:;
	add: #Process -> #showWalkback:callStack:debuggable:resumable:;
	add: #Process -> #step;
	add: #Process -> #step:;
	add: #Process -> #walkback:topFrame:resumable:;
	add: #ProcessorScheduler -> #singleStep:;
	add: #ProtoObject -> #basicInspect;
	add: #ProtoObject -> #debugPrintString;
	add: #ProtoObject -> #halt;
	add: #ProtoObject -> #inspect;
	add: #QWORD -> #printOn:;
	add: #RefactoryChange -> #displayOn:;
	add: #ReferenceView -> #visualObjectAtPoint:;
	add: #RegKeyAbstract -> #debugPrintString;
	add: #ResourceIdentifier -> #assign:;
	add: #ResourceIdentifier -> #assignLiteralResourceData:;
	add: #ResourceIdentifier -> #assignView:;
	add: #ResourceIdentifier -> #browse;
	add: #ResourceIdentifier -> #edit;
	add: #ResourceIdentifier -> #editViewUsing:;
	add: #ResourceIdentifier -> #emit:asStringOn:;
	add: #ResourceIdentifier -> #prompt;
	add: #ResourceIdentifier -> #publishedAspects;
	add: #ResourceIdentifier -> #reassign;
	add: #ScalarField -> #newAspect:class:;
	add: #ScalarField -> #printAccessorExpression:on:;
	add: #ScalarField -> #printMutatorBody:on:;
	add: #ScintillaView -> #publishedAspects;
	add: #SelectorEnvironment -> #addMethods:;
	add: #Semaphore -> #debugPrintString;
	add: #SequenceableCollection -> #alternateInspectorClass;
	add: #SequenceableCollection -> #newBatchAccessor;
	add: #Set -> #newBatchAccessor;
	add: #Slider -> #publishedAspects;
	add: #SpinButton -> #publishedAspects;
	add: #StAbstractVariableNode -> #displayOn:;
	add: #StackFrame -> #debugIpFor:;
	add: #StackFrame -> #debugPrintOn:;
	add: #StackFrame -> #makeDebug;
	add: #StackFrame -> #stackWorkspace;
	add: #StAssignmentNode -> #displayOn:;
	add: #StBlockNode -> #displayOn:;
	add: #StCascadeNode -> #displayOn:;
	add: #StLiteralArrayNode -> #displayOn:;
	add: #StLiteralToken -> #textStyle;
	add: #StLiteralValueNode -> #displayOn:;
	add: #StMessageNode -> #displayOn:;
	add: #StNumberLiteralToken -> #textStyle;
	add: #StOptimizedNode -> #displayOn:;
	add: #StParameterNode -> #displayOn:;
	add: #StPrimitiveNode -> #displayOn:;
	add: #StProgramNode -> #debugPrintString;
	add: #StProgramNode -> #postComments;
	add: #StProgramNode -> #preComments;
	add: #StProgramNode -> #publishedAspects;
	add: #StReturnNode -> #displayOn:;
	add: #String -> #aspectDisplayOn:;
	add: #String -> #debugPrintString;
	add: #String -> #literalTextStyle;
	add: #String -> #newAspect:class:;
	add: #String -> #publishedAspects;
	add: #StringField -> #printAccessorExpressionSuffixOn:;
	add: #StringField -> #printMutatorBody:on:;
	add: #StructureArrayField -> #printAccessorExpressionSuffixOn:;
	add: #StructureArrayPointerField -> #printAccessorExpressionSuffixOn:;
	add: #StructureField -> #printMutatorBody:on:;
	add: #StructurePointer -> #printOn:;
	add: #StSelfVariable -> #valueClass;
	add: #StSelfVariableNode -> #valueClassIn:;
	add: #StSequenceNode -> #displayOn:;
	add: #StSpecialVariableNode -> #displayOn:;
	add: #StSpecialVariableNode -> #valueClassIn:;
	add: #StStaticVariable -> #valueClass;
	add: #StSuperVariable -> #valueClass;
	add: #StSuperVariableNode -> #valueClassIn:;
	add: #StTempDeclNode -> #displayOn:;
	add: #StThisContextVariable -> #valueClass;
	add: #StThisContextVariableNode -> #valueClassIn:;
	add: #StToken -> #postComments;
	add: #StToken -> #preComments;
	add: #StVariable -> #valueClass;
	add: #Symbol -> #aspectDisplayOn:;
	add: #Symbol -> #literalTextStyle;
	add: #Symbol -> #searchForInTool:;
	add: #SYSTEMTIME -> #printOn:;
	add: #ToolbarBitmapButton -> #publishedAspects;
	add: #ToolbarSystemButton -> #publishedAspects;
	add: #TranscriptShell -> #help;
	add: #UndefinedObject -> #aspectDisplayOn:;
	add: #UndefinedObject -> #literalTextStyle;
	add: #ValueModel -> #debugPrintString;
	add: #VariableEnvironment -> #includesMethodUncached:;
	add: #VariableEnvironment -> #updateCachesForMethod:;
	add: #View -> #aspectDisplayOn:;
	add: #View -> #literalStoreArray;
	add: #View -> #publishedAspects;
	add: #View -> #visualObjectAtPoint:;
	add: #WCHARField -> #accessorMessage;
	add: #WCHARField -> #characterCreationMessage;
	add: #WINDOWPLACEMENT -> #printableFields;
	add: #WINDOWPOS -> #printOn:;
	add: 'AbstractCardContainer class' -> #publishedAspectsOfInstances;
	add: 'AbstractCardContainer class' -> #publishedEventsOfInstances;
	add: 'AbstractPen class' -> #publishedAspectsOfInstances;
	add: 'AXControlSite class' -> #publishedAspectsOfInstances;
	add: 'AXValueConvertingControlSite class' -> #publishedAspectsOfInstances;
	add: 'Bag class' -> #publishedAspectsOfInstances;
	add: 'BasicListAbstract class' -> #publishedAspectsOfInstances;
	add: 'Bitmap class' -> #newInstanceAspect:class:;
	add: 'BlockClosure class' -> #publishedAspectsOfInstances;
	add: 'Boolean class' -> #newInstanceAspect:class:;
	add: 'BooleanToText class' -> #publishedAspectsOfInstances;
	add: 'BOOLField class' -> #icon;
	add: 'BorderLayout class' -> #publishedAspectsOfInstances;
	add: 'CardContainer class' -> #publishedAspectsOfInstances;
	add: 'CardContainer class' -> #publishedEventsOfInstances;
	add: 'CardLabel class' -> #publishedAspectsOfInstances;
	add: 'CardLayout class' -> #publishedEventsOfInstances;
	add: 'Category class' -> #icon;
	add: 'CheckBox class' -> #publishedAspectsOfInstances;
	add: 'CheckButton class' -> #publishedAspectsOfInstances;
	add: 'ClassBuilder class' -> #publishedEventsOfInstances;
	add: 'Collection class' -> #newInstanceAspect:class:;
	add: 'Color class' -> #newInstanceAspect:class:;
	add: 'ColorView class' -> #publishedAspectsOfInstances;
	add: 'ComboBox class' -> #publishedAspectsOfInstances;
	add: 'CommandDescription class' -> #publishedAspectsOfInstances;
	add: 'CommandMenuItem class' -> #publishedAspectsOfInstances;
	add: 'CompiledCode class' -> #publishedAspectsOfInstances;
	add: 'CompiledMethod class' -> #overriddenIcon;
	add: 'CompiledMethod class' -> #publishedAspectsOfInstances;
	add: 'ContainerView class' -> #applicableLayoutManagerCategories;
	add: 'ContainerView class' -> #publishedAspectsOfInstances;
	add: 'ControlBarAbstract class' -> #applicableLayoutManagerCategories;
	add: 'ControlBarAbstract class' -> #publishedAspectsOfInstances;
	add: 'ControlView class' -> #publishedAspectsOfInstances;
	add: 'Date class' -> #newInstanceAspect:class:;
	add: 'DateTimePicker class' -> #publishedAspectsOfInstances;
	add: 'DateToText class' -> #publishedAspectsOfInstances;
	add: 'Dictionary class' -> #newInstanceAspect:class:;
	add: 'DOUBLE class' -> #newInstanceAspect:class:;
	add: 'ExternalArray class' -> #newInstanceAspect:class:;
	add: 'ExternalArray class' -> #shouldOverrideGetFieldNames;
	add: 'ExternalInteger class' -> #decompileDefinition;
	add: 'ExternalInteger class' -> #newInstanceAspect:class:;
	add: 'ExternalIntegerBytes class' -> #newInstanceAspect:class:;
	add: 'ExternalMethod class' -> #publishedAspectsOfInstances;
	add: 'ExternalScalar class' -> #shouldOverrideGetFieldNames;
	add: 'ExternalStructure class' -> #autoGenCategory;
	add: 'ExternalStructure class' -> #compileAllDefinitions;
	add: 'ExternalStructure class' -> #compileDefinition;
	add: 'ExternalStructure class' -> #compileGetFieldNames;
	add: 'ExternalStructure class' -> #compileGetMethod:forField:;
	add: 'ExternalStructure class' -> #compileNewFields;
	add: 'ExternalStructure class' -> #compileSetMethod:forField:;
	add: 'ExternalStructure class' -> #decompileDefinition;
	add: 'ExternalStructure class' -> #formatAndCompile:categories:;
	add: 'ExternalStructure class' -> #hasHandCodedMethodFor:;
	add: 'ExternalStructure class' -> #inheritsFieldNamed:;
	add: 'ExternalStructure class' -> #recompileDefinition;
	add: 'ExternalStructure class' -> #shouldCompile:forField:;
	add: 'ExternalStructure class' -> #shouldOverrideGetFieldNames;
	add: 'Float class' -> #newInstanceAspect:class:;
	add: 'FLOAT class' -> #newInstanceAspect:class:;
	add: 'FlowLayout class' -> #publishedAspectsOfInstances;
	add: 'Font class' -> #newInstanceAspect:class:;
	add: 'FontView class' -> #publishedAspectsOfInstances;
	add: 'FramingCalculation class' -> #allCalculations;
	add: 'FramingConstraints class' -> #publishedAspectsOfInstances;
	add: 'FramingLayout class' -> #example1;
	add: 'GdiplusImage class' -> #newInstanceAspect:class:;
	add: 'GridLayout class' -> #publishedAspectsOfInstances;
	add: 'GroupBox class' -> #publishedAspectsOfInstances;
	add: 'HotKey class' -> #publishedAspectsOfInstances;
	add: 'Icon class' -> #choose;
	add: 'Icon class' -> #newInstanceAspect:class:;
	add: 'IconicListAbstract class' -> #publishedAspectsOfInstances;
	add: 'IconicListAbstract class' -> #publishedEventsOfInstances;
	add: 'ImagePresenter class' -> #resource_ImageList_view;
	add: 'ImageViewAbstract class' -> #publishedAspectsOfInstances;
	add: 'InputState class' -> #publishedEventsOfInstances;
	add: 'InternalIcon class' -> #choose;
	add: 'ListBox class' -> #publishedAspectsOfInstances;
	add: 'ListControlView class' -> #publishedAspectsOfInstances;
	add: 'ListControlView class' -> #publishedEventsOfInstances;
	add: 'ListModel class' -> #publishedEventsOfInstances;
	add: 'ListTreeView class' -> #publishedAspectsOfInstances;
	add: 'ListTreeView class' -> #publishedEventsOfInstances;
	add: 'ListView class' -> #publishedAspectsOfInstances;
	add: 'ListView class' -> #publishedEventsOfInstances;
	add: 'ListViewColumn class' -> #publishedAspectsOfInstances;
	add: 'Menu class' -> #publishedAspectsOfInstances;
	add: 'MenuBar class' -> #newInstanceAspect:class:;
	add: 'MenuBar class' -> #publishedAspectsOfInstances;
	add: 'MenuItem class' -> #icon;
	add: 'MethodCategory class' -> #all;
	add: 'MethodProtocol class' -> #ansiIcon;
	add: 'MethodProtocol class' -> #publishedEventsOfInstances;
	add: 'MethodProtocol class' -> #readOnlyIcon;
	add: 'MoenTreeView class' -> #publishedAspectsOfInstances;
	add: 'MoenTreeView class' -> #publishedEventsOfInstances;
	add: 'MonthCalendarView class' -> #publishedAspectsOfInstances;
	add: 'MultilineTextEdit class' -> #publishedAspectsOfInstances;
	add: 'Object class' -> #publishedAspects;
	add: 'Object class' -> #publishedAspectsOfInstances;
	add: 'Object class' -> #publishedEvents;
	add: 'Object class' -> #publishedEventsOfInstances;
	add: 'Package class' -> #changedIcon;
	add: 'Package class' -> #dolphinPackageIcon;
	add: 'Package class' -> #publishedAspectsOfInstances;
	add: 'Package class' -> #publishedEventsOfInstances;
	add: 'PackageManager class' -> #publishedEventsOfInstances;
	add: 'PluggableTypeConverter class' -> #publishedAspectsOfInstances;
	add: 'Point class' -> #publishedAspectsOfInstances;
	add: 'Point3D class' -> #publishedAspectsOfInstances;
	add: 'Presenter class' -> #addView:asResource:;
	add: 'Presenter class' -> #editNewDefaultView;
	add: 'ProgressBar class' -> #publishedAspectsOfInstances;
	add: 'ProportionalLayout class' -> #publishedAspectsOfInstances;
	add: 'ProtoObject class' -> #icon;
	add: 'ProtoObject class' -> #publishedAspects;
	add: 'ProtoObject class' -> #publishedAspectsOfInstances;
	add: 'PushButton class' -> #publishedAspectsOfInstances;
	add: 'RBConfigurableFormatter class' -> #publishedAspects;
	add: 'RBFormatter class' -> #publishedAspects;
	add: 'RBSourceFormatter class' -> #publishedAspects;
	add: 'Rectangle class' -> #publishedAspectsOfInstances;
	add: 'ReferenceView class' -> #publishedAspectsOfInstances;
	add: 'ResourceIdentifier class' -> #prompt;
	add: 'ResourceIdentifier class' -> #publishedAspectsOfInstances;
	add: 'RichTextEdit class' -> #publishedAspectsOfInstances;
	add: 'RichTextPresenter class' -> #publishedEventsOfInstances;
	add: 'ScalarField class' -> #icon;
	add: 'ScintillaAttribute class' -> #publishedAspectsOfInstances;
	add: 'ScintillaIndicatorStyle class' -> #publishedAspectsOfInstances;
	add: 'ScintillaKeyBinding class' -> #publishedAspectsOfInstances;
	add: 'ScintillaMargin class' -> #publishedAspectsOfInstances;
	add: 'ScintillaMarkerDefinition class' -> #publishedAspectsOfInstances;
	add: 'ScintillaTextStyle class' -> #newInstanceAspect:class:;
	add: 'ScintillaTextStyle class' -> #publishedAspectsOfInstances;
	add: 'ScintillaView class' -> #publishedAspectsOfInstances;
	add: 'ScintillaView class' -> #publishedEventsOfInstances;
	add: 'ScrollBar class' -> #publishedAspectsOfInstances;
	add: 'ScrollingDecorator class' -> #publishedAspectsOfInstances;
	add: 'ScrollingDecoratorLayout class' -> #publishedAspectsOfInstances;
	add: 'SearchPolicy class' -> #method;
	add: 'SequenceableCollection class' -> #newInstanceAspect:class:;
	add: 'SessionManager class' -> #publishedEventsOfInstances;
	add: 'Set class' -> #newInstanceAspect:class:;
	add: 'Shell class' -> #registerAsToolWith:;
	add: 'Shell class' -> #unregisterAsToolWith:;
	add: 'ShellView class' -> #publishedAspectsOfInstances;
	add: 'ShellView class' -> #publishedEventsOfInstances;
	add: 'Slider class' -> #publishedAspectsOfInstances;
	add: 'SpinButton class' -> #publishedAspectsOfInstances;
	add: 'SpinButton class' -> #publishedEventsOfInstances;
	add: 'Splitter class' -> #publishedAspectsOfInstances;
	add: 'StackFrame class' -> #publishedAspectsOfInstances;
	add: 'StaticBitmap class' -> #publishedAspectsOfInstances;
	add: 'StaticIcon class' -> #publishedAspectsOfInstances;
	add: 'StaticRectangle class' -> #publishedAspectsOfInstances;
	add: 'StaticText class' -> #applicableTypeConverterCategories;
	add: 'StaticText class' -> #publishedAspectsOfInstances;
	add: 'StaticView class' -> #publishedAspectsOfInstances;
	add: 'StatusBar class' -> #publishedAspectsOfInstances;
	add: 'StatusBarItem class' -> #publishedAspectsOfInstances;
	add: 'StatusBarItemAbstract class' -> #publishedAspectsOfInstances;
	add: 'StringField class' -> #newInstanceAspect:class:;
	add: 'StyledGradientBrush class' -> #publishedAspectsOfInstances;
	add: 'StyledPen class' -> #publishedAspectsOfInstances;
	add: 'Symbol class' -> #newInstanceAspect:class:;
	add: 'SystemDictionary class' -> #publishedEventsOfInstances;
	add: 'TabView class' -> #publishedAspectsOfInstances;
	add: 'TextEdit class' -> #applicableTypeConverterCategories;
	add: 'TextEdit class' -> #publishedAspectsOfInstances;
	add: 'TextEdit class' -> #publishedEventsOfInstances;
	add: 'TextTileIcon class' -> #newInstanceAspect:class:;
	add: 'Time class' -> #newInstanceAspect:class:;
	add: 'TimeToText class' -> #publishedAspectsOfInstances;
	add: 'Toolbar class' -> #publishedAspectsOfInstances;
	add: 'Toolbar class' -> #publishedEventsOfInstances;
	add: 'Toolbar class' -> #resource_Class_browser_tools;
	add: 'Toolbar class' -> #resource_Debugger_tools;
	add: 'Toolbar class' -> #resource_Image_tools;
	add: 'Toolbar class' -> #resource_Resource_tools;
	add: 'Toolbar class' -> #resource_Search_tools;
	add: 'Toolbar class' -> #resource_Smalltalk_tools;
	add: 'Toolbar class' -> #resource_View_composer_alignment_tools;
	add: 'Toolbar class' -> #resource_View_composer_match_size_tools;
	add: 'Toolbar class' -> #resource_View_composer_nudge_tools;
	add: 'Toolbar class' -> #resource_View_composer_spacing_tools;
	add: 'Toolbar class' -> #resource_View_composer_tools;
	add: 'Toolbar class' -> #resource_Workspace_tools;
	add: 'ToolbarBitmapButton class' -> #publishedAspectsOfInstances;
	add: 'ToolbarButton class' -> #publishedAspectsOfInstances;
	add: 'ToolbarSeparator class' -> #icon;
	add: 'ToolbarSeparator class' -> #publishedAspectsOfInstances;
	add: 'ToolbarSystemButton class' -> #publishedAspectsOfInstances;
	add: 'ToolbarTextButton class' -> #publishedAspectsOfInstances;
	add: 'ToolButton class' -> #publishedAspectsOfInstances;
	add: 'Tooltip class' -> #publishedAspectsOfInstances;
	add: 'TranscriptShell class' -> #publishedAspects;
	add: 'TreeModelAbstract class' -> #publishedEventsOfInstances;
	add: 'TreeView class' -> #publishedAspectsOfInstances;
	add: 'TypeConverter class' -> #publishedAspectsOfInstances;
	add: 'ValueConverter class' -> #publishedEventsOfInstances;
	add: 'ValueConvertingControlView class' -> #applicableTypeConverterCategories;
	add: 'ValueConvertingControlView class' -> #publishedAspectsOfInstances;
	add: 'ValueDialog class' -> #publishedEventsOfInstances;
	add: 'ValueModel class' -> #publishedAspectsOfInstances;
	add: 'ValueModel class' -> #publishedEventsOfInstances;
	add: 'ValuePresenter class' -> #publishedEventsOfInstances;
	add: 'VersionInfo class' -> #publishedAspectsOfInstances;
	add: 'View class' -> #editNewDefaultView;
	add: 'View class' -> #makeDefaultResource;
	add: 'View class' -> #makeResource:inClass:;
	add: 'View class' -> #publishedAspectsOfInstances;
	add: 'View class' -> #publishedEventsOfInstances;
	add: 'VS_FIXEDFILEINFO class' -> #publishedAspectsOfInstances;
	add: 'WeakSet class' -> #publishedEventsOfInstances;
	add: 'WebView2View class' -> #publishedAspectsOfInstances;
	add: 'WebView2View class' -> #publishedEventsOfInstances;
	add: 'WinImageList class' -> #newInstanceAspect:class:;
	yourself.

package globalNames
	add: #ClassHierarchyPresenter;
	add: #Inspector;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	add: #ClassHierarchyPresenter;
	add: #Inspector;
	yourself).

package setPrerequisites: #(
	'..\..\ActiveX\OCX\ActiveX Control Hosting'
	'..\..\System\Trace\Debug Trace Stream'
	'..\..\Base\Dolphin'
	'..\..\MVP\Presenters\Accelerator\Dolphin Accelerator Presenter'
	'..\..\MVP\Base\Dolphin Basic Geometry'
	'..\..\MVP\Presenters\Boolean\Dolphin Boolean Presenter'
	'..\..\MVP\Views\Cards\Dolphin Card Containers'
	'..\..\MVP\Presenters\Choice\Dolphin Choice Presenter'
	'..\..\MVP\Presenters\Prompters\Dolphin Choice Prompter'
	'..\..\MVP\Presenters\Collection\Dolphin Collection Presenters'
	'..\..\MVP\Presenters\Color\Dolphin Color Presenter'
	'..\..\MVP\Views\Common Controls\Dolphin Common Controls'
	'..\..\MVP\Dialogs\Common\Dolphin Common Dialogs'
	'..\..\MVP\Views\Control Bars\Dolphin Control Bars'
	'..\..\MVP\Views\Date Time\Dolphin Date Time Controls'
	'..\..\MVP\Presenters\Date Time\Dolphin Date Time Presenters'
	'..\..\MVP\Presenters\Shell\Dolphin Document Presenter'
	'..\..\MVP\Dialogs\Find\Dolphin Find Dialog'
	'..\..\MVP\Presenters\Folder\Dolphin Folder Presenter'
	'..\..\MVP\Presenters\Font\Dolphin Font Presenter'
	'..\..\MVP\Presenters\Image\Dolphin Image Presenter'
	'..\..\MVP\Presenters\Prompters\Dolphin Integer Prompter'
	'..\..\Base\Dolphin Legacy Date & Time'
	'..\..\MVP\Models\List\Dolphin List Models'
	'..\..\MVP\Presenters\List\Dolphin List Presenter'
	'..\..\MVP\Presenters\ListTree\Dolphin List Tree Presenter'
	'..\..\Base\Dolphin Message Box'
	'..\..\MVP\Views\MoenTree\Dolphin MoenTree View'
	'..\..\MVP\Base\Dolphin MVP Base'
	'..\..\MVP\Presenters\Number\Dolphin Number Presenter'
	'..\..\MVP\Dialogs\Progress\Dolphin Progress Dialog'
	'..\..\MVP\Presenters\Prompters\Dolphin Prompter'
	'..\..\MVP\Presenters\Radio\Dolphin Radio Buttons'
	'..\..\Registry\Dolphin Registry Access'
	'..\..\MVP\Presenters\Text\Dolphin Rich Text Presenter'
	'..\..\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\..\MVP\Views\Scrollbars\Dolphin Scrollbars'
	'..\..\MVP\Views\Slider\Dolphin Slider Control'
	'..\..\MVP\Views\Sliding Tray\Dolphin Slidey-Inney-Outey Thing'
	'..\..\Base\Dolphin Source Fileout'
	'..\..\MVP\Views\SpinButton\Dolphin SpinButton Control'
	'..\..\MVP\Views\Styled Views\Dolphin Styled Views'
	'..\..\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\..\MVP\Icons\Dolphin Text Tile Icons'
	'..\..\MVP\Views\Tooltips\Dolphin Tooltips'
	'Dolphin Transcript'
	'..\..\MVP\Presenters\Tree\Dolphin Tree List Presenter'
	'..\..\MVP\Models\Tree\Dolphin Tree Models'
	'..\..\MVP\Presenters\Tree\Dolphin Tree Presenter'
	'..\..\MVP\Type Converters\Dolphin Type Converters'
	'..\..\MVP\Models\Value\Dolphin Value Models'
	'..\..\..\..\Contributions\Burning River\ExternalProcess\ExternalProcess'
	'..\..\MVP\Gdiplus\Gdiplus'
	'..\..\MVP\Icons\Internal Bitmaps and Icons'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Change Objects\RBChangeObjects'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Environments\RBEnvironments'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Formatters\RBFormatters'
	'..\..\System\Compiler\Smalltalk Compiler'
	'..\..\System\Compiler\Smalltalk Parser'
	'..\..\ActiveX\Components\VBScript\VBScript Regular Expressions'
	'..\..\ActiveX\Components\WebView2\WebView2'
	'..\..\ActiveX\Shell\Windows Shell').

package setManualPrerequisites: #(
	'Dolphin Source Fileout').

package!

"Class Definitions"!

Object subclass: #Grabber
	instanceVariableNames: 'aspect flags view composer'
	classVariableNames: 'ConstrainedMask ConstrainHorizontalMask ConstrainVerticalMask Cursors DefaultExtent'
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!

Object subclass: #MenuPainter
	instanceVariableNames: 'view menu conflictingMnemonics conflictingAccelerators'
	classVariableNames: ''
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!

Object subclass: #MethodCategorizationPolicy
	instanceVariableNames: ''
	classVariableNames: 'Default'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #MethodSearch
	instanceVariableNames: 'findDetails regexp literal'
	classVariableNames: 'IgnoreCaseMask'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #SmalltalkSystemIcon
	instanceVariableNames: 'openBlock icon description tool helpId'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #VisualShellFinder
	instanceVariableNames: 'mouseTracker foundObject foundCursor notFoundCursor shellClassFilter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

AttributeDescriptor subclass: #Aspect
	instanceVariableNames: 'name presenterBlock editBlock immediateActionBlock category'
	classVariableNames: 'EditInPlaceMask MultilineValueMask ReadOnlyPresenterBlockMask ValueWorkspaceEditorMask'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Aspect subclass: #DpiSensitiveAspect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Aspect subclass: #KeyedAspect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

KeyedAspect subclass: #AnonymousKeyedAspect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

KeyedAspect subclass: #InstVarAspect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

KeyedAspect subclass: #KeyedAspectBatch
	instanceVariableNames: 'batchSize keys accessorClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

AnonymousKeyedAspect subclass: #BasicKeyedAspect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

BrowserEnvironmentWrapper subclass: #MethodCategoryEnvironment
	instanceVariableNames: 'categories'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

BrowserEnvironmentWrapper subclass: #MethodProtocolEnvironment
	instanceVariableNames: 'protocols'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

BrowserEnvironmentWrapper subclass: #PackageEnvironment
	instanceVariableNames: 'packages'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

BrowserEnvironmentWrapper subclass: #PluggableEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Category subclass: #IntermediateCategory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MethodCategory subclass: #DebuggerMethodCategory
	instanceVariableNames: 'mask'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MethodCategory subclass: #VirtualMethodCategory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

VirtualMethodCategory subclass: #AllMethodsCategory
	instanceVariableNames: ''
	classVariableNames: 'Current'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

VirtualMethodCategory subclass: #ChangedMethodsCategory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

VirtualMethodCategory subclass: #MethodPrivacyCategory
	instanceVariableNames: 'privacy'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

VirtualMethodCategory subclass: #PluggableVirtualMethodCategory
	instanceVariableNames: 'filter isSlowToEnumerate'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

VirtualMethodCategory subclass: #ReferencesCategory
	instanceVariableNames: 'literal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

VirtualMethodCategory subclass: #UnclassifiedMethodsCategory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ReferencesCategory subclass: #PackedReferencesCategory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ReferencesCategory subclass: #SingleUnarySendMethodCategory
	instanceVariableNames: 'selector'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ReferencesCategory subclass: #SpecialReferencesCategory
	instanceVariableNames: 'index'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ChunkReader subclass: #SingleChunkReader
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Error subclass: #InvalidInstallationError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Folder subclass: #PackageFolder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MenuPainter subclass: #MenuBarPainter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MenuPainter subclass: #PopupMenuPainter
	instanceVariableNames: 'itemWidth textOffset submenuOffset acceleratorOffset'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MethodSearch subclass: #MethodSourceSearch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Model subclass: #SmalltalkSystem
	instanceVariableNames: 'systemFolderClass workspaceClass defaultInspectorClass defaultBrowserClass systemFolder packageBrowserClass debuggerClass viewComposerClass protocolBrowserClass workspaceShellClass resourceBrowserClass changedIcon hierarchyBrowserClass preferAlternateInspectors formatterClass classChooserClass resourceIdentifierDialogClass findDetails methodWorkspaceClass allSelectors argumentClasses methodExplorerClass aboutBoxClass testBrowserClass toolbarBitmapSize displayItLocale'
	classVariableNames: 'Current FileDrops RegisteredTools'
	poolDictionaries: 'CompilerFlags SmalltalkParseErrorCodes'
	classInstanceVariableNames: ''!

TreeModel subclass: #CategoryTreeModel
	instanceVariableNames: 'title'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

FolderHierarchyModel subclass: #PackageHierarchyModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

VirtualTreeModel subclass: #ClassHierarchyModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ValueAdaptor subclass: #AspectAccessor
	instanceVariableNames: 'aspectDescriptor'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

AspectAccessor subclass: #BatchAspectAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

BatchAspectAccessor subclass: #IndexedInstVarBatchAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

BatchAspectAccessor subclass: #KeyedAspectBatchAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

IndexedInstVarBatchAccessor subclass: #SetBatchAspectAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

KeyedAspectBatchAccessor subclass: #AnonymousKeyedAspectBatchAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Presenter subclass: #ClassBrowserPlugin
	instanceVariableNames: ''
	classVariableNames: 'DefaultPlugins'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Presenter subclass: #PackageDependencyPresenter
	instanceVariableNames: 'treePresenter tracesPresenter traces packages'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Presenter subclass: #SmalltalkSearchPresenter
	instanceVariableNames: 'environment'
	classVariableNames: 'AutoCompleteDwell'
	poolDictionaries: 'ScintillaConstants'
	classInstanceVariableNames: ''!

Presenter subclass: #SmalltalkWorkspace
	instanceVariableNames: 'evaluationContext errorModel findDetails workspacePool evaluationPools compilationErrors textStyles searchEnvironment modifiedModel flags indicatorStyles'
	classVariableNames: 'Abbreviations AnnotationMode AutoCompleteDwell AutoCompleteMask DefaultCaretColor DefaultFont DefaultTabWidth FontQuality IndicatorStyles IsAutoCompletionCaseInsensitive IsAutoCompletionEnabled IsAutoCompletionSpaceAdded IsAutoCompletionTruncating KeyBindings KeywordCompletions MaxAutoCompletionListSize StandardUnaryReturnTypes TextStyles UseDirectWrite VariableTipsMask WordWrap WrapIndentMode'
	poolDictionaries: 'CompilerFlags ScintillaConstants'
	classInstanceVariableNames: 'additionalKeyBindings commandQueryHandlers'!

Presenter subclass: #TwinLevelInspector
	instanceVariableNames: 'contentsPresenter inspectorPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ClassBrowserPlugin subclass: #AstPlugin
	instanceVariableNames: 'astPresenter sourcePresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ClassBrowserPlugin subclass: #ClassAspectPlugin
	instanceVariableNames: 'textPresenter originalText currentClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ClassAspectPlugin subclass: #ClassCommentPlugin
	instanceVariableNames: ''
	classVariableNames: 'TextStyles WordWrap'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

PackageDependencyPresenter subclass: #PackageDependents
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

PackageDependencyPresenter subclass: #PackagePrerequisites
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SelectableItemsPresenter subclass: #ClassSelector
	instanceVariableNames: 'flags classesPresenter searchEnvironment'
	classVariableNames: 'ClassModeMask'
	poolDictionaries: ''
	classInstanceVariableNames: 'commandQueryHandlers'!

SelectableItemsPresenter subclass: #PackageSelector
	instanceVariableNames: 'filterPresenter packagesPresenter autoSelect'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'commandQueryHandlers'!

ClassSelector subclass: #ClassHierarchySelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ClassSelector subclass: #ClassListSelector
	instanceVariableNames: 'classesListPresenter environment'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ListPresenter subclass: #MethodBrowser
	instanceVariableNames: 'methodsPresenter sourcePresenter filter searchEnvironment refactoringTool versionModel'
	classVariableNames: 'AdditionalAccelerators AutoFormat InfoTips WordWrap'
	poolDictionaries: 'CompilerFlags'
	classInstanceVariableNames: 'commandQueryHandlers'!

ListPresenter subclass: #ResourceListPresenter
	instanceVariableNames: 'filterBlock resourcesPresenter previewPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ListPresenter subclass: #ResourceToolboxPresenter
	instanceVariableNames: 'categoriesPresenter resourcesPresenter iconMap'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Shell subclass: #SmalltalkToolShell
	instanceVariableNames: 'searchPresenter fontSizePresenter'
	classVariableNames: 'CanUseIdeaSpaceMask HistoryDwellTime ReuseIfOpenMask SearchFieldFlashes'
	poolDictionaries: ''
	classInstanceVariableNames: 'optionFlags defaultView defaultExtent defaultSlideyPinsMap additionalKeyBindings commandQueryHandlers'!

AbstractDocumentShell subclass: #SmalltalkWorkspaceDocument
	instanceVariableNames: 'workspacePresenter searchPresenter'
	classVariableNames: 'CanUseIdeaSpace DefaultExtent DefaultView LanguageExtensions ReuseIfOpen VariableTips'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Dialog subclass: #AspectEditorDialog
	instanceVariableNames: 'aspectPresenterInDialog hookPresenter subjectModel aspect aspectRectangle'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Dialog subclass: #CreateSubclassDialog
	instanceVariableNames: 'packagesPresenter subclassesPresenter namePresenter usePackagePresenter package superclassPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Dialog subclass: #MenuItemDialog
	instanceVariableNames: 'titlePresenter commandPresenter iconPresenter imageModel iconIdPresenter inspector cardsPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Dialog subclass: #ResourceIdentifierDialog
	instanceVariableNames: 'classesPresenter resourceNamePresenter classValue'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MenuItemDialog subclass: #CommandMenuItemDialog
	instanceVariableNames: 'acceleratorPresenter isRadioButtonStylePresenter isDefaultPresenter isModalPresenter'
	classVariableNames: ''
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!

MenuItemDialog subclass: #MenuDialog
	instanceVariableNames: 'autoDismissPresenter checkColumnModePresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ValueDialog subclass: #CategoryPrompter
	instanceVariableNames: 'treePresenter flags categoryClass'
	classVariableNames: 'AllowIntermediatesMask AllowReadOnlyMask'
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!

ValueDialog subclass: #ChooseClassDialog
	instanceVariableNames: 'classesPresenter allowNil'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ValueDialog subclass: #MenuComposer
	instanceVariableNames: 'arena menuViews conflictingAccelerators'
	classVariableNames: ''
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!

ValueDialog subclass: #PackagePrompter
	instanceVariableNames: 'packagesPresenter notPackagedPresenter defaultPackage validationBlock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MenuComposer subclass: #MenuBarComposer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkToolShell subclass: #ClassBrowserAbstract
	instanceVariableNames: 'classesPresenter categoriesPresenter methodBrowserPresenter definitionPresenter modePresenter flags history variablesPresenter protocolsPresenter filterPresenter packageModel statusModel versionModel cardsPresenter loadedPlugins methodCategories'
	classVariableNames: 'FilterObjectMethodsMask GrayedMethodFadeFactor HistoryListSize LooseMethodColor ShowInheritedMethodsMask WordWrapDefinition'
	poolDictionaries: ''
	classInstanceVariableNames: 'defaultShowInheritedMethods defaultFilterObjectMethods plugins'!

SmalltalkToolShell subclass: #Debugger
	instanceVariableNames: 'process topFrame temp tempCount depth flags breakWhen stackPresenter sourcePresenter tempsPresenter inspectorPresenter breakAction suspendingList _method refactoringTool'
	classVariableNames: 'AnimateMask AnimatePause DefaultStackDepth DisassemblyMask EnableDynamicMenus MainMask RestartOnMethodSave ResumableMask RunMask RunToCursorBehavior ShowWalkbacks SkipTable StackDepthIncrement'
	poolDictionaries: 'CompilerFlags OpcodePool'
	classInstanceVariableNames: ''!

SmalltalkToolShell subclass: #FlipperInspector
	instanceVariableNames: 'cards'
	classVariableNames: 'Renderers'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkToolShell subclass: #InspectorShell
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkToolShell subclass: #MethodBrowserShell
	instanceVariableNames: 'browserPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkToolShell subclass: #PackageBrowserShell
	instanceVariableNames: 'packagesPresenter classesPresenter methodsPresenter methodRefactoringTool globalsPresenter resourcesPresenter currentCard commentPresenter cardsPresenter updateFlags scriptTextPresenter scriptNamesPresenter prerequisitesPresenter dependentsPresenter statusModel versionModel'
	classVariableNames: 'UpdateMap WordWrapComment'
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!

SmalltalkToolShell subclass: #ResourceBrowser
	instanceVariableNames: 'resourceToolboxPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkToolShell subclass: #SmalltalkSystemShell
	instanceVariableNames: 'systemFolderPresenter'
	classVariableNames: 'Backcolor BackImage BackImageAlphaPercent BackImageIsTiled Default HotKey PlaySystemSounds ResetWhenInvisible Textcolor ViewMode'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkToolShell subclass: #ViewComposer
	instanceVariableNames: 'toolboxPresenter status arenaPresenter inspector composingView ownsComposingView resourceIdentifier addPositionOffset grabbers selections grid viewHierarchyPresenter primarySelection vcFlags modificationStatus image undoList'
	classVariableNames: 'Clipboard DefaultGridResolution ExtentImage ModifiedFlag MouseClickFlag PositionImage RefreshFlag UndoRedoFlag'
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!

ClassBrowserAbstract subclass: #ClassBrowserShell
	instanceVariableNames: ''
	classVariableNames: 'LocalHierarchyMask'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MethodBrowserShell subclass: #MethodExplorerShell
	instanceVariableNames: 'historyTree historyList'
	classVariableNames: 'HistoryListSize'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkWorkspace subclass: #MethodWorkspace
	instanceVariableNames: 'parseTree refactoringTool'
	classVariableNames: 'AutoParseDwell AutoParseMask IsAutoParseEnabled'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkWorkspace subclass: #ValueWorkspace
	instanceVariableNames: 'textModel'
	classVariableNames: 'ValueIsSelfCookie'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ValuePresenter subclass: #BasicInspector
	instanceVariableNames: 'variableNamesPresenter sourcePresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ValuePresenter subclass: #InspectorAbstract
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

BasicInspector subclass: #CompiledMethodInspector
	instanceVariableNames: ''
	classVariableNames: 'MethodTypes'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

BasicInspector subclass: #DictionaryInspector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

BasicInspector subclass: #SequenceableCollectionInspector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

BasicInspector subclass: #StructureInspector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

InspectorAbstract subclass: #AspectInspector
	instanceVariableNames: 'aspectTreePresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'treeUpdateMode treeHasGridLines'!

InspectorAbstract subclass: #VisualObjectFinder
	instanceVariableNames: 'mouseTracker finderIcon heading workspace foundView'
	classVariableNames: 'FindNonDolphinWindows'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

AspectInspector subclass: #AbstractPublishedAspectInspector
	instanceVariableNames: 'aspectValueHolder aspectPresenter isRootAspectVisible isSingleLevelOnly'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

AspectInspector subclass: #InstVarInspector
	instanceVariableNames: 'sourcePresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

AbstractPublishedAspectInspector subclass: #PropertyInspector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

AbstractPublishedAspectInspector subclass: #PublishedAspectInspector
	instanceVariableNames: 'displayPresenter workspacePresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

RefactoryClassChange subclass: #DolphinMoveClassChange
	instanceVariableNames: 'superclassName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ScintillaStyler subclass: #SmalltalkStyler
	instanceVariableNames: 'arrayDepth view last inTag stack'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkStyler subclass: #SmalltalkExpressionStyler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkStyler subclass: #SmalltalkMethodStyler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SingletonSearchPolicy subclass: #CompiledMethodSearchPolicy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

GUISessionManager subclass: #DevelopmentSessionManager
	instanceVariableNames: 'imageStamp installationDirectory backupOnImageSave productDetails showSplashAtStartup'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkScanner subclass: #SmalltalkStylingScanner
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SmalltalkSystemIcon subclass: #SmalltalkSystemFolder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

STBInFiler subclass: #STBDebugger
	instanceVariableNames: 'indentLevel traceStream printOffsets'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

StParseNodeVisitor subclass: #MessageNodeCollector
	instanceVariableNames: 'messages'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

StSemanticAnalyser subclass: #BrowserSemanticAnalyser
	instanceVariableNames: 'isStub'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

View subclass: #MenuComposerView
	instanceVariableNames: 'selectionIndex painter'
	classVariableNames: ''
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!

ContainerView subclass: #MenuComposerArena
	instanceVariableNames: 'dragImageList dragPoint dragMenuIndex dragSource _unused'
	classVariableNames: ''
	poolDictionaries: 'CommCtrlConstants'
	classInstanceVariableNames: ''!

ShellView subclass: #DebuggerShellView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DialogView subclass: #WalkbackDialog
	instanceVariableNames: 'callStack resumable caption debuggable'
	classVariableNames: 'CallStackId Commands IconId'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ImageViewAbstract subclass: #ImageListView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ImageView subclass: #ResourcePreview
	instanceVariableNames: ''
	classVariableNames: 'DesignDesktop'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ImageView subclass: #ViewComposerArena
	instanceVariableNames: 'composer'
	classVariableNames: 'AdornmentHiddenMask'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DesktopView subclass: #DesignDesktopView
	instanceVariableNames: 'dpiAwareness dpi'
	classVariableNames: 'Default System Unaware'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!

ClassHierarchyPresenter := ClassHierarchySelector!

Inspector := BasicInspector!


"Loose Methods"!

!_FPIEEE_RECORD methodsFor!

printFieldsOn: aStream limit: anInteger
	self isNull
		ifTrue: 
			[aStream nextPutAll: 'NULL'.
			^self].
	aStream
		display: #roundingMode;
		nextPut: $=;
		print: self roundingModeName;
		space;
		display: #precision;
		nextPut: $=;
		print: self precisionName;
		space;
		display: #operation;
		nextPut: $=;
		print: self operationName;
		space.
	#(#cause #enable #status) do: 
			[:each |
			aStream
				space;
				display: each;
				nextPut: $=.
			self class printFlags: (self getField: each) on: aStream].
	#(#operand1 #operand2) do: 
			[:each |
			| value |
			value := self getField: each.
			value isValid
				ifTrue: 
					[aStream
						space;
						display: each;
						nextPut: $=;
						print: value]]! !

!_FPIEEE_RECORD categoriesForMethods!
printFieldsOn:limit:!printing!private! !
!

!_FPIEEE_VALUE methodsFor!

printFieldsOn: aStream limit: anInteger
	self isNull
		ifTrue: 
			[aStream nextPutAll: 'NULL'.
			^self].
	self isValid
		ifTrue: 
			[aStream
				display: #format;
				nextPut: $=;
				print: self formatName
			"Don't attempt to display the value as often this may result in overflow/underflow exceptions"]
		ifFalse: [aStream nextPutAll: '<invalid>']! !

!_FPIEEE_VALUE categoriesForMethods!
printFieldsOn:limit:!printing!private! !
!

!AbstractCardContainer class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		removeKey: #layoutManager;
    		yourself!

publishedEventsOfInstances
	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."

	^(super publishedEventsOfInstances)
		add: #currentCardChanged;
		yourself! !

!AbstractCardContainer class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!AbstractCHARField methodsFor!

characterCreationMessage
	^self subclassResponsibility!

printAccessorExpression: aSymbol on: aWriteStream
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will read the value of this field from an instance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	aWriteStream
		nextPut: $(;
		print: Character;
		space;
		display: self characterCreationMessage;
		space;
		nextPutAll: '(bytes ';
		display: self accessorMessage keywords first;
		space.
	self printOffsetExpression: aSymbol on: aWriteStream.
	aWriteStream nextPutAll: '))'! !

!AbstractCHARField categoriesForMethods!
characterCreationMessage!automatic generation!private! !
printAccessorExpression:on:!automatic generation!private! !
!

!AbstractDocumentShell methodsFor!

saveStateOn: aWriteStream 
	"Private - Write the source of a monadic block that will configure an instance of the receiver's class
	to match the state current receiver, to aWriteStream. The block expects a fresh instance of
	the receiver's class as it's parameter"

	aWriteStream nextPutAll: '[:aDocumentShell | 
	aDocumentShell setDocumentData: '.
	self getDocumentData literalStoreEvaluationOn: aWriteStream.
	aWriteStream nextPutAll: (';
		filename: <1p>]' expandMacrosWith: self filename)! !

!AbstractDocumentShell categoriesForMethods!
saveStateOn:!private!saved state! !
!

!AbstractPen class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect color: #color);
    		add: (Aspect integer: #width);
    		add: (Aspect choice: #styleName from: self styleNames);
    		yourself! !

!AbstractPen class categoriesForMethods!
publishedAspectsOfInstances!public! !
!

!AndEnvironment methodsFor!

includesResource: aResourceIdentifier 
	^(environment includesResource: aResourceIdentifier) 
		and: [andedEnvironment includesResource: aResourceIdentifier]! !

!AndEnvironment categoriesForMethods!
includesResource:!public!testing! !
!

!Array methodsFor!

assignToResourceIdentifier: aResourceIdentifier
	"Private - Assign the receiver, as a literal resource array, to aResourceIdentifier"

	aResourceIdentifier assignLiteralResourceData: self! !

!Array categoriesForMethods!
assignToResourceIdentifier:!private! !
!

!ArrayedCollection methodsFor!

newBatchAccessor
	^KeyedAspectBatchAccessor subject: self batchSize: self publishedKeyedAspectsBatchSize! !

!ArrayedCollection categoriesForMethods!
newBatchAccessor!public! !
!

!ArrayField methodsFor!

printAccessorExpressionSuffixOn: aWriteStream
	"Private - Print any extra messages/statements onto the <puttableStream> argument that are required to
	configure the object being read from the structure instance."

	"We need to set the length of the array"

	aWriteStream
		space;
		display: #length:;
		space.
	arrayLength printElementCountExpressionFor: self on: aWriteStream!

printMutatorBody: aSymbol on: aWriteStream
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will write the value of this field into an isntance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	| keywords valueParam |
	valueParam := self valueParameterName.
	aWriteStream
		nextPutAll: '| size |';
		crtab;
		nextPutAll: 'size := (';
		nextPutAll: valueParam;
		space;
		display: #byteSize.
	"Null terminator is included in the reported byteSize, but not the size/basicSize"
	self arrayClass isNullTerminated
		ifTrue: 
			[aWriteStream nextPutAll: ' - '.
			self printStaticElementSizeExpressionOn: aWriteStream].
	self isFixedSize
		ifTrue: 
			[aWriteStream
				nextPutAll: ') ';
				display: #min:;
				nextPutAll: ' ('.
			self printFieldSizeExpressionOn: aWriteStream].
	keywords := #replaceBytesOf:from:to:startingAt: keywords.
	aWriteStream
		nextPutAll: ').';
		crtab;
		nextPutAll: valueParam;
		space;
		display: keywords first;
		nextPutAll: ' bytes ';
		display: keywords second;
		space.
	self
		printOffsetExpression: aSymbol
		on: aWriteStream
		extra: 1.
	aWriteStream
		space;
		display: keywords third;
		space.
	self offset = 0
		ifFalse: 
			[self printOffsetExpression: aSymbol on: aWriteStream.
			aWriteStream nextPutAll: ' + '].
	aWriteStream
		nextPutAll: 'size ';
		display: keywords fourth;
		nextPutAll: ' 1.';
		crtab.
	arrayLength printSetSizeFor: self on: aWriteStream! !

!ArrayField categoriesForMethods!
printAccessorExpressionSuffixOn:!automatic generation!private! !
printMutatorBody:on:!automatic generation!private! !
!

!ArrayPointerField methodsFor!

printAccessorExpressionSuffixOn: aWriteStream
	"Private - Print any extra messages/statements onto the <puttableStream> argument that are required to
	configure the object being read from the structure instance."

	"We need to set the length of the array"

	aWriteStream
		space;
		display: #length:;
		space.
	arrayLength printElementCountExpressionFor: self on: aWriteStream!

printMutatorBody: aSymbol on: aWriteStream
	super printMutatorBody: aSymbol on: aWriteStream.
	aWriteStream
		nextPut: $.;
		crtab.
	arrayLength printSetSizeFor: self on: aWriteStream! !

!ArrayPointerField categoriesForMethods!
printAccessorExpressionSuffixOn:!automatic generation!private! !
printMutatorBody:on:!automatic generation!private! !
!

!Association methodsFor!

debugPrintString
	^key debugPrintString , ' -> ' , value debugPrintString! !

!Association categoriesForMethods!
debugPrintString!public! !
!

!AXControlSite class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect 
					name: #progId
					presenterBlock: [:p :m | TextPresenter createIn: p on: m]
					editBlock: [:p | p model value: (self chooseControl: p model value)]);
		add: (Aspect name: #controlDispatch) beReadOnly;
		add: (Aspect name: #yourself editBlock: [:p | p model value editControlProperties]);
		add: (Aspect boolean: #firesPropertyNotifications);
		add: (Aspect boolean: #firesControlEvents);
		add: (Aspect boolean: #allowContextMenu);
		add: (Aspect boolean: #isDesignMode);
		add: (Aspect boolean: #isDefault);
		add: (Aspect string: #licenseKey);
		yourself! !

!AXControlSite class categoriesForMethods!
publishedAspectsOfInstances!constants!must strip!public! !
!

!AXValueConvertingControlSite class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| applicableTypeConverters |
	applicableTypeConverters := Set new.
	self applicableTypeConverterCategories do: [:each | applicableTypeConverters addAll: each classes].
	^(super publishedAspectsOfInstances)
		add: (Aspect choice: #typeconverter
					evaluationFrom: (applicableTypeConverters asSortedCollection asArray 
							collect: [:each | each name , ' new'])) 
						beImmutable;
		add: (Aspect name: #value);
		yourself! !

!AXValueConvertingControlSite class categoriesForMethods!
publishedAspectsOfInstances!constants!must strip!public! !
!

!Bag class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect collection: #elements);
    		yourself! !

!Bag class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!BasicListAbstract class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect boolean: #canHScroll);
		yourself! !

!BasicListAbstract class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Behavior methodsFor!

changedMethods
	"Private - Answer a <collection> of all the changed methods in the receiver."

	^self methodDictionary select: [:method | method hasChanged]!

hasAbstractMethods
	"Answer whether the receiver has any methods that are by convention considered to be
	abstract (i.e. they consist solely of a send of #subclassResponsibility to self)."

	^self methodDictionary anySatisfy: [:each | each isAbstract]!

isAbstract
	^self isNonInstantiable or: [self hasAbstractMethods]!

methodFor: aSymbol
	^self compiledMethodAt: aSymbol ifAbsent: []!

searchForInTool: aSmalltalkToolShell 
	aSmalltalkToolShell searchForClass: self!

whichClassDefinesInstVar: aString 
	^self whichClassSatisfies: [:aClass | aClass instVarNames includes: aString]!

whichMethodsContainSource: aString
	"Answer a <Set> of methods from the receiver's local method dictionary whose methods contain
	the specified source string."

	^self selectMethods: [:method | method containsSource: aString]!

whichMethodsOnlySelfSend: aSymbol
	"Answer a Set of methods which consist purely of a send-to-self of the specified zero-arg selector."

	^self selectMethods: ((VMLibrary default indexOfSpecialSelector: aSymbol ifAbsent: [])
				ifNil: [[:method | method isSimpleSelfSend: aSymbol]]
				ifNotNil: 
					[:index |
					| specialSend send sendRet |
					specialSend := index + OpcodePool.ShortSpecialSend - 1.
					sendRet := CompiledCode
								packByteCodes: {OpcodePool.PushSelf. specialSend. OpcodePool.ReturnFromMessage} asByteArray.
					send := CompiledCode
								packByteCodes: {OpcodePool.PushSelf. specialSend. OpcodePool.ReturnSelf} asByteArray.
					
					[:method |
					| packed |
					packed := method basicByteCodes.
					packed == send or: [packed == sendRet]]])!

whichMethodsReferTo: anObject
	"Answer a <Set> of methods in the receiver whose literal frames include the argument, anObject."

	^self selectMethods: (self referenceFilterFor: anObject)!

whichSelectorsReferTo: anObject
	"Answer a Set of selectors whose methods access the argument, anObject.
	This is really only included for Blue Book compatibility."

	^(self whichMethodsReferTo: anObject) collect: [:each | each selector]! !

!Behavior categoriesForMethods!
changedMethods!methods-accessing!private! !
hasAbstractMethods!public!testing! !
isAbstract!public!testing! !
methodFor:!accessing!public! !
searchForInTool:!public! !
whichClassDefinesInstVar:!public!RefactoringBrowser! !
whichMethodsContainSource:!methods-testing!public! !
whichMethodsOnlySelfSend:!methods-testing!public! !
whichMethodsReferTo:!methods-testing!public! !
whichSelectorsReferTo:!methods-testing!public! !
!

!Bitmap class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass bitmap: aSymbol! !

!Bitmap class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!BlockClosure methodsFor!

cpuCyclesToRun
	| sem start stop lib hThread |
	lib := KernelLibrary default.
	hThread := lib getCurrentThread.
	start := ULARGE_INTEGER new.
	stop := ULARGE_INTEGER new.
	sem := Semaphore new.
	
	[
	[lib queryThreadCycleTime: hThread cycleTime: start.
	self value.
	lib queryThreadCycleTime: hThread cycleTime: stop]
			ensure: [sem signal]]
			forkAt: Processor userInterruptPriority.
	sem wait.
	^stop value - start value! !

!BlockClosure categoriesForMethods!
cpuCyclesToRun!operations!public! !
!

!BlockClosure class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	aspects add: (Aspect name: #receiver).
	#(#argumentCount #envTempCount #stackTempCount #initialIP)
		do: [:each | aspects add: ((Aspect integer: each)
						beReadOnly;
						yourself)].
	aspects add: (Aspect name: #method).
	^aspects! !

!BlockClosure class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!BlockFrame methodsFor!

debugIpFor: debugMethod 
	^self ip = self block initialIP 
		ifTrue: [self mapInitialIpFrom: self method to: debugMethod]
		ifFalse: [super debugIpFor: debugMethod]!

isRestartable
    	"Private - Answer whether this frame is restartable."
    
    	^self sender notNil!

makeDebug
	"Private - Convert the receiver to a debug frame. "

	| method debugMethod block |
	method := self method.
	method isDebugMethod 
		ifTrue: 
			["Already a debug frame"
			^self].
	super makeDebug.
	debugMethod := self method.
	block := self block.
	"Debug version of method will have different initialIP for the block, so we must remap"
	block initialIP: (self mapInitialIpFrom: method to: debugMethod).
	"If the block has an outer ref, then assume it may contain a ^-return and
	mutate the home frame and its sender into debug frames so that any ^-return
	would break if stepped into."
	self homeFrame 
		ifNotNil: 
			[:home | 
			home makeDebug.
			home sender ifNotNil: [:sender | sender makeDebug]]!

mapInitialIpFrom: aCompiledMethod to: debugCompiledMethod 
	| map debugMap i ip |
	map := aCompiledMethod debugInfo textMap.
	debugMap := debugCompiledMethod debugInfo textMap.
	self assert: [map size == debugMap size].
	ip := self block initialIP.
	i := self class findIP: ip inTextMap: map.
	self assert: [(map at: i) key = ip].
	^(debugMap at: i) key! !

!BlockFrame categoriesForMethods!
debugIpFor:!private! !
isRestartable!private!testing! !
makeDebug!private! !
mapInitialIpFrom:to:!private! !
!

!Boolean methodsFor!

literalTextStyle
	^#literalPseudo! !

!Boolean categoriesForMethods!
literalTextStyle!constants!private! !
!

!Boolean class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass boolean: aSymbol! !

!Boolean class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!BooleanToText class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect name: #format
					chooseFrom: #('nil' '#(''false'' ''true'')' '#(''no'' ''yes'')' '#(''off'' ''on'')')) 
						beImmutable;
		yourself! !

!BooleanToText class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!BOOLField methodsFor!

newAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass boolean: aSymbol!

printAccessorExpressionSuffixOn: aWriteStream
	"Private - Print any extra messages/statements onto the <puttableStream> argument that are required to
	configure the object being read from the structure instance."

	aWriteStream
		space;
		display: #asBoolean! !

!BOOLField categoriesForMethods!
newAspect:class:!adapters!private! !
printAccessorExpressionSuffixOn:!automatic generation!private! !
!

!BOOLField class methodsFor!

icon
	^Boolean icon! !

!BOOLField class categoriesForMethods!
icon!public! !
!

!BorderLayout methodsFor!

arrangementAspect
    	"Private - Answer an Aspect description for the arrangement aspect of Views that are managed
	by the receiver."
    
    	^Aspect choice: #arrangement from: #(north south east west center) andNil: #none
    ! !

!BorderLayout categoriesForMethods!
arrangementAspect!accessing!private! !
!

!BorderLayout class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect integer: #horizontalGap);
    		add: (Aspect integer: #verticalGap);
    		yourself! !

!BorderLayout class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!BrowserEnvironment methodsFor!

allMethods
	"Answer a <Collection> of all methods defined in the environment."

	| methods |
	methods := OrderedCollection new: 256.
	self methodsDo: [:each | methods addLast: each].
	^methods!

allResourcesDo: aBlock 
	ResourceIdentifier allResourceIdentifiersDo: aBlock!

browse
	^self openEditor!

definitionsOf: aString 
	"Answer a <BrowserEnvironment> that includes all methods with selectors matching
	the <readableString> selector pattern argument in this environment. The selector 
	pattern may be wildcarded."

	^(aString includesAnyOf: '*?#') 
		ifTrue: [self implementorsMatching: (aString copyReplacing: $? withObject: $#)]
		ifFalse: [self implementorsOf: aString asSymbol]!

dynamicReferencesTo: aLiteral 
	^MethodCategoryEnvironment referencesTo: aLiteral in: self!

forClassHierarchyFrom: aClass
 	"Answers a <BrowserEnvironment> that includes only aClass and its subclasses, and the corresponding
 	metaclasses. See also #forClassHierarchyOf:."
 
 	| classes |
 	classes := aClass withAllSubclasses asSet.
	classes addAll: aClass class withAllSubclasses.
 	^self forClasses: classes!

forMethodCategories: categoryList 
	^MethodCategoryEnvironment onEnvironment: self categories: categoryList!

forPackages: aCollection
	^PackageEnvironment onEnvironment: self packages: aCollection!

includesMethod: aCompiledMethod
	"Answer whether this environment includes aCompiledMethod"

	^self includesSelector: aCompiledMethod selector in: aCompiledMethod methodClass!

includesMethodUncached: aCompiledMethod 
	"Answer whether this environment includes aCompiledMethod. If the environment uses any sort
	of cache to improve performance, then assume that the cache is stale with respect to the
	specified method."

	^self includesMethod: aCompiledMethod!

openEditor
	"Open an appropriate Dolphin browser on this environment."

	Smalltalk developmentSystem browseClass.!

search
	^search ifNil: [MethodSearch newPattern: (self searchStrings at: 1 ifAbsent: [''])]!

search: aMethodSearch 
	search := aMethodSearch.
	self addSearchString: search pattern! !

!BrowserEnvironment categoriesForMethods!
allMethods!public! !
allResourcesDo:!enumerating!public! !
browse!public! !
definitionsOf:!enquiries!public! !
dynamicReferencesTo:!environments!public! !
forClassHierarchyFrom:!environments!public! !
forMethodCategories:!environments!public! !
forPackages:!environments!public! !
includesMethod:!public!testing! !
includesMethodUncached:!public!testing! !
openEditor!browsing!public! !
search!accessing!public! !
search:!accessing!public! !
!

!BrowserEnvironmentWrapper methodsFor!

includesResource: aResourceIdentifier 
	^false!

openEditor
	"Open an appropriate Dolphin browser on this environment."

	Smalltalk developmentSystem browseEnvironment: self! !

!BrowserEnvironmentWrapper categoriesForMethods!
includesResource:!public!testing! !
openEditor!browsing!public! !
!

!CardContainer class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect font: #font);
		add: (Aspect boolean: #hasButtons);
		add: (Aspect boolean: #hasHotTracking);
		add: (Aspect boolean: #isMultiline);
		add: (Aspect choice: #tabOrientation from: TabView tabOrientations values);
		add: (Aspect choice: #viewMode from: TabView viewModes keys asSortedCollection);
		add: (Aspect block: #getImageBlock);
		add: (Aspect block: #getTextBlock);
		yourself!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #currentCardChanging:;
    		yourself.
    ! !

!CardContainer class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!CardLabel class methodsFor!

publishedAspectsOfInstances
	^(super publishedAspectsOfInstances)
		add: (Aspect string: #text);
		add: (Aspect block: #iconBlock);
		add: (Aspect integer: #helpId);
		yourself! !

!CardLabel class categoriesForMethods!
publishedAspectsOfInstances!public! !
!

!CardLayout class methodsFor!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #currentCardChanged;
    		yourself.
    ! !

!CardLayout class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!Category class methodsFor!

icon
	"Answers an Icon that can be used to represent this class"

	^##(self) defaultIcon! !

!Category class categoriesForMethods!
icon!constants!public! !
!

!Character methodsFor!

literalTextStyle
	^#literalCharacter! !

!Character categoriesForMethods!
literalTextStyle!constants!private! !
!

!CHARField methodsFor!

accessorMessage
	"Private - Answer the receiver's 'accessorStem'."

	^#byteAtOffset:put:!

characterCreationMessage
	^#ansiValue:! !

!CHARField categoriesForMethods!
accessorMessage!public! !
characterCreationMessage!automatic generation!private! !
!

!CheckBox class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect boolean: #is3State);
		yourself! !

!CheckBox class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!CheckButton class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect boolean: #value);
		add: (Aspect boolean: #hasLeftText);
		add: (Aspect boolean: #isPushLike);
		add: (Aspect name: #image);
		add: (Aspect choice: #alignment from: AlignmentMap keys asSortedCollection);
		yourself! !

!CheckButton class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Class methodsFor!

changeIndex
	^self propertyAt: #changeIndex ifAbsent: []!

changeIndexValue: aBlock 
	self propertyManager 
		propertyOf: self
		at: #changeIndex
		ifAbsentPut: aBlock!

isAbstract
	^super isAbstract or: [self class isAbstract]!

isChanged: aBoolean 
	"Flag the receiver as changed or not changed, according to the value 
	of the <Boolean> argument. If the receiver is marked as changed, then
	its owning package (if any) is also so marked."

	self propertyManager isNil ifTrue: [^self].
	"Note that we don't test the existing value of the change flag here, because
	 we want to inform the package regardless (in case it isn't currently changed
	 for some reason)"
	aBoolean 
		ifTrue: 
			[self changeIndexValue: [self sourceManager changesFileSize].
			self notifyPackageOfChange]
		ifFalse: [self removePropertyAt: #changeIndex ifAbsent: []]!

isDeprecated
	^(ClassCategory name: 'Deprecated') includesClass: self!

methodChanged: aCompiledMethod 
	"Private - Flag the receiver as changed or not changed, according to the value 
	of the <Boolean> argument. If the receiver is marked as changed, then
	its owning package (if any) is also so marked."

	self propertyManager isNil ifTrue: [^self].
	self changeIndexValue: [aCompiledMethod changePosition].
	self notifyPackageOfChange!

notifyPackageOfChange
	PackageManager current onClassDirtied: self!

renameClassVar: oldString to: newString
	"Private - Rename the class variable of the receiver named by the <readableString>, oldString, to be
	named by the <readableString>, newString. The variable must be one of the receiver's own class 
	variables , not of one of its superclass'.
	Note: This is a low-level operation that does not recompile any methods, however since the methods
	access class variables via the binding (Association) they will remain valid until recompiled. It is the 
	caller's responsibility to rewrite and recompile methods that reference the variable."

	self classPool changeKey: oldString to: newString.
	self logDefinition.
	self environment classUpdated: self! !

!Class categoriesForMethods!
changeIndex!accessing!private! !
changeIndexValue:!accessing!private! !
isAbstract!public!testing! !
isChanged:!accessing!public! !
isDeprecated!public!source filing! !
methodChanged:!helpers!private! !
notifyPackageOfChange!helpers!private! !
renameClassVar:to:!class hierarchy-mutating!class variables!private! !
!

!ClassBuilder class methodsFor!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #classAdded:;
    		add: #classUpdated:;
    		yourself.
    ! !

!ClassBuilder class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!ClassDescription methodsFor!

browse
    	"Open a suitable browser onto the receiver."
    
    	Smalltalk developmentSystem browseClass: self!

categoriesFor: selector are: categories
	"Compatibility ith IBM Smalltalk fileIn format (which is of the form
	<class> categoriesFor: <selector> are: #([<categoryString>]*).
	Sets the additional categories of a selector if it exists."

	(self includesSelector: selector)
		ifTrue: 
			[categories
				do: [:categoryString | self includeSelector: selector inCategory: categoryString asMethodCategory]]!

commentStamp: stamp prior: prior 
	"Answer a chunk reader which will add a comment to the receiver. Supplied for 
	compatibility with the Squeak fileout format"

	^SingleChunkReader do: [:chunk :filer | self comment: chunk]!

copy: selector from: class
	"Copy the method with the selector <Symbol>, selector, in <ClassDescription>, 
	class, to the receiver's method dictionary, maintaining any existing categories.
	If a compile error occurs then a CompilerNotification is signalled. 
	Answers the new method or nil."

	^self copy: selector from: class categories: (class compiledMethodAt: selector) categories

!

copy: aSymbol from: aClass categories: aCollection 
	"Copy the method with the specified selector <Symbol>, in the <Behavior>, aClass, to the
	receiver's method dictionary, classifying it in each of the the <Collection> of
	<methodCategory>s specified by the last argument. If a compile error occurs then a
	CompilerNotification is signalled. Answers the new method or nil."

	| method |
	method := aClass compiledMethodAt: aSymbol.
	^self 
		compile: method getSource
		categories: aCollection
		package: method owningPackageIfLoose!

copy: aSymbol from: aClass classified: aString
	"Copy the method with the specified selector <Symbol>, in the <Behavior>, aClass, to the
	receiver's method dictionary, adding it to the category identified by the final <String>
	argument."

	"This method is primarily present for Smalltalk-80 compatibility, but differs in that as
	Dolphin supports multiple categories, the existing method classifications are retained and
	'cat' is treated as a new classification. The method is recompiled in its new class. If a
	compile error occurs then a CompilerNotification is signalled. Answers the new method or
	nil."

	| categories |
	categories := (aClass compiledMethodAt: aSymbol) categories.
	categories add: aString asMethodCategory.
	^self
		copy: aSymbol
		from: aClass
		categories: categories!

copyAll: selectors from: class
	"Copy each of the methods with selectors in the <Collection> of <Symbol>s,
	selectors, from the <Behavior>, class, to the receiver's method dictionary, 
	maintaining the methods current categories.
	Answers whether all of the methods copied successfully."

	^selectors allSatisfy: [:selector | (self copy: selector from: class) notNil]!

copyAll: selectors from: class classified: cat
	"Copy each of the methods with selectors in the <Collection> of <Symbol>s,
	selectors, from the <Behavior>, class, to the receiver's method dictionary, 
	adding the new methods to the category with <readableString> name, cat,
	as well as the methods current categories.
	Answers whether all of the methods copied successfully."

	^selectors allSatisfy: [:selector | 
		(self copy: selector from: class classified: cat) notNil]!

copyAllCategoriesFrom: class
	"Copy all categories of method from the <Behavior>, class, to the receiver.
	Answers whether all of the methods copied successfully."
	
	^class selectors allSatisfy: [:selector | (self copy: selector from: class) notNil]!

copyCategory: category from: aClass
	"Copy all methods of the <ClassDescription> class, in the <MethodCategory>
	named by the <readableString>, category, to the receiver. Answers whether all 
	of the methods copied successfully."

	| cat |
	cat := category asMethodCategory.
	^(cat methodsInBehavior: self)
		allSatisfy: [:m | (self
				copy: m selector
				from: aClass
				classified: cat) notNil]!

copyCategory: category from: aClass classified: newCategory
	"Copy all methods of the <ClassDescription> class, in the <MethodCategory>
	named by the <readableString>, category, to the receiver. Answers whether all 
	of the methods copied successfully. The methods are additionally classified
	under the <MethodCategory> named by the <readableString>, newCategory."

	| cat |
	cat := category asMethodCategory.
	^(cat methodsInBehavior: self)
		allSatisfy: [:m | (self
				copy: m selector
				from: aClass
				classified: newCategory) notNil]!

isDeprecated
	^self subclassResponsibility!

methodsFor: categoryName 
	"Answer a chunk reader to read and compile method chunks for the receiver
	to be classified into the method category with the specified <readableString> name.
	This method is present for loading ST files in Green Book format. Ensure
	first that the category name doesn''t, falsely, appear hierarchical."

	| useName |
	useName := categoryName 
				copyReplacing: (self environment at: #Category) separator
				withObject: $/.
	^ChunkReader 
		do: [:chunkString | self compile: chunkString classified: useName]
		inContext: self
		atEnd: []!

methodsFor: name stamp: aString 
	"Answer a chunk reader to read and compile method chunks for the receiver
	to be classified into the method category with the specified <readableString> name.
	The stamp is ignored. This method is for compatibility with the Pharo fileout format."

	| useName |
	useName := name copyReplacing: (self environment at: #Category) separator withObject: $/.
	^ChunkReader 
		do: 
			[:chunkString | 
			self compile: chunkString classified: useName]
		inContext: self
		atEnd: []!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass name: aSymbol!

privateMethods
	"For compatibility with IBM Smalltalk file out format"

	^self methodsFor: 'private'

!

publicMethods
	"For compatibility with IBM Smalltalk file out format"

	^self methodsFor: 'public'

!

renameInstVar: oldString to: newString
	"Private - Rename the instance variable of the receiver named by the <readableString>, oldString, to be
	named by the <readableString>, newString. The variable must be one of the receiver's own instance 
	variables , not of one of its superclasses.
	Note: This is a low-level operation that does not recompile any methods, however since the methods
	access instance variables by index they will remain valid until recompiled. It is the caller's responsibility
	to rewrite and recompile methods that reference the instance variable."

	self setInstanceVariables: (self instVarNames copyReplacing: oldString withObject: newString).
	self logDefinition.
	self environment classUpdated: self! !

!ClassDescription categoriesForMethods!
browse!public! !
categoriesFor:are:!public!source filing-methods! !
commentStamp:prior:!public!source filing-methods!squeak! !
copy:from:!methods-copying!public! !
copy:from:categories:!methods-copying!public! !
copy:from:classified:!methods-copying!public! !
copyAll:from:!methods-copying!public! !
copyAll:from:classified:!methods-copying!public! !
copyAllCategoriesFrom:!methods-copying!public! !
copyCategory:from:!methods-copying!public! !
copyCategory:from:classified:!methods-copying!public! !
isDeprecated!public!source filing! !
methodsFor:!public!source filing-methods! !
methodsFor:stamp:!public!source filing-methods!squeak! !
newInstanceAspect:class:!adapters!private! !
privateMethods!public!source filing-methods! !
publicMethods!public!source filing-methods! !
renameInstVar:to:!instance variables!private! !
!

!ClassEnvironment methodsFor!

includesResource: aResourceIdentifier 
	^self definesClass: aResourceIdentifier owningClass!

openEditor
	"Open an appropriate Dolphin browser on this environment."

	^Smalltalk developmentSystem browseEnvironment: self.! !

!ClassEnvironment categoriesForMethods!
includesResource:!public!testing! !
openEditor!browsing!public! !
!

!Collection methodsFor!

aspectDisplayOn: aStream
	"Private - Append a single-line textual representatin of the receiver to the <puttableStream>
	argument in a form that a user viewing the receiver as the value of a published aspect would 
	like to see it. Typically we use #displayOn: but some classes of object can use alternate display 
	formats.In this case we don't want to include the contents.
	N.B. This is a development time only method that supports the PublishedAspectInspector."
	
	self basicPrintOn: aStream!

debugPrintString
	"Copy of printOn: logic, except using #debugPrintString to print the elements"

	| stream printed |
	stream := String writeStream: 32.
	printed := Processor activeProcess _alreadyPrinted.
	(printed includes: self) ifTrue: [self printCyclicRefOn: stream. ^stream contents].
	printed add: self.
	
	[| tooMany |
	tooMany := stream position + self maxDebugPrint.
	self printPrefixOn: stream.
	self do: 
			[:each | 
			stream position > tooMany 
				ifTrue: 
					[stream nextPutAll: '... etc ...'.
					^stream contents].
			stream nextPutAll: each debugPrintString]
		separatedBy: [stream space].
	self printSuffixOn: stream] 
			ensure: [printed remove: self ifAbsent: []].
	^stream contents!

maxDebugPrint
	^80!

newBatchAccessor
	^IndexedInstVarBatchAccessor subject: self batchSize: self publishedKeyedAspectsBatchSize!

publishedAspects
    	"Answer a <LookupTable> of the <Aspect>s published by the receiver.
    	Implementation Note: By adding superclass aspects to the keyed aspect
    	table we get much better performance because it reduces the number 
    	of rehashes that are necessary due to resizing."
    
    	^(self publishedKeyedAspects)
    		addAll: super publishedAspects;
    		yourself!

publishedKeyedAspects
	"Answers a <LookupTable> of the published aspects of the 
    	receiver's keyed contents."
    
	^(LookupTable new)
		addAll: (self newBatchAccessor getBatchAccessors collect: [:each | each aspectDescriptor]);
		yourself!

publishedKeyedAspectsBatchSize
    	"Private - Answers the number of keyed aspects to display in the PAI return at a time"
    
    	^200
    ! !

!Collection categoriesForMethods!
aspectDisplayOn:!private! !
debugPrintString!printing!public! !
maxDebugPrint!printing!public! !
newBatchAccessor!public! !
publishedAspects!constants!public! !
publishedKeyedAspects!public! !
publishedKeyedAspectsBatchSize!constants!private! !
!

!Collection class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass collection: aSymbol! !

!Collection class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!Color class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass color: aSymbol! !

!Color class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!COLORREFField methodsFor!

newAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass color: aSymbol!

printAccessorExpression: aSymbol on: aWriteStream
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which will read the value of this field from an instance of the structure."

	aWriteStream
		nextPut: $(;
		display: Color;
		space;
		display: #fromCOLORREF:;
		nextPutAll: ' (bytes ';
		display: #dwordAtOffset:;
		space.
	self printOffsetExpression: aSymbol on: aWriteStream.
	aWriteStream nextPutAll: '))'.
	^self!

printMutatorValueOn: aWriteStream parameter: aString
	"Private - Print a suitable expression onto the specified <CodeGenerationContext> which will evaluate to the value to be stored into this field in an instance of the structure when compiled into a mutator method where the value parameter is named by the <String> argument."

	aWriteStream
		nextPutAll: aString;
		space;
		display: #asCOLORREF! !

!COLORREFField categoriesForMethods!
newAspect:class:!adapters!private! !
printAccessorExpression:on:!automatic generation!private! !
printMutatorValueOn:parameter:!automatic generation!development!private! !
!

!ColorView class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		removeKey: #backcolor;
		add: (Aspect color: #value);
		yourself! !

!ColorView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ComboBox methodsFor!

visualObjectAtPoint: aPoint
	"Private - Answers the object that will be found by the VisualObjectFinder at aPoint (in local coordinates)
	within the receiver"

	^self presenter! !

!ComboBox categoriesForMethods!
visualObjectAtPoint:!enquiries!private! !
!

!ComboBox class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect integer: #droppedHeight);
    		add: (Aspect choice: #mode from: Modes);
    		add: (Aspect boolean: #canHScroll);
    		yourself! !

!ComboBox class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!CommandDescription class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect name: #command);
    		add: (Aspect string: #description);
    		add: (Aspect hotkey: #acceleratorKey);
    		add: (Aspect boolean: #isModalCommand);
		add: (Aspect icon: #image);
    		yourself! !

!CommandDescription class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!CommandMenuItem methodsFor!

edit
    	"Private - Edit the receiver in a dialog box."
    
    	(CommandMenuItemDialog createOn: self) showModal! !

!CommandMenuItem categoriesForMethods!
edit!operations!private! !
!

!CommandMenuItem class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect name: #commandDescription);
		add: (Aspect boolean: #isRadioButtonStyle);
		add: (Aspect boolean: #isDefault);
		add: (Aspect icon: #image);
		yourself! !

!CommandMenuItem class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!CompiledCode methodsFor!

alternateInspectorClass
    	^CompiledMethodInspector!

asDebugMethod
    	"Private - Answer a debug version of the receiver with breakpoints after each 
    	expression/statement."
    
    	^self subclassResponsibility!

decodeHeaderOn: aStream 
	"Private - Answer a String describing the method header."

	aStream 
		nextPutAll: (#('Normal' 'Return self' 'Return true' 'Return false' 'Return nil' 'Return literal constant 0' 'Return instance variable' 'Set instance variable' 'Return literal static 0') 
				at: self extraIndex + 1
				ifAbsent: ['Primitive: ']).
	self isPrimitive ifTrue: [aStream print: self primitiveIndex].
	aStream
		nextPutAll: ', ';
		print: self argumentCount;
		nextPutAll: ' args, '.
	self stackTempCount > 0 
		ifTrue: 
			[aStream
				print: self stackTempCount;
				nextPutAll: ' stack temps, '].
	self envInfo > 0 
		ifTrue: 
			[aStream
				print: self envTempCount;
				nextPutAll: ' env temps, '].
	aStream
		print: self literalCount;
		nextPutAll: ' literals'.
	self needsContext ifTrue: [aStream nextPutAll: ', needs context'].
	self isDebugMethod ifTrue: [aStream nextPutAll: ', debug']!

disassembly
	"Private - Answer a <readableString> disassembly listing for the receiver."

	^Smalltalk developmentSystem disassembleMethod: self!

hasCompilationIssues
	^
	[self parseTree analyze.
	false] on: Compiler notificationClass
			do: [:ex | ex severityClass == Notification ifTrue: [ex resume] ifFalse: [ex return: true]]!

indexOfIP: ip 
	^self byteCodeDispatcherClass indexOfIP: ip in: self!

isAbstract
	"Answer whether this is an abstract method."

	^self isSimpleSelfSend: #subclassResponsibility!

isDeprecated
	^self methodClass isDeprecated or: [MethodCategory deprecatedMethods includesMethod: self]!

isSimpleSelfSend: aSymbol
	"Private - Answer whether the receiver is a method that just sends the specified selector (which must be zero-argument) to self. Note that this does not work for special selectors such as #class, #new, etc, that have specific bytecode encodings."

	^(byteCodes == ##(self packByteCodes: {ShortSendSelfZeroArgs. ReturnFromMessage} asByteArray)
		or: [byteCodes == ##(self packByteCodes: {ShortSendSelfZeroArgs. PopReturnSelf} asByteArray)])
			and: [(self basicAt: 1) == aSymbol and: [self extraIndex == 0]]!

stylerClass
	^self subclassResponsibility! !

!CompiledCode categoriesForMethods!
alternateInspectorClass!constants!private! !
asDebugMethod!private! !
decodeHeaderOn:!printing!private! !
disassembly!private! !
hasCompilationIssues!public!searching! !
indexOfIP:!enquiries!private! !
isAbstract!private!testing! !
isDeprecated!enquiries!private! !
isSimpleSelfSend:!private!testing! !
stylerClass!constants!public! !
!

!CompiledCode class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect name: #methodClass) beReadOnly;
		add: (Aspect name: #header) beReadOnly;
		add: (Aspect integer: #argumentCount) beReadOnly;
		add: (Aspect multilineString: #getSource) beReadOnly;
		add: (Aspect name: #byteCodes) beReadOnly;
		add: (Aspect multilineString: #disassembly) beReadOnly;
		add: (Aspect name: #literals);
		add: (Aspect collection: #tempsMap) beReadOnly;
		add: (Aspect collection: #textMap) beReadOnly;
		yourself! !

!CompiledCode class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!CompiledExpression methodsFor!

asDebugMethod
    	"Private - Answer a debug version of the receiver with breakpoints after each 
    	expression/statement."
    
    	| debugMethod |
    	debugMethod := self compilerClass 
    					compileDebugExpression: self getSource 
    					in: self methodClass
    					evaluationPools: self evaluationPools.
    	"Copy across some bits we need as we are an unbound expression"
    	debugMethod sourceDescriptor: self sourceDescriptor.
    	^debugMethod!

stylerClass
	^Smalltalk developmentSystem expressionStylerClass! !

!CompiledExpression categoriesForMethods!
asDebugMethod!private! !
stylerClass!constants!public! !
!

!CompiledMethod methodsFor!

asDebugMethod
    	"Private - Answer a debug version of the receiver with breakpoints after each 
    	expression/statement."
    
    	| debugMethod |
    	self isDebugMethod ifTrue: [^self].
    	debugMethod := self compilerClass compileDebugMethod: self getSource in: self methodClass.
    	"Copy across some bits we need as we are an unbound method"
    	debugMethod 
    		sourceDescriptor: self sourceDescriptor;
    		selector: self selector;
    		isPrivate: self isPrivate.
    	^debugMethod!

browse
    	"Open a suitable browser onto the receiver."
    
    	^Smalltalk developmentSystem browseMethod: self!

icon
	"Answers an Icon that can be used to represent this object."

	^Smalltalk developmentSystem iconForMethod: self!

infoTip
	"Private - Answer a suitable 'info tip' for the receiver."

	| stream |
	stream := String writeStream: 32.
	stream
		display: self;
		nextPutAll: ' ('.
	self realCategories asSortedCollection asArray 
		, (self protocols asSortedCollection: [:a :b | a asSymbol < b asSymbol]) 
			do: [:each | stream display: each]
			separatedBy: [stream nextPutAll: ', '].
	stream nextPut: $).
	^stream contents!

searchForInTool: aSmalltalkToolShell 
	aSmalltalkToolShell searchForMethod: self!

stylerClass
	^Smalltalk developmentSystem methodStylerClass! !

!CompiledMethod categoriesForMethods!
asDebugMethod!private! !
browse!public! !
icon!constants!public! !
infoTip!accessing!development!private! !
searchForInTool:!public! !
stylerClass!constants!public! !
!

!CompiledMethod class methodsFor!

overriddenIcon
	"Private - Answers an Icon that can be used to represent an overridden instance of this class"

	^##((TextTileIcon text: $\x25B4 fontName: 'Segoe UI')
		textcolor: Color dodgerBlue;
		yourself)!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect name: #selector) beReadOnly;
    		yourself
    ! !

!CompiledMethod class categoriesForMethods!
overriddenIcon!constants!private! !
publishedAspectsOfInstances!constants!public! !
!

!CompileFailedMethod methodsFor!

asDebugMethod
    	"Private - Answer a debug version of the receiver with breakpoints after each 
    	expression/statement."
    
	^self! !

!CompileFailedMethod categoriesForMethods!
asDebugMethod!private! !
!

!CompilerNotification methodsFor!

okToContinue
	"Throw up an OK/Cancel message box with the receiver's compilation error/warning
	message, answering true if the user pressed OK to contine the compilation."

	| mb severity |
	severity := self severityClass.
	mb := (MessageBox new)
				caption: 'Compilation ' , self severityName;
				text: ('line <1d>: <2s>' expandMacrosWith: self line with: self errorMessage);
				iconStyleFlag: severity mbIconId;
				yourself.
	^severity == Error 
		ifTrue: 
			[mb
				ok;
				open.
			false]
		ifFalse: 
			[mb buttonStyle: #okCancel.
			mb open == #ok]! !

!CompilerNotification categoriesForMethods!
okToContinue!public!testing! !
!

!ContainerView class methodsFor!

applicableLayoutManagerCategories
    	"Answers a Set of class category containing LayoutManagers that can 
    	be used with the receiver"
    
    	^Set with: (ClassCategory name: 'MVP-Layout Managers-General')!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| applicableLayoutManagers choices categories |
	categories := self applicableLayoutManagerCategories.
	applicableLayoutManagers := LayoutManager allSubclasses
				select: [:each | categories anySatisfy: [:cat | cat includesClass: each]].
	choices := OrderedCollection with: 'nil'.
	applicableLayoutManagers asSortedCollection do: [:each | choices addLast: each name , ' new'].
	^super publishedAspectsOfInstances
		add: (Aspect rectangle: #insets) beImmutable;
		add: (Aspect choice: #layoutManager evaluationFrom: choices) beImmutable;
		add: (Aspect boolean: #clipChildren);
		yourself! !

!ContainerView class categoriesForMethods!
applicableLayoutManagerCategories!constants!public! !
publishedAspectsOfInstances!constants!public! !
!

!ControlBarAbstract class methodsFor!

applicableLayoutManagerCategories
    	"Answers a Set of class category containing LayoutManagers that can 
    	be used with the receiver"
    
    	^Set with: (ClassCategory name: 'MVP-Layout Managers-General')!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| applicableLayoutManagers categories choices |
	applicableLayoutManagers := Set new.
	categories := self applicableLayoutManagerCategories.
	categories do: [:each | applicableLayoutManagers addAll: each classes].
	choices := OrderedCollection with: 'nil'.
	applicableLayoutManagers asSortedCollection 
		do: [:each | choices addLast: each name , ' new'].
	^(super publishedAspectsOfInstances)
		add: (Aspect boolean: #hasDivider);
		add: (Aspect choice: #layoutManager evaluationFrom: choices) beImmutable;
		removeKey: #text;
		yourself
	"add: (Aspect boolean: #isVertical);"! !

!ControlBarAbstract class categoriesForMethods!
applicableLayoutManagerCategories!constants!public! !
publishedAspectsOfInstances!constants!public! !
!

!ControlView class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect color: #forecolor);
    		yourself
    	"We really need these notifications, so probably not wise to allow them to be turned off"
    	"add: (Aspect boolean: #wantParentNotifications);"! !

!ControlView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Date class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
	which is appropriate for representing aspects of the receiver's type."

	^aspectClass date: aSymbol! !

!Date class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!DateTimeCommonControl methodsFor!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	^(super publishedAspects)
		add: (self modelClass newInstanceAspect: #minimum class: Aspect);
		add: (self modelClass newInstanceAspect: #maximum class: Aspect);
		add: (self modelClass newInstanceAspect: #value class: Aspect);
		yourself! !

!DateTimeCommonControl categoriesForMethods!
publishedAspects!public! !
!

!DateTimePicker class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect boolean: #isTimeMode);
		add: (Aspect boolean: #hasUpDown);
		add: (Aspect boolean: #canShowNone);
		add: (Aspect boolean: #hasLongDateFormat);
		add: (Aspect boolean: #isRightAligned);
		add: (Aspect name: #displayFormat);
		yourself! !

!DateTimePicker class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!DateToText class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect string: #format);
    		add: (Aspect name: #locale);
    		yourself! !

!DateToText class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Dictionary methodsFor!

alternateInspectorClass
	"Answer the class of inspector to be used when the user requests to inspect
    	the receiver with the Shift key held down."

	^DictionaryInspector!

debugPrintString
	"Copy of the printOn: logic, except using #debugPrintString to print the elements"

	| stream printed |
	stream := String writeStream: 32.
	printed := Processor activeProcess _alreadyPrinted.
	(printed includes: self) ifTrue: [self printCyclicRefOn: stream. ^stream contents].
	printed add: self.
	
	[| tooMany |
	tooMany := stream position + self maxDebugPrint.
	stream
		basicPrint: self;
		nextPut: $(.
	self associationsDo: 
			[:each | 
			stream position > tooMany 
				ifTrue: 
					[stream nextPutAll: '... etc ...'.
					^stream contents].
			stream nextPutAll: each debugPrintString]
		separatedBy: [stream space].
	stream nextPut: $)] 
			ensure: [printed remove: self ifAbsent: []].
	^stream contents!

newBatchAccessor
	| keys |
	keys := self keys.
	^KeyedAspectBatchAccessor 
		subject: self
		keys: ([keys asSortedCollection] on: Error do: [:ex | keys asOrderedCollection])
		startingAt: 1
		batchSize: self publishedKeyedAspectsBatchSize!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	"This override is necessary to avoid implementation details being included by the 
    	default implementation in Object>>publishedAspects for an empty Dictionary."

	^(self publishedKeyedAspects)
		addAll: self class publishedAspectsOfInstances;
		yourself! !

!Dictionary categoriesForMethods!
alternateInspectorClass!constants!public! !
debugPrintString!printing!public! !
newBatchAccessor!public! !
publishedAspects!constants!public! !
!

!Dictionary class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass dictionary: aSymbol! !

!Dictionary class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!DOUBLE class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass float: aSymbol! !

!DOUBLE class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!DOUBLEField methodsFor!

newAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass name: aSymbol! !

!DOUBLEField categoriesForMethods!
newAspect:class:!adapters!private! !
!

!EmbeddedField methodsFor!

printAccessorExpression: aSymbol on: aWriteStream 
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will read the value of this field from an instance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	"Note that if returning an ExternalStructure subclass, then the resulting object will be a
	reference (an alias) to the original structure embedded in the contents of the receiving
	ExternalStructure, and therefore modifications to it will also modify the complete
	ExternalStructure. If, however, the structureClass is some other object which responds to
	#fromAddress:, the answer may be a copy of the embedded structure (e.g. subclasses of
	External) - so care is needed when updating the result."

	aWriteStream
		nextPutAll: self fieldClassName;
		nextPutAll: ' fromAddress: (';
		nextPutAll: 'bytes';
		nextPutAll: ' yourAddress'.
	self offset = 0 
		ifFalse: 
			[aWriteStream
				space;
				display: #+;
				space.
			self printOffsetExpression: aSymbol on: aWriteStream].
	aWriteStream nextPut: $)! !

!EmbeddedField categoriesForMethods!
printAccessorExpression:on:!automatic generation!private! !
!

!ExternalArray methodsFor!

printOn: aStream
	"Print a string representation of self on aStream."

	| tooMany |
	tooMany := aStream position + #() maxPrint.
	aStream
		basicPrint: self;
		nextPut: $(.
	self isNull 
		ifTrue: [aStream nextPutAll: 'NULL']
		ifFalse: 
			[self do: 
					[:each | 
					aStream position > tooMany 
						ifTrue: 
							[aStream nextPutAll: '... etc ...'.
							^self].
					each printOn: aStream]
				separatedBy: [aStream space]].
	aStream nextPut: $)!

publishedAspects
    	"Answer a <LookupTable> of the <Aspect>s published by the receiver.
    	Implementation Note: By adding superclass aspects to the keyed aspect
    	table we get much better performance because it reduces the number 
    	of rehashes that are necessary due to resizing."
    
    	^(self publishedKeyedAspects)
    		addAll: super publishedAspects;
    		yourself!

publishedKeyedAspects
	"Answers a <LookupTable> of the published aspects of the 
    	receiver's keyed contents."

	| batchAccessor keyedAspects |
	batchAccessor := KeyedAspectBatchAccessor subject: self
				batchSize: self publishedKeyedAspectsBatchSize.
	keyedAspects := batchAccessor getBatchAccessors collect: [:each | each aspectDescriptor].
	^(LookupTable new)
		addAll: keyedAspects;
		yourself!

publishedKeyedAspectsBatchSize
    	"Private - Answers the number of keyed aspects to display in the PAI return at a time"
    
    	^100
    ! !

!ExternalArray categoriesForMethods!
printOn:!printing!public! !
publishedAspects!constants!public! !
publishedKeyedAspects!constants!public! !
publishedKeyedAspectsBatchSize!constants!private! !
!

!ExternalArray class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass sequenceableCollection: aSymbol!

shouldOverrideGetFieldNames
	^false! !

!ExternalArray class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
shouldOverrideGetFieldNames!compiling!private! !
!

!ExternalField methodsFor!

autoGenCategories
	^{ExternalStructure autoGenCategory. self isNonBrowsable ifTrue: ['private'] ifFalse: ['public']}!

autoGenComment
	"Private - Answer a suitable piece of comment to warn the user that a
	method is automatically generated and should not be modified.
	Implementation Note: As of v2.2 this is empty by default as otherwise
	it tends to lead to rather bloated source files."

	^''!

makeInstanceName: className
	^(className first isVowel ifTrue: ['an'] ifFalse: ['a']) , className!

printAccessor: aSymbol on: aPuttableStream
	| remark |
	aPuttableStream
		nextPutAll: aSymbol;
		crtab;
		nextPut: $".
	self isNonBrowsable ifTrue: [aPuttableStream nextPutAll: 'Private - '].
	aPuttableStream
		nextPutAll: 'Answer the <';
		nextPutAll: self fieldClassName;
		nextPutAll: '> value of the receiver''s ''';
		display: aSymbol;
		nextPutAll: ''' field.'.
	remark := self autoGenComment.
	remark notEmpty
		ifTrue: 
			[aPuttableStream
				crtab;
				nextPutAll: remark].
	aPuttableStream
		nextPut: $";
		cr;
		crtab.
	self printAccessorBody: aSymbol on: aPuttableStream!

printAccessorBody: aSymbol on: aWriteStream 
	"Private - Answer suitable method text for compiling a read-accessor method
	to substitute for the receiver (does not include the selector)"

	aWriteStream nextPut: $^.
	self printAccessorExpression: aSymbol on: aWriteStream.
	self printAccessorExpressionSuffixOn: aWriteStream!

printAccessorExpression: aSymbol on: aWriteStream 
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will read the value of this field from an instance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	^self subclassResponsibility!

printAccessorExpressionSuffixOn: aWriteStream 
	"Private - Print any extra messages/statements onto the <puttableStream> argument that are required to
	configure the object being read from the structure instance."

	"By default, nothing is needed."

	!

printMutator: aSymbol on: aPuttableStream
	| fieldName remark paramName |
	fieldName := aSymbol allButLast asSymbol.
	paramName := self valueParameterName.
	aPuttableStream
		nextPutAll: aSymbol;
		space;
		nextPutAll: paramName;
		crtab;
		nextPutAll: '"Set the receiver''s ''';
		display: fieldName;
		nextPutAll: ''' field to the value of the argument, ';
		nextPutAll: paramName.
	remark := self autoGenComment.
	remark notEmpty
		ifTrue: 
			[aPuttableStream
				crtab;
				nextPutAll: remark].
	aPuttableStream
		nextPut: $";
		cr;
		crtab.
	self printMutatorBody: fieldName on: aPuttableStream!

printMutatorBody: aSymbol on: aWriteStream 
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will write the value of this field into an isntance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	^self subclassResponsibility!

printOffsetExpression: aSymbol on: aWriteStream 
	self 
		printOffsetExpression: aSymbol
		on: aWriteStream
		extra: 0!

printOffsetExpression: aSymbol on: aWriteStream extra: anObject
	anObject == 0
		ifTrue: 
			[aWriteStream
				nextPutAll: ExternalStructure fieldOffsetConstantPrefix;
				display: aSymbol]
		ifFalse: 
			[self emitStaticExpression: 
					[:stream |
					stream
						nextPutAll: ExternalStructure fieldOffsetConstantPrefix;
						display: aSymbol;
						nextPutAll: ' + ';
						display: anObject]
				on: aWriteStream]!

valueParameterName
	"Private - Answer the name to use for the value parameter of a setter method generated for
	the field described by the receiver."

	^self makeInstanceName: self fieldClassName! !

!ExternalField categoriesForMethods!
autoGenCategories!private! !
autoGenComment!constants!private! !
makeInstanceName:!automatic generation!private! !
printAccessor:on:!automatic generation!private! !
printAccessorBody:on:!automatic generation!private! !
printAccessorExpression:on:!automatic generation!private! !
printAccessorExpressionSuffixOn:!automatic generation!private! !
printMutator:on:!automatic generation!private! !
printMutatorBody:on:!automatic generation!private! !
printOffsetExpression:on:!automatic generation!private! !
printOffsetExpression:on:extra:!automatic generation!private! !
valueParameterName!automatic generation!constants!private! !
!

!ExternalInteger methodsFor!

printOn: aStream
	"Append a textual representation of the receiver to aStream."

	aStream
		basicPrint: self;
		nextPut: $(.
	self isNull
		ifTrue: [aStream nextPut: $0]
		ifFalse: 
			[self isSigned
				ifTrue: [aStream print: self value]
				ifFalse: 
					[self value
						printOn: aStream
						base: 16
						showRadix: true]].
	aStream nextPut: $)! !

!ExternalInteger categoriesForMethods!
printOn:!printing!public! !
!

!ExternalInteger class methodsFor!

decompileDefinition
	"Don't allow the receiver and its subclasses to be decompiled since they are
	required by fundamental aspects of the system such as streaming"
	!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass integer: aSymbol! !

!ExternalInteger class categoriesForMethods!
decompileDefinition!public! !
newInstanceAspect:class:!adapters!private! !
!

!ExternalIntegerBytes methodsFor!

debugPrintString
	^self printString!

publishedKeyedAspects
    	"Answers a LookupTable of the published aspects of the receiver's keyed contents"
    
    	^LookupTable new
    		! !

!ExternalIntegerBytes categoriesForMethods!
debugPrintString!printing!public! !
publishedKeyedAspects!constants!public! !
!

!ExternalIntegerBytes class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
	which is appropriate for representing aspects of the receiver's type."

	^aspectClass integer: aSymbol! !

!ExternalIntegerBytes class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!ExternalMethod class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect name: #descriptor) beReadOnly;
    		yourself
    ! !

!ExternalMethod class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ExternalRectangle methodsFor!

displayOn: aStream
	"Append a short textual description of the receiver to aStream."

	self isNull ifTrue: [^super displayOn: aStream].
	aStream display: self asRectangle!

printOn: aStream
	"Append a short textual description of the receiver to aStream."

	self isNull ifTrue: [^super printOn: aStream].
	aStream
		basicPrint: self;
		nextPut: $(;
		display: self;
		nextPut: $)! !

!ExternalRectangle categoriesForMethods!
displayOn:!printing!public! !
printOn:!printing!public! !
!

!ExternalScalar class methodsFor!

shouldOverrideGetFieldNames
	^false! !

!ExternalScalar class categoriesForMethods!
shouldOverrideGetFieldNames!compiling!private! !
!

!ExternalStructure methodsFor!

alternateInspectorClass
	"Answer the class of inspector to be used when the user requests to inspect
    	the receiver with the Shift key held down."

	^StructureInspector!

printableFields
	^self getValidFields!

printCyclicRefOn: aStream
	"Private - Append to the argument, aStream, a String whose characters describe
	a cyclic (or recursive) reference to the receiver. Used by some
	printOn: methods (e.g. see Collection) to prevent an infinite recursion."

	aStream nextPutAll: '... a cyclic ref to '.
	self basicPrintOn: aStream.
	aStream nextPutAll: '...'!

printFields: aCollection on: aStream limit: anInteger
	| sep |
	sep := [sep := [aStream space]].
	aCollection do: 
			[:each |
			aStream position > anInteger
				ifTrue: 
					[aStream nextPutAll: '... etc ...'.
					^self].
			(self isFieldBrowsable: each)
				ifTrue: 
					[sep value.
					aStream
						display: each;
						nextPut: $=;
						print: (self getField: each)]]!

printFieldsOn: aStream limit: anInteger
	self isNull
		ifTrue: 
			[aStream nextPutAll: 'NULL'.
			^self].
	self
		printFields: self printableFields
		on: aStream
		limit: anInteger!

printOn: aStream
	"Append a textual representation of the receiver to aStream.
	We use the template definition to do this in a generic way for all correctly 
	defined subclasses. Fields are printed in the order of their offset"

	| printed |
	printed := Processor activeProcess _alreadyPrinted.
	(printed includes: self) ifTrue: [^self printCyclicRefOn: aStream].
	printed add: self.
	
	[| tooMany |
	tooMany := aStream position + self maxPrint.
	self basicPrintOn: aStream.
	aStream nextPut: $(.
	self printFieldsOn: aStream limit: tooMany.
	aStream nextPut: $)]
			ensure: [printed remove: self ifAbsent: []]!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspects.
	self isNull
		ifFalse: 
			[self getValidFields do: 
					[:each |
					| field |
					field := self template at: each.
					field isBrowsable ifTrue: [aspects add: (field newAspect: each class: Aspect)]]].
	^aspects! !

!ExternalStructure categoriesForMethods!
alternateInspectorClass!constants!public! !
printableFields!printing!private! !
printCyclicRefOn:!printing!private! !
printFields:on:limit:!printing!private! !
printFieldsOn:limit:!printing!private! !
printOn:!printing!public! !
publishedAspects!accessing!public! !
!

!ExternalStructure class methodsFor!

autoGenCategory
	"Private - Answer the name of the <MethodCategory> into which the auto-generated 
	structure accessors for the receiver should be compiled."

	^'**compiled accessors**'!

compileAllDefinitions
	"Compile the definitions of the receiver and all its subclasses"

	self withAllSubclassesDo: [:each | each compileDefinition].
!

compileDefinition
	"Builds a new template and generates compiled methods for accessing the fields 
	described by it. Depending on the description held in each field, some accessor
	methods may be left as uncompiled to be addressed via the template and 
	#doesNotUnderstand:"

	self
		newTemplate;
		defineTemplate;
		recompileDefinition!

compileGetFieldNames
	"Private - Define a #getFieldList method for the structure class so that the field names are available even if the template is removed."

	| methodText |
	self shouldOverrideGetFieldNames ifFalse: [^self].
	methodText := String writeStream: 256.
	methodText
		nextPutAll: #getFieldNames;
		crtab;
		nextPutAll: '^#('.
	self fieldNamesFromTemplate do: [:each | methodText print: each] separatedBy: [methodText space].
	methodText nextPut: $).
	self class compile: methodText contents categories: {'constants'. 'private'. self autoGenCategory}!

compileGetMethod: aSymbol forField: anExternalField
	"Private - Generate a compiled 'get' accessor method for the selector aSymbol 
	and field definition anExternalField."

	| methodText |
	anExternalField canGenerateAccessor ifFalse: [^self].
	methodText := String writeStream: 256.
	anExternalField printAccessor: aSymbol on: methodText.
	self formatAndCompile: methodText contents categories: anExternalField autoGenCategories!

compileNewFields
	self definesNewFields ifFalse: [^self].
	self template keysAndValuesDo: 
			[:getSelector :field |
			field isReadable
				ifTrue: 
					[(self shouldCompile: getSelector forField: field)
						ifTrue: [self compileGetMethod: getSelector forField: field]].
			field isWriteable
				ifTrue: 
					[| setSelector |
					setSelector := (getSelector , ':') asSymbol.
					(self shouldCompile: setSelector forField: field)
						ifTrue: [self compileSetMethod: setSelector forField: field]]]!

compileSetMethod: aSelector forField: anExternalField
	"Private - Generate a compiled 'set' accessor method for the selector aSymbol 
	and field definition, anExternalField"

	| methodText |
	anExternalField canGenerateMutator ifFalse: [^self].
	methodText := String writeStream: 256.
	anExternalField printMutator: aSelector on: methodText.
	^self formatAndCompile: methodText contents categories: anExternalField autoGenCategories!

decompileDefinition
	"Remove generated accessor methods from the receiver. The template will be lazily rebuilt."

	{self. self class}
		do: [:each | [each removeCategory: self autoGenCategory] on: NotFoundError do: [:e | e notify]]!

formatAndCompile: aString categories: categories 
	| source |
	source := Smalltalk developmentSystem reformatSource: aString in: self.
	^self compile: source categories: categories!

hasHandCodedMethodFor: selector
	"Private - Answer whether the receiver appears to have a hand coded implementation
	for the specified selector <Symbol>."

	| method |
	method := self compiledMethodAt: selector ifAbsent: [^false].
	^(self autoGenCategory asMethodCategory includesMethod: method) not!

inheritsFieldNamed: aSymbol
	| base |
	base := self superclass.
	^base ~~ Object and: [(base template includesKey: aSymbol) or: [base inheritsFieldNamed: aSymbol]]!

recompileDefinition
	"Private - Recompiles the existing template for the receiver"

	self decompileDefinition.
	self compileNewFields.
	self compileGetFieldNames!

shouldCompile: selector forField: anExternalField
	"Private - Answer whether to compile an accessor method
	with the specified selector for the specified field in the
	receiver."

	^anExternalField canGenerateAccessors and: 
			[(self hasHandCodedMethodFor: selector) not and: 
					["Don't generate inherited fields unless specifically marked for override"
					anExternalField isOverride or: [(self inheritsFieldNamed: (selector upTo: $:) asSymbol) not]]	"Don't overwrite manually written methods"]!

shouldOverrideGetFieldNames
	^self isNonInstantiable not and: 
			[self definesNewFields and: 
					[| categories |
					categories := self class whichNonVirtualCategoriesIncludeSelector: #getFieldNames.
					(categories isEmpty or: [categories includes: self autoGenCategory asMethodCategory]) and: 
							[| inherited |
							inherited := self superclass class lookupMethod: #getFieldNames.
							inherited methodClass == ExternalStructure class
								or: [self fieldNamesFromTemplate asSet ~= (inherited literalAt: 1) asSet]]]]! !

!ExternalStructure class categoriesForMethods!
autoGenCategory!compiling!constants!private! !
compileAllDefinitions!compiling!public! !
compileDefinition!compiling!public! !
compileGetFieldNames!compiling!private! !
compileGetMethod:forField:!compiling!private! !
compileNewFields!compiling!private! !
compileSetMethod:forField:!compiling!private! !
decompileDefinition!compiling!public! !
formatAndCompile:categories:!compiling!private! !
hasHandCodedMethodFor:!compiling!private! !
inheritsFieldNamed:!compiling!private! !
recompileDefinition!compiling!private! !
shouldCompile:forField:!compiling!private! !
shouldOverrideGetFieldNames!compiling!private! !
!

!FILETIME methodsFor!

printOn: aStream 
	"Append a debug representation of the receiver to aStream."

	aStream
		basicPrint: self;
		nextPut: $(;
		display: self;
		nextPut: $)! !

!FILETIME categoriesForMethods!
printOn:!printing!public! !
!

!FillerField methodsFor!

printAccessorExpression: aSymbol on: aWriteStream 
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will read the value of this field from an instance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	^self shouldNotImplement!

printMutatorBody: aSymbol on: aWriteStream 
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will write the value of this field into an isntance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	^self shouldNotImplement! !

!FillerField categoriesForMethods!
printAccessorExpression:on:!automatic generation!private! !
printMutatorBody:on:!automatic generation!private! !
!

!Float class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass float: aSymbol! !

!Float class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!FLOAT class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass float: aSymbol! !

!FLOAT class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!FLOATField methodsFor!

newAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass name: aSymbol! !

!FLOATField categoriesForMethods!
newAspect:class:!adapters!private! !
!

!FlowLayout class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect integer: #horizontalGap);
		add: (Aspect integer: #verticalGap);
		add: (Aspect choice: #alignment from: AlignmentMap keys asSortedCollection);
		yourself! !

!FlowLayout class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Font class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass font: aSymbol! !

!Font class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!FontView class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect font: #value);
    		add: (Aspect string: #previewText);
    		yourself! !

!FontView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!FramingCalculation class methodsFor!

allCalculations
	"This is a design-time method for accessing the complete set of available framing
	calculations so that the user may choose between them. A refelective means of determing the
	set of calculations is used in order to allow the set of available calculations to be lazily
	created at runtime (i.e. after image stripping) , and also to allow for user-extensibility
	without the need to modify a system (class #initialize) method. To add new framing
	calculations follow the pattern of the existing calcs and ensure that the lazy accessor
	method is placed in the 'instance creation' category in order for the calculation to be
	offered as a choice in the view composer."

	^(('instance creation' asMethodCategory methodsInBehavior: self class)
		select: [:each | each argumentCount = 0]) collect: [:each | each value: self withArguments: #()]! !

!FramingCalculation class categoriesForMethods!
allCalculations!accessing!public! !
!

!FramingConstraints class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| topBottomChoices leftRightChoices |
	topBottomChoices := OrderedCollection new.
	leftRightChoices := OrderedCollection new.
	self calculationClass allCalculations do: 
			[:each | 
			each isVertical 
				ifTrue: [topBottomChoices addLast: each name]
				ifFalse: [leftRightChoices addLast: each name]].
	^(super publishedAspectsOfInstances)
		add: (Aspect integer: #topOffset);
		add: (Aspect choice: #topFraming from: (topBottomChoices copyWithout: #fixedViewTop));
		add: (Aspect integer: #bottomOffset);
		add: (Aspect choice: #bottomFraming from: (topBottomChoices copyWithout: #fixedViewBottom));
		add: (Aspect integer: #leftOffset);
		add: (Aspect choice: #leftFraming from: (leftRightChoices copyWithout: #fixedViewLeft));
		add: (Aspect integer: #rightOffset);
		add: (Aspect choice: #rightFraming from: (leftRightChoices copyWithout: #fixedViewRight));
		yourself! !

!FramingConstraints class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!FramingLayout methodsFor!

arrangementAspect
	"Private - Answer an Aspect description for the arrangement aspect of Views that
    	are managed by the recever. Since the aspect contains a <FramingConstraints> instance
    	this must be marked as immutable to ensure that the changes are flushed back correctly"

	^(Aspect name: #arrangement) beImmutable! !

!FramingLayout categoriesForMethods!
arrangementAspect!accessing!private! !
!

!FramingLayout class methodsFor!

example1
	"A simple example of building a view with a framing layout.
	
		FramingLayout example1
	"

	| shell layout label button text1 text2 dpiScale |
	(shell := View desktop addSubView: ShellView new)
		caption: 'FramingLayout example 1';
		backcolor: Color face3d;
		layoutManager: (layout := FramingLayout new).
	dpiScale := shell scaleFactor.
	shell extent: (300 @ 200) * dpiScale.
	shell insets: ((10 @ 10 corner: 10 @ 10) scaledBy: dpiScale).
	label := shell addSubView: StaticText new.
	button := shell addSubView: PushButton new.
	text1 := shell addSubView: MultilineTextEdit new.
	text2 := shell addSubView: MultilineTextEdit new.
	label text: 'Fixed @ Top Left'.
	label rectangle: ((10 @ 10 extent: 100 @ 20) scaledBy: dpiScale).
	button
		text: 'Hugs topright';
		command: #yourself.
	button arrangement
		leftFraming: #fixedViewRight;
		rightFraming: #fixedParentRight;
		leftOffset: -100 * dpiScale;
		rightOffset: 0.
	text1
		text: 'Consumes half the width and all the bottom space';
		wordWrap: true.
	text1 arrangement
		rightFraming: #relativeParentWidth;
		bottomFraming: #fixedParentBottom.
	layout resize: text1 to: ((10 @ 40 corner: 130 @ 190) scaledBy: dpiScale).
	text2
		text: 'Floats in the same relative postion, keeps same extent';
		wordWrap: true.
	text2 arrangement
		leftFraming: #relativeParentWidth;
		rightFraming: #fixedViewLeft;
		topFraming: #relativeParentHeight;
		bottomFraming: #fixedViewTop.
	layout resize: text2 to: ((140 @ 40 corner: 290 @ 80) scaledBy: dpiScale).
	shell show! !

!FramingLayout class categoriesForMethods!
example1!examples!public! !
!

!GdiplusImage class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^(aspectClass name: aSymbol
		presenterBlock: 
			[:p :m | 
			| imagePresenter |
			imagePresenter := ImagePresenter 
						create: 'Gdiplus view'
						in: p
						on: m.
			imagePresenter view isWholeBackgroundErased: true.
			imagePresenter])
		bePresenterBlockReadOnly;
		yourself! !

!GdiplusImage class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!GridLayout class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect integer: #horizontalGap);
    		add: (Aspect integer: #verticalGap);
    		add: (Aspect integer: #rows);
    		add: (Aspect integer: #columns);
    		yourself! !

!GridLayout class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!GroupBox class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
		removeKey: #forecolor;		"#1191: Windows BUTTON control doesn't support changing the foreground colour"
    		yourself! !

!GroupBox class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!HANDLEField methodsFor!

printAccessorExpressionSuffixOn: aWriteStream
	"Private - Print any extra messages/statements onto the <puttableStream> argument that are required to
	configure the object being read from the structure instance."

	aWriteStream
		space;
		display: #asExternalHandle! !

!HANDLEField categoriesForMethods!
printAccessorExpressionSuffixOn:!automatic generation!private! !
!

!HotKey class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect autostring: #value);
    		add: (Aspect name: #invalidCombinationsMask);
    		add: (Aspect name: #defaultKeyMask);
    		removeKey: #typeconverter;
    		yourself! !

!HotKey class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Icon class methodsFor!

choose
	| filename |
	filename := (FileOpenDialog new)
				fileTypes: (Array with: self filesType with: FileDialog allFilesType);
				showModal.
	^filename notNil ifTrue: [self fromFile: filename]!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass icon: aSymbol! !

!Icon class categoriesForMethods!
choose!public! !
newInstanceAspect:class:!adapters!private! !
!

!IconicListAbstract class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	#(#getImageBlock #getInfoTipBlock #customDrawBlock) do: [:each | aspects add: (Aspect block: each)].
	#(#hasHotTracking) do: [:each | aspects add: (Aspect boolean: each)].
	aspects
		add: (Aspect choice: #viewMode from: self viewModes keys asSortedCollection);
		yourself.
	^aspects!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
	^(super publishedEventsOfInstances)
    		add: #labelOf:changedTo:;
    		add: #aboutToEditLabel:accept:;
    		add: #labelOf:editedTo:accept:;
		yourself! !

!IconicListAbstract class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!ImagePresenter class methodsFor!

resource_ImageList_view
	"Answer the literal data from which the 'ImageList view' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_ImageList_view)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.ImageListView) 34 21 nil nil 34 2 8 1140850944 1 416 721990 2 ##(Smalltalk.ValueHolder) nil false 1310726 ##(Smalltalk.EqualitySearchPolicy) nil 327686 ##(Smalltalk.Color) #default nil 5 nil nil nil 416 nil nil 852486 ##(Smalltalk.NullConverter) nil nil nil nil #normal 1 nil #none 983302 ##(Smalltalk.MessageSequence) 138 144 34 2 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 239 7 0 0 110 0 0 0] 193 448 nil 416 674 #text: 34 1 8 '' 416 3 8 #() 328198 ##(Smalltalk.Point) 193 193 nil 27 )! !

!ImagePresenter class categoriesForMethods!
resource_ImageList_view!public!resources-views! !
!

!ImageViewAbstract class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^super publishedAspectsOfInstances
		add: (Aspect bitmap: #value);
		add: (Aspect choice: #viewMode from: self viewModes);
		add: (Aspect boolean: #isWholeBackgroundErased);
		add: (Aspect boolean: #isDoubleBuffered);
		add: (Aspect rectangle: #insets);
		add: (Aspect choice: #imageBorder from: self edgeStyles);
		yourself! !

!ImageViewAbstract class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!InputState class methodsFor!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #aboutToIdle;
    		yourself.
    ! !

!InputState class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!InternalIcon class methodsFor!

choose
	| filename |
	filename := (FileOpenDialog new)
				fileTypes: (Array 
							with: self filesType
							with: Icon filesType
							with: FileDialog allFilesType);
				showModal.
	^filename notNil 
		ifTrue: 
			[(File splitExtensionFrom: filename) asLowercase = 'png' 
				ifTrue: [self fromFile: filename]
				ifFalse: [Icon fromFile: filename]]! !

!InternalIcon class categoriesForMethods!
choose!public! !
!

!Interval methodsFor!

debugPrintString
	^self printString!

newBatchAccessor
	^IndexedInstVarBatchAccessor subject: self batchSize: self publishedKeyedAspectsBatchSize! !

!Interval categoriesForMethods!
debugPrintString!printing!public! !
newBatchAccessor!public! !
!

!KernelLibrary methodsFor!

queryThreadCycleTime: anExternalHandle cycleTime: aULARGE_INTEGER
	<stdcall: bool QueryThreadCycleTime handle qword*>
	^self invalidCall: _failureCode! !

!KernelLibrary categoriesForMethods!
queryThreadCycleTime:cycleTime:!public!win32 functions-performance monitoring! !
!

!LargeInteger methodsFor!

debugPrintString
	| size |
	size := self basicSize.
	^size > 1024
		ifTrue: 
			[String streamContents: 
					[:strm |
					strm
						nextPutAll: 'a ';
						print: size * 8;
						nextPutAll: '-bit ';
						print: self class]]
		ifFalse: [self printString]! !

!LargeInteger categoriesForMethods!
debugPrintString!printing!public! !
!

!LayoutManager methodsFor!

arrangementAspect
    	"Private - Answer an Aspect description for the arrangement aspect of Views that
    	are managed by the recever. The default is to allow for a workspace to edit the
    	arrangement"
    
    	^Aspect name: #arrangement! !

!LayoutManager categoriesForMethods!
arrangementAspect!accessing!private! !
!

!ListBox class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^super publishedAspectsOfInstances
		add: (Aspect boolean: #canHScroll);
		add: (Aspect boolean: #hasPermanentScrollbars);
		add: (Aspect integer: #scrollableWidth);
		add: (Aspect choice: #selectionMode from: self selectionModes keys asSortedCollection);
		yourself! !

!ListBox class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ListControlView methodsFor!

visualObjectAtPoint: aPoint
	"Private - Answers the object that will be found by the VisualObjectFinder at aPoint (in local coordinates)
	within the receiver"

	| object |
	object := super visualObjectAtPoint: aPoint.
	^(self itemFromPoint: aPoint) 
		ifNil: [object]
		ifNotNil: [:item | self objectFromHandle: item ifAbsent: [object]]! !

!ListControlView categoriesForMethods!
visualObjectAtPoint:!enquiries!private! !
!

!ListControlView class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect block: #getTextBlock);
    		yourself!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #selectionChanged;
    		add: #selectionChanging:;
    		yourself.
    ! !

!ListControlView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!ListModel class methodsFor!

publishedEventsOfInstances
	"Answer a <Set> of <Symbol>s that describe the published events triggered by instances of
	the receiver."

	^(super publishedEventsOfInstances)
		add: #item:updatedAtIndex:;
		add: #item:addedAtIndex:;
		add: #item:removedAtIndex:;
		add: #listChanged;
		yourself! !

!ListModel class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!ListTreeView class methodsFor!

publishedAspectsOfInstances
    	"answer the <Aspect>s published by instances of the receiver"
    
	^ (super publishedAspectsOfInstances)

		removeKey: #hasCheckBoxes ifAbsent: [];			"	-- uses the same 'state' stuff as we need for 'buttons'"

		add: (Aspect boolean: #hasButtons);
"		add: (Aspect boolean: #hasLines);					-- dummied out, we don't have any lines :-( "
		add: (Aspect boolean: #hasLinesAtRoot);			"	-- really means #hasButtonsAtRoot"
		add: (Aspect boolean: #hasHotTracking);
"		add: (Aspect boolean: #isMonoExpandable);		-- dummied out, too much effort for no value"
		add: (Aspect integer: #indentSeparation);
		add: (Aspect boolean: #disableExpandAll);
"		add: (Aspect choice: #updateMode from: TreeView updateModes);
											-- dummied out, not meaningful for lists"
		add: (Aspect boolean: #retainExpanded);
		add: (Aspect boolean: #useSmartRefresh);
		add: (Aspect block: #hasChildrenBlock);
		add: (Aspect block: #getChildrenBlock);
		add: (Aspect block: #getParentBlock);

		add: (Aspect block: #sortBlock);
		add: (Aspect boolean: #doSortRoots);
		add: (Aspect block: #doSortChildrenBlock);

		yourself.!

publishedEventsOfInstances
	"answer a Set of Symbols that describe the published events triggered
	by instances of the receiver.
	ListTreeViews generate a few extra events that would be useful coming
	off TreeViews too (as with most views, the events are actually triggered
	off our presenter)"

	^ super publishedEventsOfInstances
		add: #nodeAdded:;
		add: #nodeRemoved:;
		add: #nodeExpanded:;
		add: #nodeCollapsed:;
		yourself.! !

!ListTreeView class categoriesForMethods!
publishedAspectsOfInstances!constants!do copy!must strip!public! !
publishedEventsOfInstances!constants!do copy!events!public! !
!

!ListView class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| answer |
	answer := super publishedAspectsOfInstances.
	#(#isVirtual #hasColumnHeaders #hasFullRowSelect #hasGridLines #hasHeaderDragDrop #hasColumnImages #hasSortHeaders #hasFlatScrollbars #hasInfoTips #canEditLabels #showsSelAlways #hasCheckBoxes #isMultiSelect #isAutoArranged #isDoubleBuffered) 
		do: [:each | answer add: (Aspect boolean: each)].
	answer
		add: (Aspect autostring: #text);
		add: (Aspect bitmap: #backImage) beImmutable;
		add: (Aspect boolean: #backImageIsTiled);
		add: (Aspect position: #backImageOffset);
		add: (Aspect integer: #backImageAlphaPercent) beImmutable;
		add: (Aspect name: #iconSpacing chooseFrom: #('32@32'));
		add: (Aspect name: #thumbnailExtent chooseFrom: #('64@64' '96@96' '128@128'));
		add: (Aspect sequenceableCollection: #columnOrder) beImmutable;
		add: (Aspect sequenceableCollection: #columnsList
					addEvaluationFrom: (Array with: self columnClass name , ' new')) beImmutable;
		removeKey: #text.
	^answer!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #rightButtonPressed:;
    		add: #keyPressed:;
    		add: #keyTyped:;
    		add: #leftButtonPressed:;
    		add: #aboutToEditLabel:accept:;
    		yourself.
    ! !

!ListView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!ListViewColumn class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect autostring: #text);
    		add: (Aspect width: #width);
    		add: (Aspect block: #getContentsBlock);
    		add: (Aspect block: #getImageBlock);
    		add: (Aspect block: #getTextBlock);
    		add: (Aspect block: #sortBlock);
    		add: (Aspect choice: #alignment from: #(#left #center #right));
    		add: (Aspect boolean: #isAutoResize);
    		add: (Aspect block: #getInfoTipBlock);
    		add: (Aspect block: #customDrawBlock);
    		yourself! !

!ListViewColumn class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!LOGBRUSH methodsFor!

printFieldsOn: aStream limit: anInteger
	aStream
		display: 'style=';
		print: self style;
		space;
		display: 'color=';
		print: self color.
	self hatchStyleName
		ifNotNil: 
			[:symbol |
			aStream
				space;
				display: 'hatch=';
				print: symbol]! !

!LOGBRUSH categoriesForMethods!
printFieldsOn:limit:!printing!private! !
!

!LOGPEN methodsFor!

printFieldsOn: aStream limit: anInteger 
	aStream
		display: 'style=';
		print: self style;
		space;
		display: 'width=';
		print: self width;
		space;
		display: 'color=';
		print: self lopnColor! !

!LOGPEN categoriesForMethods!
printFieldsOn:limit:!printing!private! !
!

!LPVOIDField methodsFor!

newAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass name: aSymbol!

printAccessorExpressionSuffixOn: aWriteStream
	"Private - Print any extra messages/statements onto the <puttableStream> argument that are required to
	configure the object being read from the structure instance."

	aWriteStream
		space;
		display: #asExternalAddress! !

!LPVOIDField categoriesForMethods!
newAspect:class:!adapters!private! !
printAccessorExpressionSuffixOn:!automatic generation!private! !
!

!LVITEMW methodsFor!

printableFields
	| mask fields |
	false ifTrue: [^super printableFields].
	mask := self mask.
	fields := OrderedCollection with: #iItem.
	self iSubItem == 0 ifFalse: [fields addLast: #iSubItem].
	#(##(LVIF_TEXT) #text ##(LVIF_IMAGE) #iImage ##(LVIF_INDENT) #iIndent ##(LVIF_PARAM) #lParam)
		pairsDo: [:flag :symbol | (mask allMask: flag) ifTrue: [fields addLast: symbol]].
	(mask allMask: LVIF_STATE)
		ifTrue: [
			(self stateMask allMask: LVIS_STATEIMAGEMASK) 
				ifTrue: [fields add: #iStateImage]].
	^fields! !

!LVITEMW categoriesForMethods!
printableFields!printing!private! !
!

!Menu methodsFor!

edit
    	"Private - Edit the receiver in a dialog box."
    
    	(MenuDialog createOn: self) showModal!

painterClass
	"Private - Answer the class of painter used for rendering the receiver in a
	MenuComposerView."

	^PopupMenuPainter! !

!Menu categoriesForMethods!
edit!constants!private! !
painterClass!constants!private! !
!

!Menu class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	"Note that the #items aspect must be immutable because the #items method answers an
	OrderedCollection which is a copy of the actual items Array."

	^(super publishedAspectsOfInstances)
		add: (Aspect string: #text);
		add: (Aspect sequenceableCollection: #items
					addEvaluationFrom: #('Menu new' 'CommandMenuItem new' 'DividerMenuItem separator' 'DividerMenuItem barBreak' 'DividerMenuItem break')) 
						beImmutable;
		add: (Aspect string: #name);
		add: (Aspect boolean: #isAutoDismiss);
		add: (Aspect boolean: #hasSharedImageColumn);
		add: (Aspect icon: #image);
		yourself! !

!Menu class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!MenuBar methodsFor!

painterClass
	"Private - Answer the class of painter used for rendering the receiver in a
	MenuComposerView."

	^MenuBarPainter! !

!MenuBar categoriesForMethods!
painterClass!constants!private! !
!

!MenuBar class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass menuBar: aSymbol!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		removeKey: #text;
		yourself! !

!MenuBar class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
publishedAspectsOfInstances!constants!public! !
!

!MenuItem class methodsFor!

icon
	"Answers an Icon that can be used to represent this class"

	^Menu icon! !

!MenuItem class categoriesForMethods!
icon!constants!public! !
!

!Metaclass methodsFor!

changeIndex
	^self instanceClass changeIndex!

isChanged: aBoolean
	"Flag the receiver as changed or not changed, according to the value 
	of the <Boolean> argument.
	Implementation Note: The change flags are held on the instance side."

	self instanceClass isChanged: aBoolean!

isDeprecated
	^self instanceClass isDeprecated!

methodChanged: aCompiledMethod
	"Private - Flag the receiver as changed or not changed, according to the value 
	of the <Boolean> argument. If the receiver is marked as changed, then
	its owning package (if any) is also so marked."

	self instanceClass methodChanged: aCompiledMethod! !

!Metaclass categoriesForMethods!
changeIndex!accessing!private! !
isChanged:!public!source filing! !
isDeprecated!public!source filing! !
methodChanged:!helpers!private! !
!

!MethodCategory class methodsFor!

all
    	"Answer the category for all methods."
    
    	^AllMethodsCategory current
    ! !

!MethodCategory class categoriesForMethods!
all!instance creation!public! !
!

!MethodProtocol methodsFor!

icon
	"Answers an Icon that can be used to represent this object."

	^self isANSI
		ifTrue: [self class ansiIcon]
		ifFalse: [
			self isReadOnly
				ifTrue: [self class readOnlyIcon]
				ifFalse: [self class icon]]! !

!MethodProtocol categoriesForMethods!
icon!constants!public! !
!

!MethodProtocol class methodsFor!

ansiIcon
	"Private - Answers an Icon that can be used to represent an ANSI standard protocol."

	^Icon fromId: 'METHODPROTOCOL_ANSI.ICO'!

publishedEventsOfInstances
    	"Answer a <Set> of <Symbol>s that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #protocolUpdated:;
    		yourself.
    !

readOnlyIcon
	"Private - Answers an Icon that can be used to represent a read-only protocol."

	^Icon fromId: 'METHODPROTOCOL_READONLY.ICO'! !

!MethodProtocol class categoriesForMethods!
ansiIcon!constants!private! !
publishedEventsOfInstances!events!public! !
readOnlyIcon!constants!private! !
!

!MoenTreeView methodsFor!

visualObjectAtPoint: aPoint
	"Private - Answers the object that will be found by the VisualObjectFinder at aPoint (in local coordinates)
	within the receiver"

	| object |
	object := super visualObjectAtPoint: aPoint.
	^(self itemFromPoint: aPoint) ifNil: [object] ifNotNil: [:node | node object]! !

!MoenTreeView categoriesForMethods!
visualObjectAtPoint:!enquiries!private! !
!

!MoenTreeView class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect block: #getTextBlock);
    		add: (Aspect block: #getImageBlock);
    		add: (Aspect integer: #parentSpacing);
    		add: (Aspect name: #linePen);
    		add: (Aspect name: #maxTextExtent);
    		add: (Aspect boolean: #hasWordWrap);
    		add: (Aspect name: #margin);
    		add: (Aspect boolean: #hasButtons);
    		add: (Aspect boolean: #isAutoExpanding);
		add: (Aspect choice: #viewMode from: self viewModes keys asSortedCollection);
    		yourself!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #selectionChanged;
    		add: #selectionChanging:;
    		yourself.
    ! !

!MoenTreeView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!MonthCalendarView class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| dayMap days |
	dayMap := LookupTable new.
	days := (1 to: 7) collect: 
					[:each | 
					| day |
					day := Locale default dayOfWeekName: (each + 1) \\ 7.
					dayMap at: day put: each.
					day].
	^(super publishedAspectsOfInstances)
		add: (Aspect boolean: #hasToday);
		add: (Aspect boolean: #hasTodayCircle);
		add: (Aspect boolean: #hasWeekNumbers);
		add: (Aspect name: #firstDayOfWeek
					presenterBlock: 
						[:parent :model | 
						(ChoicePresenter createIn: parent
							on: (ValueConverter subject: model
									typeConverter: ((MappingConverter rightToLeft: dayMap)
											leftNullValue: 0;
											yourself)))
							choices: days;
							yourself]);
		yourself! !

!MonthCalendarView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!MSG methodsFor!

printOn: aStream
	"Append a textual representation of the receiver to aStream."

	| msg |
	self basicPrintOn: aStream.
	msg := View selectorForMessage: self message.
	aStream nextPut: $(.
	self hwnd printOn: aStream base: 16 showRadix: true.
	aStream space.
	msg isNil ifTrue: [self message printOn: aStream base: 16 showRadix: true] ifFalse: [aStream nextPutAll: msg].
	aStream
		space;
		print: self wParam;
		space;
		print: self lParam;
		nextPut: $)! !

!MSG categoriesForMethods!
printOn:!printing!public! !
!

!MultilineTextEdit class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect boolean: #canVScroll);
    		add: (Aspect boolean: #wantTab);
    		add: (Aspect multilineString: #text);
    		add: (Aspect boolean: #wantReturn);
    		add: (Aspect boolean: #wordWrap);
    		yourself! !

!MultilineTextEdit class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Number methodsFor!

literalTextStyle
	^#literalNumber! !

!Number categoriesForMethods!
literalTextStyle!constants!private! !
!

!Object methodsFor!

alternateInspectorClass
    	"Answer the class of inspector to be used when the user requests to inspect
    	the receiver with the Shift key held down."
    
    	^BasicInspector!

aspectDisplayOn: aStream
  	"Private - Append a single-line textual representatin of the receiver to the <puttableStream>
  	argument in a form that a user viewing the receiver as the value of a published aspect would 
  	like to see it. Typically we use #displayOn: but some classes of object can use alternate display 
  	formats.
  	N.B. This is a development time only method that supports the PublishedAspectInspector."
  
  	self displayOn: aStream!

basicInspect
    	"Open and answer an inspector window on the receiver.
    	Do not override this method."
    
    	^BasicInspector shellOn: self!

browse
	"Open a suitable browser onto the receiver."

	Smalltalk developmentSystem browseClass: self class!

currentPublishedAspectsAsLiteralsMap
	"Answer a <LookupTable> mapping  publised aspect symbols to their current literal array representations. We can use this
	to represent the current published aspects values for an object without having to hold on to the actual value objects themselves."

	^self publishedAspects collect: [:each | (each accessorFor: self) value literalStoreArray]!

debugPrintString
    	"Answer a <readableString> whose characters are a description of the receiver 
    	as the debugger would want to see it."
    
    	^self printString
    !

halt
	"Bring up the Smalltalk debugger (suspending the active process) ..."

	| process |
	process := Processor activeProcess.
	process halt: process topFrame sender cause: 'Hard coded breakpoint'!

inspect
    	"Open and answer an inspector window on the receiver."
    
    	^Smalltalk developmentSystem inspect: self!

inspectorClass
	"Answer the class of inspector to be used when inspecting the receiver."

	^Smalltalk developmentSystem defaultInspectorClass!

newAspect: keyObject class: aspectClass 
	"Answer an instance of the <Aspect> class, aspectClass, appropriately configured to represent
	the aspect of the receiver named by the <Object>, keyObject (usually a <Symbol>)."

	^self class newInstanceAspect: keyObject class: aspectClass!

publicAccessorAspects
	"Answer a <LookupTable> of the <Aspect> for public accessor methods of the
    	the receiver."

	| aspects hidden |
	aspects := LookupTable new
				add: (self newAspect: #yourself class: Aspect);
				yourself.
	hidden := #'non browsable' asMethodCategory.
	self class allGetters do: 
			[:each |
			(each isPublic and: [(hidden includesMethod: each) not])
				ifTrue: 
					[| aspect |
					aspect := (self perform: each selector) newAspect: each selector class: Aspect.
					(aspect canWriteInto: self) ifFalse: [aspect beReadOnly].
					aspects add: aspect]].
	^aspects!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	| aspects |
	aspects := self class publishedAspectsOfInstances.
	^(aspects isEmpty or: 
			[aspects size = 1 and: 
					[| aspect |
					aspect := aspects lookup: #yourself.
					aspect notNil and: [aspect editBlock isNil]]])
		ifTrue: [self publicAccessorAspects]
		ifFalse: [aspects]!

publishedEvents
    	"Answer a Set of Symbols that describe the published events triggered
    	by the receiver."
    
    	^self class publishedEventsOfInstances
    !

searchForInTool: aSmalltalkToolShell 
	aSmalltalkToolShell searchForObject: self! !

!Object categoriesForMethods!
alternateInspectorClass!constants!public! !
aspectDisplayOn:!private! !
basicInspect!public! !
browse!public! !
currentPublishedAspectsAsLiteralsMap!constants!public! !
debugPrintString!printing!public! !
halt!public! !
inspect!public! !
inspectorClass!constants!public! !
newAspect:class:!constants!public! !
publicAccessorAspects!constants!public! !
publishedAspects!constants!public! !
publishedEvents!events!public! !
searchForInTool:!public! !
!

!Object class methodsFor!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver.
    	Overridden by subclasses to add the aspects 	published locally"

	^(LookupTable new)
		add: ((self newAspect: #yourself class: Aspect) isNullable: false);
		yourself!

publishedAspectsOfInstances
	"Answer a LookupTable of AspectDescriptors that describe the aspects published
    	by an instance of the receiver. Overridden by subclasses to add the aspects
    	published locally.
    	N.B. All #publishedAspectsOfInstances methods must be placed in either the 'must strip'
    	or 'development' categories so that they are removed before package pre-requisites are 
    	calculated by the ImageStripper, otherwise the Development System may be a pre-requisite."

	^(LookupTable new)
		add: (self newInstanceAspect: #yourself class: Aspect);
		yourself!

publishedEvents
    	"Answer a Set of Symbols that describe the published events triggered
    	by the receiver. Overridden by subclasses to add the events published 
    	locally"	
    
    	^Set new.!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver. Overridden by subclasses to add the events published 
    	locally"	
    
    	^Set new.! !

!Object class categoriesForMethods!
publishedAspects!constants!public! !
publishedAspectsOfInstances!constants!public! !
publishedEvents!events!public! !
publishedEventsOfInstances!events!public! !
!

!OrEnvironment methodsFor!

includesResource: aResourceIdentifier 
	^(environment includesResource: aResourceIdentifier) 
		and: [oredEnvironment includesResource: aResourceIdentifier]! !

!OrEnvironment categoriesForMethods!
includesResource:!public!testing! !
!

!Package methodsFor!

browse
    	"Open a suitable browser onto the receiver."
    
    	Smalltalk developmentSystem browsePackages: (Array with: self)!

defaultAbout
	"Shows a default About splash screen for the receiver. This looks for a bitmap of the same
	name as the package in the package installation directory. This is displayed in a standard
	modal Splash view with no overlaid version text.

	If you wish to use such a splash screen for your about box then set #aboutBlock to:
	[:package | package defaultAbout]"

	(Splash bitmap: self defaultAboutBitmap) show!

defaultAboutBitmap
	"Answer a default Bitmap to use for the receiver. We assume that a JPG of the same name as
	the package is available in the Resources directory below the package's folder."

	"We have to be a bit careful here. At boot time (or if the OLE COM package has been removed)
	the OLEPicture class will not be available. In such cases we just display an empty bitmap"

	| olePicture |
	olePicture := Smalltalk lookup: #OLEPicture.
	^olePicture notNil
		ifTrue: 
			[| bitmapFile |
			bitmapFile := File
						composePath: 'Resources\'
						stem: self name
						extension: 'jpg'.
			olePicture fromFile: bitmapFile usingLocator: (FolderRelativeFileLocator basePath: self path)]
		ifFalse: [DIBSection width: 480 height: 360]!

fileLocator
	^PackageRelativeFileLocator package: self!

icon
	self isBasePackage ifTrue: [^self class dolphinPackageIcon].
	^super icon!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspects.
	aspects add: (Aspect 
				collection: #untracedGlobals
				presenterClass: HashedCollectionPresenter
				addFrom: self globalNames asSortedCollection).
	^aspects!

searchForInTool: aSmalltalkToolShell 
	aSmalltalkToolShell searchForPackage: self! !

!Package categoriesForMethods!
browse!enumerating!public! !
defaultAbout!public! !
defaultAboutBitmap!constants!public! !
fileLocator!accessing!public! !
icon!public! !
publishedAspects!accessing!public! !
searchForInTool:!public! !
!

!Package class methodsFor!

changedIcon
    	"Private - Answer the icon to mark packages that have been changed"
    
    	^Smalltalk developmentSystem changedIcon!

dolphinPackageIcon
	^Icon fromId: 'DolphinPackage.ico'!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| answer |
	answer := (super publishedAspectsOfInstances)
				add: (Aspect multilineString: #comment);
				add: (Aspect string: #packageVersion);
				add: (Aspect block: #aboutBlock);
				add: (Aspect fileSave: #packageFileName);
				add: (Aspect sequenceableCollection: #manualPrerequisites
							addFrom: self manager packageNames asSortedCollection);
				add: (Aspect boolean: #preDeclareClassesOnLoad);
				yourself.
	"If the image has the ADK loaded, then include the image stripper"
	self environment at: #ImageStripper
		ifPresent: [:is | answer add: (Aspect name: #imageStripper) beImmutable].
	^answer!

publishedEventsOfInstances
	"Answer a <Set> of <Symbol>s, being the names all the events published
    	by instances of the receiver."

	^(super publishedEventsOfInstances)
		add: #changed;
		add: #ownedChanged;
		add: #prerequisitesReset;
		yourself! !

!Package class categoriesForMethods!
changedIcon!constants!private! !
dolphinPackageIcon!public! !
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!PackageManager methodsFor!

getVersionInfoFor: aCompiledMethod 
	"Part of the StsManager protocol implemented here for systems which do not have STS
	installed. Answer nil to indicate that we cannot supply version information for
	aCompiledMethod"

	^nil!

isConnected
	"Part of the StsManager protocol implemented here for systems which do not have STS
	installed. Answer nil to indicate that we are not connected to a repository"

	^false!

sourceControl
	^self! !

!PackageManager categoriesForMethods!
getVersionInfoFor:!public!source tracking system! !
isConnected!public!source tracking system! !
sourceControl!accessing!public! !
!

!PackageManager class methodsFor!

publishedEventsOfInstances
	"Answer a <Set> of <Symbol>s being the names of the events published by
    	instances of the receiver."

	^(super publishedEventsOfInstances)
		add: #loadedChanged;
		add: #prerequisitesReset;
		add: #prerequisitesReset:;
		add: #packageChanged:;
		add: #ownedChanged:;
		add: #classRepackaged:from:to:;
		add: #methodRepackaged:from:to:;
		add: #resourceRepackaged:from:to:;
		add: #globalRepackaged:from:to:;
		add: #aboutToSave:;
		add: #packageInstalled:;
		yourself! !

!PackageManager class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!PluggableTypeConverter class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect name: #leftToRightBlock);
    		add: (Aspect name: #rightToLeftBlock);
    		yourself! !

!PluggableTypeConverter class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Point class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect integer: #x);
    		add: (Aspect integer: #y);
    		yourself! !

!Point class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Point3D class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect integer: #x);
    		add: (Aspect integer: #y);
    		add: (Aspect integer: #z);
    		yourself! !

!Point3D class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!PointerField methodsFor!

printAccessorExpression: aSymbol on: aWriteStream 
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will read the value of this field from an instance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	aWriteStream
		display: self pointerClass;
		space;
		display: #fromAddress:;
		nextPutAll: ' (bytes ';
		display: #intPtrAtOffset:;
		space.
	self printOffsetExpression: aSymbol on: aWriteStream.
	aWriteStream nextPut: $)!

printMutatorBody: aSymbol on: aWriteStream
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will write the value of this field into an instance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	| keywords |
	keywords := #uintPtrAtOffset:put: keywords.
	aWriteStream
		nextPutAll: 'bytes ';
		display: keywords first;
		space.
	self printOffsetExpression: aSymbol on: aWriteStream.
	aWriteStream
		space;
		display: keywords second;
		space;
		nextPutAll: self valueParameterName;
		space;
		display: #yourAddress! !

!PointerField categoriesForMethods!
printAccessorExpression:on:!automatic generation!private! !
printMutatorBody:on:!automatic generation!private! !
!

!PoolConstantsDictionary methodsFor!

browse
    	"Open a browser on the receiver"
    
    	Smalltalk developmentSystem browsePoolConstantsDictionary: self!

errorModify: key value: value
	"Private - An attempt was made to modify the value of the constant named, key."

	| recompile var |
	recompile := ConfirmationRequiredWarning
				signal: ('Would you like to recompile references to <1p><n>to reflect the new value <2d> (currently <3d>)'
						expandMacrosWith: key
						with: value
						with: (self at: key)).
	recompile isNil ifTrue: [^self].
	var := self associationAt: key.
	var setValue: value.
	self isChanged: true.
	recompile ifTrue: [self recompileReferencesToVarNamed: key]

!

referencesTo: keyString
	"Answer the collection of any methods which references the named key, assumed to
	be a variable name from the receiver."

	| env var classes |
	var := self associationAt: keyString.
	classes := self classesReferencing.
	env := BrowserEnvironment new forClasses: classes , (classes collect: [:each | each class]).
	^(env referencesTo: var)
		label: ('Methods referencing <1d>.<2s>' expandMacrosWith: self with: keyString);
		yourself! !

!PoolConstantsDictionary categoriesForMethods!
browse!operations-browsing!public! !
errorModify:value:!exceptions!private! !
referencesTo:!private! !
!

!PoolDictionary methodsFor!

aspectDisplayOn: aStream
  	"Private - Append a single-line textual representatin of the receiver to the <puttableStream>
  	argument in a form that a user viewing the receiver as the value of a published aspect would 
  	like to see it. Typically we use #displayOn: but some classes of object can use alternate display 
  	formats. In this case we override back to the Object implementation.
  	N.B. This is a development time only method that supports the PublishedAspectInspector."
  
  	self displayOn: aStream! !

!PoolDictionary categoriesForMethods!
aspectDisplayOn:!private! !
!

!Presenter class methodsFor!

addView: aViewClass asResource: aStringName
	"Adds a default instance of aViewClass as a resource of the receiver called aStringName"

	aViewClass makeResource: aStringName inClass: self !

editNewDefaultView
	"Open the View Composer to create a new view for the receiver."

	| resourceIdentifier vc resName |
	resName := Prompter 
				on: self defaultView
				prompt: 'Resource name:'
				caption: 'Create a view for class ' , self name.
	resName isNil ifTrue: [^self].
	resourceIdentifier := ResourceIdentifier class: self name: resName.
	(resourceIdentifier exists not or: 
			[MessageBox 
				confirm: ('<1d> already exists. Do you wish to overwrite it?' expandMacrosWith: resourceIdentifier)]) 
		ifFalse: [^self].
	vc := Smalltalk developmentSystem openViewComposerEmpty.
	vc
		openOnCopyOf: self defaultResourceIdentifier;
		resourceIdentifier: resourceIdentifier! !

!Presenter class categoriesForMethods!
addView:asResource:!operations!public! !
editNewDefaultView!operations!public! !
!

!Process methodsFor!

attachDebugger: titleString topFrame: aStackFrame resumable: aBoolean
	"Private - Bring up a debugger on the receiver with the specified
	frame as that shown at the top of the stack trace."

	self debuggerClass 
		show: titleString
		process: self 
		topFrame: aStackFrame
		resumable: aBoolean!

debug
    	"Private - Bring up a debugger on the receiver."
    
    	self debug: self printString topFrame: self topFrame resumable: self isTerminated not!

debug: titleString topFrame: aStackFrame resumable: aBoolean
	"Private - Bring up a debugger on the receiver with the specified
	frame as that shown at the top of the stack trace. Suspend the active process."

	self attachDebugger: titleString topFrame: aStackFrame resumable: aBoolean.
	debugger suspendProcess.
	"N.B. There MUST be no further code after this point"
!

debuggerClass
    	"Answer the class of <Debugger> to use for debugging this process."
    
    	^Smalltalk developmentSystem debuggerClass!

halt: aStackFrame cause: aString
	"Private - Bring up a Smalltalk debugger on the receiver in the specified frame."

	debugger isNil
		ifTrue: 
			[self
				walkback: aString
				topFrame: aStackFrame
				resumable: true]
		ifFalse: [debugger onHalt: aStackFrame]!

primStep: steps
	"Private - Resume the receiver for a single step (method/block activation), at which point the receiver will receive a debug step interrupt. If the receiver hits a breakpoint instruction before the next method/block activation, then a different interrupt will be received. Other interrupts are disabled while the receiver is stepping."

	"Primitive failure reasons:
    		IllegalStateChange 	- the receiver is waiting on a scheduler or semaphore list (only suspended processes can be 'stepped'
    		AssertionFailure		- the receiver has been terminated.

	Note, however, that primitive failure is ignored."

	<primitive: 105>
	!

showWalkback: titleString callStack: stackTraceString debuggable: debuggableBoolean resumable: resumableBoolean
	"Private - Display a walkback dialog with the specified title and stack trace. Enable/disable
	the debug/resume buttons depending on the boolean arguments. If the Dolphin development 
	system walkback dialog is not available, then use a MessageBox."

	| dialogClass box response |
	dialogClass := Smalltalk lookup: #WalkbackDialog.
	dialogClass isNil
		ifFalse: 
			[response := (dialogClass new)
						caption: titleString;
						callStack: stackTraceString;
						debuggable: debuggableBoolean;
						resumable: resumableBoolean;
						showModal.
			response isNil ifFalse: [^response]].
	box := MessageBox new.
	box caption: titleString.
	box beTaskModal.
	resumableBoolean
		ifTrue: 
			[box buttonStyle: #abortRetryIgnore.
			box defaultButton: 2]
		ifFalse: 
			[box buttonStyle: #retryCancel.
			box defaultButton: 1].
	response := box errorMsg: stackTraceString.
	^response == #retry
		ifTrue: [#debug]
		ifFalse: [response == #ignore ifTrue: [#resume] ifFalse: [#terminate]]!

step
    	"Private - Resume the receiver for a single step (method/block activation), at 
    	which point the receiver will receive a debug step interrupt. If the receiver
    	hits a breakpoint instruction before the next method/block activation, then
    	a different interrupt will be received. Other interrupts are disabled while
    	the receiver is stepping.
    
    	For safety (in case sent within a callback from the UI process) we defer the 
    	single step until the current callback has returned to avoid deadlocking the 
    	current UI process."
    
    	self step: 1!

step: steps
    	"Private - Resume the receiver for the specified number of steps (method/block 
    	activation), at which point the receiver will receive a debug step interrupt. If 
    	the receiver hits a breakpoint instruction before the next method/block activation, 
    	then a different interrupt will be received. Other interrupts are disabled while
    	the receiver is stepping.
    
    	For safety (in case sent within a callback from the UI process) we defer the 
    	single step until the current callback has returned to avoid deadlocking the 
    	current UI process."
    
    	SessionManager inputState queueDeferredAction: (MessageSend receiver: self selector: #primStep: argument: steps)!

walkback: aString topFrame: aStackFrame resumable: aBoolean
	"Private - Bring up a walkback window on the receiver with the specified title
	and with aStackFrame as the top frame of the stack trace"

	| answer traceStream debuggable titleString |
	Processor enableAsyncEvents: true.
	titleString := aString
				collect: [:each | (each == $\r or: [each == $\n]) ifTrue: [$\] ifFalse: [each]].
	debugger isNil
		ifFalse: 
			[^debugger
				onWalkback: titleString
				topFrame: aStackFrame
				resumable: aBoolean].
	traceStream := String writeStream: 512.
	
	[aStackFrame callstackDo: 
			[:frame |
			frame method selector == #wmPaint:wParam:lParam:
				ifTrue: [frame receiver validate	"prevent recusive paint walkback"].
			traceStream
				display: frame;
				cr]
		depth: 50]
			on: Error
			do: [:e | e notify].

	"Only show a walkback if the Debugger's global option, #showWalkbacks, is on"
	debuggable := self canDebug.
	answer := (debuggable not or: [self debuggerClass showWalkbacks])
				ifTrue: 
					[self
						showWalkback: titleString
						callStack: traceStream contents
						debuggable: debuggable
						resumable: aBoolean]
				ifFalse: 
					[aBoolean ifTrue: [Sound warningBeep] ifFalse: [Sound errorBeep].
					#debug].
	answer == #debug
		ifTrue: 
			[
			[self
				debug: titleString
				topFrame: aStackFrame
				resumable: aBoolean]
					postToMessageQueue.
			self suspendUnconditionally]
		ifFalse: [answer == #terminate ifTrue: [self terminate]]
	"Drop through to resume..."! !

!Process categoriesForMethods!
attachDebugger:topFrame:resumable:!private! !
debug!private! !
debug:topFrame:resumable:!private! !
debuggerClass!constants!public! !
halt:cause:!private! !
primStep:!private!states-changing! !
showWalkback:callStack:debuggable:resumable:!private! !
step!private!states-changing! !
step:!private!states-changing! !
walkback:topFrame:resumable:!private! !
!

!ProcessorScheduler methodsFor!

singleStep: interruptArg
	"Private - A single step has occurred.
	Note that interrupts are NOT re-enabled here if the event if forwarded to the debugger."

	| debugger |
	debugger := activeProcess debugger.
	debugger isNil 
		ifTrue: [self enableInterrupts]
		ifFalse: [debugger onStep: interruptArg]
! !

!ProcessorScheduler categoriesForMethods!
singleStep:!interrupts-handling!private! !
!

!ProgressBar class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect name: #range);
		add: (Aspect boolean: #isSmooth);
    		yourself! !

!ProgressBar class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ProportionalLayout class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect boolean: #isVertical);
    		yourself! !

!ProportionalLayout class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ProtoObject methodsFor!

basicInspect
    	"Open and answer an inspector window on the receiver"
    
    	^BasicInspector shellOn: self!

debugPrintString
	"Answer a <readableString> whose characters are a description of the receiver 
	as the debugger would want to see it."

	^self basicPrintString
!

halt
	"Bring up the Smalltalk debugger (suspending the active process) ..."

	| process |
	process := Processor activeProcess.
	process halt: process topFrame sender cause: 'Hard coded breakpoint'!

inspect
	"Open and answer an inspector window on the receiver"

	^self basicInspect! !

!ProtoObject categoriesForMethods!
basicInspect!public! !
debugPrintString!printing!public! !
halt!public! !
inspect!public! !
!

!ProtoObject class methodsFor!

icon
	^##(self) defaultIcon!

publishedAspects
    	"Answer a <LookupTable> of the <Aspect>s published by the receiver.
    	Overridden by subclasses to add the aspects 	published locally"
    
    	^(LookupTable new)
    		add: ((Aspect name: #yourself) isNullable: false);
    		yourself!

publishedAspectsOfInstances
    	"Answer a LookupTable of AspectDescriptors that describe the aspects published
    	by an instance of the receiver. Overridden by subclasses to add the aspects
    	published locally."
    
    	^(LookupTable new)
    		add: (Aspect name: #yourself);
    		yourself! !

!ProtoObject class categoriesForMethods!
icon!public! !
publishedAspects!constants!public! !
publishedAspectsOfInstances!constants!public! !
!

!PushButton class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| answer |
	answer := super publishedAspectsOfInstances.
	answer
		add: (Aspect name: #commandDescription) beReadOnly;
		add: (Aspect boolean: #isDefault);
		add: (Aspect boolean: #hasFlatAppearance);
		add: (Aspect icon: #image);
		add: (Aspect choice: #style from: ButtonStyleMap keys asSortedCollection);
		yourself.
	"add: (Aspect boolean: #isMultiline);"

	"#1191: Windows BUTTON control doesn't support changing the foreground colour"
	answer
		removeKey: #forecolor;
		yourself.
	^answer! !

!PushButton class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!QWORD methodsFor!

printOn: aStream
	"Append a debug text representation of the receiver to aStream."

	aStream
		basicPrint: self;
		nextPut: $(; display: self; nextPut: $)
! !

!QWORD categoriesForMethods!
printOn:!printing!public! !
!

!RBConfigurableFormatter class methodsFor!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspects)
		add: (Aspect boolean: #formatCommentWithStatements);
		add: ((Aspect integer: #indentsForKeywords)
					isNullable: false;
					yourself);
		add: (Aspect string: #indentString);
		add: (Aspect boolean: #lineUpBlockBrackets);
		add: ((Aspect integer: #maxLineLength)
					isNullable: false;
					yourself);
		add: (Aspect boolean: #methodSignatureOnMultipleLines);
		add: ((Aspect integer: #minimumNewLinesBetweenStatements)
					isNullable: false;
					yourself);
		add: (Aspect boolean: #newLineAfterCascade);
		add: (Aspect boolean: #newLineBeforeFirstCascade);
		add: (Aspect boolean: #newLineBeforeFirstKeyword);
		add: ((Aspect integer: #newLinesAfterMethodComment)
					isNullable: false;
					yourself);
		add: ((Aspect integer: #newLinesAfterMethodPattern)
					isNullable: false;
					yourself);
		add: ((Aspect integer: #newLinesAfterTemporaries)
					isNullable: false;
					yourself);
		add: ((Aspect integer: #numberOfArgumentsForMultiLine)
					isNullable: false;
					yourself);
		add: (Aspect boolean: #periodsAsTerminators);
		add: (Aspect boolean: #retainBlankLinesBetweenStatements);
		add: (Aspect string: #stringFollowingReturn);
		add: (Aspect string: #stringInsideBlocks);
		add: (Aspect string: #stringInsideParentheses);
		add: ((Aspect sequenceableCollection: #traditionalBinaryPrecedence)
					isNullable: false;
					yourself);
		add: (Aspect boolean: #useTraditionalBinaryPrecedenceForParentheses);
		yourself! !

!RBConfigurableFormatter class categoriesForMethods!
publishedAspects!constants!public! !
!

!RBFormatter class methodsFor!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspects)
		add: ((Aspect integer: #maximumArgumentsPerLine)
					isNullable: false;
					yourself);
		add: ((Aspect sequenceableCollection: #selectorsToLeaveOnLine)
					isNullable: false;
					yourself);
		add: ((Aspect sequenceableCollection: #selectorsToStartOnNewLine)
					isNullable: false;
					yourself);
		yourself! !

!RBFormatter class categoriesForMethods!
publishedAspects!constants!public! !
!

!RBSourceFormatter class methodsFor!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspects)
		add: ((Aspect integer: #maxLineLength)
					isNullable: false;
					yourself);
		add: (Aspect boolean: #periodsAtEndOfMethod);
		yourself.! !

!RBSourceFormatter class categoriesForMethods!
publishedAspects!constants!public! !
!

!Rectangle class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect integer: #top);
    		add: (Aspect integer: #left);
    		add: (Aspect integer: #bottom);
    		add: (Aspect integer: #right);
    		yourself! !

!Rectangle class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!RefactoryChange methodsFor!

displayOn: aStream
	aStream nextPutAll: self displayString! !

!RefactoryChange categoriesForMethods!
displayOn:!printing!public! !
!

!ReferenceView methodsFor!

visualObjectAtPoint: aPoint
	"Private - Answers the object that will be found by the VisualObjectFinder at aPoint (in local coordinates)
	within the receiver"

	^self referee visualObjectAtPoint: aPoint! !

!ReferenceView categoriesForMethods!
visualObjectAtPoint:!enquiries!private! !
!

!ReferenceView class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect name: #resourceIdentifier);
    		removeKey: #hasBorder;
    		removeKey: #hasClientEdge;
    		removeKey: #hasStaticEdge;
    		removeKey: #usePreferredExtent;
    		removeKey: #preferredExtent;
    		removeKey: #font;
    		removeKey: #isTransparent;
    		removeKey: #isEnabled;
    		removeKey: #text;
    		yourself! !

!ReferenceView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!RegKeyAbstract methodsFor!

debugPrintString
	^self printString! !

!RegKeyAbstract categoriesForMethods!
debugPrintString!printing!public! !
!

!ResourceIdentifier methodsFor!

assign: resourceData 
	"Assign aResource as the resource data represented by the receiver."

	resourceData assignToResourceIdentifier: self!

assignLiteralResourceData: aLiteralArray
	"Private - Assign aResource as the resource data represented by the receiver."

	| stream source sel methodClass categories |
	stream := String writeStream.
	sel := self selector.
	self emitMethodHeaderFor: sel on: stream.
	stream
		tab;
		nextPut: $^.
	self emit: aLiteralArray asStringOn: stream.
	source := stream contents.
	methodClass := self owningClass class.
	categories := Set with: self class viewResourceCategoryName.
	(methodClass whichCategoriesIncludeSelector: sel) do: [:each | categories add: each name].
	methodClass compile: source categories: categories!

assignView: aView
	self assign: aView literalStoreArray!

browse
	^self edit!

edit
    	"Invoke a suitable editor on the resource identified by the receiver."
    
	ViewComposer openOn: self
    	!

editViewUsing: aMonadicBlock
	| view |
	view := DesignDesktopView default loadViewResource: self resource forEdit: true.
	
	[aMonadicBlock value: view.
	self assignView: view] ensure: [view destroy]!

emit: aResourceArray asStringOn: aWriteStream 
	aWriteStream nextPutAll: '#('.
	aResourceArray do: [:each |  each literalPrintOn: aWriteStream. aWriteStream space].
	aWriteStream nextPut: $)!

prompt
	"Prompt for and answer a new ResourceIdentifier using the receiver to give the default settings."

	^(((self owningClass == Presenter or: [self owningClass owningPackage isNil]) 
		ifTrue: [Smalltalk developmentSystem resourceIdentifierDialogClass]
		ifFalse: [Smalltalk developmentSystem packagedResourceIdentifierDialogClass]) createOn: self) 
		showModal!

publishedAspects
	| answer |
	answer := super publishedAspects.
	self owningClass isBehavior 
		ifTrue: 
			[answer add: (Aspect choice: #name
						from: (owningClass resourceIdentifiers collect: [:each | each name]) asSortedCollection)].
	^answer!

reassign
	| view designDesktop |
	designDesktop := DesignDesktopView default.
	view := designDesktop loadViewResource: self resource forEdit: true.
	[self assignView: view] ensure: [view destroy]! !

!ResourceIdentifier categoriesForMethods!
assign:!accessing!public! !
assignLiteralResourceData:!accessing!private! !
assignView:!accessing!public! !
browse!public! !
edit!operations!public! !
editViewUsing:!operations!public! !
emit:asStringOn:!helpers!private! !
prompt!operations!public! !
publishedAspects!constants!public! !
reassign!public! !
!

!ResourceIdentifier class methodsFor!

prompt
	"Prompt for and answer a new ResourceIdentifier."

	^self new prompt!

publishedAspectsOfInstances
	^(super publishedAspectsOfInstances)
		add: (Aspect name: #owningClass);
		add: (Aspect string: #name);
		yourself! !

!ResourceIdentifier class categoriesForMethods!
prompt!instance creation!public! !
publishedAspectsOfInstances!constants!public! !
!

!RichTextEdit class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver.
    	Implementation Note: We remove some superclass aspects because ES_NUMBER 
    	style has no effect on RichEdit and neither do ES_CENTER or ES_RIGHT."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect richText: #text);
    		removeKey: #format;
    		removeKey: #alignment;
    		yourself! !

!RichTextEdit class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!RichTextPresenter class methodsFor!

publishedEventsOfInstances
	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."

	^(super publishedEventsOfInstances)
		add: #linkClicked:;
		yourself! !

!RichTextPresenter class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!ScalarField methodsFor!

newAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass integer: aSymbol!

printAccessorExpression: aSymbol on: aWriteStream 
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will read the value of this field from an instance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	aWriteStream
		nextPutAll: '(bytes ';
		display: self accessorMessage keywords first;
		space.
	self printOffsetExpression: aSymbol on: aWriteStream.
	aWriteStream nextPut: $)!

printMutatorBody: aSymbol on: aWriteStream
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will write the value of this field into an instance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	| keywords |
	keywords := self accessorMessage keywords.
	aWriteStream
		nextPutAll: 'bytes';
		space;
		display: keywords first;
		space.
	self printOffsetExpression: aSymbol on: aWriteStream.
	aWriteStream
		space;
		display: keywords second;
		space.
	self printMutatorValueOn: aWriteStream parameter: self valueParameterName! !

!ScalarField categoriesForMethods!
newAspect:class:!adapters!private! !
printAccessorExpression:on:!automatic generation!private! !
printMutatorBody:on:!automatic generation!private! !
!

!ScalarField class methodsFor!

icon
	^Integer icon! !

!ScalarField class categoriesForMethods!
icon!public! !
!

!ScintillaAttribute class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect integer: #id) beReadOnly;
		yourself! !

!ScintillaAttribute class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ScintillaIndicatorStyle class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^super publishedAspectsOfInstances
		add: (Aspect color: #forecolor);
		add: (Aspect color: #hoverForecolor);
		add: (Aspect choice: #style from: IndicatorStyles);
		add: (Aspect choice: #hoverStyle from: IndicatorStyles);
		add: (Aspect name: #name);
		add: (Aspect integer: #alpha);
		add: (Aspect integer: #foreAlpha);
		yourself! !

!ScintillaIndicatorStyle class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ScintillaKeyBinding class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect choice: #commandSymbol from: Commands values asSortedCollection);
		add: (Aspect hotkey: #acceleratorKey);
		yourself! !

!ScintillaKeyBinding class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ScintillaMargin class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect boolean: #isSensitive);
		add: (Aspect choice: #type from: MarginTypes);
		add: (Aspect integer: #width);
		add: (Aspect integer: #mask);
		add: (Aspect choice: #cursorType from: CursorTypes values);
		add: (Aspect color: #backcolor);
		yourself! !

!ScintillaMargin class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ScintillaMarkerDefinition class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect name: #name);
		add: (Aspect choice: #glyphName from: self glyphNames , self visibleCharacterGlyphs);
		add: (Aspect color: #forecolor);
		add: (Aspect color: #backcolor);
		add: (Aspect integer: #alpha);
		add: (Aspect color: #selectionBackcolor);
		yourself! !

!ScintillaMarkerDefinition class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ScintillaTextStyle class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^(aspectClass name: aSymbol
		presenterBlock: 
			[:p :m | 
			ScintillaTextStylePresenter 
				create: 'Developer view'
				in: p
				on: m])
		yourself!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| answer |
	answer := super publishedAspectsOfInstances.
	"Don't bother exposing the changeable style flag, since it doesn't work at present"
	#(#isItalic #isBold #isUnderlined #isBackcolorExtendedToEndOfLine #isHotspot #isInvisible) 
		do: [:each | answer add: ((Aspect boolean: each)
						isNullable: true;
						yourself)].
	^answer
		add: (Aspect color: #forecolor);
		add: (Aspect color: #backcolor);
		add: (Aspect 
					choice: #fontName
					from: Canvas forDesktop fontNames asSortedCollection
					andNil: nil);
		add: (Aspect number: #pointSize);
		add: (Aspect integer: #characterSet);
		add: (Aspect 
					choice: #caseName
					from: self caseNames
					andNil: nil);
		add: (Aspect name: #name);
		add: (Aspect number: #weight);
		yourself! !

!ScintillaTextStyle class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
publishedAspectsOfInstances!constants!public! !
!

!ScintillaView methodsFor!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	| createPresenter |
	createPresenter := 
			[:p :m |
			(ScintillaStylesCollectionPresenter
				create: 'Developer view'
				in: p
				on: m)
				defaultStyle: ((ScintillaTextStyle new)
							backcolor: self backcolor;
							font: self actualFont;
							yourself);
				normalStyle: (self styleNamed: #normal);
				yourself].
	^(super publishedAspects)
		add: (Aspect name: #textStyles presenterBlock: createPresenter) beImmutable;
		add: (Aspect name: #annotationStyles presenterBlock: createPresenter) beImmutable;
		yourself! !

!ScintillaView categoriesForMethods!
publishedAspects!constants!public! !
!

!ScintillaView class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| answer choices |
	answer := super publishedAspectsOfInstances.
	answer
		removeKey: #format;
		removeKey: #alignment;
		add: (Aspect sequenceableCollection: #keyBindings
					addEvaluationFrom: (Array with: ScintillaKeyBinding name , ' new')) beImmutable;
		add: (Aspect sequenceableCollection: #margins);
		add: (Aspect sequenceableCollection: #indicatorStyles
					addEvaluationFrom: (Array with: ScintillaIndicatorStyle name , ' new')) beImmutable;
		add: (Aspect sequenceableCollection: #markerDefinitions
					addEvaluationFrom: (Array with: ScintillaMarkerDefinition name , ' new')) beImmutable;
		add: (Aspect choice: #whitespaceVisibility from: self whitespaceVisibilityLevels);
		add: (Aspect dictionary: #braceChars) beImmutable;
		add: (Aspect choice: #lexer from: (self lexerLanguages copyWithout: nil) asSortedCollection);
		add: (Aspect choice: #foldMarkerStyle
					from: (Array with: nil) , self foldMarkerStyles asSortedCollection);
		add: (Aspect choice: #caretStyle from: self caretStyles asSortedCollection);
		add: (Aspect choice: #indentationGuides
					from: (Array with: nil) , self indentationGuideStyles asSortedCollection);
		add: (Aspect choice: #annotationMode from: self annotationModes);
		add: (Aspect choice: #wrapIndentMode from: self wrapIndentModes);
		add: (Aspect choice: #fontQuality from: self fontQualities);
		add: (Aspect choice: #multiPasteMode from: self multiPasteModes);
		add: (Aspect integer: #whitespaceMarkerSize);
		add: (Aspect choice: #tabDrawMode from: self tabDrawModes);
		add: (Aspect choice: #endOfLineMode from: self lineEndings);
		add: (Aspect choice: #tabDrawMode from: self tabDrawModes);
		add: (Aspect choice: #endOfLineAnnotationMode from: self annotationModes);
		yourself.
	choices := OrderedCollection with: 'nil'.
	(ScintillaStyler allSubclasses reject: [:each | each isAbstract])
		do: [:each | choices add: each name , ' new'].
	answer add: (Aspect choice: #styler evaluationFrom: choices).
	#(#autoCompletionAcceptChars #autoCompletionCancelChars)
		do: [:each | answer add: (Aspect string: each)].
	#(#tabWidth #hoverTime #selectionAlpha #secondarySelectionAlpha #marginCount #currentLineFrameWidth)
		do: [:each | answer add: (Aspect integer: each)].
	#(#caretForecolor #callTipHighlightColor #whitespaceBackcolor #whitespaceForecolor #foldMarginColor #foldMarginHiColor #currentLineBackcolor)
		do: [:each | answer add: (Aspect color: each)].
	#(#canScrollPastEnd #isAutoCompletionCancelledAtStart #isAutoCompletionCaseInsensitive #isAutoCompletionCancelledWhenNoMatch #isAutoCompletionSingleMatchChosen #isAutoCompletionTruncating #isBraceHighlightingEnabled #isFoldingEnabled #hasVisibleLineEndings #isCurrentLineHighlighted #isAccessibilityEnabled)
		do: [:each | answer add: (Aspect boolean: each)].
	^answer!

publishedEventsOfInstances
	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."

	^(super publishedEventsOfInstances)
		remove: #textOverflow;
		add: #charAdded:;
		add: #callTipClicked:;
		add: #hoverStart:;
		add: #hoverEnd:;
		add: #hotSpotClicked:;
		add: #hotSpotDoubleClicked:;
		add: #savePointLeft;
		add: #marginClicked:;
		add: #userList:selection:;
		add: #painted;
		add: #macroRecord:;
		add: #updateUI:;
		add: #zoomed;
		yourself! !

!ScintillaView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!ScrollBar class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect name: #pageSize);
    		add: (Aspect name: #range);
    		add: (Aspect boolean: #isTrackingContinuous);
    		add: (Aspect boolean: #isVertical);
    		yourself! !

!ScrollBar class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ScrollingDecorator class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect boolean: #isTrackingContinuous);
    		add: (Aspect name: #lineExtent);
    		removeKey: #layoutManager;
    		yourself! !

!ScrollingDecorator class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ScrollingDecoratorLayout class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect boolean: #shouldStretchToFit);
		yourself! !

!ScrollingDecoratorLayout class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!SearchPolicy class methodsFor!

method
	"Answer the singleton sub-instance of the receiver which supports a search policy based appropriate for CompiledMethods."

	^CompiledMethodSearchPolicy current! !

!SearchPolicy class categoriesForMethods!
method!instance creation!public! !
!

!SelectorEnvironment methodsFor!

addMethods: methodCollection 
	methodCollection do: [:each | self addClass: each methodClass selector: each selector]! !

!SelectorEnvironment categoriesForMethods!
addMethods:!adding!public! !
!

!Semaphore methodsFor!

debugPrintString
	^self printString! !

!Semaphore categoriesForMethods!
debugPrintString!printing!public! !
!

!SequenceableCollection methodsFor!

alternateInspectorClass
	"Answer the class of inspector to be used when the user requests to inspect
    	the receiver with the Shift key held down."

	^SequenceableCollectionInspector!

newBatchAccessor
	^KeyedAspectBatchAccessor subject: self batchSize: self publishedKeyedAspectsBatchSize! !

!SequenceableCollection categoriesForMethods!
alternateInspectorClass!constants!public! !
newBatchAccessor!public! !
!

!SequenceableCollection class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass sequenceableCollection: aSymbol! !

!SequenceableCollection class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!SessionManager class methodsFor!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #sessionStopped;
    		add: #imageSaveCompleted;
    		add: #'sessionStarted';
    		add: #imageSaveStarting;
		add: #queryEndSession:;
    		yourself.
    ! !

!SessionManager class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!Set methodsFor!

newBatchAccessor
	^SetBatchAspectAccessor subject: self batchSize: self publishedKeyedAspectsBatchSize! !

!Set categoriesForMethods!
newBatchAccessor!private! !
!

!Set class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass set: aSymbol! !

!Set class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!Shell class methodsFor!

registerAsToolWith: aSmalltalkSystem
    	"The receiver is being registered as a tool with aSmalltalkSystem. Perform any
    	additional registration operations here. Part of the <installableSystemTool>
    	protocol, and implemented at this level so that 3.0 tools can be installed
    	without amendment."
    
    	!

unregisterAsToolWith: aSmalltalkSystem
    	"The receiver is being unregistered as a tool with aSmalltalkSystem. Perform any
    	additional unregistration operations here. Part of the <installableSystemTool>
    	protocol, and implemented at this level so that 3.0 tools can be installed
    	without amendment."
    
    	! !

!Shell class categoriesForMethods!
registerAsToolWith:!operations!public! !
unregisterAsToolWith:!operations!public! !
!

!ShellView class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	"This block is used for editing (with a double click inside the PAI) the maximum and
    	minimum extents. The values will toggle between nil and the current extent of the 
    	selected ShellView."

	| maxMinExtentEditBlock |
	maxMinExtentEditBlock := 
			[:p |
			p model value: (p model value isNil ifTrue: [p parentPresenter parentPresenter model value extent])].
	^super publishedAspectsOfInstances
		add: (Aspect autostring: #caption);
		add: (Aspect boolean: #isResizable);
		add: (Aspect boolean: #hasSysMenu);
		add: (Aspect boolean: #hasCaption);
		add: (Aspect boolean: #isInitiallyCentered);
		add: (Aspect boolean: #hasMinimize);
		add: (Aspect boolean: #hasMaximize);
		add: (Aspect boolean: #isToolWindow);
		add: (Aspect boolean: #hasTaskbarIcon);
		add: (Aspect menuBar: #menuBar) beImmutable;
		add: (Aspect icon: #largeIcon);
		add: (Aspect icon: #smallIcon);
		add: ((Aspect name: #maxExtent editBlock: maxMinExtentEditBlock)
					beImmutable;
					beEditedInPlace;
					yourself);
		add: ((Aspect name: #minExtent editBlock: maxMinExtentEditBlock)
					beImmutable;
					beEditedInPlace;
					yourself);
		yourself!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #viewMinimized;
    		add: #viewActivated;
    		add: #captionChanged;
    		add: #aboutToDisplaySystemMenu:;
    		add: #positionChanged:;
    		add: #viewRestored;
    		add: #positionChanging:;
    		add: #viewDeactivated;
    		add: #closeRequested:;
    		yourself.
    ! !

!ShellView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!Slider methodsFor!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	^(super publishedAspects)
		add: (Aspect choice: #tickStyle from: self applicableTickStyles keys asSortedCollection);
		yourself! !

!Slider categoriesForMethods!
publishedAspects!constants!public! !
!

!Slider class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	aspects
		removeKey: #forecolor;
		add: (Aspect name: #range) beImmutable;
		add: (Aspect integer: #thumbLength).
	#(#pageSize #lineSize #selectionRange) do: [:each | aspects add: (Aspect name: each)].
	#(#hasAutoTicks #isVertical #hasTicks #hasToolTips) 
		do: [:each | aspects add: (Aspect boolean: each)].
	^aspects! !

!Slider class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!SpinButton methodsFor!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspects.
	self isAutoSync 
		ifTrue: 
			[aspects
				add: (Aspect boolean: #hasThousandsSeparators);
				add: (Aspect choice: #radix from: #(10 16))].
	^aspects! !

!SpinButton categoriesForMethods!
publishedAspects!accessing!must strip!public! !
!

!SpinButton class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect choice: #alignment from: AlignmentMap keys asSortedCollection);
		add: (Aspect boolean: #wantArrowKeys);
		add: (Aspect boolean: #isAutoSync);
		add: (Aspect boolean: #isVertical);
		add: (Aspect boolean: #hasHotTracking);
		add: (Aspect boolean: #isWraparound);
		add: (Aspect name: #range);
		add: (Aspect name: #buddy) beReadOnly;
		yourself!

publishedEventsOfInstances
    	"Answer a <Set> of <Symbol>s that names all the events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #nudge:;
    		yourself.
    ! !

!SpinButton class categoriesForMethods!
publishedAspectsOfInstances!accessing!must strip!public! !
publishedEventsOfInstances!events!public! !
!

!Splitter class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	#(#isTabStop #isGroupStop #isDragSource #isDropTarget #font #text) 
		do: [:each | aspects removeKey: each].
	aspects add: (Aspect boolean: #hasFlatAppearance).
	^aspects! !

!Splitter class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!StAbstractVariableNode methodsFor!

displayOn: aStream
	aStream
		nextPutAll: 'Var ';
		print: self name! !

!StAbstractVariableNode categoriesForMethods!
displayOn:!printing!public! !
!

!StackFrame methodsFor!

debugIpFor: debugMethod 
	| interp debugPrev method prev i offset map debugMap ip |
	ip := self ip.
	ip = 1 ifTrue: [^1].
	method := self method.
	map := method debugInfo textMap.
	debugMap := debugMethod debugInfo textMap.
	self assert: [map size == debugMap size].
	i := self class findIP: ip inTextMap: map.
	(map at: i) key = ip 
		ifTrue: 
			["Directly corresponding entry"
			^(debugMap at: i) key].
	"More often mapping from bytecode immediately after a send, so we need to remap that
	previous instructions IP and then step to the next instruction in the debug method"
	interp := method byteCodeDispatcher.
	prev := interp prevIP: ip.
	i := self class findIP: prev inTextMap: map.
	offset := prev - (map at: i) key.
	debugPrev := offset = 0 
				ifTrue: [(debugMap at: i) key]
				ifFalse: 
					[| debugDispatcher steps |
					self assert: [offset < 0].
					debugDispatcher := debugMethod byteCodeDispatcher.
					i > 1 
						ifTrue: 
							[interp ip: (map at: i - 1) key.
							debugDispatcher ip: (debugMap at: i - 1) key].
					steps := 0.
					[interp ip = prev] whileFalse: 
							[steps := steps + 1.
							interp next.
							debugDispatcher next].
					self assert: [steps = 1].
					debugDispatcher ip].
	interp
		method: debugMethod;
		ip: debugPrev.
	interp next.
	^interp ip!

debugPrintOn: aStream
	self basicPrintOn: aStream!

makeDebug
	"Private - Convert the receiver to a debug frame. This is for the use of the debugger."

	| method debugMethod ip |
	method := self method.
	(method isDebugMethod or: [method sourceDescriptor isNil]) ifTrue: [^self].	"nothing to do"
	debugMethod := method asDebugMethod.
	ip := self debugIpFor: debugMethod.

	"We must reset ip, even if not changed, because method bytecodes may change from 
    	packed to unpacked. Also the method must be set first for #ip: to work correctly."
	self
		method: debugMethod;
		ip: ip!

stackWorkspace
	"Private - Answer the number of additional stack temps currently in use
    	(i.e. the depth of stack above the last named temporary currently being
    	used for working space)."

	^self sender isNil ifTrue: [0] ifFalse: [self sp - index - self frameSize + 1]! !

!StackFrame categoriesForMethods!
debugIpFor:!private! !
debugPrintOn:!public! !
makeDebug!private! !
stackWorkspace!accessing!private! !
!

!StackFrame class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	^aspects
		add: (Aspect collection: #arguments) beReadOnly;
		add: (Aspect name: #method);
		add: (Aspect integer: #ip);
		add: (Aspect integer: #sp);
		add: (Aspect integer: #bp) beReadOnly;
		add: (Aspect name: #sender);
		add: (Aspect collection: #tempNames) beReadOnly;
		add: (Aspect name: #environment);
		yourself! !

!StackFrame class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!StAssignmentNode methodsFor!

displayOn: aStream
	aStream nextPutAll: ':='! !

!StAssignmentNode categoriesForMethods!
displayOn:!printing!public! !
!

!StaticBitmap class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect bitmap: #image);
    		yourself! !

!StaticBitmap class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!StaticIcon class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect icon: #image);
    		yourself! !

!StaticIcon class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!StaticRectangle class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect choice: #style from: StyleMap keys asSortedCollection);
    		yourself! !

!StaticRectangle class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!StaticText class methodsFor!

applicableTypeConverterCategories
    	"Answers a class category containing <typeConverter>s that can 
    	be used with the receiver"
    
    	^super applicableTypeConverterCategories
    		add: (ClassCategory name: 'MVP-Type Converters-Text');
    		yourself!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect multilineString: #text);
    		add: (Aspect choice: #alignment from: AlignmentMap keys asSortedCollection);
    		removeKey: #value;
    		yourself! !

!StaticText class categoriesForMethods!
applicableTypeConverterCategories!constants!public! !
publishedAspectsOfInstances!constants!public! !
!

!StaticView class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect boolean: #isSunken);
    		yourself! !

!StaticView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!StatusBar class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect boolean: #hasSizeGrip);
		add: (Aspect boolean: #hasToolTips);
		add: (Aspect sequenceableCollection: #items
					addEvaluationFrom: (Array with: ('<1p> <2d>' expandMacrosWith: StatusBarItem with: #new))) 
						beImmutable;
		yourself! !

!StatusBar class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!StatusBarItem class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^super publishedAspectsOfInstances
		add: (Aspect block: #getImageBlock);
		add: (Aspect block: #getTextBlock);
		add: (Aspect block: #getTipTextBlock);
		yourself! !

!StatusBarItem class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!StatusBarItemAbstract class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^super publishedAspectsOfInstances
		add: (Aspect choice: #borderStyle from: BorderStyles keys asSortedCollection);
		add: (Aspect integer: #width);
		add: (Aspect string: #name);
		add: (Aspect boolean: #isAutoResize);
		yourself! !

!StatusBarItemAbstract class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!StBlockNode methodsFor!

displayOn: aStream
	aStream nextPutAll: '[]'! !

!StBlockNode categoriesForMethods!
displayOn:!printing!public! !
!

!StCascadeNode methodsFor!

displayOn: aStream
	aStream nextPutAll: 'Cascade'
! !

!StCascadeNode categoriesForMethods!
displayOn:!printing!public! !
!

!StLiteralArrayNode methodsFor!

displayOn: aStream
	aStream nextPutAll: '#()'! !

!StLiteralArrayNode categoriesForMethods!
displayOn:!printing!public! !
!

!StLiteralToken methodsFor!

textStyle
	^self value literalTextStyle! !

!StLiteralToken categoriesForMethods!
textStyle!constants!public! !
!

!StLiteralValueNode methodsFor!

displayOn: aStream
	self value printOn: aStream! !

!StLiteralValueNode categoriesForMethods!
displayOn:!printing!public! !
!

!StMessageNode methodsFor!

displayOn: aStream
	aStream
		nextPutAll: 'Msg ';
		print: self selector! !

!StMessageNode categoriesForMethods!
displayOn:!printing!public! !
!

!StNumberLiteralToken methodsFor!

textStyle
	^#literalNumber! !

!StNumberLiteralToken categoriesForMethods!
textStyle!constants!public! !
!

!StOptimizedNode methodsFor!

displayOn: aStream
	aStream nextPutAll: '##()'! !

!StOptimizedNode categoriesForMethods!
displayOn:!printing!public! !
!

!StParameterNode methodsFor!

displayOn: aStream
	aStream
		nextPut: $:;
		display: self name! !

!StParameterNode categoriesForMethods!
displayOn:!printing!public! !
!

!StPrimitiveNode methodsFor!

displayOn: aStream
	aStream
		nextPutAll: '<Primitive: ';
		display: self primitiveIndex.
	errorTemp
		ifNotNil: 
			[aStream
				nextPutAll: ' error: ';
				display: errorTemp name].
	aStream nextPut: $>! !

!StPrimitiveNode categoriesForMethods!
displayOn:!printing!public! !
!

!StProgramNode methodsFor!

debugPrintString
	"Answer a <readableString> whose characters are a description of the receiver 
	as the debugger would want to see it.
	Implementation Note: Debugging the parser can be difficult if we use #printOn:
	because it attempts to output formatted text for the method, which can fail when it
	is only partially constructed."

	^self basicPrintString
!

postComments
	"Answer the set of comments associated with the receiver that are after the token"

	^self comments 
		ifNil: [#()]
		ifNotNil: 
			[:all | 
			| stop |
			stop := self stop.
			all select: [:each | each start > stop]]!

preComments
	"Answer the set of comments associated with the receiver that are before the token"

	^self comments 
		ifNil: [#()]
		ifNotNil: 
			[:all | 
			| start |
			start := self start.
			all select: [:each | each stop < start]]!

publishedAspects
	| aspects |
	aspects := super publishedAspects.
	aspects at: #yourself
		put: (Aspect name: #yourself
				presenterBlock: 
					[:p :m |
					| tree |
					tree := TreePresenter
								create: 'Default view'
								in: p
								on: (VirtualTreeModel withRoots: (OrderedCollection with: m value)).
					tree view expandAll.
					tree]).
	^aspects! !

!StProgramNode categoriesForMethods!
debugPrintString!printing!public! !
postComments!accessing!public! !
preComments!accessing!public! !
publishedAspects!constants!public! !
!

!StReturnNode methodsFor!

displayOn: aStream
	aStream nextPut: $^! !

!StReturnNode categoriesForMethods!
displayOn:!printing!public! !
!

!String methodsFor!

aspectDisplayOn: aStream
	"Private - Append a single-line textual representation of the receiver to the <puttableStream>
  	argument in a form that a user viewing the receiver as the value of a published aspect would 
  	like to see it. Typically we use #displayOn: but some classes of object can use alternate display 
  	formats. In this case we want to keep to a reasonable length and stop at the first line delimiter.
  	N.B. This is a development time only method that supports the PublishedAspectInspector."

	| count max charStream |
	aStream nextPut: $'.
	max := self size min: Aspect maxDisplayCharacters - 2.
	charStream := self readStream.
	count := 0.
	[charStream atEnd or: [count >= max]] whileFalse: 
			[| ch |
			ch := charStream next.
			(ch == $\r or: [ch == $\n])
				ifTrue: 
					["Stop at line delimiter"
					count := max]
				ifFalse: [aStream nextPut: ch].
			count := count + 1].
	charStream atEnd ifFalse: [aStream nextPutAll: ' ...'].
	aStream nextPut: $'!

debugPrintString
	^self printString!

literalTextStyle
	^#literalString!

newAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^(self size > 80 or: [self identityIncludes: Character cr]) 
		ifTrue: [aspectClass multilineString: aSymbol]
		ifFalse: [aspectClass string: aSymbol]!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	"Implementation Note: Override because we want the receiver to be treated
	purely as a string, rather than as a collection of characters."

	^LookupTable with: (self newAspect: #yourself class: Aspect)! !

!String categoriesForMethods!
aspectDisplayOn:!private! !
debugPrintString!printing!public! !
literalTextStyle!constants!private! !
newAspect:class:!adapters!private! !
publishedAspects!constants!public! !
!

!StringField methodsFor!

printAccessorExpressionSuffixOn: aWriteStream 
	"Private - Print any extra messages/statements onto the <puttableStream> argument that are required to
	configure the object being read from the structure instance."

	"If the length of the field is fixed, then assume we are reading a null-terminated string."
	self isFixedSize ifFalse: [super printAccessorExpressionSuffixOn: aWriteStream]
	!

printMutatorBody: aSymbol on: aWriteStream
	"Private - Print a suitable statement or statement onto the specified <puttableStream> which
	will write the value of this field into an isntance of the structure. The field in question
	is after the fields in the <sequencedReadableCollection> that is the 2nd argument."

	"Implementation Note: In this case we overwrite the embedded String, not forgetting to Null
	Terminate it"

	| keywords |
	super printMutatorBody: aSymbol on: aWriteStream.
	aWriteStream nextPutAll: 'bytes '.
	keywords := (self elementSize == 2 ifTrue: [#wordAtOffset:put:] ifFalse: [#byteAtOffset:put:])
				keywords.
	aWriteStream
		display: keywords first;
		space.
	self printOffsetExpression: aSymbol on: aWriteStream.
	aWriteStream
		nextPutAll: ' + size ';
		display: keywords second;
		space;
		nextPut: $0! !

!StringField categoriesForMethods!
printAccessorExpressionSuffixOn:!automatic generation!private! !
printMutatorBody:on:!automatic generation!private! !
!

!StringField class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
	which is appropriate for representing aspects of the receiver's type."

	^aspectClass string: aSymbol! !

!StringField class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!StructureArrayField methodsFor!

printAccessorExpressionSuffixOn: aWriteStream 
	"Private - Print any extra messages/statements onto the <puttableStream> argument that are required to
	configure the object being read from the structure instance."

	"We need to set the length and element class of the structure array"

	super printAccessorExpressionSuffixOn: aWriteStream.
	aWriteStream
		space;
		display: #elementClass:;
		space;
		display: self fieldClass! !

!StructureArrayField categoriesForMethods!
printAccessorExpressionSuffixOn:!automatic generation!private! !
!

!StructureArrayPointerField methodsFor!

printAccessorExpressionSuffixOn: aWriteStream 
	"Private - Print any extra messages/statements onto the <puttableStream> argument that are required to
	configure the object being read from the structure instance."

	"We need to set the length and element class of the structure array"

	super printAccessorExpressionSuffixOn: aWriteStream.
	aWriteStream
		space;
		display: #elementClass:;
		space;
		display: self elementClass! !

!StructureArrayPointerField categoriesForMethods!
printAccessorExpressionSuffixOn:!automatic generation!private! !
!

!StructureField methodsFor!

printMutatorBody: aSymbol on: aWriteStream
	"Private - Answer suitable method text for compiling a write-accessor method
	to substitute for the receiver (does not include the selector).
	N.B. In this case we overwrite the entire embedded structure with
	a new one"

	| keywords |
	keywords := #replaceBytesOf:from:to:startingAt: keywords.
	aWriteStream
		nextPutAll: self valueParameterName;
		space;
		display: keywords first;
		nextPutAll: ' bytes ';
		display: keywords second;
		space.
	self
		printOffsetExpression: aSymbol
		on: aWriteStream
		extra: 1.
	aWriteStream
		space;
		display: keywords third;
		space.
	self
		printOffsetExpression: aSymbol
		on: aWriteStream
		extra: ((String writeStream)
				display: self fieldClassName;
				space;
				display: #basicByteSize;
				contents).
	aWriteStream
		space;
		display: keywords fourth;
		space;
		display: 1! !

!StructureField categoriesForMethods!
printMutatorBody:on:!automatic generation!private! !
!

!StructurePointer methodsFor!

printOn: aStream
	"Print a string representation of self on aStream."

	aStream
		basicPrint: self;
		nextPut: $(.
	self isNull 
		ifTrue: [aStream nextPutAll: 'NULL']
		ifFalse: [aStream print: self value].
	aStream nextPut: $).! !

!StructurePointer categoriesForMethods!
printOn:!printing!public! !
!

!StSelfVariable methodsFor!

valueClass
	"Answer the class of the variables value, if this is known, or nil if unknown."

	"The scope will be an StClassScope which knows the method class."

	^scope methodClass! !

!StSelfVariable categoriesForMethods!
valueClass!accessing!public! !
!

!StSelfVariableNode methodsFor!

valueClassIn: aClass
	^aClass! !

!StSelfVariableNode categoriesForMethods!
valueClassIn:!public! !
!

!StSequenceNode methodsFor!

displayOn: aStream
	aStream nextPutAll: '...'! !

!StSequenceNode categoriesForMethods!
displayOn:!printing!public! !
!

!StSpecialVariableNode methodsFor!

displayOn: aStream
	aStream display: self name!

valueClassIn: aClass
	^self subclassResponsibility! !

!StSpecialVariableNode categoriesForMethods!
displayOn:!printing!public! !
valueClassIn:!public! !
!

!StStaticVariable methodsFor!

valueClass
	"Answer the class of the variables value, if this is known, or nil if unknown."

	"In the case of static variables, we can only offer a variable type with confidence (without
	resort to type inference) if the variable binding is constant. If it isn't then the variable
	could assume different types through the course of the method or even across different
	invocations (if a global, or class variable). This might cause false reports of
	unimplemented messages in the debugger. Therefore we have to be conservative here in
	suggesting the variable type."

	^binding isImmutable ifTrue: [binding value basicClass]! !

!StStaticVariable categoriesForMethods!
valueClass!accessing!public! !
!

!StSuperVariable methodsFor!

valueClass
	"Answer the class of the variables value, if this is known, or nil if unknown."

	^scope methodClass superclass! !

!StSuperVariable categoriesForMethods!
valueClass!accessing!public! !
!

!StSuperVariableNode methodsFor!

valueClassIn: aClass
	^aClass superclass! !

!StSuperVariableNode categoriesForMethods!
valueClassIn:!public! !
!

!StTempDeclNode methodsFor!

displayOn: aStream
	aStream
		nextPut: $|;
		display: name;
		nextPut: $|! !

!StTempDeclNode categoriesForMethods!
displayOn:!printing!public! !
!

!StThisContextVariable methodsFor!

valueClass
	"Answer the class of the variables value, if this is known, or nil if unknown."

	^Integer! !

!StThisContextVariable categoriesForMethods!
valueClass!accessing!public! !
!

!StThisContextVariableNode methodsFor!

valueClassIn: aClass
	^Integer! !

!StThisContextVariableNode categoriesForMethods!
valueClassIn:!public! !
!

!StToken methodsFor!

postComments
	"Answer the set of comments associated with the receiver that are after the token"

	^self comments 
		ifNil: [#()]
		ifNotNil: 
			[:all | 
			| stop |
			stop := self stop.
			all select: [:each | each start > stop]]!

preComments
	"Answer the set of comments associated with the receiver that are before the token"

	^self comments ifNil: [#()] ifNotNil: [:all | all select: [:each | each stop < start]]! !

!StToken categoriesForMethods!
postComments!accessing!public! !
preComments!accessing!public! !
!

!StVariable methodsFor!

valueClass
	"Answer the class of the variables value, if this is known, or nil if unknown. In Smalltalk
	we only know the type that a variable can assume in the case of constants as variables are
	untyped."

	^nil! !

!StVariable categoriesForMethods!
valueClass!accessing!public! !
!

!StyledGradientBrush class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect color: #startColor);
		add: (Aspect color: #endColor);
		add: (Aspect name: #startPoint);
		add: (Aspect name: #endPoint);
		yourself! !

!StyledGradientBrush class categoriesForMethods!
publishedAspectsOfInstances!public! !
!

!StyledPen class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect color: #color);
		add: (Aspect name: #dashPattern);
		add: (Aspect number: #width);
		yourself	"For now we don't allow the width to be adjusted in the VC because there are problems"! !

!StyledPen class categoriesForMethods!
publishedAspectsOfInstances!public! !
!

!Symbol methodsFor!

aspectDisplayOn: aStream
  	"Private - Append a single-line textual representatin of the receiver to the <puttableStream>
  	argument in a form that a user viewing the receiver as the value of a published aspect would 
  	like to see it. Typically we use #displayOn: but some classes of object can use alternate display 
  	formats. In this case we want to keep to use the printString format."
  
  	self printOn: aStream!

literalTextStyle
	^#literalSymbol!

searchForInTool: aSmalltalkToolShell 
	aSmalltalkToolShell searchForSymbol: self! !

!Symbol categoriesForMethods!
aspectDisplayOn:!private! !
literalTextStyle!constants!private! !
searchForInTool:!public! !
!

!Symbol class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^(aspectClass name: aSymbol) beImmutable! !

!Symbol class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!SystemDictionary class methodsFor!

publishedEventsOfInstances
	"Answer a <Set> of <Symbol>s, being the names all the events published
    	by instances of the receiver."

	"Note that there are currently no #globalAdded: and #protocolAdded: events"

	^(super publishedEventsOfInstances)
		add: #methodAdded:;
		add: #methodUpdated:;
		add: #methodRemoved:;
		add: #methodCategorized:;
		add: #classAdded:;
		add: #classUpdated:;
		add: #classRemoved:;
		add: #classCategorized:;
		add: #classCommented:;
		add: #globalRenamed:from:;
		add: #globalRemoved:;
		add: #protocolUpdated:;
		add: #protocolRemoved:;
		yourself! !

!SystemDictionary class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!SYSTEMTIME methodsFor!

printOn: aStream
	"Append a debugging representation of the receiver to aStream."

	aStream 
		basicPrint: self;
		nextPut: $(; 
		display: self; 
		nextPut: $)
! !

!SYSTEMTIME categoriesForMethods!
printOn:!printing!public! !
!

!TabView class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| answer |
	answer := super publishedAspectsOfInstances.
	answer add: (Aspect choice: #tabOrientation from: TabOrientations values).
	#(#hasFlatSeparators #hasButtons #isMultiline) do: [:each | answer add: (Aspect boolean: each)].
	^answer! !

!TabView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!TextEdit class methodsFor!

applicableTypeConverterCategories
    	"Answers a class category containing <typeConverter>s that can 
    	be used with the receiver"
    
    	^super applicableTypeConverterCategories
    		add: (ClassCategory name: 'MVP-Type Converters-Text');
    		yourself!

publishedAspectsOfInstances
	"Answer a Set of the aspects published by  instances of the receiver"

	| aspects |
	aspects := super publishedAspectsOfInstances.
	aspects removeKey: #value.
	#(#canHScroll #isReadOnly #isStatic #isSelectionKept #updatePerChar #isFindEnabled)
		do: [:each | aspects add: (Aspect boolean: each)].
	^aspects
		add: (Aspect choice: #alignment from: AlignmentMap keys asSortedCollection);
		add: (Aspect choice: #format from: FormatMap keys asSortedCollection);
		add: (Aspect string: #cueBanner);
		yourself!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #textOverflow;
    		yourself.
    ! !

!TextEdit class categoriesForMethods!
applicableTypeConverterCategories!constants!public! !
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!TextTileIcon class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass icon: aSymbol! !

!TextTileIcon class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!Time class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
	which is appropriate for representing aspects of the receiver's type."

	^aspectClass time: aSymbol! !

!Time class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

!TimeToText class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect string: #format);
    		yourself! !

!TimeToText class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Toolbar class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances
				add: (Aspect rectangle: #insets);
				add: (Aspect
							choice: #imageSize
							from: ImageSizes keys asSortedCollection
							andNil: nil);
				add: (Aspect sequenceableCollection: #items
							addEvaluationFrom: ##({ToolbarIconButton. ToolbarBitmapButton. ToolbarTextButton. ToolbarSeparator}
									collect: [:each | each name , ' new']))
								beImmutable;
				add: (Aspect color: #textcolor);
				yourself.
	#(#hasFlatAppearance #hasFluentIcons #hasListAppearance #hasLabels #canCustomize)
		do: [:each | aspects add: (Aspect boolean: each)].
	^aspects!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #dropDown:;
    		yourself.
    !

resource_Class_browser_tools
	"Answer the literal data from which the 'Class browser tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Class_browser_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 10 15795 1115206 1 ##(Smalltalk.ToolbarIconButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #toggleShowInheritedMethods 8 'Show Inherited Methods' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'ToggleLocalHierarchy.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil 15795 15791 594 416 1 626 #newMethod 8 'New Method' 1 1 674 nil true 720 8 'NewMethod.ico' 768 15791 15787 594 416 17 626 #historyBack 8 'Back' 1 1 674 nil true 720 8 'HistoryBack.ico' 768 15787 15793 594 416 1 626 #newClass 8 'New Class' 1 1 674 nil true 720 8 'NewClass.ico' 768 15793 15789 594 416 17 626 #historyForward 8 'Forward' 1 1 674 nil true 720 8 'HistoryForward.ico' 768 15789 34 6 880 1040 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 800 960 608 nil nil 9 nil nil nil nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 26 8 0 0 35 0 0 0] 193 448 8 '' 416 1 8 #() 328198 ##(Smalltalk.Point) 193 193 nil 31 )!

resource_Debugger_tools
	"Answer the literal data from which the 'Debugger tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Debugger_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 18 15811 1115206 1 ##(Smalltalk.ToolbarIconButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #restartFrame 8 'R&estart' 13545 1 788806 1 ##(Smalltalk.TextTileIcon) $⭮ 8 'Cambria' nil nil nil nil 1 nil nil 15811 15807 594 416 1 626 #runToCursor 8 'Run to Cursor' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'RunToCursor.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil 15807 15803 594 416 1 626 #stepOut 8 'Step Out' 1 1 770 nil true 816 8 'StepOut.ico' 864 15803 15799 594 416 1 626 #stepInto 8 'Step Into' 1 1 770 nil true 816 8 'StepInto.ico' 864 15799 15813 594 416 1 626 #returnFromMessage 8 'Retur&n ...' 1 1 674 $⏎ 8 'Cambria' nil nil nil 1 1 nil nil 15813 15809 594 416 1 626 #resumeProcess 8 'Go' 1 1 770 nil true 816 8 'Run.ico' 864 15809 15805 594 416 1 626 #stepIntoBlock 8 'Step Into Block' 1 1 770 nil true 816 8 'StepIntoBlock.ico' 864 15805 15801 594 416 1 626 #stepOver 8 'Step Over' 1 1 770 nil true 816 8 'StepOver.ico' 864 15801 15797 594 416 1 626 #showNextStatement 8 'Show Next Statement' 1 1 770 nil true 816 8 'ShowNextStatement.ico' 864 15797 34 10 1376 976 1296 896 1216 720 1136 608 1056 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 nil nil 9 nil nil nil nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 61 8 0 0 35 0 0 0] 193 448 8 '' 416 1 8 #() 328198 ##(Smalltalk.Point) 193 193 nil 31 )!

resource_Image_tools
	"Answer the literal data from which the 'Image tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Image_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 2 15949 1115206 1 ##(Smalltalk.ToolbarIconButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #saveImage 8 'Save Image' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'Snapshot.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil 15949 34 2 608 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 nil nil 9 nil nil nil nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 158 7 0 0 35 0 0 0] 193 448 8 '' 416 1 8 #() 328198 ##(Smalltalk.Point) 193 193 nil 31 )!

resource_Resource_tools
	"Answer the literal data from which the 'Resource tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Resource_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 4 15967 1115206 1 ##(Smalltalk.ToolbarIconButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #newView 8 'New View Resource' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'NewThing.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil 15967 15969 594 416 1 626 #clearSelection 8 'Delete Resource' 1 1 674 nil true 720 8 'EditClear.ico' 768 15969 34 3 608 800 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 nil nil 9 nil nil nil nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 182 7 0 0 35 0 0 0] 193 448 8 '' 416 1 8 #() 328198 ##(Smalltalk.Point) 193 193 nil 31 )!

resource_Search_tools
	"Answer the literal data from which the 'Search tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Search_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil 263494 1 ##(Smalltalk.Font) nil true 524550 ##(Smalltalk.LOGFONTW) 8 #[244 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 144 1 0 0 0 0 0 0 0 0 0 0 83 0 101 0 103 0 111 0 101 0 32 0 85 0 73 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 193 nil nil 416 nil 8 1759112192 170 192 34 2 410 ##(Smalltalk.ReferenceView) 34 14 nil 416 34 2 8 1140916224 131073 608 nil 327686 ##(Smalltalk.Color) #default nil 5 nil nil nil 608 1180230 1 ##(Smalltalk.ResourceIdentifier) ##(Smalltalk.SmalltalkSearchPresenter) #resource_Default_view nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[0 0 0 0 2 0 0 0 185 0 0 0 20 0 0 0] 193 640 8 '' 608 3 8 #() 328198 ##(Smalltalk.Point) 193 193 nil 27 8 'search' nil nil nil 170 192 34 2 15971 1115206 1 ##(Smalltalk.ToolbarIconButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #goSearch 8 'Go Search' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'GoSearch.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil 15971 34 2 1056 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 nil nil 9 375 nil nil nil nil 738 138 144 34 1 802 #createWindow: 34 1 850 882 8 #[127 7 0 0 10 0 0 0 89 8 0 0 35 0 0 0] 193 448 8 '' 416 1 34 1 608 962 193 193 nil 31 )!

resource_Smalltalk_tools
	"Answer the literal data from which the 'Smalltalk tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Smalltalk_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 22 15981 1115206 1 ##(Smalltalk.ToolbarIconButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #browsePackages 8 'Open Package Browser' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'PackageBrowserShell.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil 15981 15977 594 416 1 626 #browseSystem 8 'Open System Browser' 1 1 674 nil true 720 8 'SystemBrowserShell.ico' 768 15977 15973 594 416 1 626 #newWorkspace 8 'New Workspace' 1 1 674 nil true 720 8 'NewWorkspace.ico' 768 15973 15991 594 416 1 626 #inspectVisualObject 8 'Visual Object Finder' 1 1 674 nil true 720 8 'VisualObjectFinder.ico' 768 15991 15987 594 416 1 626 #openViewComposer 8 'Open View Composer' 1 1 674 nil true 720 8 'ViewComposer.ico' 768 15987 15983 594 416 1 626 #browseTests 8 'Open Test Browser' 1 1 674 nil true 720 8 'UnitTestPlugin.ico' 768 15983 15979 594 416 1 626 #browseHierarchy 8 'Open Class Hierarchy Browser' 1 1 674 nil true 720 8 'ClassBrowserShell.ico' 768 15979 15975 594 416 1 626 #openWorkspace 8 'Open Workspace' 1 1 674 nil true 720 8 'OpenWorkspace.ico' 768 15975 15993 594 416 17 626 #newIdeaSpace 8 'New Idea Space' 1 1 674 nil true 720 8 'IdeaSpaceShell.ico' 768 15993 15989 594 416 1 626 #showTranscript 8 'Show Transcript' 1 1 674 nil true 720 8 'TranscriptShell.ico' 768 15989 15985 594 416 1 626 #browseResources 8 'Open View Browser' 1 1 674 nil true 720 8 'ResourceBrowser.ico' 768 15985 34 12 880 1280 800 1200 608 1120 1520 1040 1440 960 1360 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 nil nil 9 nil nil nil nil 656198 1 ##(Smalltalk.FlowLayout) 1 1 1 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 147 8 0 0 35 0 0 0] 193 448 8 '' 416 1 8 #() 328198 ##(Smalltalk.Point) 193 193 nil 31 )!

resource_View_composer_alignment_tools
	"Answer the literal data from which the 'View composer alignment tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_View_composer_alignment_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 14 16033 1246790 1 ##(Smalltalk.ToolbarBitmapButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #alignBottoms nil 1 1 nil 16033 395334 3 ##(Smalltalk.Bitmap) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'VCBar.BMP' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil nil 7 328198 ##(Smalltalk.Point) 929 33 13 16029 594 416 1 626 #alignTops nil 1 1 nil 16029 672 9 16025 594 416 1 626 #alignCenters nil 1 1 nil 16025 672 5 16021 594 416 1 626 #alignToGrid nil 1 1 nil 16021 672 1 16031 594 416 1 626 #alignMiddles nil 1 1 nil 16031 672 11 16027 594 416 1 626 #alignRights nil 1 1 nil 16027 672 7 16023 594 416 1 626 #alignLefts nil 1 1 nil 16023 672 3 34 8 880 976 848 944 816 912 608 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 nil nil 17 nil #smallIcons 786 45 45 nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 40 8 0 0 35 0 0 0] 193 448 8 '' 416 1 8 #() 786 193 193 nil 31 )!

resource_View_composer_match_size_tools
	"Answer the literal data from which the 'View composer match size tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_View_composer_match_size_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 8 16041 1246790 1 ##(Smalltalk.ToolbarBitmapButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #matchSizes nil 1 1 nil 16041 395334 3 ##(Smalltalk.Bitmap) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'VCBar.BMP' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil nil 7 328198 ##(Smalltalk.Point) 929 33 21 16039 594 416 1 626 #matchHeights nil 1 1 nil 16039 672 19 16037 594 416 1 626 #sizeToGrid nil 1 1 nil 16037 672 17 16035 594 416 1 626 #matchWidths nil 1 1 nil 16035 672 15 34 5 880 848 816 608 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 nil nil 17 nil #smallIcons 786 45 45 nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 227 7 0 0 35 0 0 0] 193 448 8 '' 416 1 8 #() 786 193 193 nil 31 )!

resource_View_composer_nudge_tools
	"Answer the literal data from which the 'View composer nudge tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_View_composer_nudge_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 16 16049 1246790 1 ##(Smalltalk.ToolbarBitmapButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #nudgeDown nil 1 1 nil 16049 395334 3 ##(Smalltalk.Bitmap) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'VCBar.BMP' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil nil 7 328198 ##(Smalltalk.Point) 929 33 43 16045 594 416 1 626 #nudgeRight nil 1 1 nil 16045 672 47 16055 594 416 1 626 #increaseWidth nil 1 1 nil 16055 672 55 16051 594 416 1 626 #increaseHeight nil 1 1 nil 16051 672 51 16047 594 416 1 626 #nudgeUp nil 1 1 nil 16047 672 45 16043 594 416 1 626 #nudgeLeft nil 1 1 nil 16043 672 49 16057 594 416 1 626 #decreaseWidth nil 1 1 nil 16057 672 57 16053 594 416 1 626 #decreaseHeight nil 1 1 nil 16053 672 53 34 10 944 816 912 608 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 880 1008 848 976 1058 416 1 nil nil 17 nil #smallIcons 786 45 45 nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 71 8 0 0 35 0 0 0] 193 448 8 '' 416 1 8 #() 786 193 193 nil 31 )!

resource_View_composer_spacing_tools
	"Answer the literal data from which the 'View composer spacing tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_View_composer_spacing_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 20 16075 1246790 1 ##(Smalltalk.ToolbarBitmapButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #centerHorizontally nil 1 1 nil 16075 395334 3 ##(Smalltalk.Bitmap) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'VCBar.BMP' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil nil 7 328198 ##(Smalltalk.Point) 929 33 39 16071 594 416 1 626 #decreaseVerticalGaps nil 1 1 nil 16071 672 35 16067 594 416 1 626 #distributeVertically nil 1 1 nil 16067 672 31 16063 594 416 1 626 #decreaseHorizontalGaps nil 1 1 nil 16063 672 27 16059 594 416 1 626 #distributeHorizontally nil 1 1 nil 16059 672 23 16077 594 416 1 626 #centerVertically nil 1 1 nil 16077 672 41 16073 594 416 1 626 #removeVerticalGaps nil 1 1 nil 16073 672 37 16069 594 416 1 626 #increaseVerticalGaps nil 1 1 nil 16069 672 33 16065 594 416 1 626 #removeHorizontalGaps nil 1 1 nil 16065 672 29 16061 594 416 1 626 #increaseHorizontalGaps nil 1 1 nil 16061 672 25 34 12 912 1072 880 1040 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 848 1008 816 976 608 944 1122 416 1 nil nil 17 nil #smallIcons 786 45 45 nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 117 8 0 0 35 0 0 0] 193 448 8 '' 416 1 8 #() 786 193 193 nil 31 )!

resource_View_composer_tools
	"Answer the literal data from which the 'View composer tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_View_composer_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 8 16085 1115206 1 ##(Smalltalk.ToolbarIconButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #zBack 8 'Send to Back' 1 1 788806 1 ##(Smalltalk.TextTileIcon) $⏭ 8 'Georgia' nil 482 #menuHilight nil nil 3 nil nil 16085 16083 594 416 1 626 #zBackward 8 'Send Backward' 1 1 674 $▼ nil nil 720 nil nil 1 nil nil 16083 16081 594 416 1 626 #zForward 8 'Bring Forward' 1 1 674 $▲ 8 'Segoe UI' nil 720 nil nil 1 nil nil 16081 16079 594 416 1 626 #zFront 8 'Bring to Front' 1 1 674 $⏮ 8 'Georgia' nil 720 nil nil 3 nil nil 16079 34 5 880 800 736 608 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 nil nil 9 nil #smallIcons 328198 ##(Smalltalk.Point) 45 45 nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 66 10 0 0 35 0 0 0] 193 448 8 '' 416 1 8 #() 1010 193 193 nil 31 )!

resource_Workspace_tools
	"Answer the literal data from which the 'Workspace tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Workspace_tools)
	"

	^#(#'!!STL' 4 788558 11 ##(Smalltalk.STBViewProxy) ##(Smalltalk.Toolbar) 34 28 nil nil 34 2 8 1409289164 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1759112192 170 192 8 #() nil nil nil 170 192 34 10 16093 1115206 1 ##(Smalltalk.ToolbarIconButton) 416 1 1180998 4 ##(Smalltalk.CommandDescription) #inspectIt 8 'Inspect It' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'InspectIt.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil 16093 16089 594 416 1 626 #printIt 8 'Print It' 1 1 674 nil true 720 8 'PrintIt.ico' 768 16089 16095 594 416 1 626 #debugIt 8 'Deb&ug It' 1 1 674 nil true 720 8 'Debugger.ico' 768 16095 16091 594 416 1 626 #evaluateIt 8 'Evaluate It' 1 1 674 nil true 720 8 'EvaluateIt.ico' 768 16091 16087 594 416 1 626 #displayIt 8 'Display It' 1 1 674 nil true 720 8 'DisplayIt.ico' 768 16087 34 6 1040 800 960 608 880 1049158 1 ##(Smalltalk.ToolbarSeparator) 416 1 nil nil 9 nil nil nil nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createWindow: 34 1 787462 ##(Smalltalk.CreateWindow) 262406 ##(Smalltalk.RECT) 8 #[127 7 0 0 10 0 0 0 152 7 0 0 125 0 0 0] 193 448 8 '' 416 1 8 #() 328198 ##(Smalltalk.Point) 193 193 nil 31 )! !

!Toolbar class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
resource_Class_browser_tools!public!resources-views! !
resource_Debugger_tools!public!resources-views! !
resource_Image_tools!public!resources-views! !
resource_Resource_tools!public!resources-views! !
resource_Search_tools!public!resources-views! !
resource_Smalltalk_tools!public!resources-views! !
resource_View_composer_alignment_tools!public!resources-views! !
resource_View_composer_match_size_tools!public!resources-views! !
resource_View_composer_nudge_tools!public!resources-views! !
resource_View_composer_spacing_tools!public!resources-views! !
resource_View_composer_tools!public!resources-views! !
resource_Workspace_tools!public!resources-views! !
!

!ToolbarBitmapButton methodsFor!

publishedAspects
	| aspects |
	aspects := super publishedAspects.
	self bitmap
		ifNotNil: 
			[:bmp |
			aspects add: (Aspect choice: #bitmapIndex
						from: (0 to: bmp extent x // (self toolbar ifNil: [SystemMetrics default smallIconExtent x] ifNotNil: [:tb | tb bitmapSize x])))].
	^aspects! !

!ToolbarBitmapButton categoriesForMethods!
publishedAspects!constants!public! !
!

!ToolbarBitmapButton class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect bitmap: #bitmap) beImmutable;
		yourself! !

!ToolbarBitmapButton class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ToolbarButton class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^super publishedAspectsOfInstances
		add: (Aspect name: #commandDescription);
		add: (Aspect boolean: #isCheckStyle);
		add: (Aspect boolean: #isGroupStyle);
		add: (Aspect boolean: #isDropdownStyle);
		add: (Aspect boolean: #isDropDownOnly);
		add: (Aspect color: #textcolor);
		add: (Aspect font: #font);
		yourself! !

!ToolbarButton class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ToolbarSeparator class methodsFor!

icon
	"Answers an Icon that can be used to represent this class."

	^##(TextTileIcon text: '|' color: Color face3d)!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect integer: #width);
		yourself! !

!ToolbarSeparator class categoriesForMethods!
icon!constants!public! !
publishedAspectsOfInstances!constants!public! !
!

!ToolbarSystemButton methodsFor!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	| buttons |
	buttons := BitmapButtons at: self bitmapId ifAbsent: [StandardButtons].
	^(super publishedAspects)
		add: (Aspect 
					choice: #bitmapIndex
					fromMap: buttons
					nullValue: nil);
		yourself
! !

!ToolbarSystemButton categoriesForMethods!
publishedAspects!public! !
!

!ToolbarSystemButton class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^super publishedAspectsOfInstances
		add: (Aspect
					choice: #bitmapId
					fromMap: Bitmaps
					nullValue: nil);
		yourself! !

!ToolbarSystemButton class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ToolbarTextButton class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect name: #buttonText);
		yourself! !

!ToolbarTextButton class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!ToolButton class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect extent: #buttonSize);
		add: (Aspect
					choice: #imageSize
					from: Toolbar.ImageSizes keys asSortedCollection
					andNil: nil);
		add: (Aspect boolean: #hasListAppearance);
		add: (Aspect boolean: #hasLabels);
		add: (Aspect name: #commandDescription) beImmutable;
		add: (Aspect boolean: #isCheckStyle);
		add: (Aspect boolean: #isGroupStyle);
		add: (Aspect boolean: #isDropdownStyle);
		add: (Aspect boolean: #isDropDownOnly);
		yourself
	"removeKey: #forecolor;"! !

!ToolButton class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!Tooltip class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect color: #forecolor);
		add: (Aspect color: #backcolor);
		add: (Aspect font: #font);
		add: (Aspect integer: #maxWidth);
		add: (Aspect boolean: #isBalloon);
		add: (Aspect boolean: #alwaysTip);
		add: (Aspect integer: #showDuration);
		add: (Aspect integer: #showDelay);
		add: (Aspect integer: #reshowDelay);
		add: (Aspect name: #margins) beImmutable;
		yourself
! !

!Tooltip class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!TranscriptShell methodsFor!

help
    	"Brings up a help page for the receiver"
    
	SmalltalkSystem current openHelpTopicForTool: self! !

!TranscriptShell categoriesForMethods!
help!commands!public! !
!

!TranscriptShell class methodsFor!

publishedAspects
    	"Answer a <LookupTable> of the aspects published by this class."
    
    	^super publishedAspects
    		add: (Aspect name: #defaultExtent);
    		add: (Aspect boolean: #flashOnOutput);
    		yourself! !

!TranscriptShell class categoriesForMethods!
publishedAspects!public! !
!

!TreeModelAbstract class methodsFor!

publishedEventsOfInstances
	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."

	^(super publishedEventsOfInstances)
		add: #itemUpdated:;
		add: #treeChanged:;
		add: #removingItem:;
		add: #item:movedToParent:;
		add: #item:removedFromParent:;
		add: #item:addedInParent:;
		yourself! !

!TreeModelAbstract class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!TreeView class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	#(#hasLinesAtRoot #hasLines #hasButtons #canEditLabels #showsSelAlways #isMonoExpandable #hasInfoTips #hasCheckBoxes #isExpandAllEnabled #hasFullRowSelect)
		do: [:each | aspects add: (Aspect boolean: each)].
	aspects
		add: (Aspect integer: #indentSeparation);
		add: (Aspect choice: #updateMode from: UpdateModes);
		yourself.
	^aspects! !

!TreeView class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!TypeConverter class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect name: #leftNullValue);
    		add: (Aspect name: #rightNullValue);
    		yourself! !

!TypeConverter class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!UndefinedObject methodsFor!

aspectDisplayOn: aStream
  	"Private - Append a single-line textual representatin of the receiver to the <puttableStream>
  	argument in a form that a user viewing the receiver as the value of a published aspect would 
  	like to see it. Typically we use #displayOn: but some classes of object can use alternate display 
  	formats. In this case we want to use #printOn: because nil displays as nothing.
  	N.B. This is a development time only method that supports the PublishedAspectInspector."
  
  	self printOn: aStream!

literalTextStyle
	^#literalPseudo! !

!UndefinedObject categoriesForMethods!
aspectDisplayOn:!private! !
literalTextStyle!constants!private! !
!

!ValueConverter class methodsFor!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		yourself.
    ! !

!ValueConverter class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!ValueConvertingControlView class methodsFor!

applicableTypeConverterCategories
    	"Answers a Set of class categories that contain <typeConverter>s that can 
    	be used with the receiver"
    
    	^Set with: (ClassCategory name: 'MVP-Type Converters-General')!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| applicableTypeConverters |
	applicableTypeConverters := Set new.
	self applicableTypeConverterCategories 
		do: [:each | applicableTypeConverters addAll: each classes].
	applicableTypeConverters := applicableTypeConverters asSortedCollection asArray 
				collect: [:each | each name , ' new'].
	^(super publishedAspectsOfInstances)
		add: (Aspect choice: #typeconverter evaluationFrom: applicableTypeConverters) beImmutable;
		add: (Aspect name: #value);
		yourself! !

!ValueConvertingControlView class categoriesForMethods!
applicableTypeConverterCategories!constants!public! !
publishedAspectsOfInstances!constants!public! !
!

!ValueDialog class methodsFor!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #valueChanged;
    		yourself.
    ! !

!ValueDialog class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!ValueModel methodsFor!

debugPrintString
	"Answer a <readableString> whose characters are a description of the receiver 
	as the debugger would want to see it.
	Implementation Note: Since #value is used by #printOn:, we implement this to 
	allow us to debug #value, otherwise setting a breakpoint in #value results in a
	meltdown."

	^self basicPrintString
! !

!ValueModel categoriesForMethods!
debugPrintString!printing!public! !
!

!ValueModel class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Aspect name: #value);
		yourself!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #valueChanged;
    		yourself.
    ! !

!ValueModel class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!ValuePresenter class methodsFor!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #valueChanged;
    		yourself.
    ! !

!ValuePresenter class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!VariableEnvironment methodsFor!

includesMethodUncached: aCompiledMethod 
	"Answer whether this environment includes aCompiledMethod. If the environment uses any sort
	of cache to improve performance, then assume that the cache is stale with respect to the
	specified method."

	self updateCachesForMethod: aCompiledMethod.
	^self includesMethod: aCompiledMethod!

updateCachesForMethod: aCompiledMethod 
	#todo.	"Not necessary to flush the whole cache for the class here"
	self flushCachesFor: aCompiledMethod methodClass! !

!VariableEnvironment categoriesForMethods!
includesMethodUncached:!public!testing! !
updateCachesForMethod:!helpers!private! !
!

!VersionInfo class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect string: #fileDescription) beReadOnly;
    		add: (Aspect string: #productName) beReadOnly;
    		add: (Aspect string: #comments) beReadOnly;
    		add: (Aspect string: #legalCopyright) beReadOnly;
    		add: (Aspect string: #specialBuild) beReadOnly;
    		add: (Aspect name: #fixedInfo);
    		yourself! !

!VersionInfo class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!View methodsFor!

aspectDisplayOn: aStream
  	"Private - Append a single-line textual representatin of the receiver to the <puttableStream>
  	argument in a form that a user viewing the receiver as the value of a published aspect would 
  	like to see it. Typically we use #printOn: but some classes of object can use alternate display 
  	formats.
  	N.B. This is a development time only method that supports the PublishedAspectInspector."
  
  	self printOn: aStream!

literalStoreArray
	^DpiAwareness unaware inContextDo: [super literalStoreArray]!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	| aspects |
	aspects := super publishedAspects.
	self parentView 
		ifNotNil: 
			[:parent | 
			parent layoutManager ifNotNil: [:layoutManager | aspects add: layoutManager arrangementAspect].
			parent isDesktop ifFalse: [aspects add: (Aspect string: #name)]].
	^aspects!

visualObjectAtPoint: aPoint
	"Private - Answers the object that will be found by the VisualObjectFinder at aPoint (in local coordinates)
	within the receiver"

	^self presenter! !

!View categoriesForMethods!
aspectDisplayOn:!private! !
literalStoreArray!literal filing!public! !
publishedAspects!constants!public! !
visualObjectAtPoint:!enquiries!private! !
!

!View class methodsFor!

editNewDefaultView
	"Open the View Composer to create a new view for the receiver."

	| resourceIdentifier view resName |
	view := DesignDesktopView default addSubView: self new.
	resName := Prompter
				on: self defaultView
				prompt: 'Resource name:'
				caption: 'Create a view for class ' , self name.
	resName isNil ifTrue: [^self].
	resourceIdentifier := ResourceIdentifier class: self name: resName.
	(resourceIdentifier resourceOrNil isNil or: 
			[MessageBox
				confirm: ('<1d> already exists. Do you wish to overwrite it?' expandMacrosWith: resourceIdentifier)])
		ifFalse: [^self].
	resourceIdentifier assignView: view.
	view destroy.
	Smalltalk developmentSystem openViewComposerOn: resourceIdentifier!

makeDefaultResource
	self makeResource: 'Default view' inClass: self!

makeResource: aStringName inClass: aClass 
	"Private - Save and instance of the receiver as a default writable ViewResource 
	called aString owned by aClass."

	| resID view shell |
	shell := ShellView new create.
	view := shell addSubView: self new.
	(resID := ResourceIdentifier class: aClass name: aStringName) assignView: view.
	shell destroy.
	^resID!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	#(#hasBorder #hasClientEdge #hasStaticEdge #usePreferredExtent #isTabStop #isGroupStop #isDragSource #isDropTarget #isTransparent #isEnabled #inheritContextMenu) 
		do: [:each | aspects add: (Aspect boolean: each)].
	aspects
		add: (Aspect color: #backcolor);
		add: (Aspect menu: #contextMenu) beImmutable;
		add: (Aspect position: #position);
		add: (Aspect extent: #extent);
		add: (Aspect extent: #preferredExtent);
		add: (Aspect font: #font);
		add: ((Aspect autostring: #text)
					isNullable: false;
					yourself).
	^aspects!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
	^(super publishedEventsOfInstances)
    		add: #actionPerformed;
    		add: #drop:;
    		add: #dragOver:;
    		add: #viewDeactivated;
    		add: #dragEnter:;
    		add: #dragCut:;
    		add: #dragLeave:;
    		add: #focusLost;
    		add: #leftButtonDoubleClicked:;
    		add: #aboutToDisplayMenu:;
    		add: #focusGained;
    		add: #leftButtonPressed:;
    		add: #leftButtonReleased:;
    		add: #viewOpened;
    		add: #rightButtonDoubleClicked:;
    		add: #requestDragImages:;
    		add: #viewClosed;
    		add: #requestDropOperations:;
    		add: #rightButtonPressed:;
    		add: #positionChanged:;
    		add: #rightButtonReleased:;
    		add: #keyPressed:;
    		add: #drag:;
    		add: #keyReleased:;
    		add: #keyTyped:;
		add: #sysKeyPressed:;
		add: #sysKeyRelease:;
		add: #sysKeyTyped:;
		yourself! !

!View class categoriesForMethods!
editNewDefaultView!operations!public! !
makeDefaultResource!operations!private! !
makeResource:inClass:!operations!private! !
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!VS_FIXEDFILEINFO class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Aspect string: #fileVersionString) beReadOnly;
    		add: (Aspect string: #productVersionString) beReadOnly;
    		yourself! !

!VS_FIXEDFILEINFO class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
!

!WCHARField methodsFor!

accessorMessage
	"Private - Answer the receiver's 'accessorStem'."

	^#wordAtOffset:put:!

characterCreationMessage
	^#utf16Value:! !

!WCHARField categoriesForMethods!
accessorMessage!automatic generation!private! !
characterCreationMessage!automatic generation!private! !
!

!WeakSet class methodsFor!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #elementsExpired:;
    		yourself.
    ! !

!WeakSet class categoriesForMethods!
publishedEventsOfInstances!events!public! !
!

!WebView2View class methodsFor!

publishedAspectsOfInstances
	"Answer a Set of the aspects published by  instances of the receiver"

	| aspects |
	aspects := super publishedAspectsOfInstances.
	#(#allowSSO #isCustomCrashReportingEnabled #canNavigateToStrings #isStatusBarEnabled #isScriptEnabled #areBrowserAcceleratorKeysEnabled #allowExternalDrop #allowContextMenu #areDefaultScriptDialogsEnabled #areDevToolsEnabled #areHostObjectsAllowed #isBuiltInErrorPageEnabled #isGeneralAutofillEnabled #isPasswordAutosaveEnabled #isPinchZoomEnabled #isSwipeNavigationEnabled #isWebMessageEnabled #isZoomControlEnabled)
		do: [:each | aspects add: (Aspect boolean: each)].
	^aspects!

publishedEventsOfInstances
	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."

	^super publishedEventsOfInstances
		addAll: self webview2Events;
		yourself! !

!WebView2View class categoriesForMethods!
publishedAspectsOfInstances!constants!public! !
publishedEventsOfInstances!events!public! !
!

!WINDOWPLACEMENT methodsFor!

printableFields
	^super printableFields! !

!WINDOWPLACEMENT categoriesForMethods!
printableFields!printing!private! !
!

!WINDOWPOS methodsFor!

printOn: aStream
	"Append a textual representation of the receiver to aStream."

	| flags first |
	self isNull ifTrue: [^super printOn: aStream].
	aStream
		basicPrint: self;
		nextPutAll: '(after ';
		print: (View fromHandle: self hwndInsertAfter);
		nextPutAll: ', '.
	flags := self flags.
	(flags allMask: SWP_NOMOVE)
		ifFalse: 
			[(flags allMask: SWP_NOSIZE)
				ifFalse: 
					[aStream
						nextPutAll: ' rectangle ';
						print: self rectangle]
				ifTrue: 
					[aStream
						nextPutAll: ' position ';
						print: self position].
			aStream nextPutAll: ', ']
		ifTrue: 
			[(flags allMask: SWP_NOSIZE)
				ifFalse: 
					[aStream
						nextPutAll: ' extent ';
						print: self extent;
						nextPutAll: ', ']].
	first := true.
	##((Win32Constants keys select: [:each | each beginsWith: 'SWP_']) asSortedCollection asArray) do: 
			[:each |
			(flags allMask: (Win32Constants at: each))
				ifTrue: 
					[first ifTrue: [first := false] ifFalse: [aStream nextPut: $|].
					aStream nextPutAll: each]]! !

!WINDOWPOS categoriesForMethods!
printOn:!printing!public! !
!

!WinImageList class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass imageList: aSymbol! !

!WinImageList class categoriesForMethods!
newInstanceAspect:class:!adapters!private! !
!

"End of package definition"!

