"Filed out from Dolphin Smalltalk"!

UI.Presenter
	subclass: #'Tools.PackageDependencyPresenter'
	instanceVariableNames: 'treePresenter tracesPresenter traces packages'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Tools.PackageDependencyPresenter guid: (Core.GUID fromString: '{183e540c-f682-44d4-ac9c-77d4e4ca9487}')!
Tools.PackageDependencyPresenter isNonInstantiable: true!
Tools.PackageDependencyPresenter comment: 'PackageDependencyPresenter is the abstract superclass of the development tool windows which display a tree representing the dependency relationships between packages. Subclasses show emphasise either the pre-requisite relationship (where the children of a package in the tree are the pre-requisistes for that package) or dependency relationship (where the children of a package in the tree are the packages dependent upon it, i.e. of which it is itself a pre-requisite).

Instance Variables:
	prerequisitesPresenter	<TreePresenter> holding the dependency tree.
	tracesPresenter			<ListPresenter> holding the list of traces.
	traces					<IdentityDictionary> of traces generated by Package>>tracePrerequisites.
	packages				<Package>s at the root of the tree for which dependency relationships are being displayed.
'!
!Tools.PackageDependencyPresenter categoriesForClass!MVP-Presenters!MVP-Resources-IDE Tools! !
!Tools.PackageDependencyPresenter methodsFor!

browsePackages
	"Browse the currently selected prerequisite package."

	self selectedPair ifNotNil: [:selected | selected key browse]!

browseTrace
	"Browse the currently selected trace object."

	| trace |
	trace := tracesPresenter selections.
	trace notEmpty ifTrue: [
		trace first first browse]!

buildChildNodes: aCollection for: aTreeNode
	^(aCollection asSortedArray: Package defaultSortBlock) collect: [:p | p -> aTreeNode]!

childrenFor: aTreeNode 
	"Private - Answer a <sequencedReadableCollection> of the child nodes below the package
	dependency tree node argument."

	^self subclassResponsibility!

choosePackage
	"Prompt for the user to repackage the selected objects."

	| pkg newPkg dependees |
	dependees := IdentitySet new.
	tracesPresenter selections do: [:t | dependees add: t first].
	"Default to moving the selected objects to the pre-requisite package"
	pkg := self prerequisitePackage.
	pkg == Package uncommitted ifTrue: [pkg := nil].
	newPkg := PackagePrompter
				showModalOn: pkg asValue
				caption: 'Re-package dependencies…'
				default: nil.
	newPkg isNil ifFalse: [self queryMoveObjects: dependees toPackage: newPkg]!

clear
	"Clear down the receiver"

	self packages: #()!

createComponents
	"Create the presenters contained by the receiver"

	super createComponents.
	treePresenter := self add: TreePresenter new name: 'tree'.
	tracesPresenter := self add: ListPresenter new name: 'traces'!

createSchematicWiring
	"Create the trigger wiring for the receiver"

	super createSchematicWiring.
	treePresenter
		when: #selectionChanged
			send: #onPackageSelected
			to: self;
		when: #actionPerformed
			send: #browsePackages
			to: self.
	tracesPresenter
		when: #actionPerformed
		send: #browseTrace
		to: self.
	"Pre-requisites can be reset globally, or per-package"
	self packageManager
		when: #prerequisitesReset:
			send: #onPrerequisitesReset:
			to: self;
		when: #prerequisitesReset
			send: #onPrerequisitesReset
			to: self!

dependencyModelWithRoots: anOrderedCollection
	^(ExpandingTreeModel withRoots: anOrderedCollection)
		getChildrenBlock: [:each | self childrenFor: each];
		yourself!

dependentPackage
	^self subclassResponsibility!

initialize
	super initialize.
	packages := #()!

onPackageSelected
	"Private - One of the packages in the dependency tree has been selected. Populate the
	traces presenter with a list of all of the dependency relationships between the selected
	package and its parent in the tree."

	| pair |
	pair := self selectedPair.
	(pair notNil and: [pair value notNil])
		ifTrue: 
			[tracesPresenter
				list: ((self prerequisiteTraceFor: self dependentPackage) at: self prerequisitePackage ifAbsent: #())]
		ifFalse: [tracesPresenter clear]!

onPrerequisitesReset
	"Private - The pre-requisites of a package have been reset, so the dependency tree must be
	rebuilt."

	"Implementation Note: In order to avoid having to immediately calculate the pre-requisites
	of all the pre-requisites of a package when the tree view asks if the root nodes have any
	children, we put the starting package in as the single root. This is also more consistent
	from a usability point of view, since when selected the pre-requisites list shows the
	dependencies on the parent node. It does mean we need to treat selection of the root as a
	special case however."

	| selected |
	selected := self selectedPair.
	traces := LookupTable new.
	treePresenter
		selectionOrNil: nil;
		model: (self dependencyModelWithRoots: (packages collect: [:each | each -> nil])).
	self selectedPair: selected!

onPrerequisitesReset: updatee
	"Private - The <Package>, updatee, has reset its prerequisites, so we need to rebuild the
	dependency tree to reflect any changes. We could do this more efficiently by locating the
	relevant nodes and collapsing only those, but at present we opt for the simple approach of
	collapsing the entire tree."

	self onPrerequisitesReset!

onViewClosed
	"Sent by the receiver's view when it has been closed.
	Disconnect from any events triggered by the devlopment system"

	super onViewClosed.
	self packageManager removeEventsTriggeredFor: self!

onViewOpened
	"Received when the receiver's view has been connected. "

	super onViewOpened.
	self packageManager youShouldBeProcessingEvents!

packageManager
	"Private - Answer the current PackageManager."

	^Package manager!

packages
	"Answer the packages for which the receiver is showing dependency trees."

	^packages!

packages: aPackageCollection 
	"Set the packages which the constitute the roots of the dependency tree."

	packages := aPackageCollection.
	self onPrerequisitesReset!

prerequisitePackage
	^self subclassResponsibility!

prerequisiteTraceFor: aPackage
	"Private - Answer the pre-requisite trace for the specified package.
	We cache the info. for speed."

	^traces at: aPackage ifAbsentPut: [Cursor wait showWhile: [aPackage tracePrerequisites]]!

queryCommand: aCommandQuery 
	"Private - Enter details about a potential command for the receiver 
	into the <CommandQuery> argument."

	| selector |
	selector := aCommandQuery commandSymbol.
	#toggleStatusIcons == selector 
		ifTrue: 
			[aCommandQuery
				isEnabled: true;
				isChecked: treePresenter view viewMode == #smallIcons.
			^true].
	#browseTrace == selector 
		ifTrue: 
			[aCommandQuery isEnabled: tracesPresenter selectionOrNil size = 1.
			^true].
	#browsePackages == selector 
		ifTrue: 
			[aCommandQuery isEnabled: treePresenter hasSelection.
			^true].
	#choosePackage == selector 
		ifTrue: 
			[aCommandQuery isEnabled: tracesPresenter hasSelection.
			^true].
	^super queryCommand: aCommandQuery!

queryMoveObjects: aCollection toPackage: aPackage
	"Private - Move the array of packageable objects, anArray, to the specified package."

	| stream max sorted |
	stream := String writeStream.
	stream nextPutAll: 'Are you sure you would like to move '.
	aCollection size = 1
		ifTrue: [stream nextPutAll: 'the following object']
		ifFalse: 
			[stream
				nextPutAll: 'these ';
				display: aCollection size;
				nextPutAll: ' objects'].
	stream
		nextPutAll: ' to the package ';
		print: aPackage name;
		nextPut: $?;
		cr.
	sorted := aCollection asSortedArray: [:a :b | a displayString <= b displayString].
	max := 30.
	sorted
		from: 1
		to: (aCollection size min: max)
		do: 
			[:each |
			stream
				crtab;
				display: each].
	aCollection size > max
		ifTrue: 
			[stream
				crtab;
				nextPutAll: '… and ';
				print: aCollection size - max;
				nextPutAll: ' other items …'].
	stream
		cr;
		cr;
		nextPutAll: 'Press Yes to repackage the object(s), or No to abort the operation'.
	(MessageBox confirm: stream contents) ifFalse: [^self].
	aCollection do: [:each | each owningPackage: aPackage]!

selectedPair
	"Answer the currently selected depedendency node."

	^treePresenter selectionOrNil!

selectedPair: anAssociation 
	"Set the currently selected prerequisite package."

	anAssociation notNil 
		ifTrue: [treePresenter selection: anAssociation ifAbsent: []]
		ifFalse: [treePresenter resetSelection]!

toggleStatusIcons
	treePresenter view 
		viewMode: (treePresenter view viewMode == #noIcons ifTrue: [#smallIcons] ifFalse: [#noIcons])! !
!Tools.PackageDependencyPresenter categoriesForMethods!
browsePackages!commands!public! !
browseTrace!commands!public! !
buildChildNodes:for:!helpers!private! !
childrenFor:!helpers!private! !
choosePackage!helpers!private! !
clear!commands!public! !
createComponents!initializing!public! !
createSchematicWiring!initializing!public! !
dependencyModelWithRoots:!helpers!private! !
dependentPackage!accessing!private! !
initialize!initializing!private! !
onPackageSelected!event handling!private! !
onPrerequisitesReset!event handling!private! !
onPrerequisitesReset:!event handling!private! !
onViewClosed!event handling!public! !
onViewOpened!event handling!public! !
packageManager!constants!private! !
packages!accessing!public! !
packages:!accessing!public! !
prerequisitePackage!accessing!private! !
prerequisiteTraceFor:!event handling!private! !
queryCommand:!commands!private! !
queryMoveObjects:toPackage:!helpers!private! !
selectedPair!accessing!public! !
selectedPair:!accessing!public! !
toggleStatusIcons!commands!public! !
!

!Tools.PackageDependencyPresenter class methodsFor!

icon
	"Answers an Icon that can be used to represent this class"

	^Package icon!

resource_Default_view
	"Answer the literal data from which the 'Default view' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	Tools.ViewComposer openOn: (UI.ResourceIdentifier class: self selector: #resource_Default_view)
	"

	^#(#'!!STL' 6 2118 10 #{UI.STBViewProxy} #{UI.ContainerView} 38 #{Core.Array} 15 nil nil 50 2 8 1409482752 131073 32 nil 6 #{Graphics.Color} #default nil 517 nil nil nil 32 518 #{UI.ProportionalLayout} 294 #{Core.Dictionary} 3 518 #{Core.Association} 18 #{UI.ListView} 50 45 nil 32 50 2 8 1140920393 1 240 838 2 #{UI.ListModel} 550 #{Core.OrderedCollection} 0 nil 6 #{Kernel.IdentitySearchPolicy} 128 nil 5 2886 4 #{UI.Menu} nil true 50 2 1094 2 #{UI.CommandMenuItem} 1 1350 4 #{UI.CommandDescription} #browseTrace 8 'Browse' 1 1 nil nil nil 450 1 482 #choosePackage 8 'Package…' 1 1 nil nil nil 8 '' nil 1 nil nil nil nil nil nil nil 240 nil 8 1853243664 518 #{Core.Message} #displayString 8 #() nil 1350 1 #{Graphics.IconImageManager} nil nil nil 518 #{Graphics.Point} 65 65 nil nil 338 4 3142 5 #{UI.ListViewColumn} 8 'Owned' 219 #left 624 1382 3 #{Kernel.BlockClosure} 0 nil 1318 #{Kernel.CompiledExpression} 2 1 #{Core.UndefinedObject} 8 'doIt' 8 '[:a :b | a displayString < b displayString]' 8 #[30 105 17 158 18 158 128 106] #displayString 800 7 513 nil 610 #first 8 #() nil 240 610 #iconImageIndex 8 #() 3 nil nil 738 8 'Dependency' 337 #left 624 610 #<= 8 #() 610 #third 8 #() nil 240 nil 1 nil nil 738 8 'Prerequisite Object' 339 #left 624 786 0 nil 818 2 1 #{Core.UndefinedObject} 8 'doIt' 8 '[:a :b | a displayString < b displayString]' 8 #[30 105 17 158 18 158 128 106] #displayString 1088 7 513 nil 610 #second 1040 nil 240 610 #iconImageIndex 640 1 nil nil 738 8 'Prerequisite Package' 301 #left 610 #displayString 8 #() 610 #<= 1248 610 #fourth 1248 nil 240 nil 1 nil nil #report 8 #() nil 131173 nil 1 nil nil nil nil 1 nil nil nil nil nil nil nil nil nil nil 262 #{Core.MessageSequence} 50 2 774 #{Core.MessageSend} #createAt:extent: 50 2 690 1 175 690 1201 297 240 1362 #text: 50 1 8 'Owned' 240 262 #{OS.WINDOWPLACEMENT} 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 87 0 0 0 88 2 0 0 235 0 0 0] 8 #() 690 193 193 nil 35 518 #{Core.Fraction} 24567 10361 210 18 #{UI.Splitter} 50 12 nil 32 50 2 8 1140850688 1 1616 nil 128 nil 517 nil nil nil 3142 1 #{UI.DraggableViewInteractor} 1616 nil 1 #left nil nil nil 690 1 1 690 9 9 nil 1712 nil 1314 50 1 1362 #createAt:extent: 50 2 690 1 165 690 1201 11 1616 1490 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 82 0 0 0 88 2 0 0 87 0 0 0] 8 #() 1552 nil 27 1 210 18 #{UI.TreeView} 50 27 nil 32 50 2 8 1140916775 1 1904 1094 3 #{UI.TreeModel} nil 384 774 #{UI.TreeNode} nil nil nil 550 #{Core.IdentityDictionary} 0 128 nil 5 402 nil true 50 2 450 1 482 #browsePackages 8 'Browse' 1 1 nil nil nil 450 1 482 #toggleStatusIcons 8 'Show Status Icons' 1 1 nil nil nil 8 '' nil 1 nil nil nil nil nil nil nil 1904 nil 8 1852941248 786 0 nil 818 3 1 #{Core.UndefinedObject} 8 'doIt' 8 '[:a | a key name]' 8 #[31 105 17 158 159 106] #key #name 2224 7 257 nil 786 0 nil 818 7 1 784 8 'doIt' 8 '[:each |  (each key hasCyclicPrerequisites or: [each key hasUncommittedPrerequisites]) not icon 
	imageIndex]' 8 #[35 105 226 0 159 119 58 112 226 0 160 161 162 163 106] #key #hasCyclicPrerequisites #hasUncommittedPrerequisites #not #icon #imageIndex 2304 7 257 nil 672 nil nil nil nil nil 550 #{Core.LookupTable} 0 nil #smallIcons 11 2034 0 1314 50 1 1362 #createAt:extent: 50 2 690 1 1 690 1201 165 1904 1490 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 88 2 0 0 82 0 0 0] 8 #() 1552 nil 27 1570 693 519 true 2034 2 240 8 'traces' 1904 8 'tree' 518 #{Graphics.Rectangle} 690 1 1 690 1 1 1314 50 1 1362 #createAt:extent: 50 2 690 6143 21 690 1201 471 32 1490 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 11 0 0 10 0 0 0 87 14 0 0 245 0 0 0] 50 3 1904 1616 240 1552 nil 27)! !
!Tools.PackageDependencyPresenter class categoriesForMethods!
icon!constants!public! !
resource_Default_view!public!resources-views! !
!

