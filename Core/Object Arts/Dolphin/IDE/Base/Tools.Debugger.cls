"Filed out from Dolphin Smalltalk"!

Tools.SmalltalkToolShell
	subclass: #'Tools.Debugger'
	instanceVariableNames: 'process topFrame localAccessor depth flags breakWhen stackPresenter sourcePresenter variablesPresenter inspectorPresenter breakAction suspendingList _method refactoringTool sourceInterval'
	classVariableNames: 'AnimatePause DefaultStackDepth EnableDynamicMenus RestartOnMethodSave RunToCursorBehavior ShowWalkbacks SkipTable'
	imports: #(#{Kernel.CompilerFlags} #{Kernel.OpcodePool})
	classInstanceVariableNames: ''
	classConstants: {
			'AnimateMask' -> 16r10.
			'DisassemblyMask' -> 16r4.
			'MainMask' -> 16r1.
			'ResumableMask' -> 16r8.
			'RunMask' -> 16r2.
			'StackDepthIncrement' -> 16r64
		}!
Tools.Debugger guid: (Core.GUID fromString: '{87b4c6bd-026e-11d3-9fd7-00a0cc3e4a32}')!
Tools.Debugger comment: 'Debugger is a <SmalltalkToolShell> that implements the standard debugging tool. The debugger is usually invoked from a walkback dialog by pressing the Debug button. Walkbacks are displayed in the development environment when a breakpoint (''self halt'') is encountered, or when an unhandled exception occurs. It is also possible to configure the system so that debuggers are opened automatically when breakpoints are encountered or errors occur (see the Debugger options in Dolphin Options), though this is not particularly recommended as it can make the system crash if the error or breakpoint is in some code that is itself used by the Debugger.

Dolphin''s Debugger does not simulate execution as in some Smalltalk''s, but instead uses the VM''s built-in debugging event generation to run the code and interrupt it at appropriate points. This results in more consistent and faster execution, although note that the debugger will recompile methods being stepped through to insert breakpoints and this may cause some peephole compiler optimisations to be lost.

The protocol <debugEventHandler> shows the messages sent (indirectly via Processor) by the VM when debug events occur such as breakpoints and single-steps. These debug events could quite easily be used for other purposes such as profiling tools. However note that this protocol is private, and may change in future versions. It is worth noting that single-step events are generated by hooking into the message dispatch mechanism in such a way that has no measurable effect on the speed of normal operation, and breakpoints are generated by inserting a breakpoint instruction rather than by performing conditional tests (i.e. the VM does not contain any code to support debugging which would slow down normal operation, and hence there is no separate debug/release build).

Dolphin serializes callback returns to maintain LIFO order on the machine stack even in the presence of multiple threads of execution (Smalltalk Processes) and thus it is quite feasible to debug into callbacks which route through external code such as parts of the OS, for example one can step into a SendMessage call and break in the Dolphin window procedure. One can also debug through COM method invocations, even back into Dolphin, and set breakpoints in COM method implementations that will be actioned even when the COM object is being hosted by an external client such as VB. However this is a Smalltalk debugger, and one cannot use it to debug into external code written in other languages.

Caution: Although modifying the Debugger can be fun it is quite easy to crash the system if a mistake is made. You should also note that if you develop your own custom view the use of a virtual ListView for the stack presenter is not recommended since the stack may change dynamically and become momentarily invalid at just the point that the control requests display details.

Instance Variables:
	`process`				`Process` being debugged.
	`topFrame`			`StackFrame` which is at the top of the debugger''s stack.
	`temp`				`AspectAccessor` for the currently selected variable.
	`depth`				`<integer>` count of stack frames currently listed.
	`flags`				`<integer>` flags controlling the debugger''s behaviour.
	`breakWhen`			`<monadicValuable>` used to determine the next execution should be interrupted.
	`stackPresenter`		`ListPresenter` used to display the stack frames.
	`sourcePresenter`		`SmalltalkWorkspace` holding the source/this assembly of the selected frame.
	`tempsPresenter`		`TreePresenter` with roots representing the list of local variables in the selected frame.
	`inspectorPresenter`	`ValueWorkspace`  holding the value of the selected variable in the `tempsPresenter`.
	`breakAction`			`<niladicValuable>`. The second half of a composite action to be performed after an unwind.
	`suspendingList`		`Semaphore` on which debugged process was suspended when interrupted (or nil if none).
	`_method`			`CompiledCode`. Method associated with selected frame.
	`refactoringTool`		`MethodRefactoringTool`. Implements method refactorings (in DPRO only).

Class Variables:
	AnimateMask		<integer> bit-mask for testing/setting the animation flag
	AnimatePause		<integer> delay between steps when animating.
	DefaultStackDepth 	<integer> initial depth of the process stack display
	DisassemblyMask	<integer> bit-mask for testing/setting the disassembly view flag
	EnableDynamicMenus	<boolean> option controlling whether dynamic menus are build and displayed or not.
	MainMask			<integer> bit-mask for testing/setting the main Process flag
	RestartOnMethodSave	<boolean> option controlling whether saving a modified method restarts the frame
	ResumableMask		<integer> bit-mask for testing/setting the resumable Process flag
	RunMask 			<integer> bit-mask for testing/setting the running flag.
	ShowWalkbacks		<boolean> option controlling whether walkback dialogs are displayed or not
	SkipMethods		<LookupTable> of methods not to break in.
	StackDepthIncrement	<integer> number of frames by which to increase the depth of the stack on request.
	TerminateOnClose	<Symbol>. Option controlling action on closing debugger in respect of the debugged process.
	ArgumentClasses	<Set> of <Class>. Generic classes to be used in place of specific classes when naming auto-generated arguments for the Implement In command.
'!
!Tools.Debugger categoriesForClass!MVP-Presenters!MVP-Resources-IDE Tools! !
!Tools.Debugger methodsFor!

accept: aBoolean methodSource: aString
	"Private - Saves the <String> 2nd argument as the source for the current method, optionally restarting the frame depending on the value of the <Boolean> argument.."

	| method originalSelection hadErrors devsys |
	originalSelection := sourcePresenter view selectionRange.
	method := self selectedMethod.
	hadErrors := false.
	devsys := self developmentSystem.
	
	[devsys
		compile: aString
		in: method methodClass
		environment: method environment
		categories: nil
		package: nil
		extraFlags: Interactive]
			on: devsys compilationWarningClass
			do: 
				[:cw |
				cw
					toTrace;
					resume]
			on: Compiler errorClass
			do: 
				[:ce |
				hadErrors
					ifFalse: 
						[hadErrors := true.
						sourcePresenter
							text: aString;
							selectionRange: ce range].
				ce okCancel].
	hadErrors ifTrue: [^self].
	sourcePresenter view selectionRange: originalSelection.
	aBoolean ifTrue: [self restartMethod] ifFalse: [sourcePresenter isModified: false]!

acceptItCommand
	"Private - Answer the <Symbol> of the contextual command to save changes to something, depending on the subview with focus and/or selection."

	inspectorPresenter hasFocus ifFalse: [^#acceptMethod].
	^nil!

acceptMethod
	"Private - Saves the current method source, restarting the method frame if the system options so indicate."

	<commandQuery: #canSaveMethod>
	self accept: self class restartOnMethodSave methodSource: self source!

acceptNoRestart
	"Private - Saves the current method source without restarting the frame (i.e. the debugged
	process becomes out of sync. with the current method)."

	<commandQuery: #canSaveMethod>
	self accept: false methodSource: self source!

addToCommandRoute: aCommandPolicy
	"Update the command routing path of the <CommandPolicy> argument with the receiver's contribution to the command path. "

	"Implementation Note: We add our method refactoring tool to the command route, but only in DPRO"

	refactoringTool ifNotNil: [aCommandPolicy appendTarget: refactoringTool].
	^super addToCommandRoute: aCommandPolicy!

allFrames
	"Private - Include all stack frames in the call stack. There cannot possibly be any more
	than the size of the process."

	<commandQuery: #hasMoreFrames>
	self depth: process size!

animatePause
	"Answer the number of milliseconds to pause between each step when animating the debugged
	process."

	^self class animatePause
!

beAnimated: aBoolean
	"Private - Set/reset the animation flag."

	flags := flags mask: AnimateMask set: aBoolean!

beBroken
	"Private - Set the break flag."

	flags := flags maskClear: RunMask.	"no longer running"
	Processor enableInterrupts.
	breakWhen removeAll.
	self mainView enable

	!

beDisassembled: aBoolean
	"Private - Set/reset the receiver's disassembly flag."

	flags := flags mask: DisassemblyMask set: aBoolean!

beRunning
	"Private - Put the debugger and process into debug run mode."

	process debugger: self.
	flags := flags maskSet: RunMask!

blockedRestartWarning: message
	"Private - There seems to be a later callback from the outside world which needs to return
	before the debugged process can unwind an earlier callback. Refresh the display to show
	where it is blocked, and then warn the user, giving them the opportunity to bang out."

	| resp mb |
	topFrame := process topFrame.
	self populateStackModel.
	mb := MessageBox new.
	mb buttonStyle: #okCancel.
	mb caption: ('Restarting <1p>>><2s>…' expandMacrosWith: message receiver class name
				with: message selector).
	resp := mb
				warning: 'The stack unwind required to restart this frame is currently blocked, probably due to a Debugger or dialog opened after this one.

To allow the restart to complete, you will need to find and close any such windows, in the meantime this debugger will be disabled.
Alternatively you can cancel this operation, which will stop this debugging session.'.
	resp == #cancel ifTrue: [process terminate]!

break: interruptFrame
	"Private - Break the debugged process at the specified break, and refresh the receiver's
	display (unless updates are deferred, i.e. the debugger is performing a composite operation
	which is only partially completed)."

	"Update of the debugger display must be performed in the (current) UI process"
	[self updateForBreakAt: interruptFrame] postToMessageQueue.
	self suspend
	"N.B. There must be no further code after this point"!

breakFrame: aStackFrame
	"Private - Set the frame on which to break."

	self makeDebugFrame: aStackFrame.
	self breakWhen: [:iFrame | iFrame index <= aStackFrame index]!

breakWhen: discriminator 
	"Private - Set the break decision test to the monadic valuable, discriminator. The argument
	to the valuable is the StackFrame interrupted by a soft-breakpoint. If the discriminator
	answers false, then execution will continue to the next soft-breakpoint."

	"Implementation Note: The discriminator should complete its operation as quickly as
	possible, because it is evaluated with async. events disabled, and because the debugger will
	run debugged processes at a snail like pace at times."

	breakWhen addLast: discriminator!

browseDefinitionsCommand
	"Private - Open a new method browser on the definitions of the of the currently selected stack frame's selector."

	^#browseMessageDefinitions!

browseDefinitionsMatching: aMethodSearch in: aBrowserEnvironment
	| definitions |
	definitions := OrderedCollection with: (aMethodSearch definitionsIn: aBrowserEnvironment).
	self selectedMethod
		ifNotNil: 
			[:method |
			definitions
				add: (aMethodSearch definitionsIn: (aBrowserEnvironment forClassHierarchyOf: method methodClass))].
	self developmentSystem browseMethodsInEnvironments: definitions!

browseDefinitionsOfSelector: aSymbol in: aBrowserEnvironment
	"Private - Opens a MethodBrowser on all the methods whose selectors match the specified
	<readableString> pattern in the scope of the specified <BrowserEnvironment>."

	self browseDefinitionsMatching: (MethodSearch newSelector: aSymbol) in: aBrowserEnvironment!

browseHierarchy
	"Private - Open a new class browser on the currently selected method or the system classes
	if there is no selection."

	"If we are attempting to browse a #doesNotUnderstand: method then we want to browse the
	original receiver's class since that's where we'll most likely want to implement the
	method."

	self selectedMethod selector == #doesNotUnderstand: 
		ifTrue: [self developmentSystem browseHierarchy: self frame receiver class]
		ifFalse: [self developmentSystem browseClassHierarchyOfMethod: self selectedMethod]!

browseIt
	"Open a default browser on the current method"

	variablesPresenter hasFocus ifTrue: [self browseVariableClass] ifFalse: [self browseHierarchy]!

browseMessageDefinitions
	"Private - Open a new method browser on the definitions of the of the currently selected
	stack frame's selector."

	<commandQuery: #queryBrowseMessage:>
	self browseDefinitionsMatching: (MethodSearch newSelector: self selectedMethod selector)
		in: self searchEnvironment!

browseMessageReferences
	"Private - Context-sensitive 'Browse References' command. In this case browse refs. to the 
	current selector."

	<commandQuery: #queryBrowseMessage:>
	self browseReferencesMatching: (MethodSearch newSelector: self selectedMethod selector)
		in: self searchEnvironment!

browseMessages
	"Private - Browse the definitions of one of the messages sent within the method of the
	currently selected stack frame. Prompt for which message to actually browse."

	self model browseMessagesSentBy: self selectedMethod in: self searchEnvironment!

browseMethodInheritanceChain
	"Private - Open a method browser displaying the definitions of the currently selected stack frame's method's selector in its superclass chain."

	<commandQuery: #hasOverrideSelected>
	self model browseMethodHierarchyFrom: self selectedMethod!

browseReferencesCommand
	"Private - Open a new method browser on the references to the currently selected stack frame's selector."

	^#browseMessageReferences!

browseReferencesMatching: aMethodSearch in: aBrowserEnvironment
	| references |
	references := OrderedCollection with: (aMethodSearch referencesIn: aBrowserEnvironment).
	self selectedMethod
		ifNotNil: 
			[:method |
			references
				add: (aMethodSearch referencesIn: (aBrowserEnvironment forClassHierarchyOf: method methodClass))].
	self browseMethodsInEnvironments: references!

browseReferencesToLiteral: anObject in: aBrowserEnvironment
	"Private - Opens a MethodBrowser on all the methods that refer to aString from their literal frames
	(aString is normally a symbolic selector), within the scope of the specified
	<BrowserEnvironment>."

	self browseReferencesMatching: (MethodSearch newLiteral: anObject) in: aBrowserEnvironment!

browseSystem
	"Open a new system browser on the currently selected method or the system classes if there
	is no selection."

	"If we are attempting to browse a #doesNotUnderstand: method then we want to browse the
	original receiver's class since that's where we'll most likely want to implement the
	method."

	(self selectedMethod selector == #doesNotUnderstand: or: [self selectedMethod isExpression]) 
		ifTrue: [self model browseSystem: self frame receiver class]
		ifFalse: [self model browseSystemOnMethod: self selectedMethod]!

browseVariableClass
	<commandQuery: #hasVariableSelected>
	localAccessor value browse!

buildParseTree
	^self selectedMethod
		ifNotNil: 
			[:method |
			method isExpression
				ifTrue: 
					[Parser
						parseExpression: method getSource
						in: method methodClass
						environment: method environment]
				ifFalse: [Parser parseExistingMethodNoError: method]]!

canBreak
	^(flags bitAnd: ##(RunMask | AnimateMask)) == RunMask!

canImplementMessage
	"Private - Answer whether the receiver can implement a stub for the message associated with 
	the current stack frame."

	| frame selector method |
	frame := self frame.
	(frame isNil or: [(frame := frame homeFrame) isNil]) ifTrue: [^false].
	method := frame method.
	selector := method selector.
	^(selector == #doesNotUnderstand: and: [Compiler isValidSelector: frame arguments first selector])
		or: [(Compiler isValidSelector: selector) and: [method methodClass ~= frame receiver class]]!

canReturnFromFrame
	^self isPaused and: 
			[| frame |
			frame := self frame.
			frame notNil and: [frame canReturn]]!

canRunToCursor
	^self isRunnable and: 
			[self hasLiveFrame and: 
					["Cannot run to cursor in disassembly view"
					self isDisassembled not]]!

canSaveMethod
	"Private - Answer whether the text of the method displayed in the receiver can be saved."

	^self hasEditableMethodSelected!

canStep
	^self isRunnable and: [self hasLiveFrame]!

canStepInto
	^self isRunnable and: 
			["Can only step-into in the top stack frame"
			self isTopFrameSelected and: [topFrame isDead not]]!

classForVariable: aStVariable
	^aStVariable valueClass: self frame!

clearCachedMethodInfo
	_method := nil.
	sourcePresenter clearParseTree!

continue: aProcess with: anObject
	| frame |
	process debugger: nil.
	frame := aProcess suspendedFrame.
	self
		beBroken;
		caption: aProcess printString;
		process: aProcess topFrame: frame;
		return: anObject toFrame: frame!

createComponents
	"Create the presenters contained by the receiver"

	super createComponents.
	stackPresenter := self
				add: ListPresenter new
				name: 'stack'
				helpId: 10882.
	variablesPresenter := self
				add: TreePresenter new
				name: 'temps'
				helpId: 10883.
	inspectorPresenter := self
				add: ValueWorkspace new
				name: 'inspector'
				helpId: 10884.
	sourcePresenter := self
				add: SmalltalkSystem current methodWorkspaceClass new
				name: 'source'
				helpId: 10885.
	sourcePresenter
		areVariableTipsEnabled: true;
		variableMetadataProvider: self.
	refactoringTool := self developmentSystem newMethodRefactoringToolFor: self!

createSchematicWiring
	"Create the trigger wiring for the receiver"

	super createSchematicWiring.
	self
		when: #closeRequested:
		send: #onCloseRequested:
		to: self.
	stackPresenter
		when: #selectionChanging:
			send: #onFrameSelectionChanging:
			to: self;
		when: #selectionChanged
			send: #onFrameSelected
			to: self;
		when: #actionPerformed
			send: #browseIt
			to: self.
	variablesPresenter
		when: #selectionChanged
			send: #onTempSelected
			to: self;
		when: #actionPerformed
			send: #inspectIt
			to: self.
	sourcePresenter
		when: #expressionEvaluated:
		send: #onExpressionEvaluated:
		to: self.
	inspectorPresenter
		when: #expressionEvaluated:
		send: #onExpressionEvaluated:
		to: self.
	self model
		when: #methodUpdated:
			send: #onMethodUpdated:
			to: self;
		when: #methodRemoved:
			send: #onMethodRemoved:
			to: self!

cursorIPRange
	"Private - Answer the IP range which includes the current cursor position in the source
	pane."

	| pos map i start end frame |
	frame := self frame.
	self makeDebugFrame: frame.	"first make sure it is a debug frame."
	pos := sourcePresenter view caretPosition.
	map := frame textMap.
	i := map findFirst: (self class runToCursorBehavior == #precise
						ifTrue: [[:each | each value includes: pos]]
						ifFalse: [[:each | each value stop > pos]]).
	i == 0
		ifTrue: 
			[pos < map first value first
				ifTrue: 
					[start := 1.
					end := map first key]
				ifFalse: 
					[start := map last key.
					end := self selectedMethod byteCodes size]]
		ifFalse: 
			[start := (map at: i) key.
			end := i == map size ifTrue: [self selectedMethod byteCodes size] ifFalse: [(map at: i + 1) key]].
	^start to: end!

debugState: aString
	"Private - Set the subcaption for the debugger which displays something about the state of
	the debugger."

	self caption: process name printString, ' [', aString, ']'!

defaultHelpId
	^10881!

definitionsMenu
	<commandQuery: #queryMessagesMenu:>
	!

depth
	"Private - Answer the requested stack depth to be displayed by the receiver (the actual
	stack depth may be less if there are insufficient frames)."

	^depth!

depth: anInteger 
	"Private - Set the stack depth displayed by the receiver.

	Note the use of #selectionByIndex rather than #selection, this is because the identity
	relationship between the existing values frames and those present after populateStackModel
	may not hold."

	| selectionIndex |
	depth := anInteger.
	process isNil ifTrue: [^self].
	selectionIndex := stackPresenter view selectionByIndex.
	self populateStackModel.
	(selectionIndex between: 1 and: depth) 
		ifTrue: [stackPresenter view selectionByIndex: selectionIndex]!

displayFrame
	"Private - Update the receiver to reflect the selected stack frame."

	self hasFrameSelected ifFalse: [^self].
	self displaySource.
	self updateTemporaries!

displayLocal: anAspectAccessor
	"Private - Inspect the value of the selected local/instance variable."

	
	localAccessor removeEventsTriggeredFor: self.
	localAccessor := anAspectAccessor asValue.
	inspectorPresenter model: localAccessor.
	localAccessor
		when: #valueChanged
		send: #onVariableValueChanged
		to: self

	"Rather than change the context to the variable value, I think I prefer it to remain as the frame receiver.
	The locals can be accessed by name"
	"inspectorPresenter evaluationContext: temp."!

displaySource
	"Private - Refresh the receiver's source display to reflect a newly selected frame."

	self selectedMethod
		ifNil: [sourcePresenter text: '']
		ifNotNil: 
			[:method |
			sourcePresenter evaluationContext: self frame receiver.
			self isDisassembled
				ifTrue: 
					[sourcePresenter
						stylerClass: SmalltalkSystem current disassemblyStylerClass;
						text: method disassembly]
				ifFalse: 
					[sourcePresenter
						stylerClass: method stylerClass;
						text: method getSource].
			self showCurrentExpression].
	sourcePresenter isModified: false!

emitKeywordSignatureFor: aMessage in: aClass on: aPuttableStream 
	| argNames instVars |
	argNames := OrderedCollection new.
	instVars := aClass allInstanceVariableNames.
	argNames addAll: instVars.
	aMessage selector keywords with: aMessage arguments
		do: 
			[:keyword :arg | 
			| x argName argNameStem |
			aPuttableStream
				nextPutAll: keyword;
				space.
			argName := argNameStem := self nameForArgument: arg.
			x := 1.
			[argNames includes: argName] whileTrue: [argName := argNameStem , (x := x + 1) printString].
			argNames add: argName.
			aPuttableStream
				nextPutAll: argName;
				space].
	^argNames copyFrom: instVars size + 1!

findBlockHome: aBlockFrame 
	| home method |
	home := aBlockFrame homeFrame.
	home notNil ifTrue: [^home].
	"Its a block without an outer ref, so we don't really know where its home frame is. Best we
	can do is to assume it is the nearest frame for the same method."
	home := aBlockFrame sender.
	method := aBlockFrame method.
	[home isNil or: [home isBlockFrame not and: [home method == method]]] 
		whileFalse: [home := home sender].
	^home!

findHomeFrame: aStackFrame 
	^aStackFrame isBlockFrame ifTrue: [self findBlockHome: aStackFrame] ifFalse: [aStackFrame]!

frame
	"Private - Answer the currently selected stack frame."

	^stackPresenter selectionOrNil!

frameCalledFrom: frame
	"Private - Answer the frame called from the <StackFrame>, frame, which 
	must not be the top frame. This is done by a sequential search from the top frame."

	 | calledFrame nextFrame |
	nextFrame := topFrame.
	[	calledFrame := nextFrame.
		nextFrame := calledFrame sender.
		nextFrame = frame] whileFalse.
	^calledFrame!

frames
	"Private - Answer the list of stack frames"

	^stackPresenter list!

generateStubFor: aMessage inClass: aClass
	^(self developmentSystem
		compile: (self stubTextFor: aMessage inClass: aClass)
		in: aClass
		environment: nil
		categories: #()
		package: nil
		extraFlags: 0) method
		notNil!

hasBrowsableMethod
	^self isPaused and: [self hasMethodSelected]!

hasEditableMethodSelected
	^self isPaused and: [self isDisassembled not and: [self hasMethodSelected]]!

hasEditableMethodsSelected
	^self hasEditableMethodSelected!

hasFrameSelected
	^self frame notNil!

hasLiveFrame
	| frame |
	frame := self frame.
	^(frame isNil or: [frame isDead]) not!

hasMethodSelected
	^self selectedMethod notNil and: [self selectedMethod isExpression not]!

hasMoreFrames
	^self isPaused and: [self depth <= self frames size]!

hasMutableVariableSelected
	^variablesPresenter hasSelection and: [localAccessor canSet]!

hasOverrideSelected
	^self selectedMethod ifNil: [false] ifNotNil: [:method | method isOverride]!

hasVariableSelected
	^variablesPresenter hasSelection!

hideSourceInterval
	sourcePresenter view
		removeMarkersOfType: #currentLine;
		removeIndicatorsOfType: #currentExpression!

highlightCurrentExpression
	| ip |
	ip := self selectionIP.	"There are two lines of header text before the bytecode disassembly starts"
	ip
		ifNil: 
			[sourceInterval := nil.
			^self].
	sourceInterval := self isDisassembled
				ifTrue: [sourcePresenter view lineRange: (self selectedMethod indexOfIP: ip) + 2]
				ifFalse: [self sourceRangeAt: ip inTextMap: self selectedMethod textMap].
	self showSourceInterval!

iconForVariable: aStVariable
	^aStVariable iconInFrame: self frame!

implementDNUMenu
	<commandQuery: #queryImplementMenu:>
	!

initialize
	"Private - Initialize the receiver"

	super initialize.
	depth := DefaultStackDepth.
	flags := 0.
	breakWhen := OrderedCollection new!

inspectFrame
	"Private - Open an inspector on the currently selected frame."

	<commandQuery: #hasFrameSelected>
	self frame inspect!

inspectItCommand
	"Answer the <Symbol> of the contextual command to inspect something, depending on the subview with focus and/or selection."

	stackPresenter hasFocus ifTrue: [^#inspectFrame].
	^#inspectVariable!

inspectReferences
	"Private - Open a new Inspector on all the objects which references the currently selected local variable or instance variable."

	| refs |
	refs := localAccessor value allReferences copyWithout: self.
	refs isEmpty
		ifTrue: 
			[MessageBox notify: ('There are no additional references to:<n><t><1p>'
						expandMacrosWith: variablesPresenter selection first)]
		ifFalse: [refs inspect]!

inspectVariable
	"Private - Open an inspector on the currently selected local variable (or instance variable)."

	<commandQuery: #hasVariableSelected>
	localAccessor value inspect!

isAnimating
	"Private - Answer whether the receiver is in 'Animate' mode (i.e. repeatedly single-stepping
	through the debugged code)."

	^flags anyMask: AnimateMask!

isDisassembled
	"Private - Answer whether the receiver is in disassembly mode."

	^flags anyMask: DisassemblyMask
!

isFrameRestartable
	"Private - Answer whether the receiver is paused with a selected frame that is restartable. Some methods, such as callback entry points, cannot be restarted at all, others not reliably."

	^self isPaused and: 
			[| frame |
			frame := self frame.
			frame notNil and: [frame isRestartable]]!

isInCompositeOp
	"Private - Answer whether the receiver is performing a composite operation (if so then
	display updates should be deferred)."

	^breakAction notNil!

isMain: aBoolean
	"Private - Set the isMain flag."

	flags := flags mask: MainMask set: aBoolean!

isPaused
	^flags noMask: ##(RunMask | AnimateMask)!

isProcessLive
	^process isTerminated not!

isResumable
	"Private - Answer whether the process the receiver is debugging is resumable."

	^flags anyMask: ResumableMask
!

isRunnable
	"Runnable if not currently running/animating (i.e. paused), but is resumable."

	^(flags bitAnd: ##(RunMask | AnimateMask | ResumableMask)) == ResumableMask!

isRunning
	"Private - Answer whether the process the receiver is debugging is currently running."

	^flags anyMask: RunMask!

isTopFrameSelected
	^self frame = topFrame!

killProcess
	"Private - Kill the debugged process, if the user confirms that that is his wish."

	| mb |
	mb := MessageBox new.
	mb buttonStyle: #okCancel.
	^(mb warning: 'Process will be terminated without unwinding') == #ok
		ifTrue: 
			["Killing process will not run the unwind blocks, so the debugger will not
			 get closed, we must therefore force that here."
			process
				debugger: nil;
				kill.
			self view close]!

mainView
	"Private - Answer the debuggers main composite view which contains all the views which
	display something about the current execution state."

	^self view viewNamed: 'main'!

makeDebugFrame: aStackFrame 
	"Private - Mutate the specified stack frame into a debug stack frame with a debug method and
	suitably modified IP."

	aStackFrame isNil 
		ifFalse: 
			[aStackFrame makeDebug.
			_method := nil]!

markMethodAsUnbound: oldMethod
	| list selector methodClass |
	self isRunning ifTrue: [^self].
	list := stackPresenter model.
	selector := oldMethod selector.
	methodClass := oldMethod methodClass.
	list keysAndValuesDo: 
			[:eachIndex :eachFrame |
			(eachFrame isDead not and: 
					[| eachMethod |
					(eachMethod := eachFrame method) notNil
						and: [eachMethod selector == selector and: [eachMethod methodClass == methodClass]]])
				ifTrue: [list refreshAtIndex: eachIndex]]!

moreFrames
	"Private - Increase the number of stack frames displayed in the call stack."

	<commandQuery: #hasMoreFrames>
	self depth: depth + StackDepthIncrement!

nameForArgument: anObject 
	^self developmentSystem nameForArgument: anObject!

newLocalsTreeWithRoots: anOrderedCollection
	| treeModel |
	"Note that the search policy of the tree has to be identity (which is the default) because some (variable name, value) pairs may be duplicated by equality."
	treeModel := ExpandingTreeModel withRoots: anOrderedCollection.
	treeModel getChildrenBlock: 
			[:each |
			| inspectee |
			inspectee := [each value] on: Error do: [:ex | ex].
			(1 to: inspectee class instSize)
				collect: [:i | ((inspectee instVarAt: i) newAspect: i class: InstVarAspect) accessorFor: inspectee]].
	^treeModel!

nilVariable
	"Private - Nil the currently selected variable or stack slot."

	<commandQuery: #hasMutableVariableSelected>
	variablesPresenter model collapse: localAccessor.
	localAccessor value: nil!

onAboutToDisplayMenu: aMenu
	"The system is about to display the <Menu>, popup, this is our chance
	to fiddle with it."

	super onAboutToDisplayMenu: aMenu.
	self class enableDynamicMenus ifFalse: [^self].
	aMenu name == #implementDNUMenu
		ifTrue: 
			[self populateImplementMenu: aMenu.
			^self].
	"Otherwise pass on to the dev. system to populate message menus"
	self developmentSystem
		populateMessagesMenus: aMenu
		fromMethods: {self selectedMethod}
		environment: self searchEnvironment!

onBreak: pFrame
	"Private - A break interrupt has been intercepted, take control once more. The argument is
	the process frame address. N.B. This method is entered with async events disabled, and it is
	important not to attempt anything which will cause a callback with interrupts disabled."

	| interruptFrame |
	process size.
	interruptFrame := process frameAtAddress: pFrame.
	[breakWhen isEmpty] whileFalse: 
			[(breakWhen last value: interruptFrame)
				ifTrue: [breakWhen removeLast]
				ifFalse: [^Processor enableInterrupts]	"re-enable further debug events"].
	(((self skipMaskFor: interruptFrame method) allMask: 1) and: [self isInCompositeOp not])
		ifTrue: 
			["Step through..."
			self assert: [interruptFrame method isDebugMethod].
			^process
				step;
				suspend].
	"We can now safely update the windows (with interrupts re-enabled)"
	self break: interruptFrame
	"N.B. There must be no further code after this point"!

onCloseRequested: boolValueHolder
	"Private - A request to close the view onto this presenter has occurred. The close will
	proceed unless we set the value holder argument to false. The debugged process will be
	terminated depending on the setting of the user response."

	| response |
	boolValueHolder value: self promptToSaveChanges.
	(boolValueHolder value not or: [process isNil]) ifTrue: [^self].
	process debugger == self ifFalse: [^self].
	response := self terminateOnClose.
	flags := flags maskSet: RunMask.
	response == #yes
		ifTrue: 
			["Detach from the process before closing so that, if an #ensure: block encounters an error,
			the process will open a new walkback rather than informing us after our view is already destroyed."
			process debugger: nil.
			process terminate]
		ifFalse: 
			[response == #no
				ifTrue: 
					[Transcript
						display: 'Detaching from debugged process ';
						print: process;
						cr.
					self resumeProcess]
				ifFalse: [boolValueHolder value: false]]!

onExpressionEvaluated: result
	"Private - An expression has been evaluated in one of the receiver's workspace panes. Copy
	back the values from the workspace variable pool into same named temporaries in case they
	have been assigned."

	| frame pool |
	frame := self frame.
	pool := inspectorPresenter workspacePool.
	frame temps
		do: [:each | (frame getOuter: (each at: 2)) at: (each at: 3) put: (pool lookup: each first)]!

onFrameSelected
	"Private - The selected stack frame/method has changed. Refresh the other models
	appropriately"

	| frame |
	self clearCachedMethodInfo.
	frame := self frame.
	frame notNil
		ifTrue: [self displayFrame]
		ifFalse: 
			[sourcePresenter clear.
			variablesPresenter model: TreeModel new]!

onFrameSelectionChanging: aSelectionChangingEvent
	self onPromptToSaveChanges: aSelectionChangingEvent!

onHalt: aStackFrame 
	"Private - A hard coded breakpoint has been hit in the process being debugged by the
	receiver, so take control. The argument is the stack frame containing the halt."

	self assert: [aStackFrame process == process].
	self beBroken.
	self beAnimated: false.
	self debugState: 'Hard breakpoint'.
	topFrame := aStackFrame.
	self populateStackModel.
	process debugger: self.
	self suspendProcess!

onMethodRemoved: aCompiledMethod 
	self markMethodAsUnbound: aCompiledMethod!

onMethodUpdated: aCompilationResult 
	"Private - The development system has updated or removed a <CompiledMethod>. Refresh any
	relevant stack frames to indicate that they are now unbound if they use the old method."

	| oldMethod |
	oldMethod := aCompilationResult oldMethod.
	self markMethodAsUnbound: oldMethod!

onPromptToSaveChanges: aSelectionChangingEvent
	^sourcePresenter prompt: 'source' toSaveChanges: aSelectionChangingEvent!

onStep: pFrame 
	"Private - A step interrupt has been intercepted, take control once more. The argument is
	the process frame 'address'. This event will only occur after the activation of a new
	method or block. Most 'step's actually result in a break interrupt when the next soft
	breakpoint is hit. N.B. This method is entered with async events disabled."

	"Implementation Note: There are a sequence of early out tests we perform to avoid breaking
	to early, or in the wrong place:
		-	the debugger is already at a breakpoint (i.e. the interrupt arrived after a hard break)
		-	an attempt is being made to step into a method which may, for example, cause
			a deadlock by hogging a global critical section, or which is configured to be
			skipped for some other reason.
		-	the stepped into frame has been interrupted before any instructions are run (i.e
			it is not a debug frame), so we want to continue to run to the first breakpoint."

	| interruptFrame method skipMask |
	self assert: [Processor activeProcess == process].
	self isRunning ifFalse: [^Processor enableInterrupts].	"already broken"
	process size.
	interruptFrame := process frameAtAddress: pFrame.
	method := interruptFrame method.
	"Transcript
		display: 'onStep in ';
		display: interruptFrame;
		display: ' breakAction = ';
		print: breakAction;
		display: ' breakWhen = ';
		print: breakWhen;
		cr."
	skipMask := self skipMaskFor: method.
	(skipMask allMask: 2) 
		ifTrue: 
			["Step over the method (break on return)"
			"Transcript
				display: breakWhen size + 1;
				display: ': Skip over';
				display: method;
				display: ' when frame index < ';
				display: interruptFrame index;
				cr."
			self breakWhen: [:iFrame | iFrame index < interruptFrame index].
			^Processor enableInterrupts].
	(skipMask allMask: 1) 
		ifTrue: 
			["Step through the method - do not break in this method, but do break in any it calls"
			"Transcript
				display: 'Skip through ';
				display: method;
				display: ' break when frame index ~= ';
				print: interruptFrame index;
				cr."
			method isDebugMethod ifFalse: [self makeDebugFrame: interruptFrame].
			^process
				step;
				suspend].
	"If not currently a debug frame, ..."
	method isDebugMethod 
		ifFalse: 
			["... have just stepped into a new method. Continue to the first breakpoint, or whenever supposed to stop"
			self makeDebugFrame: interruptFrame.
			^Processor enableInterrupts].
	"If stopped on first instruction of evaluated block, then continue to first breakpoint"
	(interruptFrame isBlockFrame and: [interruptFrame ip = interruptFrame block initialIP]) 
		ifTrue: 
			[self assert: [method isDebugMethod].
			^Processor enableInterrupts].
	self break: interruptFrame
	"N.B. There must be no further code after this point"!

onTempSelected
	"Private - A selection has been made in the temporaries list, update the inspector model."

	variablesPresenter selectionOrNil
		ifNotNil: 
			[:newTemp |
			self displayLocal: newTemp.
			inspectorPresenter view enable]
		ifNil: 
			[self displayLocal: nil.
			inspectorPresenter view
				clear;
				disable]!

onTerminate
	"Private - The debugged process is about to terminate, so if this is the receiver's process,
	close the receiver."

	stackPresenter resetSelection.
	process debugger: nil.
	self view close!

onVariableValueChanged
	variablesPresenter model collapse: localAccessor.
	"If the variable is one of the locals (as opposed to an instance variable somewhere inside one of the locals), update the inspector workspace pool"
	(localAccessor aspectDescriptor isKindOf: StackFrameSlot)
		ifTrue: 
			[| varName |
			varName := localAccessor name.
			varName notEmpty ifTrue: [inspectorPresenter workspacePool at: varName put: localAccessor value]]!

onViewClosed
	"Private - Sent by the receiver's view when it has been closed. Disconnect from any events
	triggered by the devlopment system"

	super onViewClosed.
	self model removeEventsTriggeredFor: self!

onWalkback: titleString topFrame: aStackFrame resumable: aBoolean 
	"Private - Bring up a walkback window on the receiver with the specified title and with
	aStackFrame as the top frame of the stack trace."

	self beBroken.
	self beAnimated: false.
	self caption: titleString.
	topFrame := aStackFrame.
	self populateStackModel.
	self resumable: aBoolean.
	self assert: [process debugger == self].
	self suspendProcess!

parseContext
	^self selectedMethod
		ifNil: [model defaultParseContext]
		ifNotNil: [:method | (model modelMethodFor: method) parseContext]!

parseTree
	^sourcePresenter parseTree!

performMethodsRefactoring: aMonadicValuable name: aString 
	self promptToSaveChanges ifFalse: [^self].
	^sourcePresenter executeRefactoring: aMonadicValuable with: self selectedMethods!

populateImplementMenu: aMenu
	"Private - Build the menu which lists the classes into which a stub can be generated for
	messages which were either not understood, or not implemented directly by the receiver's
	class. The receiver's class is the first, default, item on the menu, and is separated from
	the superclasses that also don't implement the message (if any) by a divider."

	| frame method selector superclasses receiver msg class current |
	frame := self frame homeFrame.
	method := frame method.
	selector := method selector.
	msg := selector == #doesNotUnderstand:
				ifTrue: [frame arguments first]
				ifFalse: 
					[self assert: [method methodClass ~= frame receiver class].
					Message selector: selector arguments: frame arguments].
	receiver := frame receiver.
	class := receiver class.
	aMenu clear.
	aMenu addCommand: (MessageSend
				receiver: self
				selector: #restartWithStubFor:inClass:
				arguments: {msg. receiver class})
		description: class name.
	superclasses := OrderedCollection new.
	
	[current := class superclass.
	class := current.
	current notNil and: [selector == #doesNotUnderstand: or: [(current includesSelector: selector) not]]]
			whileTrue: [superclasses addLast: current].
	superclasses notEmpty
		ifTrue: 
			[aMenu addSeparator.
			superclasses do: 
					[:each |
					| cmd |
					cmd := MessageSend
								receiver: self
								selector: #restartWithStubFor:inClass:
								arguments: {msg. each}.
					aMenu addCommand: cmd description: each name]].
	aMenu setDefault: 1!

populateStackModel
	"Private - Create and set the stack model list from the first 'depth' frames below the
	current topFrame of the current process."

	"Suppress selection reset event caused by refreshing the list"

	stackPresenter noEventsDo: [stackPresenter list: (topFrame getFrames: depth)].
	stackPresenter selectionOrNil: topFrame!

process: aProcess topFrame: aStackFrame 
	"Private - Sets the process being debugged and the top stack frame (of interest). The stack
	frame list is populated."

	topFrame := aStackFrame.
	self isMain: aProcess isMain.
	process := aProcess.
	process debugger: self.
	self populateStackModel.
	"tempsPresenter selectionByIndex: 1 ifAbsent: []"!

promptToSaveChanges
	"Private - Hook for prompting the user if the method text has been modified."

	^self onPromptToSaveChanges: (SelectionChangingEvent forSource: self)!

queryBrowseMessage: aCommandQuery
	^(self isPaused and: [self hasMethodSelected])
		ifTrue: 
			[aCommandQuery
				isEnabled: true;
				text: (aCommandQuery menuText expandMacrosWithArguments: { self selectedMethod selector }
							locale: Locale smalltalk)]!

queryImplementMenu: aCommandQuery
	"Note that the implement menu is not just for DNUs any more, but any message which is not directly implemented by its receiver."

	aCommandQuery
		isEnabled: (self isPaused and: [self class enableDynamicMenus and: [self canImplementMessage]])!

queryMessagesMenu: aCommandQuery
	aCommandQuery isEnabled: (self class enableDynamicMenus and: [self selectedMethod notNil])!

queryToggleAnimation: aCommandQuery
	| animating |
	animating := self isAnimating.
	aCommandQuery
		isEnabled: (animating or: [self isRunnable]);
		isChecked: animating!

referencesMenu
	<commandQuery: #queryMessagesMenu:>
	!

refreshFrame
	"Private - Update the receiver's display of the existing frame."

	self clearCachedMethodInfo.
	self isDisassembled ifTrue: [self displaySource] ifFalse: [self showCurrentExpression].
	self updateTemporaries!

restartBlock: aBlockClosure inFrame: aStackFrame 
	"Private - Restart the block frame argument, which is now atop the stack, so that it is
	broken on its first breakpoint."

	| sp bp tempStart envTemps |
	aStackFrame ip: aBlockClosure initialIP.
	"Reset the blocks SP so that any extraneous crud is removed when we return to it. Note that
	we must account for the blocks arguments and stack temps. We want to leave the sp pointing
	at the last entry in the frame (i..e the desired Top of Stack)"
	bp := aStackFrame bp.
	sp := bp + aBlockClosure localCount + aStackFrame frameSize - 1.
	aStackFrame sp: sp.
	"Nil out the stack temps"
	tempStart := bp + aBlockClosure argumentCount + aBlockClosure size.
	tempStart to: tempStart + aBlockClosure stackTempCount - 1 do: [:i | process at: i put: nil].
	"And the environment temps, if any"
	envTemps := aBlockClosure envTempCount.
	envTemps > 0 
		ifTrue: 
			[| context |
			context := aStackFrame outer.
			1 to: envTemps do: [:i | context at: i put: nil]].
	"Step to the first breakpoint in the block as otherwise user will need to do a redundant
	step operation"
	self breakWhen: [:iFrame | true].
	self stepInFrame: aStackFrame!

restartBlockFrame: aStackFrame
	"Private - Unwind to the <BlockFrame>, frame, of the debugged process and reset 
	to the block's initial IP so that the block starts executing from its beginning again.
	Note that temporaries in the block may have previously set values."

	"Implementation Note: This is somewhat easier that restarting a method, since blocks
	are designed to be restarted easily, and because we can't restart a modified block anyway
	(we have to restart the block's home method)."

	| method block |
	block := aStackFrame block.
	method := block method.
	(method isUnbound and: [method isExpression not])
		ifTrue: 
			[| home prompt |
			home := self findBlockHome: aStackFrame.
			prompt := 'The home method of the block would appear to have been modified'.
			(home notNil and: [home isRestartable])
				ifTrue: 
					[(MessageBox new
						headline: 'Restart <1d>?' << method;
						confirm: prompt , '.

Would you like to restart the entire method instead?')
							ifTrue: [^self restartMethodFrame: home]]
				ifFalse: 
					[MessageBox new
						headline: 'Block not restartable';
						notify: prompt , ', but is not restartable.']].
	aStackFrame makeDebug.
	aStackFrame = topFrame
		ifTrue: [self restartBlock: block inFrame: aStackFrame]
		ifFalse: 
			[| calledFrame priority |
			"We need to unwind any frames above the selected one"
			calledFrame := self frameCalledFrom: aStackFrame.
			self breakWhen: [:iFrame | iFrame index <= calledFrame index].
			priority := process priority.
			breakAction := 
					[process priority: priority.
					self restartBlock: block inFrame: aStackFrame.
					self populateStackModel].
			process
				priority: Processor highIOPriority;
				interruptWith: [calledFrame return: nil]]!

restartFrame
	"Private - Unwind the currently selected frame and reset the IP so that the method starts
	executing from its beginning again."

	<commandQuery: #isFrameRestartable>
	self restartFrameWithFocus: false!

restartFrame: frame 
	"Private - Unwind the <StackFrame>, frame, of the debugged process and reset the IP so that
	the method starts executing from its beginning again."

	self debugState: 'Restart ' , frame displayString.
	self resumable: true.	"override any non-resumable error"
	frame isBlockFrame ifTrue: [self restartBlockFrame: frame] ifFalse: [self restartMethodFrame: frame]!

restartFrameWithFocus: aBoolean 
	| frame |
	frame := self frame.
	"Restart requiring an unwind may be blocked by another debugger, so disable view until
	completed"
	self mainView disable.
	"We must allow the command msg to return before processing the restart as otherwise the
	debugged process may get blocked when attempting to unwind an earlier callback"
	
	[self restartFrame: frame.
	aBoolean ifTrue: [sourcePresenter setFocus]] postToMessageQueue!

restartMethod
	| home |
	home := self findHomeFrame: self frame.
	(home notNil and: [home isRestartable]) ifTrue: [self restartMethodFrame: home]!

restartMethodFrame: frame
	"Private - Unwind the <StackFrame>, frame, of the debugged process and resend the message
	which caused the method to be activated, breaking at the start of the method."

	"Implementation Note: Generally this is fairly simple - we just save the receiver and args,
	unwind the stack back to the sender (i.e. one below selected frame), wind back the sender's
	ip so that the next thing it does will be a debug break immediately before the pertinent
	send, push the receiver and args back on the stack, and then step into the method again.
	Complications arise where the restarted frame resulted from a special control primitive such
	as #perform:, since we then need to redo the perform which requires that we push the
	selector and possibly that we push the arguments as an array (in the case of
	#perform:withArguments:)."

	| sender args receiver ip interp sent received argArray isPerform priority |
	self assert: [frame isRestartable].
	self debugState: 'Restart ' , frame displayString.
	self resumable: true.	"override any non-resumable error"

	"Save the receiver and arguments as we'll need to re-push these for the resend"
	args := frame arguments.
	receiver := frame receiver.
	received := frame method selector.
	sender := frame sender.
	self makeDebugFrame: sender.

	"Locate the actual message send instruction"
	interp := sender method byteCodeDispatcher.
	ip := sender ip.
	
	[ip := interp prevIP: ip.
	interp ip: ip.
	"Interpret the instruction to find the actual selector sent (might be #perform:, etc)"
	(sent := interp peekForSelector) isNil]
			whileTrue.

	"Was it a special message, like #perform, which adjusts the stack in some way?"
	argArray := isPerform := false.
	"To avoid penalizing ordinary selectors starting with #perform:, etc, we don't do anything special unless the selector
	 executed was different from that sent."
	sent ~~ received
		ifTrue: 
			[(sent beginsWith: #perform:)
				ifTrue: 
					["One of the #perform: family of methods..., so need to push the selector to be performed"
					isPerform := true.
					sent == #perform:withArgumentsAt:descriptor: ifTrue: [^Sound warningBeep].
					argArray := sent == #perform:withArguments:.
					received == #doesNotUnderstand:
						ifTrue: 
							[| msg |
							msg := args first.
							received := msg selector.
							args := msg arguments]]
				ifFalse: 
					[received == #doesNotUnderstand:
						ifTrue: 
							["self assert: [sent == args first selector]."
							args := args first arguments]
						ifFalse: 
							[sent == #value:withArguments:
								ifTrue: 
									[args := (Array new: 2)
												at: 1 put: receiver;
												at: 2 put: args;
												yourself.
									receiver := frame method]
								ifFalse: 
									["Some other control message which we haven't catered for yet (please report)"
									self mainView enable.
									^self
										error: 'Sorry, it is not currently possible to restart this frame. Please report to Dolphin support']]]].

	"After this point we start to modify the process state, and so there is no going back..."

	"Note: Deduct 1 to get back to the soft breakpoint which always immediately precedes a message send"
	sender ip: ip - 1.
	self assert: [(sender method byteCodes at: sender ip) == 0].
	priority := process priority.

	"Set the action to be performed on next break to be the operations needed to resend"
	breakAction := 
			[| sp |
			process priority: priority.
			"Push back the receiver and args (note that this may corrupt the frames above, so they must be  removed)"
			sp := sender sp.
			process at: sp put: receiver.

			"If a perform then we need to push the actual selector"
			isPerform ifTrue: [process at: (sp := sp + 1) put: received].

			"Push the arguments to the previously sent selector, either individually or as an array (e.g. for 
			 #perform:withArguments:)"
			argArray
				ifTrue: [process at: (sp := sp + 1) put: args]
				ifFalse: [args do: [:arg | process at: (sp := sp + 1) put: arg]].
			sender sp: sp.

			"Now resize the proc to remove any extraneous crud and set up the suspended frame to be the sender"
			process
				resize: sp;
				suspendedFrame: sender.

			"Transcript display: 'Stepping in frame '; display: sender; cr."
			"And step back into the method again"
			self breakWhen: [:iFrame | true].
			self stepInFrame: sender].

	"Unwind any frames above and including the selected one - running the breakAction when
	finished. Note that we temporarily boost the priority of the process to ensure it runs."
	process priority: Processor highIOPriority.
	self return: nil fromFrame: frame.
	process isWaiting ifFalse: [^self].
	"The unwind appears to be blocked, give it a little more time..."
	Processor sleep: 100 milliseconds.
	process isWaiting
		ifTrue: 
			[self blockedRestartWarning: (MessageSend
						receiver: receiver
						selector: sent
						arguments: args)]!

restartWithStubFor: aMessage inClass: aClass 
	"Private - Generate a simple stub implementation for the specified <Message> in the
	specified class, and restart the frame."

	(self generateStubFor: aMessage inClass: aClass) ifTrue: [self restartFrameWithFocus: true]!

resumable: aBoolean
	"Private - Set the receiver's resumable flag."

	flags := flags mask: ResumableMask set: aBoolean!

resume
	"Private - Restart the debugged process from the point at which it was last suspended. This
	might involve being resuspended on a Semaphore."

	| list |
	list := suspendingList.
	suspendingList := nil.
	"isMain ifTrue: [ SessionManager inputState main: process ]."
	process resume: list!

resumeProcess
	"Private - Restart the debugged process from the point at which it was last suspended. This
	might involve being resuspended on a Semaphore."

	<commandQuery: #isRunnable>
	process debugger: nil.
	self view close ifFalse: [process debugger: self] ifTrue: [self resume]!

return: anObject fromFrame: aStackFrame 
	"Private - Return the specified value to the sender of the specified <StackFrame> (assumed
	to be in the process being debugged)."

	suspendingList := nil.
	self makeDebugFrame: aStackFrame sender.
	self breakWhen: [:iFrame | iFrame index < aStackFrame index].
	process interruptWith: [aStackFrame return: anObject]!

return: anObject toFrame: aStackFrame 
	"Private - Return the specified value to the specified <StackFrame> (assumed to be in the
	process being debugged)."

	suspendingList := nil.
	self makeDebugFrame: aStackFrame sender.
	self breakWhen: [:iFrame | iFrame index <= aStackFrame index].
	process interruptWith: [Processor returnValue: anObject toFrame: aStackFrame index]!

returnFromMessage
	"Private - Step out of the currently selected frame (i.e. return to its sender) answering a
	return value for which the user is prompted (may be any expression). Also resets the
	non-resumable flag allowing debugging to continue after a non-continuable error."

	<commandQuery: #canReturnFromFrame>
	| frame expression returnValue receiver loopCookie |
	frame := self frame.
	receiver := frame receiver.
	expression := String new.
	loopCookie := Object new.
	
	[(expression := Prompter
				on: expression
				prompt: 'Please enter return value expression:'
				caption: 'Return from…') isNil
		ifTrue: [^self].	"cancelled"
	returnValue := expression isEmpty
				ifTrue: [receiver]
				ifFalse: 
					[| compilerClass |
					compilerClass := receiver basicClass compilerClass.
					
					[compilerClass
						evaluate: expression
						for: receiver
						environment: nil
						evaluationPools: inspectorPresenter allPools
						logged: false]
							on: compilerClass errorClass
							do: 
								[:cn |
								MessageBox
									errorMsg: cn errorMessage , String lineDelimiter , String lineDelimiter , 'Please try again.'
									caption: 'Error in expression…'.
								loopCookie]].
	returnValue == loopCookie]
			whileTrue.
	self debugState: 'Return from…'.
	self resumable: true.	"override any non-resumable error"
	self return: returnValue fromFrame: frame!

runDebuggedProcess
	"Private - Run the debugged process to the next breakpoint or step interrupt."

	self promptToSaveChanges ifFalse: [^self].
	self beRunning.
	self resume!

runProcess
	"Private - Run the debugged process to the next breakpoint or step interrupt."

	<commandQuery: #isRunnable>
	self debugState: 'Run to Next Breakpoint'.
	self breakWhen: [:iFrame | false].
	self mainView disable.
	self runDebuggedProcess!

runToCursor
	"Private - Step to the last breakpoint immediately before the current caret position in the
	source pane."

	<commandQuery: #canRunToCursor>
	| ipInterval method frame |
	self debugState: 'Run to Cursor'.
	ipInterval := self cursorIPRange.
	frame := self frame.
	(self findHomeFrame: frame) ifNotNil: [:home | frame := home].
	method := frame method.
	"More useful to run to next frame with same method than same frame, as then works nicely
	with blocks (which we would otherwise not run into). This may however prevent running to
	cursor in a block further down the stack."
	self breakWhen: 
			[:iFrame |
			iFrame index < frame index or: [iFrame method = method and: [ipInterval includes: iFrame ip]]].
	self mainView disable.
	self runDebuggedProcess!

saveNewMethod: aString 
	self accept: self class restartOnMethodSave methodSource: aString!

searchEnvironment
	^self developmentSystem browserEnvironment!

selectedMethod
	"Answer the method in the currently selected stack frame, or nil if none."

	_method isNil 
		ifTrue: [_method := self frame ifNotNil: [:frame | frame method]].
	^_method!

selectedMethods
	^self selectedMethod ifNil: [#()] ifNotNil: [:method | {method}]!

selectedNode
	"Private - Answer an <StProgramNode> to represent the syntactic element which is currently
	selected, or which the caret is over in the source pane."

	^sourcePresenter selectedNode!

selectionIP
	"Private - Answer the IP of the expression to select in the workspace. This will be the ip
	of the next instruction for the top frame (so that the code which is about to be executed is
	selected) and the ip of last executed instruction in frames below that."

	| frame ip prevIP |
	frame := self frame.
	frame ifNil: [^nil].
	ip := frame ip.
	(ip = 1 or: [self isDisassembled]) ifTrue: [^ip].
	prevIP := frame prevIP.
	^(frame = topFrame and: [(frame method byteCodes at: prevIP) = Break])
		ifTrue: [ip]
		ifFalse: [prevIP]!

setInitialFocus
	"Received when the receiver's view is first opened; set focus to the source workspace."

	sourcePresenter setFocus!

setVariablesList: aSequenceableCollection
	"Private - Set the temporary variables list to an the <sequencedReadableCollection> of <AspectAccessor> on <StackFrameSlot> argument.
	Attempt to maintain any existing temporary selection, failing that select the first entry (self). If there is no selection, then maintain that state."

	| wasExpanded treeModel newSelection |
	treeModel := self newLocalsTreeWithRoots: aSequenceableCollection.
	(variablesPresenter selectionIfNone: nil)
		ifNil: [wasExpanded := false]
		ifNotNil: 
			[:selection |
			| selectionChain slots current index |
			"We are going to attempt to select the nearest variable to the previous selection in the variables presenter.
			We have to work our way down in order to re-expand as far as we can."
			wasExpanded := variablesPresenter isExpanded: selection.
			selectionChain := (variablesPresenter model allParentsOf: selection)
						addLast: selection;
						readStream.
			slots := aSequenceableCollection.
			
			[current := selectionChain nextAvailable.
			current notNil and: 
					[index := slots findFirst: [:each | each name = current name].
					index ~~ 0]]
					whileTrue: 
						[newSelection := slots at: index.
						slots := treeModel childrenOf: newSelection].
			(newSelection isNil and: [selection key = 'self'])
				ifTrue: [newSelection := aSequenceableCollection first]].
	variablesPresenter model: treeModel.
	newSelection
		ifNotNil: 
			[variablesPresenter selection: newSelection.
			wasExpanded ifTrue: [variablesPresenter expand: newSelection]]!

showCurrentExpression
	"Private - Refresh the receiver's source highlighting to reflect the 'current' IP in the selected frame. Note that the range of source highlighted will depend on whether the top-most frame is selected, or an inactive frame down the stack. For the active frame the expression that will next be executed is selected. For an older frame the expression that is currently being executed (i.e. the message send that suspended the frame) is selected."

	self highlightCurrentExpression.
	sourceInterval ifNotNil: [sourcePresenter view ensureRangeVisible: sourceInterval]!

showNextStatement
	<commandQuery: #isPaused>
	self promptToSaveChanges ifFalse: [^self].
	self isTopFrameSelected
		ifTrue: [self showCurrentExpression]
		ifFalse: [stackPresenter selection: topFrame]!

showSourceInterval
	self hideSourceInterval.
	sourcePresenter view
		addIndicatorType: #currentExpression over: sourceInterval;
		addMarkerType: #currentLine at: (sourcePresenter view lineFromPosition: sourceInterval start)!

skipMaskFor: aCompiledMethod
	^(SkipTable lookup: aCompiledMethod methodClass)
		ifNil: [0]
		ifNotNil: [:selectors | selectors at: aCompiledMethod selector ifAbsent: 0]!

source
	^sourcePresenter source!

sourceRangeAt: anInteger inTextMap: aTextMap
	^(aTextMap lookup: (CompiledCode findIP: anInteger inTextMap: aTextMap))
		ifNil: [1 to: 0]
		ifNotNil: [:entry | entry value]!

step
	"Private - Step into the next message send. This involves resuming for a single message send
	or until a breakpoint is hit."

	breakWhen removeAll.
	self stepInFrame: self frame!

stepInFrame: frame
	"Private - Step into the next message send in the specified <StackFrame>. This involves
	resuming for a single message send or until a breakpoint is hit. Note that we don't actually
	step if the process was suspended while waiting on a Semaphore. Instead we just return to
	waiting on the Semaphore."

	self makeDebugFrame: frame.
	self makeDebugFrame: frame sender.
	self beRunning.
	suspendingList class == Semaphore
		ifTrue: [self resume]
		ifFalse: 
			[suspendingList := nil.
			process step]!

stepInto
	"Private - Process a command to step into the next message send. This can only be done from the top
	stack frame."

	<commandQuery: #canStepInto>
	self debugState: 'Step Into'.
	self step!

stepIntoBlock
	"Private - Step to the next expression in the currently selected frame, or a block homed within that frame."

	| frame |
	self debugState: 'Step Into Block'.
	frame := self frame.
	"Break when encountering a block homed in the current method, or when returning to the current frame without encountering one"
	self
		breakWhen: [:iFrame | iFrame index = frame index or: [iFrame isBlockFrame and: [iFrame method = frame method]]].
	self runDebuggedProcess!

stepOut
	"Private - Step out of the currently selected frame (i.e. return to its sender)."

	<commandQuery: #canStep>
	| frame |
	self debugState: 'Step Out'.
	frame := self frame.
	self makeDebugFrame: frame sender.
	self breakWhen: [:iFrame | iFrame index < frame index].	"break when returned fromselected frame"
	self runDebuggedProcess!

stepOver
	"Private - Step to the next expression in the currently selected frame. Note that this should not stop on a breakpoint in any block homed lower in the stack."

	<commandQuery: #canStep>
	| frame |
	self beRunning.
	self debugState: 'Step over'.
	frame := self frame.
	self breakFrame: frame.
	self makeDebugFrame: frame sender.
	self resume!

stubTextFor: aMessage inClass: aClass
	| source body |
	source := String smalltalkWriteStream: 128.
	body := '^Error notYetImplemented'.
	aMessage argumentCount == 0
		ifTrue: 
			[source nextPutAll: aMessage selector.
			(aClass allInstanceVariableNames includes: aMessage selector asString)
				ifTrue: [body := '^<1s>' << aMessage selector]]
		ifFalse: 
			[aMessage argumentCount == 1
				ifTrue: 
					[aMessage selector isInfix
						ifTrue: 
							[source
								nextPutAll: aMessage selector;
								space;
								nextPutAll: (self nameForArgument: aMessage arguments first)]
						ifFalse: 
							[| name argNames |
							argNames := self
										emitKeywordSignatureFor: aMessage
										in: aClass
										on: source.
							name := aMessage selector allButLast.
							(aClass allInstanceVariableNames includes: name) ifTrue: [body := '<1s> := <2s>' << {name. argNames first}]]]
				ifFalse: 
					[self
						emitKeywordSignatureFor: aMessage
						in: aClass
						on: source]].
	source
		crtab;
		nextPutAll: body.
	^source contents!

suspend
	"Private - Suspend the process being debugged following a debug event."

	self isAnimating ifTrue: [process suspend] ifFalse: [self suspendProcess]!

suspendProcess
	"Private - Suspend the process being debugged."

	"Record the process' suspending list before suspending it so that we can restore it later on
	resume"

	suspendingList := process suspendingList.
	process isTerminated ifFalse: [process suspendUnconditionally]
	"N.B. There must be no further code after this point or the receiver will end up stepping
	through it for ever."!

terminateOnClose
	"Private - Answer on of #yes, #no, or #cancel to indicate whether the debugged process will
	be terminated when the receiver is closed."

	| mb response |
	process isTerminated ifTrue: [^#yes	"Terminating a process which is already dead is benign"].
	mb := MessageBox new.
	mb isSuppressible: true.
	mb uniqueId: [self] method.
	mb defaultButton: 1.
	mb caption: 'Closing Debugger…'.
	mb
		text: 'Do you wish to terminate the debugged process (recommended)?

N.B. If you suppress this dialog then in future the debugged process will ALWAYS be terminated, regardless of the choice you make now. Should you wish to detach from a debugged process and allow it to continue to run, then you can use the Debug/Go(Detach) command on the main menu. '.
	mb iconStyle: #prompt.
	mb buttonStyle: #yesNo.
	response := mb open.
	^response!

terminateProcess
	"Private - Terminate the debugged process. Note that terminating a process will close any
	attached debugger, so we don't need to do anything other than just request the process
	terminate."

	<commandQuery: #isProcessLive>
	| mb |
	self beAnimated: false.
	mb := MessageBox new.
	mb
		isSuppressible: true;
		uniqueId: [self] method.
	^(mb confirm: 'Are you sure you want to terminate the process?') ifTrue: [process terminate]!

tipForVariable: aStVariable
	^aStVariable infoTip: self frame!

toggleAnimation
	"Private - Start/stop animating the debugged process. At the moment this is mainly a bit of
	fun, rather than anything of serious utility. It is also handy for stress testing the
	debugger."

	<commandQuery: #queryToggleAnimation:>
	| newState |
	newState := self isAnimating not.
	self beAnimated: newState.
	newState ifFalse: [^self].
	self debugState: 'Animate'.
	self step!

updateForBreakAt: interruptFrame
	self
		beBroken;
		debugState: 'break'.
	self isInCompositeOp
		ifTrue: 
			[topFrame := interruptFrame.
			"Complete the composite op. Note we are not running in the debugged process"
			breakAction value.
			breakAction := nil]
		ifFalse: 
			["Update the display if not part way through a composite operation"
			(topFrame = interruptFrame and: [self frame index <= interruptFrame index])
				ifTrue: [self refreshFrame]
				ifFalse: 
					[topFrame := interruptFrame.
					self populateStackModel]].
	^self isAnimating
		ifTrue: 
			[
			[OS.Kernel32 sleep: self animatePause asMilliseconds.
			process isDead ifFalse: [self step]]
					forkAt: Processor userSchedulingPriority]!

updateTemporaries
	"Private - Refresh the receiver's temporaries list model."

	| temps tempCount pool frame varList receiver base extra class |
	frame := self frame.
	frame isDead
		ifTrue: 
			[sourcePresenter
				workspacePool: PoolDictionary new;
				namespaces: #();
				evaluationContext: nil.
			self setVariablesList: #().
			^self].
	temps := frame temps.
	tempCount := temps size.
	receiver := frame receiver.
	extra := frame stackWorkspace.
	class := receiver basicClass.
	varList := OrderedCollection new: 1 + tempCount + class instSize + extra.
	varList
		addLast: (((StackFrameSlot local: 'self' index: 0)
				beReadOnly;
				yourself) accessorFor: frame).

	"The evaluation context of the inspector becomes the frames receiver."
	inspectorPresenter evaluationContext: receiver.
	pool := inspectorPresenter
				newVariablePool;
				workspacePool.
	"Copy out the temporaries into the workspace variable pools so that they
	can be used in expressions in the source and inspector panes, and add them
	into the variables list."
	temps do: 
			[:each |
			| i |
			"The compiler temp map may contain entries for unused temps that are not allocated a slot in the frame - these have an index of 0"
			i := each third.
			i > 0
				ifTrue: 
					[| tempName accessor |
					tempName := each first.
					accessor := (StackFrameSlot local: tempName index: i) accessorFor: (frame getOuter: each second).
					pool at: tempName put: accessor value.
					varList addLast: accessor]].

	"Add any extra used stack slots onto the variables list"
	base := frame index.
	0 to: extra - 1
		do: [:i | (StackFrameSlot local: '_stack' , i printString index: base + i) accessorFor: frame].
	frame method evaluationPools
		ifNotNil: 
			[:evalPools |
			evalPools notEmpty
				ifTrue: 
					[evalPools first isNil ifFalse: [pool addAll: evalPools first associations].
					inspectorPresenter
						namespaces: (evalPools copyFrom: 2 to: evalPools size) , inspectorPresenter namespaces]].

	"Source presenter should share the same pools"
	sourcePresenter
		workspacePool: pool;
		namespaces: inspectorPresenter namespaces;
		evaluationContext: receiver.
	self setVariablesList: varList!

userBreak
	"Private - The user deliberately broke a process running in the debugger from the menu."

	<commandQuery: #canBreak>
	self assert: [process ~~ Processor activeProcess].
	self beAnimated: false.
	self
		beBroken;
		suspend.
	self debugState: 'User break'.
	topFrame := process topFrame.
	self populateStackModel!

validateUserInterface
	super validateUserInterface.
	self isRunning ifTrue: [^self].
	sourcePresenter isModified
		ifTrue: 
			[sourceInterval
				ifNotNil: 
					[self hideSourceInterval.
					sourceInterval := nil]]
		ifFalse: [sourceInterval ifNil: [self highlightCurrentExpression]]! !
!Tools.Debugger categoriesForMethods!
accept:methodSource:!operations!private! !
acceptItCommand!commands-mappings!private! !
acceptMethod!commands-actions!private! !
acceptNoRestart!commands-actions!private! !
addToCommandRoute:!commands-routing!public! !
allFrames!commands-actions!private! !
animatePause!accessing!private! !
beAnimated:!modes!private! !
beBroken!modes!private! !
beDisassembled:!private!testing! !
beRunning!modes!private! !
blockedRestartWarning:!operations!private! !
break:!operations!private! !
breakFrame:!operations!private! !
breakWhen:!accessing!private! !
browseDefinitionsCommand!commands-mappings!private! !
browseDefinitionsMatching:in:!private! !
browseDefinitionsOfSelector:in:!private! !
browseHierarchy!commands-actions!private! !
browseIt!commands-actions!public! !
browseMessageDefinitions!commands-actions!private! !
browseMessageReferences!browsing!commands-actions!private! !
browseMessages!commands-actions!private! !
browseMethodInheritanceChain!commands-actions!private! !
browseReferencesCommand!commands-mappings!private! !
browseReferencesMatching:in:!private! !
browseReferencesToLiteral:in:!browsing!private! !
browseSystem!commands-actions!public! !
browseVariableClass!commands-actions!private! !
buildParseTree!commands-actions!private! !
canBreak!private!testing! !
canImplementMessage!private!testing! !
canReturnFromFrame!private!testing! !
canRunToCursor!private!testing! !
canSaveMethod!private!testing! !
canStep!private!testing! !
canStepInto!private!testing! !
classForVariable:!public! !
clearCachedMethodInfo!helpers!private! !
continue:with:!operations!private! !
createComponents!initializing!public! !
createSchematicWiring!initializing!public! !
cursorIPRange!commands-actions!private! !
debugState:!private!updating! !
defaultHelpId!public! !
definitionsMenu!commands-menus!private! !
depth!accessing!private! !
depth:!accessing!private! !
displayFrame!private!updating! !
displayLocal:!private!updating! !
displaySource!private!updating! !
emitKeywordSignatureFor:in:on:!helpers!private! !
findBlockHome:!helpers!private! !
findHomeFrame:!helpers!private! !
frame!accessing!private! !
frameCalledFrom:!accessing!operations!private! !
frames!accessing!private! !
generateStubFor:inClass:!helpers!private! !
hasBrowsableMethod!private!testing! !
hasEditableMethodSelected!public!testing! !
hasEditableMethodsSelected!public!testing! !
hasFrameSelected!public! !
hasLiveFrame!private!testing! !
hasMethodSelected!public!testing! !
hasMoreFrames!private!testing! !
hasMutableVariableSelected!private!testing! !
hasOverrideSelected!private!testing! !
hasVariableSelected!private!testing! !
hideSourceInterval!private!updating! !
highlightCurrentExpression!private!updating! !
iconForVariable:!public! !
implementDNUMenu!commands-menus!private! !
initialize!initializing!private! !
inspectFrame!commands-actions!private! !
inspectItCommand!commands-mappings!private! !
inspectReferences!commands-actions!private! !
inspectVariable!commands-actions!private! !
isAnimating!private!testing! !
isDisassembled!private!testing! !
isFrameRestartable!private!testing! !
isInCompositeOp!private!testing! !
isMain:!accessing!private! !
isPaused!private!testing! !
isProcessLive!private!testing! !
isResumable!private!testing! !
isRunnable!private!testing! !
isRunning!private!testing! !
isTopFrameSelected!commands-actions!private! !
killProcess!commands-actions!private! !
mainView!accessing!private! !
makeDebugFrame:!helpers!private! !
markMethodAsUnbound:!helpers!private! !
moreFrames!commands-actions!private! !
nameForArgument:!helpers!private! !
newLocalsTreeWithRoots:!private!updating! !
nilVariable!commands-actions!private! !
onAboutToDisplayMenu:!event handling!public! !
onBreak:!event handling!private! !
onCloseRequested:!event handling!private! !
onExpressionEvaluated:!event handling!private! !
onFrameSelected!event handling!private! !
onFrameSelectionChanging:!event handling!private! !
onHalt:!event handling!private! !
onMethodRemoved:!event handling!private! !
onMethodUpdated:!event handling!private! !
onPromptToSaveChanges:!event handling!private! !
onStep:!event handling!private! !
onTempSelected!event handling!private! !
onTerminate!event handling!private! !
onVariableValueChanged!public! !
onViewClosed!event handling!private! !
onWalkback:topFrame:resumable:!event handling!private! !
parseContext!accessing!public! !
parseTree!accessing!private! !
performMethodsRefactoring:name:!private!refactoring! !
populateImplementMenu:!helpers!private! !
populateStackModel!private!updating! !
process:topFrame:!accessing!initializing!private! !
promptToSaveChanges!helpers!private! !
queryBrowseMessage:!commands-queries!private! !
queryImplementMenu:!commands-queries!private! !
queryMessagesMenu:!commands-queries!private! !
queryToggleAnimation:!commands-queries!private! !
referencesMenu!commands-menus!private! !
refreshFrame!private!updating! !
restartBlock:inFrame:!operations!private! !
restartBlockFrame:!operations!private! !
restartFrame!commands-actions!private! !
restartFrame:!operations!private! !
restartFrameWithFocus:!commands-actions!private! !
restartMethod!operations!private! !
restartMethodFrame:!operations!private! !
restartWithStubFor:inClass:!commands-actions!private! !
resumable:!modes!private! !
resume!operations!private! !
resumeProcess!commands-actions!private! !
return:fromFrame:!operations!private! !
return:toFrame:!operations!private! !
returnFromMessage!commands-actions!private! !
runDebuggedProcess!operations!private! !
runProcess!operations!private! !
runToCursor!commands-actions!private! !
saveNewMethod:!commands-actions!public! !
searchEnvironment!commands-actions!private! !
selectedMethod!accessing!public! !
selectedMethods!accessing!public! !
selectedNode!accessing!private! !
selectionIP!accessing!private! !
setInitialFocus!operations!public! !
setVariablesList:!private!updating! !
showCurrentExpression!private!updating! !
showNextStatement!commands-actions!private! !
showSourceInterval!private!updating! !
skipMaskFor:!helpers!private! !
source!accessing!private! !
sourceRangeAt:inTextMap:!helpers!private! !
step!operations!private! !
stepInFrame:!operations!private! !
stepInto!commands-actions!private! !
stepIntoBlock!commands-actions!private! !
stepOut!commands-actions!private! !
stepOver!commands-actions!private! !
stubTextFor:inClass:!helpers!private! !
suspend!operations!private! !
suspendProcess!operations!private! !
terminateOnClose!private!testing! !
terminateProcess!commands-actions!private! !
tipForVariable:!public! !
toggleAnimation!commands-actions!private! !
updateForBreakAt:!operations!private! !
updateTemporaries!private!updating! !
userBreak!commands-actions!private! !
validateUserInterface!operations!public! !
!

Tools.Debugger methodProtocol: #debugEventHandler attributes: #(#readOnly) selectors: #(#onBreak: #onHalt: #onStep: #onTerminate #onWalkback:topFrame:resumable:)!
Tools.Debugger methodProtocol: #variableMetadataProvider attributes: #() selectors: #(#classForVariable: #iconForVariable: #tipForVariable:)!

!Tools.Debugger class methodsFor!

animatePause
	"Answer the <Duration> that instances of the receiver will pause between each step when animating debugged processes."

	^AnimatePause!

animatePause: aDuration
	"Set the <Duration> that instances of the receiver will pause between each step when animating debugged processes."

	self animatePause = aDuration ifTrue: [^self].
	AnimatePause := aDuration.
	self persistOptions!

defaultAdditionalAccelerators
	^super defaultAdditionalAccelerators , #(#(#renameIt 'F2'))!

defaultStackDepth
	^DefaultStackDepth!

defaultStackDepth: anInteger
	DefaultStackDepth = anInteger ifTrue: [^self].
	DefaultStackDepth := anInteger.
	self persistOptions!

displayOn: aPuttableStream
	"Append to the <puttableStream> argument a String whose characters are a representation of the receiver that an end-user might want to see."

	aPuttableStream nextPutAll: 'Debugger'!

enableDynamicMenus
	"Answer whether dynamic menus can be used in instances of the receiver. These can be
	disabled to allow the dynamic menu framework to be debugged more easily."

	^EnableDynamicMenus!

enableDynamicMenus: aBoolean
	"Set whether dynamic menus can be used in instances of the receiver. These can be
	disabled to allow the dynamic menu framework to be debugged more easily."

	self enableDynamicMenus == aBoolean ifTrue: [^self].
	EnableDynamicMenus := aBoolean.
	self persistOptions!

icon
	"Answers an Icon that can be used to represent this class"

	^##(self) defaultIcon!

initialize
	"Initialize the class variables of the receiver

		self initialize
	"

	| debugEmptyBlock |
	DefaultStackDepth := 40.
	ShowWalkbacks := true.
	RunToCursorBehavior := #precise.
	SmalltalkSystem current registerTool: self.
	self interrupts do: [:each | ProcessorScheduler interruptSelectors at: each first put: each second].
	self initializeSkipTable.
	"Set up the debug empty block"
	VM registryAtIndex: 8 put: nil.
	debugEmptyBlock := VM emptyBlock method asDebugMethod value.
	debugEmptyBlock method beImmutableObject.
	VM registryAtIndex: 8 put: debugEmptyBlock!

initializeSkipTable
	"Initialize the table of methods to be skipped (in one way or another) when debugging.
		Debugger initializeSkipTable

	The idea of the skip table is to prevent the implementation of certain parts of the system
	(e.g. exception handling) from surfacing unduly when debugging - i.e. one doesn't want
	to repeatedly step through system code. The debugger may be instructed to step over
	individual methods in one of several ways according to the skip type, which is a bit mask:

		1	- Does not break in the method itself, but will step into subsidiary methods.
		2 	- Does not break in the method or any of its subsidiary methods.
	"

	"Note that most entries are made through membership of special method categories. We need to
	add here only those class/selector pairs where the actual method implementation is in a
	superclass"

	SkipTable := LookupTable new.
	self
		skipSelector: #valueWithArguments:
		of: EventMessageSend
		type: 1.
	"skipSelector: #at:ifAbsent: of: SharedLookupTable type: 0"
	DebuggerMethodCategory initialize!

interrupts
	^#(#(3 #onBreak:) #(4 #singleStep:))!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	| aspects |
	aspects := super publishedAspects.
	aspects removeKey: #reuseIfOpen.
	#(#showWalkbacks #restartOnMethodSave #enableDynamicMenus)
		do: [:each | aspects add: ((Aspect boolean: each)
						defaultValue: true;
						yourself)].
	aspects
		add: ((Aspect integer: #animatePause)
					defaultValue: 200 milliseconds;
					yourself);
		add: ((Aspect integer: #defaultStackDepth)
					defaultValue: 40;
					yourself);
		add: ((Aspect symbol: #runToCursorBehavior from: #(#precise #conservative))
					defaultValue: #precise;
					yourself).
	^aspects!

resource_Basic_debugger
	"Answer the literal data from which the 'Basic debugger' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	Tools.ViewComposer openOn: (UI.ResourceIdentifier class: self selector: #resource_Basic_debugger)
	"

	^#(#'!!STL' 5 985166 10 #{UI.STBViewProxy} #{UI.ShellView} 34 27 nil nil 8 #(13565952 65536) 416 nil 1245702 #{Graphics.ThemeColor} #toolBackground nil 551 nil nil nil 416 984838 #{UI.BorderLayout} 1 1 nil nil nil nil 410 #{UI.ContainerView} 34 15 nil 416 34 2 8 1140850688 131073 528 nil nil nil 7 nil nil nil 528 1376774 #{UI.ProportionalLayout} 138 #{Core.Dictionary} 34 2 1049094 #{Core.Association} 410 #{UI.Splitter} 34 12 nil 528 34 2 8 1140850688 1 688 nil nil nil 519 nil nil nil 1707078 1 #{UI.DraggableViewInteractor} 688 nil 1 #left nil nil nil 918022 #{Graphics.Point} 1 1 786 9 9 nil 800 nil 1310982 #{Core.MessageSequence} 34 1 1049350 #{Core.MessageSend} #createAt:extent: 34 2 786 1 337 786 1169 11 688 1179910 #{OS.WINDOWPLACEMENT} 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 168 0 0 0 72 2 0 0 173 0 0 0] 8 #() 786 193 193 nil 27 1 658 410 #{UI.ReferenceView} 34 14 nil 528 34 2 8 1140916224 131073 1056 nil nil nil 23 461638 4 #{UI.Menu} nil true 34 17 1180742 2 #{UI.CommandMenuItem} 1 1377606 4 #{UI.CommandDescription} #accept 8 '&Accept' 1 1 nil nil nil 1170 1 1202 #acceptNoRestart 8 'Acce&pt No Restart' 1 1 nil nil nil 1179974 1 #{UI.DividerMenuItem} 4097 1170 1 1202 #runToCursor 8 '&Run to Cursor' 1 1 nil nil nil 1170 1 1202 #toggleBreakpoint 8 'T&oggle Breakpoint' 1 1 nil nil nil 1170 1 1202 #toggleDisassembly 8 'Disasse&mbly' 1 1 nil nil nil 1298 4097 1122 nil true 34 9 1170 1 1202 #undo 8 '&Undo' 1 1 nil nil nil 1298 4097 1170 1 1202 #cutSelection 8 'Cu&t' 1 1 nil nil nil 1170 1 1202 #copySelection 8 '&Copy' 1 1 nil nil nil 1170 1 1202 #pasteClipboard 8 '&Paste' 1 1 nil nil nil 1170 1 1202 #clearSelection 8 'De&lete' 1 1 nil nil nil 1298 4097 1170 1 1202 #selectAll 8 '&Select All' 1 1 nil nil nil 1170 1 1202 #clear 8 'Cle&ar' 1 1 nil nil nil 8 '&Edit' nil 134217729 nil nil nil nil nil 1298 4097 1170 1 1202 #browseIt 8 'Bro&wse It' 1 1 nil nil nil 1170 1 1202 #displayIt 8 '&Display It' 1 1 nil nil nil 1170 1 1202 #printIt 8 '&Print It' 1 1 852806 4 #{Graphics.Icon} nil true 2819078 #{Graphics.ImageFromStringResourceInitializer} 8 'PrintIt.ico' 2490894 #{Kernel.STBExternalResourceLibraryProxy} 8 'dolphindr8.dll' nil 65541 nil nil nil 1170 1 1202 #evaluateIt 8 'E&valuate It' 1 1 nil nil nil 1170 1 1202 #debugIt 8 'Deb&ug It' 1 1 nil nil nil 1170 1 1202 #inspectIt 8 '&Inspect It' 1 1 nil nil nil 1298 4097 1122 nil true 34 2 1170 1 1202 #browseDefinitions 8 '&Definitions…' 1 1 nil nil nil 1170 1 1202 #browseReferences 8 '&References…' 1 1 nil nil nil 8 '&Browse' nil 134217729 nil nil nil nil nil 8 '&Workspace' nil 134217729 nil nil nil nil nil nil nil 1056 1376838 1 #{UI.ResourceIdentifier} #{Tools.MethodWorkspace} #resource_Debugger_source nil 834 34 2 882 #createAt:extent: 34 2 786 1 347 786 1169 337 1056 882 #contextMenu: 34 1 1136 1056 962 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 173 0 0 0 72 2 0 0 85 1 0 0] 8 #() 1024 nil 27 3 true 170 192 34 2 1056 8 'source' nil 834 34 1 882 #createAt:extent: 34 2 786 1 1 786 1169 683 528 962 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 85 1 0 0] 34 3 410 #{UI.ContainerView} 34 15 nil 528 34 2 8 1140850688 131073 2912 nil nil nil 7 nil nil nil 2912 594 138 #{Core.Dictionary} 34 5 658 410 #{UI.Splitter} 34 12 nil 2912 34 2 8 1140850688 1 3040 nil nil nil 519 nil nil nil 754 3040 nil 1 #left nil nil nil 800 816 nil 800 nil 834 34 1 882 #createAt:extent: 34 2 786 511 1 786 11 337 3040 962 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 4 1 0 0 168 0 0 0] 8 #() 1024 nil 27 1 658 410 #{UI.ListBox} 34 17 nil 2912 34 2 8 1144062209 1 3280 787270 2 #{UI.ListModel} 138 144 2704 nil 1769478 #{Kernel.IdentitySearchPolicy} 917510 #{Graphics.Color} #default nil 7 1122 nil true 34 11 1170 1 1202 #stepInto 8 'Step &Into' 1269 5 nil nil nil 1170 1 1202 #stepOver 8 'Step O&ver' 1267 5 nil nil nil 1170 1 1202 #stepOut 8 'Step O&ut' 5365 1 nil nil nil 1170 1 1202 #returnFromMessage 8 'Retur&n …' 1 1 nil nil nil 1170 1 1202 #restartFrame 8 '&Restart' 1 1 nil nil nil 1122 nil true 8 #() 8 'Im&plement in' #implementDNUMenu 134217729 nil nil nil nil nil 1298 4097 1170 1 1202 #moreFrames 8 '&More' 1 1 nil nil nil 1170 1 1202 #allFrames 8 'A&ll' 1 1 nil nil nil 1298 4097 1122 nil true 34 4 1170 1 1202 #browseDefinitions 8 '&Definitions' 1 1 nil nil nil 1170 1 1202 #browseReferences 8 '&References' 1 1 nil nil nil 1170 1 1202 #browseMessages 8 '&Messages…' 1 1 nil nil nil 1170 1 1202 #browseMethodInheritanceChain 8 'In&heritance Chain' 1 1 nil nil nil 8 '&Browse' nil 134217729 nil nil nil nil nil 8 '&Debug' nil 134217729 nil nil nil nil nil nil nil 3280 nil 8 1814640640 786950 #{Core.Message} #displayString 2704 8 #() false 834 34 3 882 #createAt:extent: 34 2 786 1 1 786 511 337 3280 882 #contextMenu: 34 1 3456 3280 882 #horizontalExtent: 8 #(0) 3280 962 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 255 0 0 0 168 0 0 0] 8 #() 1024 nil 27 852486 #{Core.Fraction} 3305 675 658 410 #{UI.Splitter} 34 12 nil 2912 34 2 8 1140850688 1 4480 nil nil nil 519 nil nil nil 754 4480 nil 1 #left nil nil nil 800 816 nil 800 nil 834 34 1 882 #createAt:extent: 34 2 786 739 1 786 11 337 4480 962 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 113 1 0 0 0 0 0 0 118 1 0 0 168 0 0 0] 8 #() 1024 nil 27 1 658 410 #{UI.ReferenceView} 34 14 nil 2912 34 2 8 1140916224 131073 4720 nil nil nil 23 nil nil nil 4720 2514 #{Tools.SmalltalkWorkspace} #resource_Default_view nil 834 34 1 882 #createAt:extent: 34 2 786 749 1 786 421 337 4720 962 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 118 1 0 0 0 0 0 0 72 2 0 0 168 0 0 0] 2704 1024 nil 27 9 658 410 #{UI.TreeView} 34 27 nil 2912 34 2 8 1140916775 1 4944 787526 3 #{UI.TreeModel} nil 3408 721670 #{UI.TreeNode} nil nil nil 170 192 2704 3440 nil 7 1122 nil true 34 2 1170 1 1202 #inspectIt 8 '&Inspect' 1 1 nil nil nil 1170 1 1202 #inspectReferences 8 'Inspect &References' 1 1 nil nil nil 8 '&Inspect' nil 134217729 nil nil nil nil nil nil nil 4944 nil 8 1814826960 4178 #name 8 #() 4178 #valueImage 5264 1639750 1 #{Graphics.IconImageManager} nil nil nil nil nil 170 176 2704 nil #noIcons 1 170 192 2704 834 34 2 882 #createAt:extent: 34 2 786 521 1 786 219 337 4944 882 #contextMenu: 34 1 5088 4944 962 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 4 1 0 0 0 0 0 0 113 1 0 0 168 0 0 0] 8 #() 1024 nil 27 4434 1415 675 false 170 192 34 6 3280 8 'stack' 4720 8 'inspector' 4944 8 'temps' nil 834 34 1 882 #createAt:extent: 34 2 786 1 1 786 1169 337 2912 962 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 168 0 0 0] 34 5 3280 3040 4944 4480 4720 1024 nil 27 688 1056 1024 nil 27 170 192 34 2 528 8 'main' nil 658246 4 #{UI.MenuBar} nil true 34 7 1122 nil true 34 8 1170 1 1202 #fileNew 8 '&New' 9373 1 nil nil nil 1170 1 1202 #fileOpen 8 '&Open…' 9375 1 nil nil nil 1170 1 1202 #fileFileIn 8 '&File In…' 1 1 nil nil nil 1298 4097 1170 1 1202 #saveImage 8 'Sa&ve Image' 1 1 nil nil nil 1170 1 1202 #smalltalkExit 8 'E&xit Dolphin' 1 1 nil nil nil 1298 4097 1170 1 1202 #exit 8 'Close' 17639 1 nil nil nil 8 '&File' nil 134217729 nil nil 55769 nil nil 1122 nil true 34 13 1170 1 1202 #undo 8 '&Undo' 9397 1 nil nil nil 1298 4097 1170 1 1202 #cutSelection 8 'Cu&t' 9393 1 nil nil nil 1170 1 1202 #copySelection 8 '&Copy' 9351 1 nil nil nil 1170 1 1202 #pasteClipboard 8 '&Paste' 9389 1 nil nil nil 1170 1 1202 #editDelete 8 '&Delete' 1 1 nil nil nil 1122 nil true 34 2 1170 1 1202 #reformatSource 8 '&Source' 9391 1 nil nil nil 1170 1 1202 #reformatComment 8 '&Comment' 9367 1 nil nil nil 8 'Ref&ormat' nil 134217729 nil nil 55785 nil nil 1298 4097 1170 1 1202 #selectAll 8 'Select &All' 9347 1 nil nil nil 1298 4097 1170 1 1202 #editFind 8 '&Find…' 9357 1 nil nil nil 1170 1 1202 #findNext 8 'Find &Next' 1253 1 nil nil nil 1170 1 1202 #findReplace 8 '&Replace…' 9361 1 nil nil nil 8 '&Edit' nil 134217729 nil nil 55795 nil nil 1122 nil true 34 18 1170 1 1202 #browseIt 8 '&Browse It' 9349 1 nil nil nil 1170 1 1202 #displayIt 8 '&Display It' 9353 1 nil nil nil 1170 1 1202 #printIt 8 '&Print It' 9377 1 nil nil nil 1170 1 1202 #evaluateIt 8 '&Evaluate It' 9355 1 nil nil nil 1170 1 1202 #inspectIt 8 '&Inspect It' 9363 1 nil nil nil 1170 1 1202 #debugIt 8 'Deb&ug It' 1 1 nil nil nil 1170 1 1202 #fileItIn 8 'Fi&le It In' 1 1 nil nil nil 1298 4097 1170 1 1202 #browseDefinitions 8 'Defi&nitions…' 1271 1 nil nil nil 1170 1 1202 #browseReferences 8 'Re&ferences…' 5367 1 nil nil nil 1298 4097 1170 2097153 1202 #accept 8 '&Accept' 9383 1 nil nil nil 1170 1 1202 #reformatAccept 8 'Refor&mat/Accept' 13479 1 nil nil nil 1170 1 1202 #acceptNoRestart 8 'A&ccept No Restart' 1 1 nil nil nil 1298 4097 1122 nil true 34 13 1170 1 1202 #renameVariable 8 'Re&name <1d>…' 1 1 nil nil nil 1298 4097 1170 1 1202 #extractToTemporary 8 'Extract to &Temporary…' 9385 1 nil nil nil 1170 1 1202 #extractMethod 8 'E&xtract Method…' 9371 1 nil nil nil 1170 1 1202 #extractToComponent 8 'Extract to &Component…' 1 1 nil nil nil 1170 1 1202 #inlineMessage 8 'Inline &Message' 13467 1 nil nil nil 1298 4097 1170 1 1202 #inlineTemporary 8 '&Inline Temporary' 13481 1 nil nil nil 1170 1 1202 #moveTempToInnerScope 8 'Move to Inner &Scope' 9655 1 nil nil nil 1170 1 1202 #convertTempToInstVar 8 'Con&vert to Instance Variable' 1 1 nil nil nil 1298 4097 1170 1 1202 #inlineParameter 8 'In&line Parameter' 1 1 nil nil nil 1170 1 1202 #removeParameter 8 'Remove &Parameter' 1 1 nil nil nil 8 '&Refactorings' #codeRefactoringsMenu 134217729 nil nil 55841 nil nil 1298 4097 1122 nil true 34 7 1170 1 1202 #toggleAutoCompletion 8 '&Auto-complete' 1 1 nil nil nil 1170 1 1202 #toggleIndentationGuides 8 'Indentation &Guides' 1 1 nil nil nil 1170 1 1202 #toggleLineEndings 8 'Line &Endings' 1 1 nil nil nil 1170 1 1202 #toggleLineNumbers 8 'Line N&umbers' 1 1 nil nil nil 1170 1 1202 #toggleStyling 8 '&Syntax Coloring' 1 1 nil nil nil 1170 1 1202 #toggleWhitespace 8 'W&hitespace' 1 1 nil nil nil 1170 1 1202 #toggleWordWrap 8 '&Word Wrap' 1 1 nil nil nil 8 '&Options' nil 134217729 nil nil 55857 nil nil 8 '&Workspace' nil 134217729 nil nil 55859 nil nil 1122 nil true 34 22 1170 1 1202 #resumeProcess 8 'G&o/detach' 1257 1 nil nil nil 1170 1 1202 #toggleAnimation 8 '&Animate' 1 1 nil nil nil 1170 1 1202 #terminateProcess 8 '&Terminate' 5353 1 nil nil nil 1170 1 1202 #killProcess 8 '&Kill' 1 1 nil nil nil 1170 1 1202 #userBreak 8 '&Break' 1 1 nil nil nil 1298 4097 1170 1 1202 #stepInto 8 'Step &Into' 1269 5 nil nil nil 1170 1 1202 #stepOver 8 'Step O&ver' 1267 5 nil nil nil 1170 1 1202 #stepOut 8 'Step O&ut' 5365 1 nil nil nil 1170 1 1202 #runToCursor 8 'Run to &Cursor' 9459 1 nil nil nil 1170 1 1202 #runProcess 8 '&Run' 9449 1 nil nil nil 1170 1 1202 #restartFrame 8 'R&estart' 13545 1 nil nil nil 1170 1 1202 #returnFromMessage 8 'Retur&n …' 1 1 nil nil nil 1298 4097 1122 nil true 8 #() 8 'Im&plement in' #implementDNUMenu 134217729 nil nil 55885 nil nil 1122 nil true 34 14 1122 nil true 34 3 1170 1 1202 #renameMethod 8 'All…' 1 1 nil nil nil 1170 1 1202 #renameMethodInHierarchy 8 'In &Hierarchy…' 1 1 nil nil nil 1170 1 1202 #renameMethodInPackage 8 'In &Package…' 1 1 nil nil nil 8 'Re&name' nil 134217729 nil nil 55893 nil nil 1170 1 1202 #removeMethods 8 'Rem&ove' 1 1 nil nil nil 1298 4097 1170 1 1202 #addParameter 8 'Add &Parameter…' 1 1 nil nil nil 1122 nil true 8 #() 8 'Remo&ve Parameter' #removeParameterMenu 134217729 nil nil 55899 nil nil 1122 nil true 8 #() 8 'Rena&me Parameter' #renameParameterMenu 134217729 nil nil 55901 nil nil 1122 nil true 8 #() 8 '&Inline Parameter' #inlineParameterMenu 134217729 nil nil 55903 nil nil 1298 4097 1122 nil true 8 #() 8 'Rename &Temporary' #renameTempMenu 134217729 nil nil 55905 nil nil 1122 nil true 8 #() 8 'Convert Temp to Inst. Var.' #convertTempToInstVarMenu 134217729 nil nil 55907 nil nil 1298 4097 1170 1 1202 #inlineAllSelfSends 8 'Inline &Self Sends' 1 1 nil nil nil 1170 1 1202 #pushUpMethods 8 'Push &Up' 1 1 nil nil nil 1170 1 1202 #pushDownMethods 8 'Push &Down' 1 1 nil nil nil 8 'Re&factorings' #methodRefactoringsMenu 134217729 nil nil 55915 nil nil 1298 4097 1170 1 1202 #toggleBreakpoint 8 'Toggle Breakpoint' 1265 1 nil nil nil 1170 1 1202 #toggleDisassembly 8 'Disasse&mbly' 9461 1 nil nil nil 1170 1 1202 #showNextStatement 8 'Show Ne&xt Statement' 17621 1 nil nil nil 1298 4097 1122 nil true 34 2 1170 1 1202 #moreFrames 8 '&More' 1 1 nil nil nil 1170 1 1202 #allFrames 8 'A&ll' 1 1 nil nil nil 8 'Call &Stack' nil 134217729 nil nil 55927 nil nil 8 '&Debug' nil 134217729 nil nil 55929 nil nil 1122 nil true 8 #() 8 '&Tools' #toolsMenu 134217729 nil nil 55931 nil nil 1122 nil true 8 #() 8 'Wi&ndow' #windowMenu 134217729 nil nil 55933 nil nil 1122 nil true 34 15 1170 1 1202 #helpContents 8 '&Contents' 1025 1 nil nil nil 1170 1 1202 #help 8 'On this &Tool' 1249 1 nil nil nil 1170 1 1202 #helpWhatsThis 8 'What''s This?' 5345 1 nil nil nil 1298 4097 1170 1 1202 #learnSmalltalk 8 'Learn Smalltalk' 1 1 nil nil nil 1298 4097 1170 1 1202 #helpWhatsNew 8 'What''s &New' 1 1 nil nil nil 1170 1 1202 #helpGuidedTour 8 '&Guided Tour' 1 1 nil nil nil 1170 1 1202 #helpTutorials 8 'Tutorials' 1 1 nil nil nil 1298 4097 1170 1 1202 #objectArtsHomePage 8 'Object Arts Homepage' 1 1 nil nil nil 1170 1 1202 #dolphinNewsgroup 8 'Dolphin Newsgroup/Forum' 1 1 nil nil nil 1170 1 1202 #dolphinWikiWeb 8 'Dolphin WikiWeb' 1 1 nil nil nil 1298 4097 1170 1 1202 #aboutDolphin 8 '&About Dolphin Smalltalk' 1 1 nil nil nil 8 '&Help' #help 134217729 nil nil 55957 nil nil 8 '' nil 134217729 nil nil nil nil nil nil nil nil 1 nil nil nil nil 1 nil nil 834 34 1 882 #createAt:extent: 34 2 786 12287 21 786 1201 801 416 962 8 #[44 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 23 0 0 10 0 0 0 87 26 0 0 154 1 0 0] 34 1 528 1024 nil 27)!

resource_Default_view
	"Answer the literal data from which the 'Default view' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	Tools.ViewComposer openOn: (UI.ResourceIdentifier class: self selector: #resource_Default_view)
	"

	^#(#'!!STL' 5 985166 10 #{UI.STBViewProxy} #{UI.ShellView} 34 27 nil nil 8 #(13565952 65536) 416 nil 1245702 #{Graphics.ThemeColor} #toolBackground nil 551 nil nil nil 416 984838 #{UI.BorderLayout} 1 1 410 #{UI.Toolbar} 34 28 nil 416 34 2 8 1140853580 1 528 nil nil nil 519 nil nil nil 528 917510 #{Graphics.Color} #default 8 1815075056 170 192 34 10 410 #{UI.ReferenceView} 34 14 nil 528 34 2 8 1140850688 131073 672 nil nil nil 7 nil nil nil 672 1376838 1 #{UI.ResourceIdentifier} #{UI.Toolbar} #resource_Debugger_tools nil 1310982 #{Core.MessageSequence} 34 1 1049350 #{Core.MessageSend} #createAt:extent: 34 2 918022 #{Graphics.Point} 247 51 866 431 51 672 1179910 #{OS.WINDOWPLACEMENT} 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 123 0 0 0 25 0 0 0 82 1 0 0 50 0 0 0] 8 #() 866 193 193 nil 27 8 'debuggerTools' 410 #{UI.ReferenceView} 34 14 nil 528 34 2 8 1140850688 131073 1008 nil nil nil 7 nil nil nil 1008 738 #{UI.Toolbar} #resource_Smalltalk_tools nil 770 34 1 818 #createAt:extent: 34 2 866 63 1 866 553 51 1008 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 31 0 0 0 0 0 0 0 51 1 0 0 25 0 0 0] 960 976 nil 27 8 'smalltalkTools' 410 #{UI.ReferenceView} 34 14 nil 528 34 2 8 1140850688 131073 1232 nil nil nil 7 nil nil nil 1232 738 #{UI.Toolbar} #resource_Image_tools nil 770 34 1 818 #createAt:extent: 34 2 866 1 1 866 63 51 1232 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 31 0 0 0 25 0 0 0] 960 976 nil 27 8 'imageTools' 410 #{UI.ReferenceView} 34 14 nil 528 34 2 8 1140850688 131073 1456 nil nil nil 7 nil nil nil 1456 738 #{UI.Toolbar} #resource_Search_tools nil 770 34 1 818 #createAt:extent: 34 2 866 615 1 866 437 51 1456 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 51 1 0 0 0 0 0 0 13 2 0 0 25 0 0 0] 960 976 nil 27 8 'searchTools' 410 #{UI.ReferenceView} 34 14 nil 528 34 2 8 1140850688 131073 1680 nil nil nil 7 nil nil nil 1680 738 #{UI.Toolbar} #resource_Workspace_tools nil 770 34 1 818 #createAt:extent: 34 2 866 1 51 866 247 51 1680 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 25 0 0 0 123 0 0 0 50 0 0 0] 960 976 nil 27 8 'workspaceTools' nil nil nil 170 192 960 138 144 960 nil nil 1 nil 866 33 33 nil nil 852806 1 #{UI.FlowLayout} 1 1 1 770 34 1 818 #createAt:extent: 34 2 866 1 1 866 1169 101 528 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 50 0 0 0] 34 5 1232 1008 1456 1680 672 976 nil 29 nil nil nil 410 #{UI.ContainerView} 34 15 nil 416 34 2 8 1140850688 131073 2128 nil nil nil 7 nil nil nil 2128 1376774 #{UI.ProportionalLayout} 138 #{Core.Dictionary} 34 2 1049094 #{Core.Association} 410 #{UI.ReferenceView} 34 14 nil 2128 34 2 8 1140916224 131073 2288 nil nil nil 23 nil nil nil 2288 738 #{Tools.MethodWorkspace} #resource_Debugger_source nil 770 34 1 818 #createAt:extent: 34 2 866 1 297 866 1169 287 2288 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 148 0 0 0 72 2 0 0 35 1 0 0] 960 976 nil 27 3 2258 410 #{UI.Splitter} 34 12 nil 2128 34 2 8 1140850688 1 2512 nil nil nil 519 nil nil nil 1707078 1 #{UI.DraggableViewInteractor} 2512 nil 1 #left nil nil nil 866 1 1 866 9 9 nil 2608 nil 770 34 1 818 #createAt:extent: 34 2 866 1 287 866 1169 11 2512 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 143 0 0 0 72 2 0 0 148 0 0 0] 8 #() 976 nil 27 1 true 170 192 34 2 2288 8 'source' nil 770 34 1 818 #createAt:extent: 34 2 866 1 101 866 1169 583 2128 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 50 0 0 0 72 2 0 0 85 1 0 0] 34 3 410 #{UI.ContainerView} 34 15 nil 2128 34 2 8 1140850688 131073 2976 nil nil nil 7 nil nil nil 2976 2194 138 #{Core.Dictionary} 34 3 2258 410 #{UI.Splitter} 34 12 nil 2976 34 2 8 1140850688 1 3104 nil nil nil 519 nil nil nil 2578 3104 nil 1 #left nil nil nil 2608 2624 nil 2608 nil 770 34 1 818 #createAt:extent: 34 2 866 521 1 866 11 287 3104 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 4 1 0 0 0 0 0 0 9 1 0 0 143 0 0 0] 8 #() 976 nil 27 1 2258 410 #{UI.ListBox} 34 17 nil 2976 34 2 8 1144062209 1025 3344 787270 2 #{UI.ListModel} 138 144 960 nil 1769478 #{Kernel.IdentitySearchPolicy} 608 nil 7 461638 4 #{UI.Menu} nil true 34 13 1180742 2 #{UI.CommandMenuItem} 1 1377606 4 #{UI.CommandDescription} #stepInto 8 'Step &Into' 1269 5 852806 4 #{Graphics.Icon} nil true 2819078 #{Graphics.ImageFromStringResourceInitializer} 8 'StepInto.ico' 2490894 #{Kernel.STBExternalResourceLibraryProxy} 8 'dolphindr8.dll' nil 65541 nil nil nil 3538 1 3570 #stepOver 8 'Step O&ver' 1267 5 3618 nil true 3650 8 'StepOver.ico' 3712 65541 nil nil nil 3538 1 3570 #stepOut 8 'Step O&ut' 5365 1 3618 nil true 3650 8 'StepOut.ico' 3712 65541 nil nil nil 3538 1 3570 #restartFrame 8 '&Restart' 1 1 1378630 2 #{Graphics.TextTileIcon} $\x2B6E 8 'Cambria' nil nil nil nil 1 nil nil nil nil 3538 1 3570 #returnFromMessage 8 'Retur&n …' 1 1 3986 $\x23CE 8 'Cambria' nil nil nil nil 1 nil nil nil nil 1179974 1 #{UI.DividerMenuItem} 4097 3490 nil true 8 #() 8 'Im&plement in' #implementDNUMenu 134217729 nil nil nil nil nil 3490 nil true 34 15 3538 1 3570 #renameMethod 8 'Re&name…' 1 1 nil nil nil 3538 1 3570 #renameMethodReferences 8 'Rename Re&ferences…' 1 1 nil nil nil 4114 4097 3538 1 3570 #addParameter 8 'Add &Parameter…' 1 1 nil nil nil 3490 nil true 8 #() 8 'Remo&ve Parameter' #removeParameterMenu 134217729 nil nil nil nil nil 3490 nil true 8 #() 8 'Rena&me Parameter' #renameParameterMenu 134217729 nil nil nil nil nil 3490 nil true 8 #() 8 '&Inline Parameter' #inlineParameterMenu 134217729 nil nil nil nil nil 4114 4097 3490 nil true 8 #() 8 'Rename &Temporary' #renameTempMenu 134217729 nil nil nil nil nil 3490 nil true 8 #() 8 'Convert Temp to Inst. Var.' #convertTempToInstVarMenu 134217729 nil nil nil nil nil 4114 4097 3538 1 3570 #inlineAllSelfSends 8 'Inline &Self Sends' 1 1 nil nil nil 3538 1 3570 #pushUp 8 'Push &Up' 1 1 nil nil nil 3538 1 3570 #pushDown 8 'Push &Down' 1 1 nil nil nil 3538 1 3570 #moveMethod 8 'Move to &Component…' 1 1 nil nil nil 8 'Refactorin&gs' #methodRefactoringsMenu 134217729 3618 nil true 3650 8 'Refactoring.ico' 3712 65541 nil nil nil nil nil 4114 4097 3538 1 3570 #moreFrames 8 '&More' 1 1 nil nil nil 3538 1 3570 #allFrames 8 'A&ll' 1 1 nil nil nil 4114 4097 3490 nil true 34 5 3490 nil true 34 1 3538 1 3570 #browseDefinitions 8 'Browse Defi&nitions' 247 1 nil nil nil 8 '&Definitions Of' #definitionsMenu 134217729 nil nil nil nil nil 3490 nil true 34 1 3538 1 3570 #browseReferences 8 'Browse &References' 4343 1 nil nil nil 8 '&References To' #referencesMenu 134217729 nil nil nil nil nil 3538 1 3570 #browseMethodInheritanceChain 8 '&Inheritance Chain' 1 1 nil nil nil 4114 4097 3538 1 3570 #browseMethodHistory 8 '&Change History in Image' 1 1 3618 nil true 3650 8 'MethodHistory.ico' 3712 65541 nil nil nil 8 '&Browse' nil 134217729 nil nil nil nil nil 8 '&Debug' nil 134217729 nil nil nil nil nil nil nil 3344 nil 8 1814640640 786950 #{Core.Message} #displayString 960 8 #() nil 770 34 3 818 #createAt:extent: 34 2 866 1 1 866 521 287 3344 818 #contextMenu: 34 1 3504 3344 818 #horizontalExtent: 8 #(0) 3344 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 4 1 0 0 143 0 0 0] 8 #() 976 nil 27 852486 #{Core.Fraction} 3305 675 2258 410 #{UI.ContainerView} 34 15 nil 2976 34 2 8 1140850688 131073 5776 nil nil nil 7 nil nil nil 5776 2194 170 176 34 4 410 #{UI.ListTreeView} 34 59 nil 5776 34 2 8 1140953421 1025 5888 3410 138 144 960 nil 3472 608 nil 7 3490 nil true 34 8 3538 1 3570 #inspectIt 8 '&Inspect' 1 1 3618 nil true 3650 8 'BasicInspector.ico' 3712 65541 nil nil nil 3538 1 3570 #inspectReferences 8 'Inspect &References' 1 1 nil nil nil 4114 4097 3538 1 3570 #nilVariable 8 'Set to &Nil' 1 1 nil nil nil 4114 4097 3538 1 3570 #browseVariableClass 8 '&Browse Class' 1 1 nil nil nil 4114 4097 3538 1 3570 #refreshVariables 8 'Re&fresh' 1 1 nil nil nil 8 '&Inspect' nil 134217729 nil nil nil nil nil nil nil 5888 nil 8 1815049392 5474 #name 8 #() 5474 #valueImage 6400 1639750 1 #{Graphics.IconImageManager} nil nil nil nil nil nil 138 144 34 2 1117254 5 #{UI.ListViewColumn} 8 'Variable' 361 #left 5474 #name 6400 1246566 3 #{Kernel.BlockClosure} 0 nil 1639718 #{Kernel.CompiledExpression} 2 1 6560 8 'doIt' 8 '[:a :b | a name <= b name]' 8 #[30 105 226 0 226 32 130 106] #name 6576 7 513 nil nil nil 5888 5474 #valueImage 6400 1 nil nil 6498 8 'Value' 271 #left 5474 #valueDebugText 8 #() 5474 #<= 8 #() nil nil 5888 nil 3 nil nil #report 8 #() nil 131143 nil 1 nil nil 201 nil nil nil nil nil nil nil nil nil nil nil nil false 1247046 3 #{UI.VirtualTreeModel} nil 3472 138 144 960 6562 0 nil 1377574 #{Kernel.CompiledMethod} 2 3 6800 #defaultGetChildrenBlock 207889891 8 #[30 105 226 0 106] #children 6848 7 257 nil 6562 0 nil 6866 2 3 6800 #defaultGetParentBlock 207895587 8 #[30 105 226 0 106] #parent 6912 7 257 nil 6562 0 nil 6866 2 3 6800 #defaultHasChildrenBlock 207901123 8 #[252 1 0 0 1 4 0 65 176 159 106 105] #childrenOf: #notEmpty 17 257 6816 6562 0 nil 6866 1 83886083 6800 #defaultFilterBlock 207883619 8 #[29 105 17 157 106] 7008 7 257 nil nil 138 #{Core.IdentitySet} 960 138 #{Core.IdentitySet} 960 45 1 nil nil nil nil nil nil nil 770 34 3 818 #createAt:extent: 34 2 866 1 1 866 639 207 5888 818 #contextMenu: 34 1 5984 5888 818 #text: 34 1 8 'Variable' 5888 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 63 1 0 0 103 0 0 0] 8 #() 976 nil 2029 7 410 #{UI.ReferenceView} 34 14 nil 5776 34 2 8 1140916224 131073 7312 nil nil nil 23 nil nil nil 7312 738 #{Tools.SmalltalkWorkspace} #resource_Default_view nil 770 34 1 818 #createAt:extent: 34 2 866 1 217 866 639 71 7312 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 108 0 0 0 63 1 0 0 143 0 0 0] 960 976 nil 27 3 true 170 192 34 4 5888 8 'temps' 7312 8 'inspector' 1180166 #{Graphics.Rectangle} 866 1 1 866 1 1 770 34 1 818 #createAt:extent: 34 2 866 531 1 866 639 287 5776 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 9 1 0 0 0 0 0 0 72 2 0 0 143 0 0 0] 34 3 5888 410 #{UI.Splitter} 34 12 nil 5776 34 2 8 1140850688 1 7792 nil nil nil 519 nil nil nil 2578 7792 nil 1 #left nil nil nil 2608 2624 nil 2608 nil 770 34 1 818 #createAt:extent: 34 2 866 1 207 866 639 11 7792 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 103 0 0 0 63 1 0 0 108 0 0 0] 8 #() 976 nil 27 7312 976 nil 27 13 false 170 192 34 2 3344 8 'stack' nil 770 34 1 818 #createAt:extent: 34 2 866 1 1 866 1169 287 2976 914 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 143 0 0 0] 34 3 3344 3104 5776 976 nil 27 2512 2288 976 nil 27 170 192 34 4 528 8 'toolbar' 2128 8 'main' nil 658246 4 #{UI.MenuBar} nil true 34 8 3490 nil true 34 8 3538 1 3570 #fileNew 8 '&New Workspace' 9373 1 3618 nil true 3650 8 'NewWorkspace.ico' 3712 65541 nil nil nil 3538 1 3570 #fileOpen 8 '&Open Workspace…' 9375 1 3618 nil true 3650 8 'OpenWorkspace.ico' 3712 65541 nil nil nil 3538 1 3570 #fileFileIn 8 '&File In…' 1 1 nil nil nil 4114 4097 3538 1 3570 #saveImage 8 'Sa&ve Image' 1 1 3618 nil true 3650 8 'Snapshot.ico' 3712 65541 nil nil nil 3538 1 3570 #smalltalkExit 8 'E&xit Dolphin' 1 1 3618 nil true 3650 8 'PowerSwitch.ico' 3712 65541 nil nil nil 4114 4097 3538 1 3570 #exit 8 'Close' 17639 1 3986 $\x2716 nil nil nil nil nil 1 nil nil nil nil 8 '&File' nil 134217729 nil nil 55237 nil nil 3490 nil true 34 13 3538 1 3570 #undo 8 '&Undo' 9397 1 3618 nil true 3650 8 'EditUndo.ico' 3712 65541 nil nil nil 4114 4097 3538 1 3570 #cutSelection 8 'Cu&t' 9393 1 3618 nil true 3650 8 'EditCut.ico' 3712 65541 nil nil nil 3538 1 3570 #copySelection 8 '&Copy' 9351 1 3618 nil true 3650 8 'EditCopy.ico' 3712 65541 nil nil nil 3538 1 3570 #pasteClipboard 8 '&Paste' 9389 1 3618 nil true 3650 8 'EditPaste.ico' 3712 65541 nil nil nil 3538 1 3570 #editDelete 8 '&Delete' 1 1 3618 nil true 3650 8 'EditClear.ico' 3712 65541 nil nil nil 3490 nil true 34 2 3538 1 3570 #reformatSource 8 '&Source' 9391 1 nil nil nil 3538 1 3570 #reformatComment 8 '&Comment' 9367 1 nil nil nil 8 'Ref&ormat' nil 134217729 nil nil 55253 nil nil 4114 4097 3538 1 3570 #selectAll 8 'Select &All' 9347 1 nil nil nil 4114 4097 3538 1 3570 #editFind 8 '&Find…' 9357 1 3618 nil true 2425862 #{Graphics.ImageFromResourceInitializer} 47 983302 #{OS.ShellLibrary} 65541 nil nil nil 3538 1 3570 #findNext 8 'Find &Next' 1253 1 3618 nil true 3650 8 'FindNext.ico' 3712 65541 nil nil nil 3538 1 3570 #findReplace 8 '&Replace…' 9361 1 nil nil nil 8 '&Edit' nil 134217729 nil nil 55263 nil nil 3490 nil true 34 18 3538 1 3570 #browseIt 8 '&Browse It' 9349 1 3618 nil true 3650 8 'ClassBrowserShell.ico' 3712 65541 nil nil nil 3538 1 3570 #displayIt 8 '&Display It' 9353 1 3618 nil true 3650 8 'DisplayIt.ico' 3712 65541 nil nil nil 3538 1 3570 #printIt 8 '&Print It' 9377 1 3618 nil true 3650 8 'PrintIt.ico' 3712 65541 nil nil nil 3538 1 3570 #evaluateIt 8 '&Evaluate It' 9355 1 3618 nil true 3650 8 'EvaluateIt.ico' 3712 65541 nil nil nil 3538 1 3570 #inspectIt 8 '&Inspect It' 9363 1 6064 nil nil 3538 1 3570 #debugIt 8 'Deb&ug It' 1 1 3618 nil true 3650 8 'Debugger.ico' 3712 65541 nil nil nil 3538 1 3570 #fileItIn 8 'Fi&le It In' 1 1 nil nil nil 4114 4097 3538 1 3570 #browseDefinitions 8 'Defi&nitions…' 1271 1 nil nil nil 3538 1 3570 #browseReferences 8 'Re&ferences…' 5367 1 nil nil nil 4114 4097 3538 2097153 3570 #accept 8 '&Accept' 9383 1 3986 $\x2714 8 'Segoe UI Emoji' nil 594 #commonGreen nil nil 1 nil nil nil nil 3538 1 3570 #reformatAccept 8 'Refor&mat/Accept' 13479 1 nil nil nil 3538 1 3570 #acceptNoRestart 8 'A&ccept No Restart' 1 1 nil nil nil 4114 4097 3490 nil true 34 13 3538 1 3570 #renameVariable 8 'Re&name <1d>…' 1 1 nil nil nil 4114 4097 3538 1 3570 #extractToTemporary 8 'Extract to &Temporary…' 9385 1 nil nil nil 3538 1 3570 #extractMethod 8 'E&xtract Method…' 9371 1 nil nil nil 3538 1 3570 #extractToComponent 8 'Extract to &Component…' 1 1 nil nil nil 3538 1 3570 #inlineMessage 8 'Inline &Message' 13467 1 nil nil nil 4114 4097 3538 1 3570 #inlineTemporary 8 '&Inline Temporary' 13481 1 nil nil nil 3538 1 3570 #moveTempToInnerScope 8 'Move to Inner &Scope' 9655 1 nil nil nil 3538 1 3570 #convertTempToInstVar 8 'Con&vert to Instance Variable' 1 1 nil nil nil 4114 4097 3538 1 3570 #inlineParameter 8 'In&line Parameter' 1 1 nil nil nil 3538 1 3570 #removeParameter 8 'Remove &Parameter' 1 1 nil nil nil 8 '&Refactorings' #codeRefactoringsMenu 134217729 3618 nil true 3650 8 'Refactoring.ico' 3712 65541 nil nil 55309 nil nil 4114 4097 3490 nil true 34 7 3538 1 3570 #toggleAutoCompletion 8 '&Auto-complete' 1 1 nil nil nil 3538 1 3570 #toggleIndentationGuides 8 'Indentation &Guides' 1 1 nil nil nil 3538 1 3570 #toggleLineEndings 8 'Line &Endings' 1 1 3986 $¶ 8 'Arial' nil nil nil nil 1 nil nil nil nil 3538 1 3570 #toggleLineNumbers 8 'Line N&umbers' 1 1 nil nil nil 3538 1 3570 #toggleStyling 8 '&Syntax Coloring' 1 1 nil nil nil 3538 1 3570 #toggleWhitespace 8 'W&hitespace' 1 1 nil nil nil 3538 1 3570 #toggleWordWrap 8 '&Word Wrap' 1 1 nil nil nil 8 '&Options' nil 134217729 3618 nil true 3650 8 'Preferences.ico' 3712 65541 nil nil 55325 nil nil 8 '&Workspace' nil 134217729 nil nil 55327 nil nil 3490 nil true 34 23 3538 1 3570 #resumeProcess 8 'G&o/detach' 1257 1 nil nil nil 3538 1 3570 #toggleAnimation 8 '&Animate' 1 1 nil nil nil 3538 1 3570 #terminateProcess 8 '&Terminate' 5353 1 nil nil nil 3538 1 3570 #killProcess 8 '&Kill' 1 1 nil nil nil 3538 1 3570 #userBreak 8 '&Break' 1 1 nil nil nil 4114 4097 3538 1 3570 #stepInto 8 'Step &Into' 1269 5 3618 nil true 3650 8 'StepInto.ico' 3712 65541 nil nil nil 3538 1 3570 #stepOver 8 'Step O&ver' 1267 5 3618 nil true 3650 8 'StepOver.ico' 3712 65541 nil nil nil 3538 1 3570 #stepOut 8 'Step O&ut' 5365 1 3618 nil true 3650 8 'StepOut.ico' 3712 65541 nil nil nil 3538 1 3570 #stepIntoBlock 8 'Step Into Block' 1025 1 3618 nil true 3650 8 'StepIntoBlock.ico' 3712 65541 nil nil nil 3538 1 3570 #runToCursor 8 'Run to &Cursor' 9459 1 3618 nil true 3650 8 'RunToCursor.ico' 3712 65541 nil nil nil 3538 1 3570 #runProcess 8 '&Run' 9449 1 3618 nil true 3650 8 'Run.ico' 3712 65541 nil nil nil 3538 1 3570 #restartFrame 8 'R&estart' 13545 1 3986 $\x2B6E 8 'Cambria' nil nil nil nil 1 nil nil nil nil 3538 1 3570 #returnFromMessage 8 'Retur&n …' 1 1 3986 $\x23CE 8 'Cambria' nil nil nil nil 1 nil nil nil nil 4114 4097 3490 nil true 8 #() 8 'Im&plement in' #implementDNUMenu 134217729 nil nil 55355 nil nil 3490 nil true 34 14 3490 nil true 34 3 3538 1 3570 #renameMethod 8 'All…' 1 1 nil nil nil 3538 1 3570 #renameMethodInHierarchy 8 'In &Hierarchy…' 1 1 nil nil nil 3538 1 3570 #renameMethodInPackage 8 'In &Package…' 1 1 nil nil nil 8 'Re&name' nil 134217729 nil nil 55363 nil nil 3538 1 3570 #removeMethods 8 'Rem&ove' 1 1 nil nil nil 4114 4097 3538 1 3570 #addParameter 8 'Add &Parameter…' 1 1 nil nil nil 3490 nil true 8 #() 8 'Remo&ve Parameter' #removeParameterMenu 134217729 nil nil 55369 nil nil 3490 nil true 8 #() 8 'Rena&me Parameter' #renameParameterMenu 134217729 nil nil 55371 nil nil 3490 nil true 8 #() 8 '&Inline Parameter' #inlineParameterMenu 134217729 nil nil 55373 nil nil 4114 4097 3490 nil true 8 #() 8 'Rename &Temporary' #renameTempMenu 134217729 nil nil 55375 nil nil 3490 nil true 8 #() 8 'Convert Temp to Inst. Var.' #convertTempToInstVarMenu 134217729 nil nil 55377 nil nil 4114 4097 3538 1 3570 #inlineAllSelfSends 8 'Inline &Self Sends' 1 1 nil nil nil 3538 1 3570 #pushUpMethods 8 'Push &Up' 1 1 nil nil nil 3538 1 3570 #pushDownMethods 8 'Push &Down' 1 1 nil nil nil 8 'Re&factorings' #methodRefactoringsMenu 134217729 3618 nil true 3650 8 'Refactoring.ico' 3712 65541 nil nil 55385 nil nil 4114 4097 3538 1 3570 #toggleBreakpoint 8 'Toggle Breakpoint' 1265 1 nil nil nil 3538 1 3570 #toggleDisassembly 8 'Disasse&mbly' 9461 1 nil nil nil 3538 1 3570 #showNextStatement 8 'Show Ne&xt Statement' 17621 1 3618 nil true 3650 8 'ShowNextStatement.ico' 3712 65541 nil nil nil 4114 4097 3490 nil true 34 2 3538 1 3570 #moreFrames 8 '&More' 1 1 nil nil nil 3538 1 3570 #allFrames 8 'A&ll' 1 1 nil nil nil 8 'Call &Stack' nil 134217729 nil nil 55397 nil nil 8 '&Debug' nil 134217729 nil nil 55399 nil nil 3490 nil true 34 3 3538 1 3570 #undoChange 8 '&Undo <1d>' 1 1 3618 nil true 3650 8 'EditUndo.ico' 3712 65541 nil nil nil 3538 1 3570 #redoChange 8 '&Redo <1d>' 1 1 3618 nil true 3650 8 'EditRedo.ico' 3712 65541 nil nil nil 3538 1 3570 #clearChangeHistory 8 'Clear Change &History' 1 1 3618 nil true 3650 8 'MethodHistoryErase.ico' 3712 65541 nil nil nil 8 'H&istory' nil 134217729 nil nil 55407 nil nil 3490 nil true 8 #() 8 '&Tools' #toolsMenu 134217729 nil nil 55409 nil nil 3490 nil true 8 #() 8 'Wi&ndow' #windowMenu 134217729 nil nil 55411 nil nil 3490 nil true 34 15 3538 1 3570 #helpContents 8 '&Contents' 1025 1 3618 nil true 3650 8 'Help.ico' 3712 65541 nil nil nil 3538 1 3570 #help 8 'On this &Tool' 1249 1 nil nil nil 3538 1 3570 #helpWhatsThis 8 'What''s This?' 5345 1 nil nil nil 4114 4097 3538 1 3570 #learnSmalltalk 8 'Learn Smalltalk' 1 1 nil nil nil 4114 4097 3538 1 3570 #helpWhatsNew 8 'What''s &New' 1 1 nil nil nil 3538 1 3570 #helpGuidedTour 8 '&Guided Tour' 1 1 nil nil nil 3538 1 3570 #helpTutorials 8 'Tutorials' 1 1 nil nil nil 4114 4097 3538 1 3570 #objectArtsHomePage 8 'Object Arts Homepage' 1 1 3618 nil true 3650 8 '!!APPLICATION' 3712 65541 nil nil nil 3538 1 3570 #dolphinNewsgroup 8 'Dolphin Newsgroup/Forum' 1 1 nil nil nil 3538 1 3570 #dolphinWikiWeb 8 'Dolphin WikiWeb' 1 1 nil nil nil 4114 4097 3538 1 3570 #aboutDolphin 8 '&About Dolphin Smalltalk' 1 1 3986 $\x1F42C nil nil 594 #darkSlateBlue nil nil 1 nil nil nil nil 8 '&Help' #help 134217729 nil nil 55435 nil nil 8 '' nil 134217729 nil nil nil nil nil nil nil nil 1 nil nil nil nil 1 nil nil 770 34 1 818 #createAt:extent: 34 2 866 12287 21 866 1201 801 416 914 8 #[44 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 23 0 0 10 0 0 0 87 26 0 0 154 1 0 0] 34 2 528 2128 976 nil 27)!

restartOnMethodSave
	"Answer true if instances of the receiver automatically restart a stack frame when the
	method is saved in that frame."

	^RestartOnMethodSave!

restartOnMethodSave: aBoolean 
	"Sets whether instances of the receiver automatically restart a frame in which the method is
	modified and saved."

	self restartOnMethodSave == aBoolean ifTrue: [^self].
	RestartOnMethodSave := aBoolean.
	self persistOptions!

runToCursorBehavior
	"The #runToCursorBehavior option controls how the debugger determines the IP closest to the cursor at which the debugger will break.
		- #precise		- stops at the start of the first expression containing the cursor.
		- #conservative	- tries to avoid advancing past any code lexically after the cursor
	The default is #precise, because this is the long established run-to-cursor behaviour, however you may find #conservative less
	likely to step past where you expect particularly if you are used to line-oriented debuggers. For example #precise may run past 
	the point you are expecting if you run to a cursor that is not actually over some code (e.g. in whitespace at the start or end of a line).
	On the other hand the #conservative mode may not run far as far as the cursor in some circumstances, for example in an assignment
	statement if you run-to-cursor with the cursor over the left hand side the expected behaviour would be for the debugger to stop just
	before the assignment of the value to the variable on the LHS, i.e. after evaluating the right hand side, which is indeed what will happen 
	in #precise mode. In #conservative mode, however, the debugger will stop before evaluating the RHS."

	^RunToCursorBehavior!

runToCursorBehavior: aSymbol
	self runToCursorBehavior == aSymbol ifTrue: [^self].
	RunToCursorBehavior := aSymbol.
	self persistOptions!

show: titleString process: aProcess topFrame: aStackFrame resumable: aBoolean
	"Private - Show an instance of the receiver on the <Process>, aProcess, configured appropriately
	for the other arguments."

	Cursor wait showWhile: 
			[self create
				caption: titleString;
				process: aProcess topFrame: aStackFrame;
				resumable: aBoolean;
				show]!

showWalkbacks
	"Answer true if a walkback is brought up before the debugger"

	^ShowWalkbacks!

showWalkbacks: aBoolean
	"Set the option indicating whether a walkback is brought up before the debugger to aBoolean"

	self showWalkbacks == aBoolean ifTrue: [^self].
	ShowWalkbacks := aBoolean.
	self persistOptions!

skipSelector: aSymbol of: aBehavior maskClear: maskInteger
	(self skipTable lookup: aBehavior)
		ifNotNil: 
			[:classTable |
			(classTable lookup: aSymbol)
				ifNotNil: 
					[:mask |
					| newMask |
					newMask := mask maskClear: maskInteger.
					newMask = 0
						ifTrue: 
							[classTable removeKey: aSymbol.
							classTable isEmpty ifTrue: [self skipTable removeKey: aBehavior]]
						ifFalse: [classTable at: aSymbol put: newMask]]]!

skipSelector: aSymbol of: aBehavior maskSet: maskInteger
	| classTable |
	classTable := self skipTable at: aBehavior ifAbsentPut: [IdentityDictionary new].
	classTable at: aSymbol put: ((classTable at: aSymbol ifAbsent: 0) bitOr: maskInteger)!

skipSelector: selector of: behavior type: typeMask
	"Private - Add the specified method to the set of those skipped by the debugger
	The typeMask specifies what type of skip-over the Debugger will perform when
	encountering a debug halt/step in the method:
		1	- Does not break in the method itself, but will step into methods it in turn calls.
		2 	- Does not break in the method or any of its subsidiary methods.
		4	- The method is a critical section and cannot be safely debugged. Do not stop regardless of debug mode."

	(self skipTable at: behavior ifAbsentPut: [IdentityDictionary new]) at: selector put: typeMask!

skipTable
	^SkipTable ifNil: [SkipTable := LookupTable new]!

uninitialize
	"Private - Uninitialize the receiver prior to remove from the system."

	self interrupts
		do: [:each | ProcessorScheduler interruptSelectors at: each first put: #unusedInterrupt:]!

unskipSelector: aSymbol of: aClass
	"Private - Remove the specified method to the set of those skipped by the debugger."

	(self skipTable lookup: aClass) ifNotNil: [:selectors | selectors removeKey: aSymbol ifAbsent: nil]! !
!Tools.Debugger class categoriesForMethods!
animatePause!options!public! !
animatePause:!options!public! !
defaultAdditionalAccelerators!constants!private! !
defaultStackDepth!accessing!public! !
defaultStackDepth:!accessing!public! !
displayOn:!displaying!public! !
enableDynamicMenus!options!public! !
enableDynamicMenus:!options!public! !
icon!constants!public! !
initialize!initializing!public! !
initializeSkipTable!initializing!public! !
interrupts!constants!private! !
publishedAspects!public! !
resource_Basic_debugger!public!resources-views! !
resource_Default_view!public!resources-views! !
restartOnMethodSave!options!public! !
restartOnMethodSave:!options!public! !
runToCursorBehavior!options!public! !
runToCursorBehavior:!options!public! !
show:process:topFrame:resumable:!instance creation!private! !
showWalkbacks!options!public! !
showWalkbacks:!options!public! !
skipSelector:of:maskClear:!accessing!private! !
skipSelector:of:maskSet:!accessing!private! !
skipSelector:of:type:!accessing!private! !
skipTable!accessing!public! !
uninitialize!initializing!private! !
unskipSelector:of:!accessing!private! !
!

