| package |
package := Package name: 'Dolphin Registry Serialisation'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Windows Registry Serialisation.
Copyright (c) Object Arts Ltd, 2004.

This package implements object serialisation to/from the system Registry. It is useful for storing application settings, etc.'.

package basicPackageVersion: '6.1'.


package setMethodNames: #(
	#(#{Core.ByteArray} #storeUnderRegKey:as:)
	#(#{Core.ClassDescription} #readFromRegKey:)
	#(#{Core.LargeInteger} #storeUnderRegKey:as:)
	#(#{Core.LargeInteger class} #readFromRegKey:)
	#(#{Core.Object} #storeUnderRegKey:as:)
	#(#{Core.Object class} #fromRegKey:)
	#(#{Core.SmallInteger} #storeUnderRegKey:as:)
	#(#{Core.String} #storeUnderRegKey:as:)
	#(#{Core.Symbol} #storeUnderRegKey:as:)
	#(#{Core.Symbol class} #readFromRegKey:)
	#(#{Core.UndefinedObject} #storeUnderRegKey:as:)
	#(#{External.DWORDBytes} #regKeyType)
	#(#{External.IntegerBytes} #regKeyType)
	#(#{External.IntegerBytes} #storeUnderRegKey:as:)
	#(#{External.UIntPtrBytes} #regKeyType)
).

package setPrerequisites: #(
	'..\Base\Dolphin'
).

package!

"Loose Methods"!

!Core.ByteArray methodsFor!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	aRegKey 
		valueAt: aString
		put: self
		type: #binary! !
!Core.ByteArray categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!Core.ClassDescription methodsFor!

readFromRegKey: aRegKey
	"Read an instance of the receiver previously serialised under the specified registry key."

	| params inst basicSize instVars |
	params := aRegKey value.
	basicSize := params size > 1 ifTrue: [Integer fromString: params second] ifFalse: [0].
	inst := basicSize > 0 ifTrue: [self basicNew: basicSize] ifFalse: [self basicNew].
	instVars := LookupTable new.
	self allInstVarNames keysAndValuesDo: [:i :name | instVars at: name put: i].
	aRegKey subValues keysAndValuesDo: 
			[:instVar :value |
			instVar isEmpty
				ifFalse: 
					[| i |
					i := Integer readFrom: instVar readStream.
					i = 0
						ifTrue: [inst instVarAt: (instVars at: instVar) put: value]
						ifFalse: [inst basicAt: i put: value]]].
	aRegKey subKeys keysAndValuesDo: 
			[:instVar :key |
			| i value |
			value := Object fromRegKey: key.
			i := Integer readFrom: instVar readStream.
			i = 0
				ifTrue: [inst instVarAt: (instVars at: instVar) put: value]
				ifFalse: [inst basicAt: i put: value]].
	^inst! !
!Core.ClassDescription categoriesForMethods!
readFromRegKey:!public! !
!

!Core.LargeInteger methodsFor!

storeUnderRegKey: aRegKey as: aString
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	self basicSize <= 4
		ifTrue: 
			[aRegKey
				valueAt: aString
				put: (External.DWORD fromInteger: self)
				type: #dword]
		ifFalse: 
			[self basicSize <= 8
				ifTrue: 
					[aRegKey
						valueAt: aString
						put: (OS.ULARGE_INTEGER fromInteger: self)
						type: #qword]
				ifFalse: 
					[| key size |
					key := aRegKey createKey: aString.
					size := self basicSize.
					key
						valueAt: nil
						put: self class name
						type: #stringArray.
					((ByteArray new: self basicSize)
						replaceFrom: 1
						to: size
						with: self
						startingAt: 1) storeUnderRegKey: key as: 'value']]! !
!Core.LargeInteger categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!Core.LargeInteger class methodsFor!

readFromRegKey: aRegKey 
	"N.B. Will only get here for cases outside 64-bit 2's complement range."

	| size answer bytes |
	bytes := aRegKey valueAt: 'value'.
	size := bytes size.
	self assert: [(size bitAnd: 3) = 0].
	answer := self basicNew: size.
	1 to: size do: [:i | answer basicAt: i put: (bytes basicAt: i)].
	^answer! !
!Core.LargeInteger class categoriesForMethods!
readFromRegKey:!public! !
!

!Core.Object methodsFor!

storeUnderRegKey: aRegKey as: aString
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	| key instVars size |
	aRegKey removeKey: aString ifAbsent: nil.
	key := aRegKey createKey: aString.
	size := self basicSize.
	key
		valueAt: nil
		put: (size > 0
				ifTrue: 
					[String writeStream
						nextPutAll: self class fullName;
						nextPut: $\0;
						display: size;
						contents]
				ifFalse: [self class fullName])
		type: #stringArray.
	instVars := self class allInstVarNames.
	instVars
		keysAndValuesDo: [:i :name | name first = $_ ifFalse: [(self instVarAt: i) storeUnderRegKey: key as: name]].
	1 to: self basicSize do: [:i | (self basicAt: i) storeUnderRegKey: key as: i displayString]! !
!Core.Object categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!Core.Object class methodsFor!

fromRegKey: aRegKey
	"Read an instance of the receiver previously serialised under the specified registry key."

	| params |
	params := aRegKey value.
	^params first asQualifiedReference value readFromRegKey: aRegKey! !
!Core.Object class categoriesForMethods!
fromRegKey:!public! !
!

!Core.SmallInteger methodsFor!

storeUnderRegKey: aRegKey as: aString
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	self isSDWORD
		ifTrue: 
			[aRegKey
				valueAt: aString
				put: (External.DWORD fromInteger: self)
				type: #dword]
		ifFalse: 
			[aRegKey
				valueAt: aString
				put: (OS.ULARGE_INTEGER fromInteger: self)
				type: #qword]! !
!Core.SmallInteger categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!Core.String methodsFor!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	aRegKey 
		valueAt: aString
		put: self asString
		type: #string! !
!Core.String categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!Core.Symbol methodsFor!

storeUnderRegKey: aRegKey as: aString
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	(aRegKey createKey: aString)
		valueAt: nil
		put: (String writeStream
				display: self class;
				nextPut: Character null;
				display: self;
				contents)
		type: #stringArray! !
!Core.Symbol categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!Core.Symbol class methodsFor!

readFromRegKey: aRegKey 
	"Read an instance of the receiver previously serialised under the specified registry key."

	| params |
	params := aRegKey value.
	^self intern: params second! !
!Core.Symbol class categoriesForMethods!
readFromRegKey:!public! !
!

!Core.UndefinedObject methodsFor!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	"Implementation Note: We don't need to store anything for nil's when performing serialisation to the registry."! !
!Core.UndefinedObject categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!External.DWORDBytes methodsFor!

regKeyType
	^#dword! !
!External.DWORDBytes categoriesForMethods!
regKeyType!constants!public! !
!

!External.IntegerBytes methodsFor!

regKeyType
	^self subclassResponsibility!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	(aRegKey createKey: aString)
		valueAt: nil
			put: self class name
			type: #stringArray;
		valueAt: #value
			put: self
			type: self regKeyType! !
!External.IntegerBytes categoriesForMethods!
regKeyType!constants!public! !
storeUnderRegKey:as:!public! !
!

!External.UIntPtrBytes methodsFor!

regKeyType
	"Note: The compiler will optimise out the conditional because it is constant."

	^VMConstants.IsWin64 ifTrue: [#qword] ifFalse: [#dword]! !
!External.UIntPtrBytes categoriesForMethods!
regKeyType!public! !
!

"End of package definition"!

