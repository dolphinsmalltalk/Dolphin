| package |
package := Package name: 'Dolphin Registry Serialisation'.
package paxVersion: 1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Windows Registry Serialisation.
Copyright (c) Object Arts Ltd, 2004.

This package implements object serialisation to/from the system Registry. It is useful for storing application settings, etc.'.

package basicPackageVersion: '6.1'.


package methodNames
	add: #ByteArray -> #storeUnderRegKey:as:;
	add: #ClassDescription -> #readFromRegKey:;
	add: #DWORDBytes -> #regKeyType;
	add: #ExternalIntegerBytes -> #regKeyType;
	add: #ExternalIntegerBytes -> #storeUnderRegKey:as:;
	add: #LargeInteger -> #storeUnderRegKey:as:;
	add: #Object -> #storeUnderRegKey:as:;
	add: #SmallInteger -> #storeUnderRegKey:as:;
	add: #String -> #storeUnderRegKey:as:;
	add: #Symbol -> #storeUnderRegKey:as:;
	add: #UIntPtrBytes -> #regKeyType;
	add: #UndefinedObject -> #storeUnderRegKey:as:;
	add: 'LargeInteger class' -> #readFromRegKey:;
	add: 'Object class' -> #fromRegKey:;
	add: 'Symbol class' -> #readFromRegKey:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Base\Dolphin').

package!

"Class Definitions"!


"Global Aliases"!


"Loose Methods"!

!ByteArray methodsFor!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	aRegKey 
		valueAt: aString
		put: self
		type: #binary! !
!ByteArray categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!ClassDescription methodsFor!

readFromRegKey: aRegKey 
	"Read an instance of the receiver previously serialised under the specified registry key."

	| params inst basicSize instVars |
	params := aRegKey value.
	self assert: [params first = self name].
	basicSize := params size > 1 ifTrue: [Integer fromString: params second] ifFalse: [0].
	inst := basicSize > 0 ifTrue: [self basicNew: basicSize] ifFalse: [self basicNew].
	instVars := LookupTable new.
	self allInstVarNames keysAndValuesDo: [:i :name | instVars at: name put: i].
	aRegKey subValues keysAndValuesDo: 
			[:instVar :value | 
			instVar isEmpty 
				ifFalse: 
					[| i |
					i := Integer readFrom: instVar readStream.
					i = 0 
						ifTrue: [inst instVarAt: (instVars at: instVar) put: value]
						ifFalse: [inst basicAt: i put: value]]].
	aRegKey subKeys keysAndValuesDo: 
			[:instVar :key | 
			| i value |
			value := Object fromRegKey: key.
			i := Integer readFrom: instVar readStream.
			i = 0 
				ifTrue: [inst instVarAt: (instVars at: instVar) put: value]
				ifFalse: [inst basicAt: i put: value]].
	^inst! !
!ClassDescription categoriesForMethods!
readFromRegKey:!public! !
!

!DWORDBytes methodsFor!

regKeyType
	^#dword! !
!DWORDBytes categoriesForMethods!
regKeyType!constants!public! !
!

!ExternalIntegerBytes methodsFor!

regKeyType
	^self subclassResponsibility!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	(aRegKey createKey: aString)
		valueAt: nil
			put: self class name
			type: #stringArray;
		valueAt: #value
			put: self
			type: self regKeyType! !
!ExternalIntegerBytes categoriesForMethods!
regKeyType!constants!public! !
storeUnderRegKey:as:!public! !
!

!LargeInteger methodsFor!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	self basicSize <= 4 
		ifTrue: 
			[aRegKey 
				valueAt: aString
				put: (DWORD fromInteger: self)
				type: #dword]
		ifFalse: 
			[self basicSize <= 8 
				ifTrue: 
					[aRegKey 
						valueAt: aString
						put: (ULARGE_INTEGER fromInteger: self)
						type: #qword]
				ifFalse: 
					[| key size |
					key := aRegKey createKey: aString.
					size := self basicSize.
					key 
						valueAt: nil
						put: self class name
						type: #stringArray.
					((ByteArray new: self basicSize) 
						replaceFrom: 1
						to: size
						with: self
						startingAt: 1) storeUnderRegKey: key as: 'value']]! !
!LargeInteger categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!LargeInteger class methodsFor!

readFromRegKey: aRegKey 
	"N.B. Will only get here for cases outside 64-bit 2's complement range."

	| size answer bytes |
	bytes := aRegKey valueAt: 'value'.
	size := bytes size.
	self assert: [(size bitAnd: 3) = 0].
	answer := self basicNew: size.
	1 to: size do: [:i | answer basicAt: i put: (bytes basicAt: i)].
	^answer! !
!LargeInteger class categoriesForMethods!
readFromRegKey:!public! !
!

!Object methodsFor!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	| key instVars size |
	aRegKey removeKey: aString ifAbsent: [].
	key := aRegKey createKey: aString.
	size := self basicSize.
	key 
		valueAt: nil
		put: (size > 0 
				ifTrue: 
					[(String writeStream)
						display: self class;
						nextPut: $\0;
						display: size;
						contents]
				ifFalse: [self class name])
		type: #stringArray.
	instVars := self class allInstVarNames.
	instVars 
		keysAndValuesDo: [:i :name | name first = $_ ifFalse: [(self instVarAt: i) storeUnderRegKey: key as: name]].
	1 to: self basicSize do: [:i | (self basicAt: i) storeUnderRegKey: key as: i displayString]! !
!Object categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!Object class methodsFor!

fromRegKey: aRegKey 
	"Read an instance of the receiver previously serialised under the specified registry key."

	| params |
	params := aRegKey value.
	^(self environment at: params first asSymbol) readFromRegKey: aRegKey! !
!Object class categoriesForMethods!
fromRegKey:!public! !
!

!SmallInteger methodsFor!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	self isSDWORD 
		ifTrue: 
			[aRegKey 
				valueAt: aString
				put: (DWORD fromInteger: self)
				type: #dword]
		ifFalse: 
			[aRegKey 
				valueAt: aString
				put: (ULARGE_INTEGER fromInteger: self)
				type: #qword]! !
!SmallInteger categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!String methodsFor!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	aRegKey 
		valueAt: aString
		put: self asString
		type: #string! !
!String categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!Symbol methodsFor!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	(aRegKey createKey: aString) 
		valueAt: nil
		put: (String writeStream display: self class; nextPut: Character null; display: self; contents)
		type: #stringArray! !
!Symbol categoriesForMethods!
storeUnderRegKey:as:!public! !
!

!Symbol class methodsFor!

readFromRegKey: aRegKey 
	"Read an instance of the receiver previously serialised under the specified registry key."

	| params |
	params := aRegKey value.
	self assert: [params first = self name].
	^self intern: params second! !
!Symbol class categoriesForMethods!
readFromRegKey:!public! !
!

!UIntPtrBytes methodsFor!

regKeyType
	"Note: The compiler will optimise out the conditional because it is constant."

	^VMConstants.IsWin64 ifTrue: [#qword] ifFalse: [#dword]! !
!UIntPtrBytes categoriesForMethods!
regKeyType!public! !
!

!UndefinedObject methodsFor!

storeUnderRegKey: aRegKey as: aString 
	"Store a serialised representation of the receiver to the registry under the <RegKey>,
	aRegKey, with the <readableString> name, aString."

	"Implementation Note: We don't need to store anything for nil's when performing serialisation to the registry."! !
!UndefinedObject categoriesForMethods!
storeUnderRegKey:as:!public! !
!

"End of package definition"!

