| package |
package := Package name: 'Dolphin Registry Serialisation'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Windows Registry Serialisation.
Copyright (c) Object Arts Ltd, 2004.

This package implements object serialisation to/from the system Registry for a subset of classes. It is useful for storing application settings, etc, but is too slow to be a viable option for general storage. The registry is not intended for storing larger amounts of data in any case.

See the class comment of `OS.RegistrySerializer` for details of the serialization format.'.

package basicPackageVersion: '6.1'.

package basicScriptAt: #postinstall put: 'RegKeyAbstract addProtocol: #registryWriter!!
'.

package setClassNames: #(
	#{OS.RegistryDeserializer}
	#{OS.RegistryDeserializerStub}
	#{OS.RegistrySerializer}
).

package setMethodNames: #(
	#(#{Core.ArrayedCollection class} #readFromRegistry:params:)
	#(#{Core.Boolean} #writeToRegistry:name:)
	#(#{Core.Class} #writeToRegistry:name:)
	#(#{Core.ClassDescription} #readFromRegistry:params:)
	#(#{Core.Collection} #writeToRegistry:name:)
	#(#{Core.Collection class} #readFromRegistry:params:)
	#(#{Core.Dictionary} #canWriteCompactRegistryFormat)
	#(#{Core.Dictionary} #writeAssociationsToRegistry:key:)
	#(#{Core.Dictionary} #writeToRegistry:name:)
	#(#{Core.Dictionary class} #keyFromRegName:)
	#(#{Core.Dictionary class} #readFromRegistry:params:)
	#(#{Core.False class} #readFromRegistry:params:)
	#(#{Core.IdentityDictionary} #canWriteCompactRegistryFormat)
	#(#{Core.IdentityDictionary class} #keyFromRegName:)
	#(#{Core.Interval} #writeToRegistry:name:)
	#(#{Core.Interval class} #readFromRegistry:params:)
	#(#{Core.LargeInteger class} #readFromRegistry:params:)
	#(#{Core.Locale} #writeToRegistry:name:)
	#(#{Core.Locale class} #readFromRegistry:params:)
	#(#{Core.Metaclass} #readFromRegistry:params:)
	#(#{Core.Metaclass} #writeToRegistry:name:)
	#(#{Core.Metaclass class} #readFromRegistry:params:)
	#(#{Core.Object} #storeUnderRegKey:as:)
	#(#{Core.Object} #writeToRegistry:name:)
	#(#{Core.Object class} #fromRegKey:)
	#(#{Core.SequenceableCollection class} #readFromRegistry:params:)
	#(#{Core.SortAlgorithm class} #readFromRegistry:params:)
	#(#{Core.SortedCollection} #writeToRegistry:name:)
	#(#{Core.SortedCollection class} #readFromRegistry:params:)
	#(#{Core.Symbol} #writeToRegistry:name:)
	#(#{Core.Symbol class} #readFromRegistry:params:)
	#(#{Core.True class} #readFromRegistry:params:)
	#(#{External.Handle} #writeToRegistry:name:)
	#(#{External.IntegerBytes} #regKeyType)
	#(#{External.IntegerBytes} #writeToRegistry:name:)
	#(#{External.UInt32Bytes} #regKeyType)
	#(#{External.UInt64Bytes} #regKeyType)
	#(#{External.UIntPtrBytes} #regKeyType)
	#(#{Graphics.AbstractFont} #writeToRegistry:name:)
	#(#{Graphics.AbstractFont class} #readFromRegistry:params:)
	#(#{Graphics.Color} #writeToRegistry:name:)
	#(#{Graphics.Color class} #readFromRegistry:params:)
	#(#{Graphics.VirtualColor} #writeToRegistry:name:)
	#(#{Kernel.MethodAnnotations class} #readFromRegistry:params:)
	#(#{Kernel.PluggableSortAlgorithm class} #readFromRegistry:params:)
	#(#{OS.RegKeyAbstract} #classAt:put:with:)
	#(#{OS.RegKeyAbstract} #objectAt:)
	#(#{OS.RegKeyAbstract} #objectAt:ifAbsent:)
	#(#{OS.RegKeyAbstract} #objectAt:put:)
	#(#{OS.RegKeyAbstract} #readValueAt:into:)
	#(#{OS.ShlwapiLibrary} #strToInt:)
	#(#{OS.ShlwapiLibrary} #strToUInt:)
).

package setPrerequisites: #(
	'..\Base\Dolphin'
	'..\MVP\Graphics\Dolphin GDI Graphics'
	'Dolphin Registry Access'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'OS.RegistryDeserializer'
	instanceVariableNames: 'currentKey instVarMaps safeClasses objects validationBlock substitute'
	classVariableNames: ''
	imports: #(#{OS private})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'OS.RegistryDeserializerStub'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'OS.RegistrySerializer'
	instanceVariableNames: 'objects currentKey instVarsCache classNames'
	classVariableNames: ''
	imports: #(#{OS.WinRegConstants private})
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.ArrayedCollection class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	"Override back to the basic implementation."

	^aRegistryDeserializer readObjectOfClass: self params: anArray! !

!Core.ArrayedCollection class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.Boolean methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter
		classAt: aString
		put: self class
		with: nil! !

!Core.Boolean categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.Class methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter
		classAt: aString
		put: self class
		with: nil! !

!Core.Class categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.ClassDescription methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	^aRegistryDeserializer readObjectOfClass: self params: anArray! !

!Core.ClassDescription categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.Collection methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter writeCollection: self at: aString! !

!Core.Collection categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.Collection class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	| rehydrated |
	rehydrated := self new.
	aRegistryDeserializer
		registerCurrentObject: rehydrated;
		namesAndObjectsDo: [:eachName :eachValue | rehydrated add: eachValue].
	^rehydrated! !

!Core.Collection class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.Dictionary methodsFor!

canWriteCompactRegistryFormat
	^self
		allKeysSatisfy: [:each | each isString and: 
					["But not Symbols"
					each isAtomic not]]!

writeAssociationsToRegistry: aRegistryWriter key: aString
	aRegistryWriter
		writeObject: self
		name: aString
		parameter: self size
		do: 
			[:writer :dict |
			| i |
			i := 1.
			dict associationsDo: 
					[:each |
					each writeToRegistry: writer name: i printString.
					i := i + 1]]!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	"Implementation Note: We assume that the Dictionary is likely to be a collection of name/value pairs where the keys are strings, so attempt to store the Dictionary in a simplified format where the string representation of the keys is uses as names for the registry keys and values. If any of the receiver's keys are not strings, we serialise in a more general format."

	self canWriteCompactRegistryFormat
		ifTrue: 
			["Optimised format for common case (for Registry storage anyway) of String-name:value pairs. The sub-values/key names can represent the Dictionary keys."
			aRegistryWriter
				writeObject: self
				name: aString
				parameter: nil
				do: 
					[:writer :dictionary |
					dictionary keysAndValuesDo: [:eachKey :eachValue | eachValue writeToRegistry: writer name: eachKey]]]
		ifFalse: 
			["Generic format for non-String keys - we need to store the pairs and they must be rehashed on load, rather than storing the actual instance variables of the Dictionary"
			self writeAssociationsToRegistry: aRegistryWriter key: aString]	"But not Symbols"! !

!Core.Dictionary categoriesForMethods!
canWriteCompactRegistryFormat!public! !
writeAssociationsToRegistry:key:!private!serializing! !
writeToRegistry:name:!public! !
!

!Core.Dictionary class methodsFor!

keyFromRegName: aString
	^aString!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	| rehydrated |
	anArray size > 1 ifTrue: [^super readFromRegistry: aRegistryDeserializer params: anArray].
	rehydrated := self new.
	aRegistryDeserializer
		registerCurrentObject: rehydrated;
		namesAndObjectsDo: [:eachName :each | rehydrated at: (self keyFromRegName: eachName) put: each].
	^rehydrated! !

!Core.Dictionary class categoriesForMethods!
keyFromRegName:!public! !
readFromRegistry:params:!public! !
!

!Core.False class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	^false! !

!Core.False class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.IdentityDictionary methodsFor!

canWriteCompactRegistryFormat
	^self allKeysSatisfy: [:each | each isKindOf: Symbol]! !

!Core.IdentityDictionary categoriesForMethods!
canWriteCompactRegistryFormat!public! !
!

!Core.IdentityDictionary class methodsFor!

keyFromRegName: aString
	^aString asSymbol! !

!Core.IdentityDictionary class categoriesForMethods!
keyFromRegName:!public! !
!

!Core.Interval methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	"Override back to object implementation as we don't want to serialize the elements themselves."

	aRegistryWriter basicObjectAt: aString put: self! !

!Core.Interval categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.Interval class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	"Override back to the basic implementation."

	^aRegistryDeserializer readObjectOfClass: self params: anArray! !

!Core.Interval class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.LargeInteger class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	"N.B. Will only get here for cases outside 64-bit 2's complement range."

	| size answer bytes |
	bytes := aRegistryDeserializer valueAt: ##('bytes' asUtf16String).
	size := bytes size.
	answer := self basicNew: size.
	1 to: size do: [:i | answer basicAt: i put: (bytes basicAt: i)].
	answer isImmutable: true.
	^answer! !

!Core.LargeInteger class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.Locale methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter
		classAt: aString
		put: Locale
		with: self name! !

!Core.Locale categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.Locale class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	^self named: (anArray at: 2)! !

!Core.Locale class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.Metaclass methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	^instanceClass!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter
		classAt: aString
		put: self class
		with: (aRegistryWriter nameForClass: self)! !

!Core.Metaclass categoriesForMethods!
readFromRegistry:params:!public! !
writeToRegistry:name:!public! !
!

!Core.Metaclass class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	^aRegistryDeserializer findClass: (anArray at: 2)! !

!Core.Metaclass class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.Object methodsFor!

storeUnderRegKey: aRegKey as: aString
	"Store a serialised representation of the receiver to the registry under the <RegKey>, aRegKey, with the <readableString> name, aString."

	Notification deprecated.
	aRegKey objectAt: aString put: self!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	"Reflect back to the writer so it can write either an object reference, or the general purpose format if the object has been written already by the writer."

	aRegistryWriter basicObjectAt: aString put: self! !

!Core.Object categoriesForMethods!
storeUnderRegKey:as:!public! !
writeToRegistry:name:!public! !
!

!Core.Object class methodsFor!

fromRegKey: aRegKey
	"Read an instance of the receiver previously serialised under the specified registry key."

	Notification deprecated.
	^aRegKey parentKey objectAt: aRegKey name! !

!Core.Object class categoriesForMethods!
fromRegKey:!public! !
!

!Core.SequenceableCollection class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	| inst |
	inst := self ofSize: (OS.Shlwapi strToInt: (anArray at: 2)).
	aRegistryDeserializer
		registerCurrentObject: inst;
		namesAndObjectsDo: [:indexString :each | inst at: (OS.Shlwapi strToInt: indexString) put: each].
	^inst! !

!Core.SequenceableCollection class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.SortAlgorithm class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	^self default! !

!Core.SortAlgorithm class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.SortedCollection methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	"Override back to generic implementation to preserve the inst vars. Not particularly important for OC, but necessary for SortedCollection."

	aRegistryWriter
		writeObject: self
		name: aString
		parameter: self size
		do: 
			[:writer :sorted |
			sorted algorithm writeToRegistry: aRegistryWriter name: 'algorithm'.
			sorted
				keysAndValuesDo: [:eachKey :eachValue | eachValue writeToRegistry: writer name: eachKey printString]]! !

!Core.SortedCollection categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.SortedCollection class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	| inst |
	inst := self ofSize: (OS.Shlwapi strToInt: (anArray at: 2)).
	aRegistryDeserializer readInstVarsOf: inst.
	^inst! !

!Core.SortedCollection class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.Symbol methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter
		classAt: aString
		put: self class
		with: self! !

!Core.Symbol categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.Symbol class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised under the specified registry key."

	^self intern: (anArray at: 2)! !

!Core.Symbol class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Core.True class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	^true! !

!Core.True class categoriesForMethods!
readFromRegistry:params:!public! !
!

!External.Handle methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter noneAtPut: aString! !

!External.Handle categoriesForMethods!
writeToRegistry:name:!public! !
!

!External.IntegerBytes methodsFor!

regKeyType
	^self subclassResponsibility!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter
		bytesAt: aString
		put: self
		as: self class! !

!External.IntegerBytes categoriesForMethods!
regKeyType!constants!public! !
writeToRegistry:name:!public! !
!

!External.UInt32Bytes methodsFor!

regKeyType
	^#dword! !

!External.UInt32Bytes categoriesForMethods!
regKeyType!constants!public! !
!

!External.UInt64Bytes methodsFor!

regKeyType
	^#qword! !

!External.UInt64Bytes categoriesForMethods!
regKeyType!constants!public! !
!

!External.UIntPtrBytes methodsFor!

regKeyType
	"Note: The compiler will optimise out the conditional because it is constant."

	^VMConstants.IsWin64 ifTrue: [#qword] ifFalse: [#dword]! !

!External.UIntPtrBytes categoriesForMethods!
regKeyType!public! !
!

!Graphics.AbstractFont methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter
		writeObject: self
		class: Font
		name: aString
		parameter: nil
		do: [:writer :font | writer objectAt: 'logfont' put: font logFont]! !

!Graphics.AbstractFont categoriesForMethods!
writeToRegistry:name:!public! !
!

!Graphics.AbstractFont class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised under the specified registry key."

	| font |
	font := self new.
	aRegistryDeserializer registerCurrentObject: font.
	font logFont: (aRegistryDeserializer objectAt: 'logfont').
	^font! !

!Graphics.AbstractFont class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Graphics.Color methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	"Implementation Note: Colors are just stored as a class-key: If named the key includes the name as the 2nd element of the multi-string default value, and if unnamed the RGBA code. Note that the identity of unnamed Colors will not be preserved." 

	aRegistryWriter
		classAt: aString
		put: Color
		with: (self name ifNil: [self rgbaCode])! !

!Graphics.Color categoriesForMethods!
writeToRegistry:name:!public! !
!

!Graphics.Color class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	^(anArray lookup: 2)
		ifNil: [super readFromRegistry: aRegistryDeserializer params: anArray]
		ifNotNil: 
			[:param |
			param first isDigit
				ifTrue: [Color fromRgbaCode: (Shlwapi strToUInt: param)]
				ifFalse: [self named: param]]! !

!Graphics.Color class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Graphics.VirtualColor methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	"Implementation Note: VirtualColors are stored as a class-key if named, otherwise using the generic format."

	self name
		ifNotNil: 
			[:n |
			aRegistryWriter
				classAt: aString
				put: Color
				with: n]
		ifNil: [aRegistryWriter basicObjectAt: aString put: self]! !

!Graphics.VirtualColor categoriesForMethods!
writeToRegistry:name:!public! !
!

!Kernel.MethodAnnotations class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	"Override back to the basic implementation."

	^aRegistryDeserializer readObjectOfClass: self params: anArray! !

!Kernel.MethodAnnotations class categoriesForMethods!
readFromRegistry:params:!public! !
!

!Kernel.PluggableSortAlgorithm class methodsFor!

readFromRegistry: aRegistryDeserializer params: anArray
	"Read an instance of the receiver previously serialised to the registry."

	"We have to override back to the default implementation"

	^aRegistryDeserializer readObjectOfClass: self params: anArray! !

!Kernel.PluggableSortAlgorithm class categoriesForMethods!
readFromRegistry:params:!public! !
!

!OS.RegKeyAbstract methodsFor!

classAt: aString put: aClass with: parameterObject
	"Write a class sub-key describing the <Object>, anObject, under the receiver's current key with the <readableString> name, aString. The default value of the sub-key is a REG_MULTISZ, the first element of which is the class short name (i.e. a name that can be used to bind the class in the context of the Smalltalk namespace). The final argument, parameterObject, represents optional additional  metadata and it's display string is stored as the 2nd element of the REG_MULTISZ default value. If parameterObject is nil, then only the class name is written. Typically parameterObject is the indexable size of anObject, but it may be an identifier that uniquely identifies anObject in its class in order that it can be deserialised to the same instance. Answer the REG_MULTISZ <Utf16String> value written as the default value of the key."

	^(RegistrySerializer regKey: self)
		classAt: aString
		put: aClass
		with: parameterObject!

objectAt: aString
	"Deserialize an <Object> previously serialised to the sub-key/value of the receiver named by the <readableString> argument.
	If there is no such sub-key/value, throw a NotFoundError."

	^self objectAt: aString ifAbsent: [self errorNotFound: aString]!

objectAt: aString ifAbsent: aNiladicValuable
	"Deserialize an <Object> previously serialised to the sub-key/value of the receiver named by the <readableString> first argument.
	If there is no such sub-key/value, answers the result of evaluating the <niladicValuable> second argument."

	^(self subKeys at: aString ifAbsent: nil)
		ifNil: [self valueAt: aString ifAbsent: aNiladicValuable]
		ifNotNil: 
			[:subKey |
			| object |
			object := RegistryDeserializer readFrom: subKey.
			subKey free.
			object]!

objectAt: aString put: anObject
	"Serialize the <Object> last argument under a sub-key of the receiver named by the <readableString> first argument. Answer anObject."

	RegistrySerializer
		write: anObject
		to: self
		name: aString.
	^anObject!

readValueAt: aString into: aByteObject
	| metadata needsFree |
	metadata := ByteArray newFixed: 8.
	metadata uint32AtOffset: 4 put: aByteObject basicSize.
	needsFree := self realize.
	AdvApi32
		regQueryValueEx: handle
		lpValueName: aString
		lpReserved: nil
		lpType: metadata
		lpData: aByteObject
		lpcbData: metadata yourAddress + 4.
	needsFree ifTrue: [self free]! !

!OS.RegKeyAbstract categoriesForMethods!
classAt:put:with:!public!serializing! !
objectAt:!public!serializing! !
objectAt:ifAbsent:!public!serializing! !
objectAt:put:!public!serializing! !
readValueAt:into:!helpers!private! !
!

!OS.ShlwapiLibrary methodsFor!

strToInt: lpSrc
	"Invoke the StrToInt() function of the module wrapped by the receiver.
	Helpstring: Converts a decimal string to an integer

		int __stdcall StrToInt(
			LPCWSTR lpSrc);"

	<stdcall: int32 StrToIntW lpwstr>
	^self invalidCall: _failureCode!

strToUInt: pszSrc
	<stdcall: dword StrToIntW lpwstr>
	^self invalidCall: _failureCode! !

!OS.ShlwapiLibrary categoriesForMethods!
strToInt:!**auto generated**!public!win32 functions-string manipulation! !
strToUInt:!public!win32 functions-string manipulation! !
!

"End of package definition"!

