| package |
package := Package name: 'Dolphin Registry Access'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Windows Registry Access.
Copyright (c) Object Arts Ltd, 1998-2018.

This package implements collection classes that provide access to the Windows registration database as if it were a collection of nested dictionaries. Note that the structure is more complicated than a standard Smalltalk Dictionary in that the each registry key entry can have both sub-keys, and sub-values. To map this structure to a Smalltalk <abstractDictionary> the registry key entries are represented as instances of the <RegKey> class. Registry sub-key names are treated as the <readableString> "keys" of a <RegKey>, and the registry sub-keys themselves are treated as the ><RegKey>''s "values", with these in turn being represented by instances of <RegKey>. A separate <abstractDictionary> representation of the sub-values of a registry key is accessed by sending the #subValues message to a <RegKey>, yielding an instance of <RegKeyValues>. The "keys" of a <RegKeyValues> are the <readableString> value names, and the values are <Strings>, <Integer>s, and <ByteArray>s representing the actual values.

Example:

userRoot := RegKey userRoot.
notes := userRoot createKey: ''Software\Object Arts\Dolphin Smalltalk 7.0\Professional\TestKey''.
notes subValues at: ''Array'' put: {1. ''Hello world''. Character dolphin}.
notes subValues at: ''Array''.
notes subValues removeKey: ''Array''.
userRoot removeKey: notes pathFromRoot.'.

package basicPackageVersion: '6.0'.


package setClassNames: #(
	#{OS.RegKey}
	#{OS.RegKeyAbstract}
	#{OS.REGKEYINFO}
	#{OS.RegKeyValues}
).

package setMethodNames: #(
	#(#{Core.Array} #writeToRegistry:name:)
	#(#{Core.ByteArray} #writeToRegistry:name:)
	#(#{Core.LargeInteger} #writeToRegistry:name:)
	#(#{Core.SmallInteger} #writeToRegistry:name:)
	#(#{Core.String} #writeToRegistry:name:)
	#(#{Core.UndefinedObject} #writeToRegistry:name:)
	#(#{OS.AdvApiLibrary} #regCloseKey:)
	#(#{OS.AdvApiLibrary} #regConnectRegistry:hKey:phkResult:)
	#(#{OS.AdvApiLibrary} #regCreateKeyEx:lpSubKey:reserved:lpClass:dwOptions:samDesired:lpSecurityAttributes:phkResult:lpdwDisposition:)
	#(#{OS.AdvApiLibrary} #regDeleteKey:lpSubKey:)
	#(#{OS.AdvApiLibrary} #regDeleteTree:lpSubKey:)
	#(#{OS.AdvApiLibrary} #regDeleteValue:lpValueName:)
	#(#{OS.AdvApiLibrary} #regEnumKeyEx:dwIndex:lpName:lpcbName:lpReserved:lpClass:lpcbClass:lpftLastWriteTime:)
	#(#{OS.AdvApiLibrary} #regEnumValue:dwIndex:lpValueName:lpcbValueName:lpReserved:lpType:lpData:lpcbData:)
	#(#{OS.AdvApiLibrary} #regOpenKeyEx:lpSubKey:ulOptions:samDesired:phkResult:)
	#(#{OS.AdvApiLibrary} #regQueryInfoKey:lpClass:lpcchClass:lpReserved:lpcSubKeys:lpcbMaxSubKeyLen:lpcbMaxClassLen:lpcValues:lpcbMaxValueNameLen:lpcbMaxValueLen:lpcbSecurityDescriptor:lpftLastWriteTime:)
	#(#{OS.AdvApiLibrary} #regQueryValueEx:lpValueName:lpReserved:lpType:lpData:lpcbData:)
	#(#{OS.AdvApiLibrary} #regSetValueEx:lpValueName:reserved:dwType:lpData:cbData:)
).

package setPrerequisites: #(
	'..\Base\Dolphin'
).

package!

"Class Definitions"!

Core.Dictionary variableSubclass: #'OS.RegKeyAbstract'
	instanceVariableNames: 'name parentPath rootKey sam handle keyInfo'
	classVariableNames: 'AccessModes ValueTypes'
	imports: #(#{OS.WinRegConstants} #{OS.Win32Errors})
	classInstanceVariableNames: ''
	classConstants: {
		'PathSeparator' -> '\'
	}!
OS.RegKeyAbstract variableSubclass: #'OS.RegKey'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
OS.RegKeyAbstract variableSubclass: #'OS.RegKeyValues'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.Structure subclass: #'OS.REGKEYINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'_OffsetOf_ftLastWriteTime' -> 16r1C.
		'_OffsetOf_maxClassLen' -> 16r8.
		'_OffsetOf_maxSubKeyLen' -> 16r4.
		'_OffsetOf_maxValueLen' -> 16r14.
		'_OffsetOf_maxValueNameLen' -> 16r10.
		'_OffsetOf_securityDescriptorLen' -> 16r18.
		'_OffsetOf_subKeyCount' -> 16r0.
		'_OffsetOf_valueCount' -> 16rC.
		'_REGKEYINFO_Size' -> 16r24
	}!

"Loose Methods"!

!Core.Array methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	(self allSatisfy: [:each | each isString and: 
					["But not Symbols"
					each isAtomic not]])
		ifTrue: [aRegistryWriter stringArrayAt: aString put: self]
		ifFalse: [aRegistryWriter writeCollection: self at: aString]! !
!Core.Array categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.ByteArray methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter binaryAt: aString put: self! !
!Core.ByteArray categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.LargeInteger methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	^self basicSize <= 4
		ifTrue: [aRegistryWriter dwordAt: aString put: self]
		ifFalse: 
			[self basicSize <= 8
				ifTrue: [aRegistryWriter qwordAt: aString put: self]
				ifFalse: 
					[aRegistryWriter
						bytesAt: aString
						put: self asByteArray
						as: self class]]! !
!Core.LargeInteger categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.SmallInteger methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	"In the current 32-bit world, all SmallIntegers can be stored as DWORD values, but not so for a 64-bit future"

	(VMConstants.IsWin64 and: [self isInt32 not])
		ifTrue: [aRegistryWriter qwordAt: aString put: self]
		ifFalse: [aRegistryWriter dwordAt: aString put: self]! !
!Core.SmallInteger categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.String methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter stringAt: aString put: self! !
!Core.String categoriesForMethods!
writeToRegistry:name:!public! !
!

!Core.UndefinedObject methodsFor!

writeToRegistry: aRegistryWriter name: aString
	"Store a serialised representation of the receiver to the registry using the services of the <registryWriter> first argument, as a sub-key or value of its current key with the with the <readableString> name, aString."

	aRegistryWriter noneAtPut: aString! !
!Core.UndefinedObject categoriesForMethods!
writeToRegistry:name:!public! !
!

!OS.AdvApiLibrary methodsFor!

regCloseKey: hKey
	"Release the handle of the specified registry key.

		LONG RegCloseKey( 
			HKEYhKey 	// handle of key to close 
		);"

	<stdcall: sdword RegCloseKey handle>
	^self invalidCall: _failureCode!

regConnectRegistry: lpMachineName hKey: hKey phkResult: phkResult
	"
		LONG RegConnectRegistry( 
			LPWSTRlpMachineName,	// address of name of remote computer 
			HKEYhKey,			// predefined registry handle 
			PHKEYphkResult 		// address of buffer for remote registry handle);
	"

	<stdcall: errno RegConnectRegistryW lpwstr handle lpvoid>
	^self invalidCall: _failureCode!

regCreateKeyEx: hKey lpSubKey: lpSubKey reserved: reserved lpClass: lpClass dwOptions: dwOptions samDesired: samDesired lpSecurityAttributes: lpSecurityAttributes phkResult: phkResult lpdwDisposition: lpdwDisposition
	"Create or opens the specified registry key. Answers appropriate Win32 extended error code.

		LONG RegCreateKeyEx( 
			HKEY hKey, 			// handle of an open key 
			LPCWSTR lpSubKey, 		// address of subkey name 
			DWORD Reserved, 		// reserved 
			LPWSTR lpClass, 			// address of class string 
			DWORD dwOptions,		// special options flag 
			REGSAM samDesired, 		// desired security access 
			LPSECURITY_ATTRIBUTES lpSecurityAttributes, // address of key security structure 
			PHKEY phkResult, 		// address of buffer for opened handle 
			LPDWORD lpdwDisposition	// address of disposition value buffer 
		); "

	<stdcall: errno RegCreateKeyExW handle lpwstr dword lpwstr dword dword lpvoid lpvoid dword*>
	^self invalidCall: _failureCode!

regDeleteKey: hKey lpSubKey: lpSubKey
	"Delete the specified sub-key of the key whose handle is hKey.

	Note that the exact behaviour depends on the host OS:
		Windows 95:	The RegDeleteKeyfunction deletes a subkey and all its descendants. 
		Windows NT:	The RegDeleteKeyfunction deletes the specified subkey. 
				The subkey to be deleted must not have subkeys. 

		LONG RegDeleteKey( 
			HKEYhKey, 		// handle of open key 
			LPCTSTRlpSubKey	// address of name of subkey to delete 
		);"

	<stdcall: errno RegDeleteKeyW handle lpwstr>
	"Custom error handling - ERROR_FILE_NOT_FOUND is returned when the named sub-key does not exist; not an exceptional case"
	_failureCode == ERROR_FILE_NOT_FOUND
		ifFalse: [self invalidCall: _failureCode].
	^_failureCode!

regDeleteTree: hKey lpSubKey: lpSubKey
	<stdcall: errno RegDeleteTreeW handle lpwstr>
	"Custom error handling - ERROR_FILE_NOT_FOUND is returned when the named sub-key does not exist; not an exceptional case"
	_failureCode == ERROR_FILE_NOT_FOUND
		ifFalse: [self invalidCall: _failureCode].
	^_failureCode!

regDeleteValue: hKey lpValueName: lpValueName
	"Delete the specified registry value of the key whose handle is hKey.

		LONG RegDeleteValue(
			HKEYhKey,			// handle of key 
			LPCTSTRlpValueName	// address of value name 
		);"

	<stdcall: errno RegDeleteValueW handle lpwstr>
	^self invalidCall: _failureCode!

regEnumKeyEx: hKey dwIndex: dwIndex lpName: lpName lpcbName: lpcbName lpReserved: lpReserved lpClass: lpClass lpcbClass: lpcbClass lpftLastWriteTime: lpftLastWriteTime
	"Get details for the sub-key of hKey with the specified index.

		LONG RegEnumKeyEx(
			HKEY hKey, 			// handle of key to query 
			DWORD dwIndex, 		// index of subkey to query 
			LPWSTR lpName, 			// address of buffer for subkey name 
			LPDWORD lpcbName, 		// address for size of subkey buffer 
			LPDWORD lpReserved,
			LPTSTR lpClass,			// address of buffer for class string 
			LPDWORD lpcbClass, 		// address for size of class buffer 
			PFILETIME lpftLastWriteTime	// address for time key last written to 
		);"

	<stdcall: errno RegEnumKeyExW handle sdword lpwstr dword* dword* lpwstr dword* FILETIME*>
	"Custom error handling - ERROR_NO_MORE_ITEMS is not really an error, just an end of collection indication"
	(_failureCode == ERROR_NO_MORE_ITEMS or: [_failureCode == ERROR_MORE_DATA])
		ifFalse: [self invalidCall: _failureCode].
	^_failureCode!

regEnumValue: hKey dwIndex: dwIndex lpValueName: lpValueName lpcbValueName: lpcbValueName lpReserved: lpReserved lpType: lpType lpData: lpData lpcbData: lpcbData
	"
		LONG RegEnumValue( 
			HKEY hKey, 			// handle of key to query 
			DWORD dwIndex, 		// index of value to query 
			LPWSTR lpValueName, 		// address of buffer for value string 
			LPDWORD lpcbValueName,	// address for size of value buffer 
			LPDWORD lpReserved, 		// reserved 
			LPDWORD lpType, 		// address of buffer for type code 
			LPBYTE lpData, 			// address of buffer for value data 
			LPDWORD lpcbData 		// address for size of data buffer 
		); "

	"Custom error handling - ERROR_NO_MORE_ITEMS is not really an error, just an end of collection indication. ERROR_MORE_DATA indicates one of the buffers may be too small."

	<stdcall: errno RegEnumValueW handle dword lpwstr dword* dword* dword* lpvoid dword*>
	(_failureCode == ERROR_NO_MORE_ITEMS or: [_failureCode == ERROR_MORE_DATA])
		ifFalse: [self invalidCall: _failureCode].
	^_failureCode!

regOpenKeyEx: hKey lpSubKey: lpSubKey ulOptions: ulOptions samDesired: samDesired phkResult: phkResult
	"Opens the specified registry key. Answers appropriate Win32 extended error code.
		LONG RegOpenKeyEx(
  			HKEY hKey,		// handle of open key 
			LPCWSTR lpSubKey,	// address of name of subkey to open 
			DWORD ulOptions,	// reserved 
			REGSAM samDesired,	// security access mask 
			PHKEY phkResult 	// address of handle of open key 
		);"

	<stdcall: errno RegOpenKeyExW handle lpwstr dword dword lpvoid>
	"Custom error handling - ERROR_FILE_NOT_FOUND is returned when the named sub-key does not exist; not an exceptional case"
	_failureCode == ERROR_FILE_NOT_FOUND
		ifFalse: [self invalidCall: _failureCode].
	^_failureCode!

regQueryInfoKey: hKey lpClass: lpClass lpcchClass: lpcbClass lpReserved: lpReserved lpcSubKeys: lpcSubKeys lpcbMaxSubKeyLen: lpcbMaxSubKeyLen lpcbMaxClassLen: lpcbMaxClassLen lpcValues: lpcValues lpcbMaxValueNameLen: lpcbMaxValueNameLen lpcbMaxValueLen: lpcbMaxValueLen lpcbSecurityDescriptor: lpcbSecurityDescriptor lpftLastWriteTime: lpftLastWriteTime
	"Answer (a lot of) information about a specified registry key. 

		LONG RegQueryInfoKey ( 
			HKEY hKey, 					// handle of key to query 
			LPTSTR lpClass, 					// address of buffer for class string 
			LPDWORD lpcbClass, 				// address of size of class string buffer 
			LPDWORD lpReserved, 				// reserved 
			LPDWORD lpcSubKeys, 			// address of buffer for number of subkeys 
			LPDWORD lpcbMaxSubKeyLen,	// address of buffer for longest subkey name length 
			LPDWORD lpcbMaxClassLen,			// address of buffer for longest class string length 
			LPDWORD lpcValues, 				// address of buffer for number of value entries 
			LPDWORD lpcbMaxValueNameLen,	// address of buffer for longest value name length 
			LPDWORD lpcbMaxValueLen, 		// address of buffer for longest value data length 
			LPDWORD lpcbSecurityDescriptor,// address of buffer for security descriptor length 
			PFILETIME lpftLastWriteTime			// address of buffer for last write time 
	 ); "

	<stdcall: errno RegQueryInfoKeyW handle lpvoid dword* dword* dword* dword* dword* dword* dword* dword* dword* FILETIME*>
	^self invalidCall: _failureCode!

regQueryValueEx: kKey lpValueName: lpValueName lpReserved: lpReserved lpType: lpType lpData: lpData lpcbData: lpcbData
	"Retrieves the type and data for a specified value name associated with an open registry key.
		LONG RegQueryValueEx(
			HKEY hKey,			// handle of key to query 
			LPTSTR lpValueName,		// address of name of value to query 
			LPDWORD lpReserved,		// reserved 
			LPDWORD lpType,		// address of buffer for value type 
			LPBYTE lpData,			// address of data buffer 
			LPDWORD lpcbData 		// address of data buffer size 
		);"

	<stdcall: errno RegQueryValueExW handle lpwstr dword* dword* lpvoid dword*>
	"Custom error handling - ERROR_FILE_NOT_FOUND is returned when the named value does not exist; not an exceptional case"
	_failureCode == ERROR_FILE_NOT_FOUND
		ifFalse: [self invalidCall: _failureCode].
	^_failureCode!

regSetValueEx: kKey lpValueName: lpValueName reserved: dwReserved dwType: dwType lpData: lpData cbData: cbData
	"Store the type and data for a specified value name associated with an open registry key.
		LONG RegSetValueEx( 
			HKEY hKey,		// handle of key
			LPWSTR lpValueName,	// address of name of value
			DWORD lpReserved,	// reserved 
			DWORD lpType,		// value type 
			CONST BYTE *lpData, 	// address of data buffer 
			DWORD lpcbData 	// data buffer size 
		);"

	<stdcall: errno RegSetValueExW handle lpwstr dword dword lpvoid dword>
	^self invalidCall: _failureCode! !
!OS.AdvApiLibrary categoriesForMethods!
regCloseKey:!public!win32 functions-registry! !
regConnectRegistry:hKey:phkResult:!public!win32 functions-registry! !
regCreateKeyEx:lpSubKey:reserved:lpClass:dwOptions:samDesired:lpSecurityAttributes:phkResult:lpdwDisposition:!public!win32 functions-registry! !
regDeleteKey:lpSubKey:!public!win32 functions-registry! !
regDeleteTree:lpSubKey:!public!win32 functions-registry! !
regDeleteValue:lpValueName:!public!win32 functions-registry! !
regEnumKeyEx:dwIndex:lpName:lpcbName:lpReserved:lpClass:lpcbClass:lpftLastWriteTime:!public!win32 functions-registry! !
regEnumValue:dwIndex:lpValueName:lpcbValueName:lpReserved:lpType:lpData:lpcbData:!public!win32 functions-registry! !
regOpenKeyEx:lpSubKey:ulOptions:samDesired:phkResult:!public!win32 functions-registry! !
regQueryInfoKey:lpClass:lpcchClass:lpReserved:lpcSubKeys:lpcbMaxSubKeyLen:lpcbMaxClassLen:lpcValues:lpcbMaxValueNameLen:lpcbMaxValueLen:lpcbSecurityDescriptor:lpftLastWriteTime:!public!win32 functions-registry! !
regQueryValueEx:lpValueName:lpReserved:lpType:lpData:lpcbData:!public!win32 functions-registry! !
regSetValueEx:lpValueName:reserved:dwType:lpData:cbData:!public!win32 functions-registry! !
!

"End of package definition"!

