| package |
package := Package name: 'Dolphin Continuations'.
package paxVersion: 1;
	basicComment: 'Dolphin Smalltalk Call Continuations.
Copyright (c) Object Arts Ltd, 2002.

A Continuation reifies the dynamic execution state of a Process (i.e. the pending execution stack), at a particular point in time, as a first-class object. The resulting object can be sent messages to continue the computation.

Note that many of the uses of call continuations in Lisp are directly supported by Smalltalk''s built-in return from block home (i.e. ^-return) mechanism, so we do not need to use these more heavyweight continations to perform operations such as escaping from loops or recursion. In those cases it is simpler to pass in a block containing a ^-return as an argument. ANSI Smalltalk Exceptions even provide a standard mechanism to to allow one to escape from a computation and subsequently re-enter it. However resumption of a thread that throws an exception can only be done once. Should we wish to capture the state of a compuation, escape from it, and then re-enter it multiple times, then we need full blown <Continuation>s.

Dolphin''s Continuations have been inspired by Seaside Continuations for Squeak, but the implementation is necessarily completely different because Dolphin uses an explict process stack, rather than the traditional Smalltalk-80 representation of the stack as a linked series of activation records.

'.

package basicPackageVersion: '6.0'.

package basicScriptAt: #postinstall put: '"Process copying cannot be debugged into at present because the copying does not work correctly for debug stack frames. However breakpoints can be set in ProcessCopier>>copyStack:, as long as it is after the basic copy has been made."

Debugger
	skipSelector: #callCC
		of: BlockClosure
		type: 3;
	skipSelector: #copy
		of: Process
		type: 3;
	skipSelector: #continueWith:
		of: Process
		type: 3!!'.

package classNames
	add: #Continuation;
	add: #ProcessCopier;
	yourself.

package methodNames
	add: #BlockClosure -> #acceptProcessCopier:;
	add: #BlockClosure -> #callCC;
	add: #BlockClosure -> #deepenProcessCopy:;
	add: #Context -> #acceptProcessCopier:;
	add: #Context -> #deepenProcessCopy:;
	add: #ExceptionHandler -> #deepenProcessCopy:;
	add: #ExceptionHandlerAbstract -> #acceptProcessCopier:;
	add: #ExceptionHandlerAbstract -> #deepenProcessCopy:;
	add: #ExceptionHandlerSet -> #deepenProcessCopy:;
	add: #Object -> #acceptProcessCopier:;
	add: #Process -> #acceptProcessCopier:;
	add: #Process -> #continueWith:;
	add: #Process -> #copy;
	add: #Process -> #postCopy;
	add: #StackFrame -> #copyStack;
	add: #StackFrame -> #rebase:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\Base\Dolphin';
	yourself).

package!

"Class Definitions"!

Object subclass: #Continuation
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ProcessCopier
	instanceVariableNames: 'source delta copied clone'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!BlockClosure methodsFor!

acceptProcessCopier: aProcessCopier 
	^self isClean ifTrue: [self] ifFalse: [aProcessCopier copyObject: self]!

callCC
	"Answer a <Contination> which contains a copy of the active process.
	When the continuation is later evaluated, it is like returning a value from 
	this frame again."

	^self value: (Continuation fromContext: Processor activeProcess topFrame sender)!

deepenProcessCopy: aProcessCopier 
	outer isNil ifFalse: [outer := aProcessCopier visit: outer].
	"Visit the copied values in case referring to an object that must be copied"
	1 to: self size do: [:i | self at: i put: (aProcessCopier visit: (self at: i))]! !
!BlockClosure categoriesFor: #acceptProcessCopier:!copying!public! !
!BlockClosure categoriesFor: #callCC!evaluating!public! !
!BlockClosure categoriesFor: #deepenProcessCopy:!copying!public! !

!Context methodsFor!

acceptProcessCopier: aProcessCopier
	^aProcessCopier copyObject: self!

deepenProcessCopy: aProcessCopier 
	(outer isInteger and: [outer ~~ 0]) ifTrue: [outer := (outer + aProcessCopier delta) asStackPointer].
	block := aProcessCopier visit: block.
	"Visit the shared variables in case referring to an object that must be copied"
	1 to: self size do: [:i | self at: i put: (aProcessCopier visit: (self at: i))]! !
!Context categoriesFor: #acceptProcessCopier:!copying!public! !
!Context categoriesFor: #deepenProcessCopy:!copying!public! !

!ExceptionHandler methodsFor!

deepenProcessCopy: aProcessCopier
	super deepenProcessCopy: aProcessCopier.
	handler := aProcessCopier visit: handler! !
!ExceptionHandler categoriesFor: #deepenProcessCopy:!copying!private! !

!ExceptionHandlerAbstract methodsFor!

acceptProcessCopier: aProcessCopier
	^aProcessCopier copyObject: self!

deepenProcessCopy: aProcessCopier
	protectedBlock := aProcessCopier visit: protectedBlock.
	returnContinuation := aProcessCopier visit: returnContinuation.
	outer := aProcessCopier visit: outer! !
!ExceptionHandlerAbstract categoriesFor: #acceptProcessCopier:!copying!public! !
!ExceptionHandlerAbstract categoriesFor: #deepenProcessCopy:!copying!private! !

!ExceptionHandlerSet methodsFor!

deepenProcessCopy: aProcessCopier
	super deepenProcessCopy: aProcessCopier.
	handlers := handlers shallowCopy.
	2 to: handlers size
		by: 2
		do: [:i | handlers at: i put: (aProcessCopier visit: (handlers at: i))]! !
!ExceptionHandlerSet categoriesFor: #deepenProcessCopy:!copying!private! !

!Object methodsFor!

acceptProcessCopier: aProcessCopier
	^self! !
!Object categoriesFor: #acceptProcessCopier:!copying!public! !

!Process methodsFor!

acceptProcessCopier: aProcessCopier
	^aProcessCopier existingCopyOf: self!

continueWith: anObject
	"Private - Escape to the receiver with anObject as the continuation value. Note that if the sender is being debugged, then we 
	must take over that debugger to continue the debugging session."

	Processor activeProcess debugger 
		ifNil: 
			[self interruptWith: 
					[Processor returnValue: anObject toFrame: (self indexOfSP: self basicSuspendedFrame)]]
		ifNotNil: [:activeDebugger | activeDebugger continue: self with: anObject].
	Processor terminateActive!

copy
	"Answer a suspended, but resumable, copy of this <Process>. Note that if the receiver is
	waiting on a Semaphore, the copy will _not_ be, it will always be in a suspended state."

	^self isActive 
		ifTrue: 
			[| copy sp suspended |
			copy := ProcessCopier copyStack: self topFrame sender.
			suspended := copy suspendedFrame.
			sp := suspended sp + 1.
			copy
				resize: sp;
				at: sp put: copy.
			suspended sp: sp.
			copy]
		ifFalse: [ProcessCopier copyStack: self suspendedFrame]!

postCopy
	"Apply any final flourish to the copy that may be required."

	nextLink := debugger := myList := thread := nil.
	callbackDepth := 0.
	^self! !
!Process categoriesFor: #acceptProcessCopier:!copying!public! !
!Process categoriesFor: #continueWith:!helpers!private! !
!Process categoriesFor: #copy!copying!public! !
!Process categoriesFor: #postCopy!copying!public! !

!StackFrame methodsFor!

copyStack
	^ProcessCopier copyStack: self!

rebase: aProcessCopier 
	| senderAddress delta |
	delta := aProcessCopier delta.
	senderAddress := self basicSender.
	senderAddress == 0 ifFalse: [self basicSender: (senderAddress + delta) asStackPointer].
	self basicSP: (self basicSP + delta) asStackPointer.
	self basicBP: (self basicBP + delta) asStackPointer! !
!StackFrame categoriesFor: #copyStack!copying!public! !
!StackFrame categoriesFor: #rebase:!copying!public! !

"End of package definition"!

