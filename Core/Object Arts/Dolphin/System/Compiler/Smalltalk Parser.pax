| package |
package := Package name: 'Smalltalk Parser'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Parser
Based on the Refactoring Browser parser (RBParser), copyright (c) John Brant & Don Roberts. 

The original RB parser has been modified in the following ways for Dolphin:

1) Dolphin format external methods (FFI calls) are parsed, and there are nodes/tokens specifically for this purpose.
2) The error reporting has been improved to use a specific exception, SmalltalkCompilerError, with more details of the error. Error codes are used rather than error strings, and the error messages are compatible with those from the original Dolphin compiler (where possible). The exception also includes the offending source range and line number, with the former being used to select the erroneous range in the Dolphin browsers.
3) The scanner has been optimized for improved performance.
4) A number of miscellaneous minor fixes and refactorings.
5) All classes renamed to avoid clashing with the originals.

These modifications are Copyright (c) Object Arts Ltd, 2002.

The parser remains compatible with the RBParser, and so can be used in conjunction with the RB refactoring engine. Note that the majority of RB specific methods and classes have been extracted to the RBParser package, which also contains global aliases mapping the class names used in the RB to the corresponding classes in this package.'.

package basicPackageVersion: '7.0'.


package setClassNames: #(
	#{Kernel.AbstractLiteralArrayNode}
	#{Kernel.AbstractPrimitiveCallNode}
	#{Kernel.ParseNodeVisitor}
	#{Kernel.Parser}
	#{Kernel.Scanner}
	#{Kernel.StAnnotationNode}
	#{Kernel.StAssignmentNode}
	#{Kernel.StAssignmentToken}
	#{Kernel.StBasicVariableNode}
	#{Kernel.StBinarySelectorToken}
	#{Kernel.StBlockNode}
	#{Kernel.StBraceArrayNode}
	#{Kernel.StCascadeNode}
	#{Kernel.StEofToken}
	#{Kernel.StExternalArgTypeNode}
	#{Kernel.StExternalCallNode}
	#{Kernel.StIdentifierToken}
	#{Kernel.StIllegalCharacterToken}
	#{Kernel.StKeywordToken}
	#{Kernel.StLiteralArrayNode}
	#{Kernel.StLiteralArrayToken}
	#{Kernel.StLiteralByteArrayNode}
	#{Kernel.StLiteralByteArrayToken}
	#{Kernel.StLiteralCharacterToken}
	#{Kernel.StLiteralNode}
	#{Kernel.StLiteralSymbolToken}
	#{Kernel.StLiteralToken}
	#{Kernel.StLiteralTokenWithSource}
	#{Kernel.StLiteralValueNode}
	#{Kernel.StMessageNode}
	#{Kernel.StMethodNode}
	#{Kernel.StMultiKeywordLiteralToken}
	#{Kernel.StNumberLiteralToken}
	#{Kernel.StOptimizedNode}
	#{Kernel.StOptimizedToken}
	#{Kernel.StParameterNode}
	#{Kernel.StPrimitiveNode}
	#{Kernel.StProgramNode}
	#{Kernel.StQualifiedReferenceNode}
	#{Kernel.StQualifiedReferenceToken}
	#{Kernel.StRealVariableNode}
	#{Kernel.StReturnNode}
	#{Kernel.StSelfVariableNode}
	#{Kernel.StSequenceNode}
	#{Kernel.StSpecialCharacterToken}
	#{Kernel.StSpecialVariableNode}
	#{Kernel.StSuperVariableNode}
	#{Kernel.StTagNode}
	#{Kernel.StTempDeclNode}
	#{Kernel.StThisContextVariableNode}
	#{Kernel.StToken}
	#{Kernel.StValueNode}
	#{Kernel.StValueToken}
	#{Kernel.StVariableNode}
).

package setMethodNames: #(
	#(#{Core.Behavior} #parseTreeFor:)
	#(#{Kernel.CompiledCode} #parseTree)
	#(#{Kernel.CompiledCode} #parseTreeNoError)
	#(#{Kernel.CompiledCode} #parseTreeOnError:)
	#(#{Kernel.CompiledExpression} #parseTreeOnError:)
	#(#{Kernel.CompiledMethod} #parseTreeOnError:)
	#(#{Kernel.CompileFailedMethod} #accessesInstVar:at:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Kernel.ParseNodeVisitor'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Kernel.Parser'
	instanceVariableNames: 'scanner currentToken nextToken errorBlock methodNode st80Syntax comments methodClass source environment'
	classVariableNames: 'AllowEmptyStatements'
	imports: #(#{External.ExtCallArgTypes} #{Kernel.ParseErrorCodes})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Kernel.Scanner'
	instanceVariableNames: 'stream buffer tokenStart currentCharacter characterType comments line errorHandler environment'
	classVariableNames: 'SpecialLiterals'
	imports: #(#{Kernel.ParseErrorCodes})
	classInstanceVariableNames: ''
	classConstants: {
			'ClassificationTable'
				-> #(#separator nil nil nil nil nil nil nil nil #separator #separator #separator #separator #separator nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil #separator #binary nil nil nil #binary #binary nil #special #special #binary #binary #binary #binary #special #binary #digit #digit #digit #digit #digit #digit #digit #digit #digit #digit #special #special #binary #binary #binary #binary #binary #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #special #binary #special #special #alphabetic nil #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #special #binary #special #binary nil).
			'EscapeChars' -> (IdentityDictionary
						withAll: { $0 -> $\0. $a -> $\a. $b -> $\b. $f -> $\f. $n -> $\n. $r -> $\r. $t -> $\t. $v -> $\v })
		}!
Core.Object
	subclass: #'Kernel.StProgramNode'
	instanceVariableNames: 'parent comments scope'
	classVariableNames: 'FormatterClass SuperSearch'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'InlinedBlockSelectors'
				-> #(#ifTrue: #ifTrue:ifFalse: #ifFalse: #ifFalse:ifTrue: #whileTrue: #whileTrue #whileFalse: #whileFalse #to:do: #to:by:do: #and: #or: #repeat #ifNil: #ifNotNil: #ifNil:ifNotNil: #ifNotNil:ifNil:).
			'OptimizedSelectors'
				-> #(#ifTrue: #ifTrue:ifFalse: #ifFalse: #ifFalse:ifTrue: #whileTrue: #whileTrue #whileFalse: #whileFalse #to:do: #to:by:do: #and: #or: #repeat #ifNil: #ifNotNil: #ifNil:ifNotNil: #ifNotNil:ifNil: #yourself)
		}!
Core.Object
	subclass: #'Kernel.StToken'
	instanceVariableNames: 'start comments'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StProgramNode
	subclass: #'Kernel.StExternalArgTypeNode'
	instanceVariableNames: 'typeOrdinal structClass indirections start stop'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StProgramNode
	subclass: #'Kernel.StMethodNode'
	instanceVariableNames: 'selector selectorParts body source arguments tags replacements nodeReplacements methodClass environment flags irMethod'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'HasErrorsMask' -> 16r2. 'IsExpressionMask' -> 16r1 }!
Kernel.StProgramNode
	subclass: #'Kernel.StReturnNode'
	instanceVariableNames: 'return value'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StProgramNode
	subclass: #'Kernel.StSequenceNode'
	instanceVariableNames: 'leftBar rightBar statements periods temporaries'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StProgramNode
	subclass: #'Kernel.StTagNode'
	instanceVariableNames: 'start stop'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StProgramNode
	subclass: #'Kernel.StValueNode'
	instanceVariableNames: 'parentheses'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StTagNode
	subclass: #'Kernel.AbstractPrimitiveCallNode'
	instanceVariableNames: 'errorTemp'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StTagNode
	subclass: #'Kernel.StAnnotationNode'
	instanceVariableNames: 'selector arguments'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.AbstractPrimitiveCallNode
	subclass: #'Kernel.StExternalCallNode'
	instanceVariableNames: 'nameOrOrdinal returnType argumentTypes flags callingConvention'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'OverlappedMask' -> 16r1. 'VirtualMask' -> 16r2 }!
Kernel.AbstractPrimitiveCallNode
	subclass: #'Kernel.StPrimitiveNode'
	instanceVariableNames: 'primitiveIndex'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueNode
	subclass: #'Kernel.StAssignmentNode'
	instanceVariableNames: 'variable assignment value'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueNode
	subclass: #'Kernel.StBlockNode'
	instanceVariableNames: 'left right body arguments bar'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueNode
	subclass: #'Kernel.StBraceArrayNode'
	instanceVariableNames: 'left statements periods right'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueNode
	subclass: #'Kernel.StCascadeNode'
	instanceVariableNames: 'messages semicolons'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueNode
	subclass: #'Kernel.StLiteralNode'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueNode
	subclass: #'Kernel.StMessageNode'
	instanceVariableNames: 'receiver selector selectorParts arguments'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueNode
	subclass: #'Kernel.StOptimizedNode'
	instanceVariableNames: 'left right body value methodClass source'
	classVariableNames: 'UnevaluatedCookie'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueNode
	subclass: #'Kernel.StVariableNode'
	instanceVariableNames: 'start variable'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLiteralNode
	subclass: #'Kernel.AbstractLiteralArrayNode'
	instanceVariableNames: 'stop contents start'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLiteralNode
	subclass: #'Kernel.StLiteralValueNode'
	instanceVariableNames: 'token'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLiteralNode
	subclass: #'Kernel.StQualifiedReferenceNode'
	instanceVariableNames: 'pathString flags start stop binding'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.AbstractLiteralArrayNode
	subclass: #'Kernel.StLiteralArrayNode'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.AbstractLiteralArrayNode
	subclass: #'Kernel.StLiteralByteArrayNode'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StVariableNode
	subclass: #'Kernel.StRealVariableNode'
	instanceVariableNames: 'name'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StVariableNode
	subclass: #'Kernel.StSpecialVariableNode'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StRealVariableNode
	subclass: #'Kernel.StBasicVariableNode'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StRealVariableNode
	subclass: #'Kernel.StParameterNode'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StRealVariableNode
	subclass: #'Kernel.StTempDeclNode'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSpecialVariableNode
	subclass: #'Kernel.StSelfVariableNode'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSpecialVariableNode
	subclass: #'Kernel.StSuperVariableNode'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSpecialVariableNode
	subclass: #'Kernel.StThisContextVariableNode'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StToken
	subclass: #'Kernel.StAssignmentToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StToken
	subclass: #'Kernel.StEofToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StToken
	subclass: #'Kernel.StOptimizedToken'
	instanceVariableNames: 'stopPosition'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StToken
	subclass: #'Kernel.StQualifiedReferenceToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StToken
	subclass: #'Kernel.StValueToken'
	instanceVariableNames: 'value'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueToken
	subclass: #'Kernel.StBinarySelectorToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueToken
	subclass: #'Kernel.StIdentifierToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueToken
	subclass: #'Kernel.StIllegalCharacterToken'
	instanceVariableNames: 'stopPosition'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueToken
	subclass: #'Kernel.StKeywordToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueToken
	subclass: #'Kernel.StLiteralArrayToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueToken
	subclass: #'Kernel.StLiteralByteArrayToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueToken
	subclass: #'Kernel.StLiteralToken'
	instanceVariableNames: 'stopPosition'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StValueToken
	subclass: #'Kernel.StSpecialCharacterToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLiteralToken
	subclass: #'Kernel.StLiteralSymbolToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLiteralToken
	subclass: #'Kernel.StLiteralTokenWithSource'
	instanceVariableNames: 'source'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLiteralToken
	subclass: #'Kernel.StMultiKeywordLiteralToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLiteralTokenWithSource
	subclass: #'Kernel.StLiteralCharacterToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLiteralTokenWithSource
	subclass: #'Kernel.StNumberLiteralToken'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Behavior methodsFor!

parseTreeFor: aSymbol
	| method |
	method := self compiledMethodAt: aSymbol.
	^Parser
		parseMethod: method getSource
		in: self
		environment: method customEnvironment
		onError: [:aString :pos | ^nil]! !
!Core.Behavior categoriesForMethods!
parseTreeFor:!public!RefactoringBrowser! !
!

!Kernel.CompiledCode methodsFor!

parseTree
	^self parseTreeOnError: nil!

parseTreeNoError
	^self parseTreeOnError: [:err | ^nil]!

parseTreeOnError: aBlock 
	^self subclassResponsibility! !
!Kernel.CompiledCode categoriesForMethods!
parseTree!parsing!public! !
parseTreeNoError!parsing!public! !
parseTreeOnError:!parsing!public! !
!

!Kernel.CompiledExpression methodsFor!

parseTreeOnError: aBlock
	^Parser
		parseExpression: self getSource
		in: self methodClass
		environment: self environment
		onError: aBlock! !
!Kernel.CompiledExpression categoriesForMethods!
parseTreeOnError:!parsing!public! !
!

!Kernel.CompiledMethod methodsFor!

parseTreeOnError: aBlock
	^Parser
		parseMethod: self getSource
		in: self methodClass
		environment: self environment
		onError: aBlock! !
!Kernel.CompiledMethod categoriesForMethods!
parseTreeOnError:!parsing!public! !
!

!Kernel.CompileFailedMethod methodsFor!

accessesInstVar: aString at: anInteger
	"Answer whether the receiver accesses the instance variable named, aString, which
	is the instance variable of its method class with the specified <integer> index."

	^self refersToVariable: aString! !
!Kernel.CompileFailedMethod categoriesForMethods!
accessesInstVar:at:!development!public!testing! !
!

"End of package definition"!

