| package |
package := Package name: 'Smalltalk Compiler'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{Kernel.SemanticAnalyser}
	#{Kernel.StArgumentVariable}
	#{Kernel.StaticVariableBinder}
	#{Kernel.StBlockScope}
	#{Kernel.StClassScope}
	#{Kernel.StEvalScope}
	#{Kernel.StGeneratedTempVariable}
	#{Kernel.StInstanceVariable}
	#{Kernel.StLexicalScope}
	#{Kernel.StLocalVariable}
	#{Kernel.StMethodScope}
	#{Kernel.StOptimizedBlockScope}
	#{Kernel.StSelfVariable}
	#{Kernel.StSemanticAnalyser}
	#{Kernel.StSemanticScope}
	#{Kernel.StSpecialVariable}
	#{Kernel.StStaticVariable}
	#{Kernel.StSuperVariable}
	#{Kernel.StTempVariable}
	#{Kernel.StThisContextVariable}
	#{Kernel.StVariable}
	#{Kernel.StWorkspaceVariable}
).

package setMethodNames: #(
	#(#{Kernel.StMethodNode} #newClassScope)
	#(#{Kernel.StProgramNode} #analyze)
	#(#{Kernel.StProgramNode} #classScope)
	#(#{Kernel.StProgramNode} #methodScope)
	#(#{Kernel.StQualifiedReferenceNode} #basicBinding)
	#(#{Kernel.StQualifiedReferenceNode} #binding)
	#(#{Kernel.StQualifiedReferenceNode} #binding:)
	#(#{Kernel.StQualifiedReferenceNode} #resolveBinding)
	#(#{Kernel.StRealVariableNode} #lookupInScope:)
	#(#{Kernel.StSelfVariableNode} #lookupInScope:)
	#(#{Kernel.StSuperVariableNode} #lookupInScope:)
	#(#{Kernel.StThisContextVariableNode} #lookupInScope:)
	#(#{Kernel.StVariableNode} #lookupInScope:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'Smalltalk Parser'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Kernel.StSemanticScope'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Kernel.StVariable'
	instanceVariableNames: 'scope'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.ParseNodeVisitor
	subclass: #'Kernel.SemanticAnalyser'
	instanceVariableNames: 'methodNode classScope currentScope evalScope errorBlock scopes inStaticExpression inTag'
	classVariableNames: ''
	imports: #(#{Kernel.ParseErrorCodes})
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.SemanticAnalyser
	subclass: #'Kernel.StaticVariableBinder'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.SemanticAnalyser
	subclass: #'Kernel.StSemanticAnalyser'
	instanceVariableNames: 'literals stringLiterals tempDecls isMutator'
	classVariableNames: 'OptimizedMessages'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'RestrictedSelectors' -> (IdentitySet
						withAll: #(#?? #~~ #== #and: #basicAt: #basicAt:put: #basicClass #basicNew: #basicSize #ifFalse: #ifFalse:ifTrue: #ifNil: #ifNil:ifNotNil: #ifNotNil: #ifNotNil:ifNil: #ifTrue: #ifTrue:ifFalse: #not #or: #timesRepeat: #to:by:do: #to:do: #yourself)).
			'SpecialSelectors' -> (IdentitySet
						withAll: #(#- #* #/ #// #?? #\\ #~~ #~= #+ #< #<= #= #== #> #>= #at: #at:put: #basicAt: #basicAt:put: #basicClass #basicNew: #basicSize #bitAnd: #bitOr: #bitShift: #class #isNil #new #new: #not #notNil #size #value #value: #value:value:))
		}!
Kernel.StSemanticScope
	subclass: #'Kernel.StClassScope'
	instanceVariableNames: 'methodClass environment instanceVariables selfVariable superVariable metaScope staticVariables'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSemanticScope
	subclass: #'Kernel.StEvalScope'
	instanceVariableNames: 'pools outer'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSemanticScope
	subclass: #'Kernel.StLexicalScope'
	instanceVariableNames: 'node outer locals thisContextVariable flags'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'FarReturnMask' -> 16r2. 'NeedsSelfMask' -> 16r1 }!
Kernel.StLexicalScope
	subclass: #'Kernel.StBlockScope'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'EmptyBlockMask' -> 16r200. 'NeedsOuterMask' -> 16r100 }!
Kernel.StLexicalScope
	subclass: #'Kernel.StMethodScope'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StBlockScope
	subclass: #'Kernel.StOptimizedBlockScope'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StVariable
	subclass: #'Kernel.StInstanceVariable'
	instanceVariableNames: 'index name'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StVariable
	subclass: #'Kernel.StLocalVariable'
	instanceVariableNames: 'node storage reads'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StVariable
	subclass: #'Kernel.StSpecialVariable'
	instanceVariableNames: 'reads'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StVariable
	subclass: #'Kernel.StStaticVariable'
	instanceVariableNames: 'binding'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLocalVariable
	subclass: #'Kernel.StArgumentVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLocalVariable
	subclass: #'Kernel.StGeneratedTempVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLocalVariable
	subclass: #'Kernel.StTempVariable'
	instanceVariableNames: 'writes'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSpecialVariable
	subclass: #'Kernel.StSelfVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSpecialVariable
	subclass: #'Kernel.StSuperVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSpecialVariable
	subclass: #'Kernel.StThisContextVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StStaticVariable
	subclass: #'Kernel.StWorkspaceVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Kernel.StMethodNode methodsFor!

newClassScope
	^StClassScope methodClass: methodClass environment: environment! !
!Kernel.StMethodNode categoriesForMethods!
newClassScope!accessing!private! !
!

!Kernel.StProgramNode methodsFor!

analyze
	StSemanticAnalyser analyseParseTree: self!

classScope
	^scope ifNotNil: [scope classScope]!

methodScope
	^scope methodScope! !
!Kernel.StProgramNode categoriesForMethods!
analyze!operations!public! !
classScope!accessing!public! !
methodScope!accessing!public! !
!

!Kernel.StQualifiedReferenceNode methodsFor!

basicBinding
	^binding!

binding
	^binding ifNil: [binding := self resolveBinding]!

binding: aVariableBinding
	binding := aVariableBinding!

resolveBinding
	^self isRelative
		ifTrue: 
			[(scope classScope resolveIdentifier: ((pathString beginsWith: '_.')
						ifTrue: [pathString copyFrom: 3]
						ifFalse: [pathString]))
				ifNotNil: [:var | var binding]]
		ifFalse: 
			[| globalScope |
			globalScope := scope classScope methodClass globalScope.
			globalScope fullBindingFor: pathString environment: globalScope environment]! !
!Kernel.StQualifiedReferenceNode categoriesForMethods!
basicBinding!accessing!private! !
binding!accessing!private! !
binding:!accessing!private! !
resolveBinding!accessing!public! !
!

!Kernel.StRealVariableNode methodsFor!

lookupInScope: aStSemanticScope
	^aStSemanticScope resolveIdentifier: self name! !
!Kernel.StRealVariableNode categoriesForMethods!
lookupInScope:!operations!public! !
!

!Kernel.StSelfVariableNode methodsFor!

lookupInScope: aStSemanticScope
	^aStSemanticScope selfVariable! !
!Kernel.StSelfVariableNode categoriesForMethods!
lookupInScope:!operations!public! !
!

!Kernel.StSuperVariableNode methodsFor!

lookupInScope: aStSemanticScope
	^aStSemanticScope superVariable! !
!Kernel.StSuperVariableNode categoriesForMethods!
lookupInScope:!operations!public! !
!

!Kernel.StThisContextVariableNode methodsFor!

lookupInScope: aStSemanticScope
	^aStSemanticScope thisContextVariable! !
!Kernel.StThisContextVariableNode categoriesForMethods!
lookupInScope:!operations!public! !
!

!Kernel.StVariableNode methodsFor!

lookupInScope: aStSemanticScope
	^self subclassResponsibility! !
!Kernel.StVariableNode categoriesForMethods!
lookupInScope:!operations!public! !
!

"End of package definition"!

