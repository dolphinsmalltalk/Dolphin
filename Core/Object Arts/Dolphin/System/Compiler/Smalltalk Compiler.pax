| package |
package := Package name: 'Smalltalk Compiler'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{Kernel.AbstractSemanticAnalyser}
	#{Kernel.StArgumentVariable}
	#{Kernel.StBlockScope}
	#{Kernel.StClassScope}
	#{Kernel.StEvalScope}
	#{Kernel.StGeneratedTempVariable}
	#{Kernel.StInstanceVariable}
	#{Kernel.StLexicalScope}
	#{Kernel.StLocalVariable}
	#{Kernel.StMethodScope}
	#{Kernel.StOptimizedBlockScope}
	#{Kernel.StSelfVariable}
	#{Kernel.StSemanticAnalyser}
	#{Kernel.StSemanticScope}
	#{Kernel.StSpecialVariable}
	#{Kernel.StStaticVariable}
	#{Kernel.StSuperVariable}
	#{Kernel.StTempVariable}
	#{Kernel.StThisContextVariable}
	#{Kernel.StVariable}
	#{Kernel.StWorkspaceVariable}
).

package setMethodNames: #(
	#(#{Kernel.StMethodNode} #analyze)
	#(#{Kernel.StMethodNode} #newClassScope)
	#(#{Kernel.StQualifiedReferenceNode} #binding)
	#(#{Kernel.StQualifiedReferenceNode} #resolveBinding)
	#(#{Kernel.StVariableNode} #binding)
	#(#{Kernel.StVariableNode} #resolveBinding)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'Smalltalk Parser'
).

package!

"Class Definitions"!

Core.Object subclass: #'Kernel.StSemanticScope'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Kernel.StVariable'
	instanceVariableNames: 'scope'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.ParseNodeVisitor subclass: #'Kernel.AbstractSemanticAnalyser'
	instanceVariableNames: 'methodNode classScope currentScope evalScope errorBlock scopes inStaticExpression inTag'
	classVariableNames: ''
	imports: #(#{Kernel.ParseErrorCodes})
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.AbstractSemanticAnalyser subclass: #'Kernel.StSemanticAnalyser'
	instanceVariableNames: 'literals stringLiterals tempDecls isMutator'
	classVariableNames: 'OptimizedMessages RestrictedSelectors SpecialSelectors'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSemanticScope subclass: #'Kernel.StClassScope'
	instanceVariableNames: 'methodClass environment instanceVariables selfVariable superVariable metaScope staticVariables'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSemanticScope subclass: #'Kernel.StEvalScope'
	instanceVariableNames: 'pools outer'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSemanticScope subclass: #'Kernel.StLexicalScope'
	instanceVariableNames: 'node outer locals thisContextVariable flags'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'FarReturnMask' -> 16r2.
		'NeedsSelfMask' -> 16r1
	}!
Kernel.StLexicalScope subclass: #'Kernel.StBlockScope'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'EmptyBlockMask' -> 16r200.
		'NeedsOuterMask' -> 16r100
	}!
Kernel.StLexicalScope subclass: #'Kernel.StMethodScope'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StBlockScope subclass: #'Kernel.StOptimizedBlockScope'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StVariable subclass: #'Kernel.StInstanceVariable'
	instanceVariableNames: 'index name'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StVariable subclass: #'Kernel.StLocalVariable'
	instanceVariableNames: 'node storage reads'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StVariable subclass: #'Kernel.StSpecialVariable'
	instanceVariableNames: 'reads'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StVariable subclass: #'Kernel.StStaticVariable'
	instanceVariableNames: 'binding'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLocalVariable subclass: #'Kernel.StArgumentVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLocalVariable subclass: #'Kernel.StGeneratedTempVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StLocalVariable subclass: #'Kernel.StTempVariable'
	instanceVariableNames: 'writes'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSpecialVariable subclass: #'Kernel.StSelfVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSpecialVariable subclass: #'Kernel.StSuperVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StSpecialVariable subclass: #'Kernel.StThisContextVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.StStaticVariable subclass: #'Kernel.StWorkspaceVariable'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Kernel.StMethodNode methodsFor!

analyze
	StSemanticAnalyser analyseParseTree: self!

newClassScope
	^StClassScope methodClass: methodClass environment: self environment! !
!Kernel.StMethodNode categoriesForMethods!
analyze!operations!public! !
newClassScope!accessing!private! !
!

!Kernel.StQualifiedReferenceNode methodsFor!

binding
	^binding ifNil: [binding := self resolveBinding]!

resolveBinding
	^self isRelative
		ifTrue: 
			[| classScope |
			classScope := scope classScope.
			classScope methodClass
				fullBindingFor: ((pathString beginsWith: '_.') ifTrue: [pathString copyFrom: 3] ifFalse: [pathString])
				environment: classScope environment]
		ifFalse: 
			[| globalScope |
			globalScope := scope classScope methodClass globalScope.
			globalScope fullBindingFor: pathString environment: globalScope environment]! !
!Kernel.StQualifiedReferenceNode categoriesForMethods!
binding!accessing!private! !
resolveBinding!accessing!private! !
!

!Kernel.StVariableNode methodsFor!

binding
	^variable ifNil: [self resolveBinding] ifNotNil: [variable binding]!

resolveBinding
	| initial |
	initial := name at: 1.
	^(initial isUppercase or: [initial == $_]) ifTrue: [self methodNode fullBindingFor: name]! !
!Kernel.StVariableNode categoriesForMethods!
binding!accessing!private! !
resolveBinding!accessing!private! !
!

"End of package definition"!

