| package |
package := Package name: 'Dolphin Overlapped IO'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Win32 Overlapped I/O
Copyright (c) Object Arts Ltd, 2004

This package contains classes and methods for supporting Win32 overlapped I/O.'.

package basicPackageVersion: '6.1'.


package setClassNames: #(
	#{OS.OVERLAPPED}
).

package setMethodNames: #(
	#(#{OS.KernelLibrary} #cancelIo:)
	#(#{OS.KernelLibrary} #createIoCompletionPort:existingCompletionPort:completionKey:numberOfConcurrentThreads:)
	#(#{OS.KernelLibrary} #getOverlappedResult:lpOverlapped:lpNumberOfBytesTransferred:bWait:)
	#(#{OS.KernelLibrary} #getQueuedCompletionStatus:lpNumberOfBytesTransferred:lpCompletionKey:lpOverlapped:dwMilliseconds:)
	#(#{OS.KernelLibrary} #postQueuedCompletionStatus:dwNumberOfBytesTransferred:dwCompletionKey:lpOverlapped:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

External.Structure
	subclass: #'OS.OVERLAPPED'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_hEvent' -> 16r10.
			'_OffsetOf_Internal' -> 16r0.
			'_OffsetOf_InternalHigh' -> 16r4.
			'_OffsetOf_Offset' -> 16r8.
			'_OffsetOf_OffsetHigh' -> 16rC.
			'_OffsetOf_Pointer' -> 16r8.
			'_OVERLAPPED_Size' -> 16r14
		}!

"Loose Methods"!

!OS.KernelLibrary methodsFor!

cancelIo: hFile
	"Invoke the CancelIo() function of the module wrapped by the receiver.
	Helpstring: Cancels all pending input and output (I/O) operations that were issued by the calling thread for the specified file handle.

		long __stdcall CancelIo(
			[in]long hFile);"

	<stdcall: sdword CancelIo sdword>
	^self invalidCall: _failureCode!

createIoCompletionPort: fileHandle existingCompletionPort: existingCompletionPort completionKey: completionKey numberOfConcurrentThreads: numberOfConcurrentThreads
	"Invoke the CreateIoCompletionPort() function of the module wrapped by the receiver.
	Helpstring: Associates an input/output (I/O) completion port with one or more file handles, or it can create an I/O completion port that is not associated with a file handle.

		long __stdcall CreateIoCompletionPort(
			[in]long FileHandle,
			[in]long ExistingCompletionPort,
			[in]unsigned long CompletionKey,
			[in]unsigned long NumberOfConcurrentThreads);"

	<stdcall: sdword CreateIoCompletionPort sdword sdword dword dword>
	^self invalidCall: _failureCode!

getOverlappedResult: hFile lpOverlapped: lpOverlapped lpNumberOfBytesTransferred: lpNumberOfBytesTransferred bWait: bWait
	"Invoke the GetOverlappedResult() function of the module wrapped by the receiver.
	Helpstring: Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device.

		long __stdcall GetOverlappedResult(
			[in]long hFile,
			[in]OVERLAPPED* lpOverlapped,
			[out]unsigned long* lpNumberOfBytesTransferred,
			[in]long bWait);"

	<stdcall: sdword GetOverlappedResult sdword OVERLAPPED* dword* sdword>
	^self invalidCall: _failureCode!

getQueuedCompletionStatus: completionPort lpNumberOfBytesTransferred: lpNumberOfBytesTransferred lpCompletionKey: lpCompletionKey lpOverlapped: lpOverlapped dwMilliseconds: dwMilliseconds
	"Invoke the GetQueuedCompletionStatus() function of the module wrapped by the receiver.
	Helpstring: attempts to dequeue an I/O completion packet from a specified I/O completion port. If there is no completion packet queued, the function waits for a pending I/O operation associated with the completion port to complete.

		long __stdcall GetQueuedCompletionStatus(
			[in]long CompletionPort,
			[out]unsigned long* lpNumberOfBytesTransferred,
			[out]PULONG_PTR lpCompletionKey,
			[out]OVERLAPPED** lpOverlapped,
			[in]unsigned long dwMilliseconds);"

	<stdcall: sdword GetQueuedCompletionStatus sdword dword* uintptr* OVERLAPPED** dword>
	^self invalidCall: _failureCode!

postQueuedCompletionStatus: completionPort dwNumberOfBytesTransferred: dwNumberOfBytesTransferred dwCompletionKey: dwCompletionKey lpOverlapped: lpOverlapped
	"Invoke the PostQueuedCompletionStatus() function of the module wrapped by the receiver.
	Helpstring: Posts an I/O completion packet to an I/O completion port.

		long __stdcall PostQueuedCompletionStatus(
			[in]long CompletionPort,
			[in]unsigned long dwNumberOfBytesTransferred,
			[in]unsigned long dwCompletionKey,
			[in]OVERLAPPED* lpOverlapped);"

	<stdcall: sdword PostQueuedCompletionStatus sdword dword dword OVERLAPPED*>
	^self invalidCall: _failureCode! !
!OS.KernelLibrary categoriesForMethods!
cancelIo:!**auto generated**!public! !
createIoCompletionPort:existingCompletionPort:completionKey:numberOfConcurrentThreads:!**auto generated**!public! !
getOverlappedResult:lpOverlapped:lpNumberOfBytesTransferred:bWait:!**auto generated**!public! !
getQueuedCompletionStatus:lpNumberOfBytesTransferred:lpCompletionKey:lpOverlapped:dwMilliseconds:!**auto generated**!public! !
postQueuedCompletionStatus:dwNumberOfBytesTransferred:dwCompletionKey:lpOverlapped:!**auto generated**!public! !
!

"End of package definition"!

