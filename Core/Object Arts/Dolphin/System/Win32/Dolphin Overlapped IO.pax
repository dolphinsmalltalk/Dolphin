| package |
package := Package name: 'Dolphin Overlapped IO'.
package paxVersion: 1;
	basicComment: 'Dolphin Smalltalk Win32 Overlapped I/O
Copyright (c) Object Arts Ltd, 2004

This package contains classes and methods for supporting Win32 overlapped I/O.'.

package basicPackageVersion: '6.1'.


package classNames
	add: #OVERLAPPED;
	yourself.

package methodNames
	add: #KernelLibrary -> #cancelIo:;
	add: #KernelLibrary -> #createIoCompletionPort:existingCompletionPort:completionKey:numberOfConcurrentThreads:;
	add: #KernelLibrary -> #getOverlappedResult:lpOverlapped:lpNumberOfBytesTransferred:bWait:;
	add: #KernelLibrary -> #getQueuedCompletionStatus:lpNumberOfBytesTransferred:lpCompletionKey:lpOverlapped:dwMilliseconds:;
	add: #KernelLibrary -> #postQueuedCompletionStatus:dwNumberOfBytesTransferred:dwCompletionKey:lpOverlapped:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\..\Base\Dolphin').

package!

"Class Definitions"!

ExternalStructure subclass: #OVERLAPPED
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!KernelLibrary methodsFor!

cancelIo: hFile 
	"Invoke the CancelIo() function of the module wrapped by the receiver.
	Helpstring: Cancels all pending input and output (I/O) operations that were issued by the calling thread for the specified file handle.

		long __stdcall CancelIo(
			[in]long hFile);"

	<stdcall: sdword CancelIo sdword>
	^self invalidCall!

createIoCompletionPort: fileHandle existingCompletionPort: existingCompletionPort completionKey: completionKey numberOfConcurrentThreads: numberOfConcurrentThreads 
	"Invoke the CreateIoCompletionPort() function of the module wrapped by the receiver.
	Helpstring: Associates an input/output (I/O) completion port with one or more file handles, or it can create an I/O completion port that is not associated with a file handle.

		long __stdcall CreateIoCompletionPort(
			[in]long FileHandle,
			[in]long ExistingCompletionPort,
			[in]unsigned long CompletionKey,
			[in]unsigned long NumberOfConcurrentThreads);"

	<stdcall: sdword CreateIoCompletionPort sdword sdword dword dword>
	^self invalidCall!

getOverlappedResult: hFile lpOverlapped: lpOverlapped lpNumberOfBytesTransferred: lpNumberOfBytesTransferred bWait: bWait 
	"Invoke the GetOverlappedResult() function of the module wrapped by the receiver.
	Helpstring: Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device.

		long __stdcall GetOverlappedResult(
			[in]long hFile,
			[in]OVERLAPPED* lpOverlapped,
			[out]unsigned long* lpNumberOfBytesTransferred,
			[in]long bWait);"

	<stdcall: sdword GetOverlappedResult sdword OVERLAPPED* dword* sdword>
	^self invalidCall!

getQueuedCompletionStatus: completionPort lpNumberOfBytesTransferred: lpNumberOfBytesTransferred lpCompletionKey: lpCompletionKey lpOverlapped: lpOverlapped dwMilliseconds: dwMilliseconds 
	"Invoke the GetQueuedCompletionStatus() function of the module wrapped by the receiver.
	Helpstring: attempts to dequeue an I/O completion packet from a specified I/O completion port. If there is no completion packet queued, the function waits for a pending I/O operation associated with the completion port to complete.

		long __stdcall GetQueuedCompletionStatus(
			[in]long CompletionPort,
			[out]unsigned long* lpNumberOfBytesTransferred,
			[out]PULONG_PTR lpCompletionKey,
			[out]OVERLAPPED** lpOverlapped,
			[in]unsigned long dwMilliseconds);"

	<stdcall: sdword GetQueuedCompletionStatus sdword dword* uintptr* OVERLAPPED** dword>
	^self invalidCall!

postQueuedCompletionStatus: completionPort dwNumberOfBytesTransferred: dwNumberOfBytesTransferred dwCompletionKey: dwCompletionKey lpOverlapped: lpOverlapped 
	"Invoke the PostQueuedCompletionStatus() function of the module wrapped by the receiver.
	Helpstring: Posts an I/O completion packet to an I/O completion port.

		long __stdcall PostQueuedCompletionStatus(
			[in]long CompletionPort,
			[in]unsigned long dwNumberOfBytesTransferred,
			[in]unsigned long dwCompletionKey,
			[in]OVERLAPPED* lpOverlapped);"

	<stdcall: sdword PostQueuedCompletionStatus sdword dword dword OVERLAPPED*>
	^self invalidCall! !
!KernelLibrary categoriesFor: #cancelIo:!**auto generated**!public! !
!KernelLibrary categoriesFor: #createIoCompletionPort:existingCompletionPort:completionKey:numberOfConcurrentThreads:!**auto generated**!public! !
!KernelLibrary categoriesFor: #getOverlappedResult:lpOverlapped:lpNumberOfBytesTransferred:bWait:!**auto generated**!public! !
!KernelLibrary categoriesFor: #getQueuedCompletionStatus:lpNumberOfBytesTransferred:lpCompletionKey:lpOverlapped:dwMilliseconds:!**auto generated**!public! !
!KernelLibrary categoriesFor: #postQueuedCompletionStatus:dwNumberOfBytesTransferred:dwCompletionKey:lpOverlapped:!**auto generated**!public! !

"End of package definition"!

