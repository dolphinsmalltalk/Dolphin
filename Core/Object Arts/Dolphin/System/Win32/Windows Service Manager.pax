| package |
package := Package name: 'Windows Service Manager'.
package paxVersion: 2.1;
	basicComment: 'Dolphin Smalltalk Win32 Service Manager
Copyright (c) Object Arts Ltd, 2024'.


package setClassNames: #(
	#{OS.SERVICE_STATUS}
	#{OS.SERVICE_STATUS_PROCESS}
).

package setMethodNames: #(
	#(#{OS.AdvApiLibrary} #closeServiceHandle:)
	#(#{OS.AdvApiLibrary} #getServiceState:)
	#(#{OS.AdvApiLibrary} #isServiceRunning:)
	#(#{OS.AdvApiLibrary} #openSCManager:lpDatabaseName:dwDesiredAccess:)
	#(#{OS.AdvApiLibrary} #openService:lpServiceName:dwDesiredAccess:)
	#(#{OS.AdvApiLibrary} #queryServiceStatusEx:infoLevel:lpBuffer:cbBufSize:pcbBytesNeeded:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

External.Structure
	subclass: #'OS.SERVICE_STATUS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_dwCheckPoint' -> 16r14.
			'_OffsetOf_dwControlsAccepted' -> 16r8.
			'_OffsetOf_dwCurrentState' -> 16r4.
			'_OffsetOf_dwServiceSpecificExitCode' -> 16r10.
			'_OffsetOf_dwServiceType' -> 16r0.
			'_OffsetOf_dwWaitHint' -> 16r18.
			'_OffsetOf_dwWin32ExitCode' -> 16rC.
			'_SERVICE_STATUS_Size' -> 16r1C.
			'SC_STATUS_PROCESS_INFO' -> 16r0.
			'SERVICE_CONTINUE_PENDING' -> 16r5.
			'SERVICE_PAUSE_PENDING' -> 16r6.
			'SERVICE_PAUSED' -> 16r7.
			'SERVICE_RUNNING' -> 16r4.
			'SERVICE_START_PENDING' -> 16r2.
			'SERVICE_STOP_PENDING' -> 16r3.
			'SERVICE_STOPPED' -> 16r1
		}!

OS.SERVICE_STATUS
	subclass: #'OS.SERVICE_STATUS_PROCESS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_dwProcessId' -> 16r1C.
			'_OffsetOf_dwServiceFlags' -> 16r20.
			'_SERVICE_STATUS_PROCESS_Size' -> 16r24
		}!

"Loose Methods"!

!OS.AdvApiLibrary methodsFor!

closeServiceHandle: hSCObject
	"Invoke the CloseServiceHandle() function of the module wrapped by the receiver.
	Helpstring: Closes a handle to a service control manager or service object.

		BOOL __stdcall CloseServiceHandle(
			HANDLE hSCObject);"

	<stdcall: bool CloseServiceHandle handle>
	^self invalidCall: _failureCode!

getServiceState: aString
	"Answer the current state of a named service."

	| hSCManager |
	hSCManager := self
				openSCManager: nil
				lpDatabaseName: nil
				dwDesiredAccess: GENERIC_READ.
	hSCManager ifNil: [^self systemError].
	^
	[(self
		openService: hSCManager
		lpServiceName: aString
		dwDesiredAccess: GENERIC_READ)
			ifNil: 
				["Service does not exist"
				#unknown]
			ifNotNil: 
				[:hService |
				
				[| status bytesNeeded |
				status := SERVICE_STATUS_PROCESS newBuffer.
				bytesNeeded := UInt32Bytes new.
				(self
					queryServiceStatusEx: hService
					infoLevel: SERVICE_STATUS.SC_STATUS_PROCESS_INFO
					lpBuffer: status
					cbBufSize: status byteSize
					pcbBytesNeeded: bytesNeeded) ifTrue: [status currentState] ifFalse: [self systemError]]
						ensure: [self closeServiceHandle: hService]]]
			ensure: [self closeServiceHandle: hSCManager]!

isServiceRunning: aString
	"Answer whether the named service is running."

	^(self getServiceState: aString) == #running!

openSCManager: lpMachineName lpDatabaseName: lpDatabaseName dwDesiredAccess: dwDesiredAccess
	"Invoke the OpenSCManager() function of the module wrapped by the receiver.
	Helpstring: Establishes a connection to the service control manager on the specified computer and opens the specified service control manager database.

		HANDLE __stdcall OpenSCManager(
			LPCWSTR lpMachineName,
			LPCWSTR lpDatabaseName,
			DWORD dwDesiredAccess);"

	<stdcall: handle OpenSCManagerW lpwstr lpwstr dword>
	^self invalidCall: _failureCode!

openService: hSCManager lpServiceName: lpServiceName dwDesiredAccess: dwDesiredAccess
	"Invoke the OpenService() function of the module wrapped by the receiver.
	Helpstring: Opens an existing service.

		HANDLE __stdcall OpenService(
			HANDLE hSCManager,
			LPCWSTR lpServiceName,
			DWORD dwDesiredAccess);"

	<stdcall: handle OpenServiceW handle lpwstr dword>
	^self invalidCall: _failureCode!

queryServiceStatusEx: hService infoLevel: infoLevel lpBuffer: lpBuffer cbBufSize: cbBufSize pcbBytesNeeded: pcbBytesNeeded
	"Invoke the QueryServiceStatusEx() function of the module wrapped by the receiver.
	Helpstring: Retrieves the current status of the specified service based on the specified information level.

		BOOL __stdcall QueryServiceStatusEx(
			HANDLE hService,
			SC_STATUS_TYPE InfoLevel,
			BYTE* lpBuffer,
			DWORD cbBufSize,
			unsigned long* pcbBytesNeeded);"

	<stdcall: bool QueryServiceStatusEx handle sdword byte* dword dword*>
	^self invalidCall: _failureCode! !

!OS.AdvApiLibrary categoriesForMethods!
closeServiceHandle:!**auto generated**!public! !
getServiceState:!enquiries!public! !
isServiceRunning:!enquiries!public! !
openSCManager:lpDatabaseName:dwDesiredAccess:!**auto generated**!public!win32 functions-service manager! !
openService:lpServiceName:dwDesiredAccess:!**auto generated**!public!win32 functions-service manager! !
queryServiceStatusEx:infoLevel:lpBuffer:cbBufSize:pcbBytesNeeded:!**auto generated**!public!win32 functions-service manager! !
!

"End of package definition"!

