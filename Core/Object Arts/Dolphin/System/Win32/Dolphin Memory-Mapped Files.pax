| package |
package := Package name: 'Dolphin Memory-Mapped Files'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Memory-Mapped Files
Copyright (c) Object Arts Ltd, 2004-2023.

Memory-mapped files are a simple and high-performance means of accessing the data in files as if loaded into memory. They are implemented using the operating system''s virtual memory system, and the OS will page the files data into and out of physical memory on demand.

Win32 memory-mapped files involve three objects:
1) The file (or shared memory section)
2) The memory-mapping.
3) A view onto the memory mapping (of which there can be many).

To use memory-mapped files, usually one must first open a file, for example using Dolphin''s `Core.File` object. One can then create a memory mapping onto that (or use one of the convenient instance creation methods to open the file at the same time as creating the mapping). In Dolphin the mappings are represented by instances of the `Exernal.MemoryMappedFile` class. Finally one can create views onto the mapping that effectively make a range of the file available as (what appears to be) a contigous block of memory. Typically one would map a single view onto the entire file, especially since the views must start at 64Kb boundaries. In Dolphin the views are represented by instances of the `External.MemoryMappedFileView` class. This is a subclass of `External.Address`, and it instances can thus be substitued in place of any other pointer object and used in conjunction with Dolphin''s `External.Structure`''s. If, for example, one had a large binary file containing a huge sequence of IEEE 64-bit floating point values, this could be represented by a reference instance of `External.DOUBLEArray` pointing at the data through a `External.MemoryMappedFileView`. This would be a much more efficient way to access the data than loading the entire lot into an in-memory DOUBLEArray.

Note that the memory-mapping and its views can be free''d in any order, so one can discard the `MemoryMappedFile` object before any `MemoryMappedFileView`s. Both are marked as finalizable so they need not be explicitly free''d anyway.

Although memory-mapped files are simple and very fast, they do have certain limitations:
1) The maximum size of a file mapping (not necessarily the underlying file) is 2Gb, because it must be accessed through the virtual memory system using a 32-bit pointer.
2) File mappings are static in size; once created, their size cannot increase or decrease. This means if you anticipate writing data to the end of the file, you must calculate or estimate the maximum size that the file will require to be. You might also need to shrink the file (after closing the mapping) to truncate any unused space.

Copy-on-write memory mapped files are not currently supported by this package.'.

package basicPackageVersion: '6.1'.


package setClassNames: #(
	#{External.MemoryMappedFile}
	#{External.MemoryMappedFileView}
	#{OS.MMFConstants}
).

package setMethodNames: #(
	#(#{OS.KernelLibrary} #createFileMapping:lpAttributes:flProtect:dwMaximumSizeHigh:dwMaximumSizeLow:lpName:)
	#(#{OS.KernelLibrary} #flushViewOfFile:dwNumberOfBytesToFlush:)
	#(#{OS.KernelLibrary} #mapViewOfFile:dwDesiredAccess:dwFileOffsetHigh:dwFileOffsetLow:dwNumberOfBytesToMap:)
	#(#{OS.KernelLibrary} #openFileMapping:bInheritHandle:lpName:)
	#(#{OS.KernelLibrary} #unmapViewOfFile:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Kernel.SharedPool
	subclass: #'OS.MMFConstants'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'FILE_MAP_ALL_ACCESS' -> 16rF001F.
			'FILE_MAP_COPY' -> 16r1.
			'FILE_MAP_READ' -> 16r4.
			'FILE_MAP_WRITE' -> 16r2.
			'PAGE_EXECUTE' -> 16r10.
			'PAGE_EXECUTE_READ' -> 16r20.
			'PAGE_EXECUTE_READWRITE' -> 16r40.
			'PAGE_EXECUTE_WRITECOPY' -> 16r80.
			'PAGE_GUARD' -> 16r100.
			'PAGE_NOACCESS' -> 16r1.
			'PAGE_NOCACHE' -> 16r200.
			'PAGE_READONLY' -> 16r2.
			'PAGE_READWRITE' -> 16r4.
			'PAGE_WRITECOPY' -> 16r8.
			'SEC_COMMIT' -> 16r8000000.
			'SEC_FILE' -> 16r800000.
			'SEC_IMAGE' -> 16r1000000.
			'SEC_NOCACHE' -> 16r10000000.
			'SEC_RESERVE' -> 16r4000000
		}!
Core.Object
	subclass: #'External.MemoryMappedFile'
	instanceVariableNames: 'file name handle maximumSize flags'
	classVariableNames: ''
	imports: #(#{OS.MMFConstants} #{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: { 'OwnsFileMask' -> 16r2. 'OwnsHandleMask' -> 16r1. 'ReadOnlyMask' -> 16r4 }!
External.Address
	variableByteSubclass: #'External.MemoryMappedFileView'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!OS.KernelLibrary methodsFor!

createFileMapping: hFile lpAttributes: lpAttributes flProtect: flProtect dwMaximumSizeHigh: dwMaximumSizeHigh dwMaximumSizeLow: dwMaximumSizeLow lpName: lpName
	"Invoke the CreateFileMapping() function of the module wrapped by the receiver.
	Helpstring: Maps file to memory or creates shared memory (if hFile is -1), assigns lpName to mapping, and returns mapping handle

		long __stdcall CreateFileMapping(
			HANDLE hFile,
			[in, defaultvalue(0)]LPSECURITY_ATTRIBUTES lpAttributes,
			DWORD flProtect,
			DWORD dwMaximumSizeHigh,
			DWORD dwMaximumSizeLow,
			LPWSTR lpName);"

	<stdcall: handle CreateFileMappingW handle void* dword dword dword lpwstr>
	^self invalidCall: _failureCode!

flushViewOfFile: lpBaseAddress dwNumberOfBytesToFlush: dwNumberOfBytesToFlush
	"Invoke the FlushViewOfFile() function of the module wrapped by the receiver.
	Helpstring: Writes file mapping to disk

		long __stdcall FlushViewOfFile(
			void* lpBaseAddress,
			DWORD dwNumberOfBytesToFlush);"

	<stdcall: sdword FlushViewOfFile void* dword>
	^self invalidCall: _failureCode!

mapViewOfFile: hFileMappingObject dwDesiredAccess: dwDesiredAccess dwFileOffsetHigh: dwFileOffsetHigh dwFileOffsetLow: dwFileOffsetLow dwNumberOfBytesToMap: dwNumberOfBytesToMap
	"Invoke the MapViewOfFile() function of the module wrapped by the receiver.
	Helpstring: Opens view of specified file mapping

		LPVOID __stdcall MapViewOfFile(
			HANDLE hFileMappingObject,
			DWORD dwDesiredAccess,
			DWORD dwFileOffsetHigh,
			DWORD dwFileOffsetLow,
			DWORD dwNumberOfBytesToMap);"

	<stdcall: MemoryMappedFileView MapViewOfFile dword dword dword dword dword>
	^self invalidCall: _failureCode!

openFileMapping: dwDesiredAccess bInheritHandle: bInheritHandle lpName: lpName
	"Invoke the OpenFileMapping() function of the module wrapped by the receiver.
	Helpstring: Opens existing mapping specified by lpName

		HANDLE __stdcall OpenFileMapping(
			DWORD dwDesiredAccess,
			BOOL bInheritHandle,
			LPCWSTR lpName);"

	<stdcall: handle OpenFileMappingW dword bool lpwstr>
	^self invalidCall: _failureCode!

unmapViewOfFile: lpBaseAddress
	"Invoke the UnmapViewOfFile() function of the module wrapped by the receiver.
	Helpstring: Releases file mapping

		BOOL __stdcall UnmapViewOfFile(
			void* lpBaseAddress);"

	<stdcall: bool UnmapViewOfFile void*>
	^self invalidCall: _failureCode! !
!OS.KernelLibrary categoriesForMethods!
createFileMapping:lpAttributes:flProtect:dwMaximumSizeHigh:dwMaximumSizeLow:lpName:!public!win32 functions-file management! !
flushViewOfFile:dwNumberOfBytesToFlush:!public!win32 functions-memory management! !
mapViewOfFile:dwDesiredAccess:dwFileOffsetHigh:dwFileOffsetLow:dwNumberOfBytesToMap:!public!win32 functions-memory management! !
openFileMapping:bInheritHandle:lpName:!public!win32 functions-memory management! !
unmapViewOfFile:!public!win32 functions-memory management! !
!

"End of package definition"!

