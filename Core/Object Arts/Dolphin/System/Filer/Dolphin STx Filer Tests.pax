| package |
package := Package name: 'Dolphin STx Filer Tests'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{Kernel.Tests.STBTest}
	#{Kernel.Tests.STBValidatingInFilerTest}
	#{Kernel.Tests.STLClassCollectorTest}
	#{Kernel.Tests.STLFilerTest}
	#{Kernel.Tests.STxFilerTest}
).

package setMethodNames: #(
	#(#{Core.Tests.ArrayTest} #testLiteralStoreOn)
	#(#{Core.Tests.FileLocatorTest} #testSingletonSerialisationToStb)
	#(#{Core.Tests.FileLocatorTest} #testSingletonSerialisationToStl)
	#(#{External.Tests.DynamicLinkLibraryTest} #testSingletonSerialisationToStl)
	#(#{Graphics.Tests.ColorTest} #testSingletonSerialisationToStl)
	#(#{Graphics.Tests.ColorTest} #testStlRoundTrip)
	#(#{Graphics.Tests.ColorTest} #testStlRoundTripColourAlpha)
	#(#{Graphics.Tests.ColorTest} #testStlRoundTripPluggableColor)
	#(#{Graphics.Tests.ColorTest} #testStlRoundTripUnnamedARGB)
	#(#{Graphics.Tests.ColorTest} #testStlRoundTripUnnamedRGB)
	#(#{Kernel.STBInFiler class} #correspondingTestCase)
	#(#{Kernel.STBOutFiler class} #correspondingTestCase)
	#(#{Kernel.STBValidatingInFiler class} #correspondingTestCase)
	#(#{Kernel.STLClassCollector class} #correspondingTestCase)
	#(#{Kernel.STLInFiler class} #correspondingTestCase)
	#(#{Kernel.STLOutFiler class} #correspondingTestCase)
	#(#{Kernel.Tests.BindingReferenceTest} #testLiteralStoreFull)
	#(#{Kernel.Tests.ScopedBindingReferenceTest} #testLiteralStoreRelative)
).

package setPrerequisites: #(
	'..\..\IDE\Base\Development System'
	'..\..\Base\Dolphin'
	'..\..\Base\Dolphin Additional Sort Algorithms'
	'..\..\Base\Tests\Dolphin Base Tests'
	'..\..\MVP\Base\Dolphin Basic Geometry'
	'Dolphin Binary Filer'
	'..\..\MVP\Graphics\Dolphin GDI Graphics'
	'..\..\MVP\Graphics\Tests\Dolphin GDI Graphics Tests'
	'..\..\MVP\Models\List\Dolphin List Models'
	'Dolphin Literal Filer'
	'Dolphin Literal Filer (Old versions)'
	'Dolphin Literal Out Filer'
	'Dolphin Literal Out Filer (Old versions)'
	'..\..\MVP\Base\Dolphin MVP Base'
	'Dolphin STL Class Collector'
	'Dolphin STx Filer Core'
	'Dolphin STx Filer Core (Old versions)'
	'..\..\IDE\Base\Dolphin Transcript'
	'Dolphin Validating Binary Filer'
	'..\..\..\Samples\MVP\Scribble\Scribble'
	'..\..\..\..\Contributions\Camp Smalltalk\SUnit\SUnit'
).

package!

"Class Definitions"!

Core.Tests.DolphinTest
	subclass: #'Kernel.Tests.STLClassCollectorTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Tests.DolphinTest
	subclass: #'Kernel.Tests.STxFilerTest'
	instanceVariableNames: ''
	classVariableNames: 'TestVar'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.Tests.STxFilerTest
	subclass: #'Kernel.Tests.STBTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.Tests.STxFilerTest
	subclass: #'Kernel.Tests.STLFilerTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.Tests.STBTest
	subclass: #'Kernel.Tests.STBValidatingInFilerTest'
	instanceVariableNames: 'locator'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Tests.ArrayTest methodsFor!

testLiteralStoreOn
	| stream subject storeString rehydrated stlArray |
	stream := Array writeStream.
	subject := {Object. 1. 's'. {Core.Tests.ArrayTest}}.
	subject literalStoreOn: stream.
	stlArray := stream contents.
	stream := String writeStream.
	stlArray literalPrintOn: (LiteralPrinter on: stream).
	storeString := stream contents.
	rehydrated := Compiler evaluate: storeString.
	self assert: rehydrated equals: stlArray.
	rehydrated := Object fromLiteralStoreArray: stlArray.
	self assert: rehydrated equals: subject! !

!Core.Tests.ArrayTest categoriesForMethods!
testLiteralStoreOn!public!unit tests! !
!

!Core.Tests.FileLocatorTest methodsFor!

testSingletonSerialisationToStb
	| singletons bytes |
	singletons := {FileLocator absolute. FileLocator imageRelative. FileLocator installRelative}.
	bytes := #[33 83 84 66 32 51 32 98 0 0 0 3 0 0 0 14 2 17 0 83 84 66 83 105 110 103 108 101 116 111 110 80 114 111 120 121 154 0 0 0 82 0 0 0 7 0 0 0 68 111 108 112 104 105 110 82 0 0 0 19 0 0 0 65 98 115 111 108 117 116 101 70 105 108 101 76 111 99 97 116 111 114 178 0 0 0 7 0 0 0 99 117 114 114 101 110 116 170 1 0 0 154 0 0 0 208 1 0 0 82 0 0 0 24 0 0 0 73 109 97 103 101 82 101 108 97 116 105 118 101 70 105 108 101 76 111 99 97 116 111 114 240 1 0 0 170 1 0 0 154 0 0 0 208 1 0 0 82 0 0 0 26 0 0 0 73 110 115 116 97 108 108 82 101 108 97 116 105 118 101 70 105 108 101 76 111 99 97 116 111 114 240 1 0 0].
	self assert: ((Object fromBinaryStoreBytes: bytes) asIdentitySet - singletons) isEmpty.
	bytes := singletons binaryStoreBytes.
	self assert: ((Object fromBinaryStoreBytes: bytes) asIdentitySet - singletons) isEmpty!

testSingletonSerialisationToStl
	| singletons array |
	singletons := {FileLocator absolute. FileLocator imageRelative. FileLocator installRelative}.
	array := #(#'!!STL' 3 98 3 1114638 ##(Smalltalk.STBSingletonProxy) 8 ##(Kernel.AbsoluteFileLocator) 8 #current 426 8 ##(Kernel.ImageRelativeFileLocator) 464 426 8 ##(Kernel.InstallRelativeFileLocator) 464).
	self assert: ((Object fromLiteralStoreArray: array) asIdentitySet - singletons) isEmpty.
	array := singletons literalStoreArray.
	self assert: ((Object fromLiteralStoreArray: array) asIdentitySet - singletons) isEmpty! !

!Core.Tests.FileLocatorTest categoriesForMethods!
testSingletonSerialisationToStb!public!unit tests! !
testSingletonSerialisationToStl!public!unit tests! !
!

!External.Tests.DynamicLinkLibraryTest methodsFor!

testSingletonSerialisationToStl
	| singletons array |
	singletons := {Kernel32. VersionLibrary default. User32}.
	array := #(#'!!STL' 3 98 3 1114638 ##(Kernel.STBSingletonProxy) 8 ##(OS.KernelLibrary) 8 #default 426 8 ##(OS.VersionLibrary) 464 426 8 ##(UserLibrary) 464).
	self assert: ((Object fromLiteralStoreArray: array) asIdentitySet - singletons) isEmpty.
	array := singletons literalStoreArray.
	self assert: ((Object fromLiteralStoreArray: array) asIdentitySet - singletons) isEmpty! !

!External.Tests.DynamicLinkLibraryTest categoriesForMethods!
testSingletonSerialisationToStl!public!unit tests! !
!

!Graphics.Tests.ColorTest methodsFor!

testSingletonSerialisationToStl
	| subject1 subject2 subject3 dehydrated rehydrated array |
	subject1 := Color window.
	subject2 := Color menu.
	subject3 := Color magenta.
	array := {subject1. subject2. subject3. subject1. subject2. subject3}.
	dehydrated := array literalStoreArray.
	rehydrated := Object fromLiteralStoreArray: dehydrated.
	self assert: rehydrated first identicalTo: subject1.
	self assert: rehydrated second identicalTo: subject2.
	self assert: rehydrated third identicalTo: subject3.
	self assert: rehydrated fourth identicalTo: subject1.
	self assert: rehydrated fifth identicalTo: subject2.
	self assert: rehydrated sixth identicalTo: subject3!

testStlRoundTrip
	| subject stl rehydrated |
	"Various types of named colour"
	{Color red.
		Color face3d.
		Color named: #smalltalkSystem.
		Color none.
		Color default.
		Color named: #gradientActiveCaption} do: 
				[:each |
				| array |
				array := Object fromLiteralStoreArray: {each. 'blah'. each} literalStoreArray.
				self assert: array first identicalTo: each.
				self assert: array last identicalTo: each].
	subject := IndexedColor gray.
	stl := {subject. Color silver. subject} literalStoreArray.
	"self assert: stl equals: #(#'!!STL' 4 34 3 327686 ##(Color) #silver 418 #silver 418 #silver)."
	rehydrated := Object fromLiteralStoreArray: stl.
	self assert: rehydrated first identicalTo: Color silver.
	self assert: rehydrated last identicalTo: Color silver!

testStlRoundTripColourAlpha
	| subject rehydrated |
	"ColorAlpha"
	subject := (Color named: #gradientActiveCaption) alpha: 63.
	rehydrated := Object fromLiteralStoreArray: subject literalStoreArray.
	self assert: rehydrated isKindOf: ColorAlpha.
	self assert: rehydrated equals: subject.
	self assert: rehydrated actualColor
		equals: ((Color named: #gradientActiveCaption) alpha: 63) actualColor!

testStlRoundTripPluggableColor
	| subject rehydrated |
	"PluggableColor"
	subject := PluggableColor with: [Color window].
	self assert: subject actualColor identicalTo: Color window.
	rehydrated := Object fromLiteralStoreArray: subject literalStoreArray.
	self assert: rehydrated isKindOf: PluggableColor.
	self assert: rehydrated equals: subject.
	self assert: rehydrated actualColor identicalTo: Color window!

testStlRoundTripUnnamedARGB
	| subject rehydrated |
	subject := Color
				a: 128
				r: 50
				g: 100
				b: 200.
	rehydrated := Object fromLiteralStoreArray: subject literalStoreArray.
	self assert: rehydrated equals: subject.
	self assert: rehydrated isKindOf: ARGB!

testStlRoundTripUnnamedRGB
	| subject rehydrated |
	"Unnamed RGB"
	subject := Color
				r: 50
				g: 100
				b: 200.
	rehydrated := Object fromLiteralStoreArray: {subject. Color blue. subject} literalStoreArray.
	self assert: rehydrated first equals: subject.
	self assert: rehydrated first isKindOf: RGB.
	self assert: rehydrated last identicalTo: rehydrated first.
	self assert: rehydrated second identicalTo: Color blue! !

!Graphics.Tests.ColorTest categoriesForMethods!
testSingletonSerialisationToStl!public!unit tests! !
testStlRoundTrip!public! !
testStlRoundTripColourAlpha!public! !
testStlRoundTripPluggableColor!public! !
testStlRoundTripUnnamedARGB!public! !
testStlRoundTripUnnamedRGB!public! !
!

!Kernel.STBInFiler class methodsFor!

correspondingTestCase
	^Tests.STBTest! !

!Kernel.STBInFiler class categoriesForMethods!
correspondingTestCase!public! !
!

!Kernel.STBOutFiler class methodsFor!

correspondingTestCase
	^Tests.STBTest! !

!Kernel.STBOutFiler class categoriesForMethods!
correspondingTestCase!public! !
!

!Kernel.STBValidatingInFiler class methodsFor!

correspondingTestCase
	^Tests.STBValidatingInFilerTest! !

!Kernel.STBValidatingInFiler class categoriesForMethods!
correspondingTestCase!public! !
!

!Kernel.STLClassCollector class methodsFor!

correspondingTestCase
	^Tests.STLClassCollectorTest! !

!Kernel.STLClassCollector class categoriesForMethods!
correspondingTestCase!public! !
!

!Kernel.STLInFiler class methodsFor!

correspondingTestCase
	^Tests.STLFilerTest! !

!Kernel.STLInFiler class categoriesForMethods!
correspondingTestCase!public! !
!

!Kernel.STLOutFiler class methodsFor!

correspondingTestCase
	^Tests.STLFilerTest! !

!Kernel.STLOutFiler class categoriesForMethods!
correspondingTestCase!public! !
!

!Kernel.Tests.BindingReferenceTest methodsFor!

testLiteralStoreFull
	"The literal form should be used for fully qualified references"

	| full |
	full := self newSubjectWithPath: #('Core' 'Object').
	{full. full private} do: 
			[:each |
			| expected actual binding rehydrated array |
			binding := each binding.
			self assert: each literalStoreArray last identicalTo: each.
			actual := each literalStoreEvaluationString.
			rehydrated := Compiler evaluate: actual.
			self assert: rehydrated equals: each.
			self assertIsNil: (rehydrated instance instVarAt: 4).
			self assertIsNil: (rehydrated instance instVarAt: 5).
			self assert: rehydrated binding identicalTo: binding.
			expected := '(Object fromLiteralStoreArray: #(#''!!STL'' <1p> 8 <2p>))'
						<< {STLOutFiler version. each}.
			self assert: actual equals: expected.
			array := {each. each value}.
			rehydrated := Compiler evaluate: array literalStoreEvaluationString.
			self assert: rehydrated equals: array]! !

!Kernel.Tests.BindingReferenceTest categoriesForMethods!
testLiteralStoreFull!public!unit tests! !
!

!Kernel.Tests.ScopedBindingReferenceTest methodsFor!

testLiteralStoreRelative
	"The literal form cannot be used for unqualified or partially qualified (i.e. relative) references."

	| relative |
	relative := self newSubjectWithPath: {'_'. self class name} scope: self class environment.
	{relative. relative private} do: 
			[:each |
			| actual rehydrated binding |
			binding := each binding.
			actual := each literalStoreArray.
			self deny: (actual includes: each).
			self assert: (actual includes: RelativeBindingReference).
			self assert: (actual includes: {self class name}).
			self assert: (actual includes: self class environment).
			rehydrated := Compiler evaluate: each literalStoreEvaluationString.
			self assert: rehydrated equals: each.
			self assertIsNil: (rehydrated instance instVarAt: 4).
			self assertIsNil: (rehydrated instance instVarAt: 5).
			self assert: rehydrated binding identicalTo: binding]! !

!Kernel.Tests.ScopedBindingReferenceTest categoriesForMethods!
testLiteralStoreRelative!public!unit tests! !
!

"End of package definition"!

