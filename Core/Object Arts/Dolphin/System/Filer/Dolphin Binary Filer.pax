| package |
package := Package name: 'Dolphin Binary Filer'.
package paxVersion: 2.1;
	basicComment: 'Dolphin 🐬 Smalltalk STB Binary object graph serialiser.
Copyright ©️ Object Arts Ltd. 1997-2023. Portions Copyright ©️ CGI Group (Europe) Ltd. 1997.

Latest version of the STB filer for binary serialisation of object graphs.'.


package setClassNames: #(
	#{Kernel.STBInFiler}
	#{Kernel.STBOutFiler}
).

package setMethodNames: #(
	#(#{Core.ByteArray} #stbSaveOn:)
	#(#{Core.ByteArray class} #stbReadFrom:format:size:)
	#(#{Core.Class} #stbSaveOn:)
	#(#{Core.Metaclass} #stbSaveOn:)
	#(#{Core.Object} #binaryStoreBytes)
	#(#{Core.Object} #binaryStoreOn:)
	#(#{Core.Object class} #binaryReadFrom:)
	#(#{Core.Object class} #binaryReadFrom:context:)
	#(#{Core.Object class} #fromBinaryStoreBytes:)
	#(#{Core.Object class} #fromBinaryStoreBytes:context:)
	#(#{Core.Stream} #binaryStore:)
	#(#{Core.Symbol} #stbSaveOn:)
	#(#{Core.Symbol class} #stbReadFrom:format:)
	#(#{External.IntegerBytes} #stbSaveOn:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'Dolphin STx Filer Core'
	'Dolphin STx Out Filer Core'
).

package!

"Class Definitions"!

Kernel.STxInFiler
	subclass: #'Kernel.STBInFiler'
	instanceVariableNames: ''
	classVariableNames: 'Versions'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'Signature' -> #[33 83 84 66 32] }!

Kernel.STxOutFiler
	subclass: #'Kernel.STBOutFiler'
	instanceVariableNames: ''
	classVariableNames: 'Versions'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.ByteArray methodsFor!

stbSaveOn: anSTxOutFiler
	"Save out a serialised representation of the receiver to anSTxOutFiler."

	anSTxOutFiler saveByteArray: self! !

!Core.ByteArray categoriesForMethods!
stbSaveOn:!binary filing!public! !
!

!Core.ByteArray class methodsFor!

stbReadFrom: anSTxInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the <STxInfiler> first argument. Note that we can ignore the format argument, since ByteArray is a pre-registered class that cannot be versioned. "

	^anSTxInFiler readByteObject: self size: anInteger! !

!Core.ByteArray class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!Core.Class methodsFor!

stbSaveOn: anSTxOutFiler
	"Save out a serialized representation of the receiver to STxOutFiler argument."

	anSTxOutFiler saveClass: self! !

!Core.Class categoriesForMethods!
stbSaveOn:!binary filing!public! !
!

!Core.Metaclass methodsFor!

stbSaveOn: anSTBOutFiler
	"Save out a binary representation of the receiver to anSTBOutFiler."

	anSTBOutFiler saveMetaclass: self! !

!Core.Metaclass categoriesForMethods!
stbSaveOn:!binary filing!public! !
!

!Core.Object methodsFor!

binaryStoreBytes
	"Answers a ByteArray representation of the receiver stored in a binary form.
	This can be reconstituted using Object class>>fromBinaryStoreBytes:"

	| stream |
	stream := ByteArray writeStream: 256.
	self binaryStoreOn: stream.
	^stream contents!

binaryStoreOn: aStream
	"Stores the receiver in a binary form on aStream that can be reconstituted using Object class>>binaryReadFrom:. Uses the latest version of the STBOutFiler to achieve this. This implementation is sufficient for all objects
	that do not need to isolate themselves from their surroundings. Sub-classes should override #binaryStoreOn:with: to perform such isolation when required."

	self binaryStoreUsing: (STBOutFiler on: aStream)! !

!Core.Object categoriesForMethods!
binaryStoreBytes!binary filing!public! !
binaryStoreOn:!binary filing!public! !
!

!Core.Object class methodsFor!

binaryReadFrom: aStream
	"Answers an object read from its binary representation on aStream.
	This must have been saved using Object>>binaryStoreOn:"

	^self binaryReadFrom: aStream context: nil

!

binaryReadFrom: aStream context: anObject
	"Answers an object read from its binary representation on aStream.
	This must have been saved using Object>>binaryStoreOn:"

	^(STBInFiler on: aStream)
		context: anObject;
		next!

fromBinaryStoreBytes: aByteArray
	"Answers an object read from its binary representation in aByteArray.
	This must have been created using Object>>binaryStoreBytes"

	| stream |
	stream := aByteArray readStream.
	^self binaryReadFrom: stream.


!

fromBinaryStoreBytes: aByteArray context: anObject
	"Answers an object read from its binary representation in aByteArray.
	This must have been created using Object>>binaryStoreBytes"

	| stream |
	stream := aByteArray readStream.
	^self binaryReadFrom: stream context: anObject


! !

!Core.Object class categoriesForMethods!
binaryReadFrom:!binary filing!public! !
binaryReadFrom:context:!binary filing!public! !
fromBinaryStoreBytes:!binary filing!public! !
fromBinaryStoreBytes:context:!binary filing!public! !
!

!Core.Stream methodsFor!

binaryStore: anObject
	"Ask anObject to append to the receiver binary byte which when
	read will result in an Object equivalent to anObject"

	anObject binaryStoreOn: self
! !

!Core.Stream categoriesForMethods!
binaryStore:!binary filing!public!storing! !
!

!Core.Symbol methodsFor!

stbSaveOn: anSTBOutFiler
	anSTBOutFiler saveSymbol: self! !

!Core.Symbol categoriesForMethods!
stbSaveOn:!binary filing!public! !
!

!Core.Symbol class methodsFor!

stbReadFrom: anSTBInFiler format: anSTxClassConversion
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	^anSTBInFiler readSymbol: anSTxClassConversion! !

!Core.Symbol class categoriesForMethods!
stbReadFrom:format:!binary filing!public! !
!

!External.IntegerBytes methodsFor!

stbSaveOn: anSTxOutFiler
	"Save out a serialised representation of the receiver to anSTxOutFiler."

	anSTxOutFiler saveByteObject: self! !

!External.IntegerBytes categoriesForMethods!
stbSaveOn:!binary filing!public! !
!

"End of package definition"!

