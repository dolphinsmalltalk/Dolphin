| package |
package := Package name: 'Dolphin Literal Filer'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.

package basicPackageVersion: '6.1'.


package setClassNames: #(
	#{Kernel.STLDebugger}
	#{Kernel.STLInFiler}
	#{Kernel.STLOutFiler}
).

package setMethodNames: #(
	#(#{Core.Array} #literalPrintOn:)
	#(#{Core.Boolean} #literalPrintOn:)
	#(#{Core.ByteArray} #literalPrintOn:)
	#(#{Core.Character} #literalPrintOn:)
	#(#{Core.ClassDescription} #literalPrintOn:)
	#(#{Core.Number} #literalPrintOn:)
	#(#{Core.Object} #literalStoreArray)
	#(#{Core.Object} #literalStoreEvaluationOn:)
	#(#{Core.Object} #literalStoreEvaluationString)
	#(#{Core.Object} #literalStoreOn:)
	#(#{Core.Object class} #fromLiteralStoreArray:)
	#(#{Core.Object class} #fromLiteralStoreArray:context:)
	#(#{Core.Object class} #literalReadFrom:)
	#(#{Core.Object class} #literalReadFrom:context:)
	#(#{Core.String} #literalPrintOn:)
	#(#{Core.Symbol} #literalPrintOn:)
	#(#{Core.UndefinedObject} #literalPrintOn:)
	#(#{Kernel.BindingReference} #literalPrintOn:)
	#(#{Kernel.ProcessorScheduler} #literalPrintOn:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Kernel.STBInFiler subclass: #'Kernel.STLInFiler'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STLInFiler subclass: #'Kernel.STLDebugger'
	instanceVariableNames: 'indentLevel traceStream printOffsets slotName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBOutFiler subclass: #'Kernel.STLOutFiler'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Array methodsFor!

literalPrintOn: aWriteStream
	aWriteStream nextPutAll: '#('.
	self do: [:each | each literalPrintOn: aWriteStream] separatedBy: [aWriteStream space].
	aWriteStream nextPut: $)! !
!Core.Array categoriesForMethods!
literalPrintOn:!public! !
!

!Core.Boolean methodsFor!

literalPrintOn: aWriteStream
	self printOn: aWriteStream! !
!Core.Boolean categoriesForMethods!
literalPrintOn:!public! !
!

!Core.ByteArray methodsFor!

literalPrintOn: aWriteStream
	self printOn: aWriteStream! !
!Core.ByteArray categoriesForMethods!
literalPrintOn:!public! !
!

!Core.Character methodsFor!

literalPrintOn: aWriteStream
	self printOn: aWriteStream! !
!Core.Character categoriesForMethods!
literalPrintOn:!public! !
!

!Core.ClassDescription methodsFor!

literalPrintOn: aWriteStream
	aWriteStream nextPutAll: '##('.
	self printFullNameOn: aWriteStream.
	aWriteStream nextPut: $)! !
!Core.ClassDescription categoriesForMethods!
literalPrintOn:!printing!public! !
!

!Core.Number methodsFor!

literalPrintOn: aWriteStream 
	self printOn: aWriteStream! !
!Core.Number categoriesForMethods!
literalPrintOn:!public! !
!

!Core.Object methodsFor!

literalStoreArray
	"Answers an Array representation of the receiver stored in a literal form.
	This can be reconstituted using Object class>>fromLiteralStoreArray:"

	| stream |
	stream := Array writeStream: 128.
	self literalStoreOn: stream.
	^stream contents!

literalStoreEvaluationOn: aCharacterStream
	"Stores the receiver in a <readableString> form on aStream that can be reconstituted by
	evaluating the string. Uses the STL filing mechanism to achieve this. This operation
	provides an alternative to the legacy #storeOn:/#storeString mechanism. While still used in
	some parts of the image, #storeOn:, has NOT been implemented as a general case throughout
	Dolphin. This is where #literalStoreEvaluationOn: can come in handy (although it is
	difficult to supply a completely general case that will meet all needs)"

	aCharacterStream nextPutAll: '(Object fromLiteralStoreArray: '.
	self literalStoreArray literalPrintOn: aCharacterStream.
	aCharacterStream nextPut: $)!

literalStoreEvaluationString
	"Stores the receiver in a <readableString> form that can be reconstituted by evaluating the
	string. Uses the STL filing mechanism to achieve this. This operation provides an
	alternative to the legacy #storeOn:/#storeString mechanism. While still used in some parts
	of the image, #storeOn:, has NOT been implemented as a general case throughout Dolphin. This
	is where #literalStoreEvaluationString can come in handy (although it is difficult to supply
	a completely general case that will meet all needs)"

	| stream |
	stream := String writeStream.
	self literalStoreEvaluationOn: stream.
	^stream contents!

literalStoreOn: aStream
	"Stores the receiver in a literal form on aStream that can be reconstituted using Object class>>literalReadFrom:.
	Uses the STL filing mechanism to achieve this. This implementation is sufficient for all objects
	that do not need to isolate themselves from their surroundings. Sub-classes may override this
	method to perform such isolation"

	(STLOutFiler on: aStream) nextPut: self! !
!Core.Object categoriesForMethods!
literalStoreArray!literal filing!public! !
literalStoreEvaluationOn:!literal filing!public! !
literalStoreEvaluationString!literal filing!public! !
literalStoreOn:!literal filing!public! !
!

!Core.Object class methodsFor!

fromLiteralStoreArray: anArray 
	"Answers an object read from its literal representation in anArray.
	This must have been created using Object>>literalStoreBytes"

	| stream |
	stream := anArray readStream.
	^self literalReadFrom: stream!

fromLiteralStoreArray: anArray context: anObject 
	"Answers an object read from its literal STL representation in anArray.
	This must have been created using Object>>literalStoreArray"

	| stream |
	stream := anArray readStream.
	^self literalReadFrom: stream context: anObject!

literalReadFrom: aStream
	"Answers an object read from its literal STL representation on aStream.
	This must have been saved using Object>>literalStoreOn:"

	^self literalReadFrom: aStream context: nil

!

literalReadFrom: aStream context: anObject
	"Answers an object read from its literal STL representation on aStream.
	This must have been saved using Object>>literalStoreOn:"

	^(STLInFiler on: aStream)
		context: anObject;
		next! !
!Core.Object class categoriesForMethods!
fromLiteralStoreArray:!literal filing!public! !
fromLiteralStoreArray:context:!literal filing!public! !
literalReadFrom:!literal filing!public! !
literalReadFrom:context:!binary filing!literal filing!public! !
!

!Core.String methodsFor!

literalPrintOn: aWriteStream 
	"Note: 
		String with: Character null
	Prints incorrectly, so trim nulls"

	self trimNulls printOn: aWriteStream! !
!Core.String categoriesForMethods!
literalPrintOn:!printing!public! !
!

!Core.Symbol methodsFor!

literalPrintOn: aWriteStream 
	self printOn: aWriteStream! !
!Core.Symbol categoriesForMethods!
literalPrintOn:!public! !
!

!Core.UndefinedObject methodsFor!

literalPrintOn: aWriteStream
	self printOn: aWriteStream! !
!Core.UndefinedObject categoriesForMethods!
literalPrintOn:!public! !
!

!Kernel.BindingReference methodsFor!

literalPrintOn: aWriteStream 
	self printOn: aWriteStream! !
!Kernel.BindingReference categoriesForMethods!
literalPrintOn:!public! !
!

!Kernel.ProcessorScheduler methodsFor!

literalPrintOn: aWriteStream
	aWriteStream nextPutAll: '##(Core.Processor)'! !
!Kernel.ProcessorScheduler categoriesForMethods!
literalPrintOn:!public! !
!

"End of package definition"!

