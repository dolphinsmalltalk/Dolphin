| package |
package := Package name: 'Dolphin STx Filer (Old versions)'.
package paxVersion: 2.1;
	basicComment: 'Dolphin 🐬 Smalltalk STB Binary Filer, support for reading/writing old versions.
Copyright © Object Arts Ltd. 1997-2023'.


package setClassNames: #(
	#{Kernel.LegacySTLPrinter}
	#{Kernel.STBCollectionProxy}
	#{Kernel.STBExternalResourceLibraryProxy}
	#{Kernel.STBIdentityDictionaryProxy}
	#{Kernel.STBVersion0Policy}
	#{Kernel.STBVersion1Policy}
	#{Kernel.STBVersion2Policy}
	#{Kernel.STBVersion3Policy}
	#{Kernel.STBVersion4Policy}
	#{Kernel.STBVersion5Policy}
	#{Kernel.STLVersion3Policy}
	#{Kernel.STLVersion4Policy}
	#{Kernel.STLVersion5Policy}
	#{Smalltalk.STBGlobalObjectProxy}
	#{Smalltalk.STBSymbolProxy}
).

package setMethodNames: #(
	#(#{Kernel.STBVersionPolicy} #saveCollection:)
	#(#{Kernel.STBVersionPolicy} #saveSet:elements:)
	#(#{Kernel.STxInFiler} #readObjectOfClass:format:)
	#(#{Kernel.STxOutFiler} #register:asGlobal:)
	#(#{Kernel.STxOutFiler} #stream:)
	#(#{Kernel.STxVersionPolicy} #writeProxyPreambleFor:class:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'Dolphin Binary Filer'
	'Dolphin Literal Filer'
	'..\..\Base\Dolphin Source Fileout'
	'Dolphin STx Filer Core'
).

package!

"Class Definitions"!

Kernel.LiteralPrinter
	subclass: #'Kernel.LegacySTLPrinter'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STxProxy
	subclass: #'Kernel.STBCollectionProxy'
	instanceVariableNames: 'class array'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STxProxy
	subclass: #'Kernel.STBExternalResourceLibraryProxy'
	instanceVariableNames: 'fileName _reserved1'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STxProxy
	subclass: #STBGlobalObjectProxy
	instanceVariableNames: 'symbol object'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STxProxy
	subclass: #STBSymbolProxy
	instanceVariableNames: 'string'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBCollectionProxy
	subclass: #'Kernel.STBIdentityDictionaryProxy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBVersionPolicy
	subclass: #'Kernel.STBVersion0Policy'
	instanceVariableNames: 'globals globalNils'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBVersionPolicy
	subclass: #'Kernel.STBVersion5Policy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBVersion0Policy
	subclass: #'Kernel.STBVersion1Policy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBVersion1Policy
	subclass: #'Kernel.STBVersion2Policy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBVersion2Policy
	subclass: #'Kernel.STBVersion3Policy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBVersion3Policy
	subclass: #'Kernel.STBVersion4Policy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STLVersionPolicy
	subclass: #'Kernel.STLVersion3Policy'
	instanceVariableNames: 'globals globalNils'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STLVersionPolicy
	subclass: #'Kernel.STLVersion5Policy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STLVersion3Policy
	subclass: #'Kernel.STLVersion4Policy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Kernel.STBVersionPolicy methodsFor!

saveCollection: aCollection
	self saveObject: aCollection as: (STBCollectionProxy forCollection: aCollection)!

saveSet: aSet elements: aCollection
	self saveObject: aSet as: (STBCollectionProxy class: aSet basicClass array: aCollection asArray)! !
!Kernel.STBVersionPolicy categoriesForMethods!
saveCollection:!operations!public! !
saveSet:elements:!operations!public! !
!

!Kernel.STxInFiler methodsFor!

readObjectOfClass: aClass format: anSTBClassConversion
	#deprecated.
	^self
		readObjectOfClass: aClass
		format: anSTBClassConversion
		size: (self readSizeOf: aClass)! !
!Kernel.STxInFiler categoriesForMethods!
readObjectOfClass:format:!operations!public! !
!

!Kernel.STxOutFiler methodsFor!

register: anObject asGlobal: aSymbol
	"Add anObject to the globals dictionary.
	When this object is output it will be wrapped in an STBGlobalObjectProxy.
	When the proxy is subsequently loaded it be added to Smalltalk with the
	name aSymbol. If the same object is registered as several global symbols
	then it must be #nextPut: a corresponding number of times."

	#deprecated.
	policy register: anObject asGlobal: aSymbol!

stream: aStream
	Notification deprecated.
	stream := aStream! !
!Kernel.STxOutFiler categoriesForMethods!
register:asGlobal:!globals!public! !
stream:!accessing!public! !
!

!Kernel.STxVersionPolicy methodsFor!

writeProxyPreambleFor: anObject class: aClass
	(filer refForObject: aClass)
		ifNotNil: 
			[:refIndex |
			"class has already been output so we can encode a short reference to the class within the prefix."
			self writeClassReference: refIndex prefix: ##(PrefixDataMask|PrefixProxyMask)]
		ifNil: 
			["hitherto unencountered class so we need to save full class details in the object header."
			self writeClass: aClass prefix: ##(PrefixClassMask|PrefixProxyMask).
			filer register: aClass].
	filer register: anObject! !
!Kernel.STxVersionPolicy categoriesForMethods!
writeProxyPreambleFor:class:!binary filing!private! !
!

"End of package definition"!

