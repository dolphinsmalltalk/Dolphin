| package |
package := Package name: 'Dolphin STx Filer Core'.
package paxVersion: 2.1;
	basicComment: 'Dolphin 🐬 Smalltalk STx Filer Common Core.
Copyright ©️ Object Arts Ltd. 1997-2023. Portions Copyright ©️ CGI Group (Europe) Ltd. 1997.

Contains common abstract and support classes, and extensions to the base Dolphin package, for the STx family of binary and literal (source format) serialisers.'.


package setClassNames: #(
	#{Kernel.STBClassProxy}
	#{Kernel.STBCollectionProxy}
	#{Kernel.STBError}
	#{Kernel.STBIdentityDictionaryProxy}
	#{Kernel.STBMetaclassProxy}
	#{Kernel.STBSingletonProxy}
	#{Kernel.STBSortedCollectionProxy}
	#{Kernel.STBStaticVariableProxy}
	#{Kernel.STxClassConversion}
	#{Kernel.STxFiler}
	#{Kernel.STxInFiler}
	#{Kernel.STxInFilerWrapper}
	#{Kernel.STxProxy}
).

package setMethodNames: #(
	#(#{Core.Class} #stbConvertFrom:)
	#(#{Core.Class} #stbVersion)
	#(#{Core.ClassDescription} #stbReadFrom:format:)
	#(#{Core.ClassDescription} #stbReadFrom:format:size:)
	#(#{Core.DateAndTime class} #stbConvertFrom:)
	#(#{Core.DateAndTime class} #stbVersion)
	#(#{Core.Locale class} #stbConvertFrom:)
	#(#{Core.Locale class} #stbReadFrom:format:size:)
	#(#{Core.Locale class} #stbVersion)
	#(#{Core.LookupTable class} #stbReadFrom:format:size:)
	#(#{Core.Model class} #stbConvertFrom:)
	#(#{Core.Model class} #stbVersion)
	#(#{Core.Object} #stbFixup:at:)
	#(#{Core.OrderedCollection class} #stbReadFrom:format:size:)
	#(#{Core.Set class} #stbReadFrom:format:size:)
	#(#{Core.String class} #stbConvertFrom:)
	#(#{Core.String class} #stbReadFrom:format:)
	#(#{Core.String class} #stbVersion)
	#(#{Core.Utf16String class} #stbConvertFrom:)
	#(#{External.DynamicLinkLibrary class} #stbReadFrom:format:size:)
	#(#{External.ResourceLibrary class} #stbConvertFrom:)
	#(#{External.ResourceLibrary class} #stbReadFrom:format:size:)
	#(#{External.ResourceLibrary class} #stbVersion)
	#(#{External.Structure class} #stbReadFrom:format:size:)
	#(#{External.StructureArray class} #stbConvertFrom:)
	#(#{External.StructureArray class} #stbVersion)
	#(#{Kernel.AbsoluteFileLocator class} #stbReadFrom:format:size:)
	#(#{Kernel.BindingReference class} #stbConvertFrom:)
	#(#{Kernel.BindingReference class} #stbVersion)
	#(#{Kernel.BlockClosure class} #stbVersion)
	#(#{Kernel.ClassLocator class} #stbConvertFrom:)
	#(#{Kernel.ClassLocator class} #stbVersion)
	#(#{Kernel.ImageRelativeFileLocator class} #stbReadFrom:format:size:)
	#(#{Kernel.InstallRelativeFileLocator class} #stbReadFrom:format:size:)
	#(#{Kernel.MetaBindingReference class} #stbConvertFrom:)
	#(#{Kernel.SingletonSearchPolicy class} #stbReadFrom:format:size:)
	#(#{Kernel.SmalltalkLocale class} #stbReadFrom:format:size:)
	#(#{Kernel.VariableBinding class} #stbConvertFrom:)
	#(#{Kernel.VariableBinding class} #stbVersion)
	#(#{OS.InvariantLocale class} #stbReadFrom:format:size:)
	#(#{OS.WindowsLocale class} #stbReadFrom:format:size:)
	#(#{UI.ResourceIdentifier class} #stbConvertFrom:)
	#(#{UI.ResourceIdentifier class} #stbVersion)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Kernel.STxClassConversion'
	instanceVariableNames: 'version instSize prefix converterBlock filer'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Kernel.STxFiler'
	instanceVariableNames: 'stream predefinedClassOffset flags'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'LastPredefinedClassRef' -> 16r18.
			'PrefixBytesMask' -> 16r30.
			'PrefixCharacterMask' -> 16r4.
			'PrefixClassMask' -> 16r6.
			'PrefixDataMask' -> 16r2.
			'PrefixInstSizeMask' -> 16rFF.
			'PrefixInstSizeShift' -> 16r8.
			'PrefixInstSizeUnshift' -> -16r8.
			'PrefixLiteralMask' -> 16r8.
			'PrefixLocatorLenShift' -> 16r10.
			'PrefixLocatorLenUnshift' -> -16r10.
			'PrefixNonZeroVersionMask' -> 16r40.
			'PrefixProxyMask' -> 16r8.
			'PrefixRefShift' -> 16r4.
			'PrefixRefUnshift' -> -16r4.
			'PrefixSmallIntegerMask' -> 16r1.
			'PrefixVariableMask' -> 16r20
		}!
Core.Object
	subclass: #'Kernel.STxInFilerWrapper'
	instanceVariableNames: 'stream decorated'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Kernel.STxProxy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Error
	subclass: #'Kernel.STBError'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STxFiler
	subclass: #'Kernel.STxInFiler'
	instanceVariableNames: 'decorator readMap converters deferredActions classLocator context'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'UpgradingMask' -> 16r1 }!
Kernel.STxProxy
	subclass: #'Kernel.STBClassProxy'
	instanceVariableNames: 'packageName locatorKey'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STxProxy
	subclass: #'Kernel.STBCollectionProxy'
	instanceVariableNames: 'class array'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STxProxy
	subclass: #'Kernel.STBSingletonProxy'
	instanceVariableNames: 'class selector'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STxProxy
	subclass: #'Kernel.STBSortedCollectionProxy'
	instanceVariableNames: 'class array sortAlgorithm'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STxProxy
	subclass: #'Kernel.STBStaticVariableProxy'
	instanceVariableNames: 'reference'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBClassProxy
	subclass: #'Kernel.STBMetaclassProxy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.STBCollectionProxy
	subclass: #'Kernel.STBIdentityDictionaryProxy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Private - Answer a block that answers a new instance initialised from the block's single
	parameter, an Array or ByteArray representing the old object whose format is
	described by anSTBClassFormat.

	By default, classes only know about the current format."

	^nil!

stbVersion
	"If instances of a class are saved out to an STBOutFiler and must
	remain loadable even if the class format changes then we need to be able
	to distinguish between the different formats. A new binary format is
	created whenever the number or order of instance variables in a class
	are changed. All classes initially answer a version number of zero.

	This identification of a changed format is achieved by overriding this
	class method in the changed subclass to answer a new SmallInteger.
	Also, in order to 'upgrade' an old instance to a new one, you must
	provide or amend the class method #stbConvertFrom:."

	^0! !
!Core.Class categoriesForMethods!
stbConvertFrom:!binary filing!private! !
stbVersion!binary filing!public! !
!

!Core.ClassDescription methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion
	"Read an instance of the receiver from the binary filer, aSTBInFiler.
	Classes in D8 typically override the new stbReadFrom:format:size: method, in order to avoid dealing with the complexities of the object size value. In older STB streams there is always a size. From STB v3, the size is only present for indexable classes (i.e. indexable pointer objects, variable byte objects). The filer still sends this message to the class being read for backwards compatibility, and because some indexable object classes may not need to store a size."

	^self
		stbReadFrom: anSTBInFiler
		format: anSTBClassConversion
		size: (anSTBInFiler readSizeOf: self)!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler. In most cases we can just bat this right back to the in-filer, and let it read its standard format from the stream. Custom format (or read routines) are useful where the standard STB format, and/or reader, is too inefficient in terms of space, or time, or both. It can also be used to avoid the need to create a proxy class; an example of this is the filing of symbols, which relegates the old STBSymbolProxy class to use only for reading older STB files."

	^anSTBInFiler
		readObjectOfClass: self
		format: anSTBClassConversion
		size: anInteger! !
!Core.ClassDescription categoriesForMethods!
stbReadFrom:format:!binary filing!public! !
stbReadFrom:format:size:!binary filing!public! !
!

!Core.DateAndTime class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Version 1 changes the internal representation to a RataDie day number and seconds in the day."

	anSTBClassFormat version == 0
		ifTrue: 
			[^
			[:data |
			| t |
			t := data at: 2.
			t class == Duration
				ifTrue: 
					["Original code satisfies one set of tests:
						1: RataDie seconds
						2: UTC offset as a Duration"
					t := t asSeconds.
					self utcSeconds: (data at: 1) - ##(SmalltalkEpochRD * 24 * 60 * 60) - t offset: t]
				ifFalse: 
					["DateAndTime was adopted into core based on Ian Bartholomew's original by commit a2d0d522231454fd0c0c39272d152a730e9633b3 on 2019-04-16. However the internal format was changed from the original RataDie seconds and UTC offset Duration to:
						1: RataDie Days (i.e. days since Sunday, December 31, 0000), rather than seconds. 
						2: Seconds since midnight (likely to be a Fraction)
						3. UTC offset seconds (integer)
					The original representation was simpler, but had performance issues due to the large integer fraction required to represent the number of seconds since the start of year 1. The seconds past midnight in the new format is also likely to be a fraction, but a SmallInteger one. The commit did not include an STB version change or conversion from the original format. This oversight was corrected a week or so later, on 2019-04-25, with commit 6fc834a2fcbae440ef94fa9c4df18efc44b199f6. This included bumping the stbVersion to 1, but in the meantime some instances of the new format had apparently escaped into the wild and been STB'd. This means that some version 0 format STB instances are really in the version 1 format already, and so don't require any conversion at all."
					data becomeA: DateAndTime]]].
	^super stbConvertFrom: anSTBClassFormat!

stbVersion
	"Answer the current binary filer version number for instances of the receiver."

	^1! !
!Core.DateAndTime class categoriesForMethods!
stbConvertFrom:!binary filing!public! !
stbVersion!binary filing!development!public! !
!

!Core.Locale class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Convert from previous version resource. 
	In version 1 the STB format was changed to store just the locale identifier and to preserve logical locales such as userDefault.
	We don't use the STB conversion mechanism to perform the upgrade, but we are required to supply a conversion block anyway."

	^[:data | data error: 'Not used']!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	"Implementation Note: Overridden in order to maintain unique instances without using a STBSingletonProxy."

	| locale id ref |
	ref := anSTBInFiler register: nil.
	id := anSTBInFiler basicNext.
	locale := id isInteger
				ifTrue: [self lcid: id]
				ifFalse: 
					[(#(#userDefault #smalltalk #invariant #systemDefault #uiDefault) identityIncludes: id)
						ifTrue: [self perform: id]
						ifFalse: [self named: id]].
	anSTBInFiler fixup: ref to: locale.
	^locale!

stbVersion
	^1! !
!Core.Locale class categoriesForMethods!
stbConvertFrom:!public! !
stbReadFrom:format:size:!public! !
stbVersion!public! !
!

!Core.LookupTable class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	^anSTBInFiler
		readLookupTable: self
		format: anSTBClassConversion
		size: anInteger! !
!Core.LookupTable class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!Core.Model class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Convert from previous version resource. 
	Version Changes:
		1: Added 'events' instance variable to Model."

	^
	[:data |
	| instVars |
	instVars := self stbConvert: data fromVersion: anSTBClassFormat version.
	"Allow for the fact that the conversions may be assuming that appending inst vars with a default value of nil does not require conversion"
	(instVars resize: self instSize) becomeA: self]!

stbVersion
	"Answer the current binary filer version number for instances of the receiver."

	^1! !
!Core.Model class categoriesForMethods!
stbConvertFrom:!binary filing!public! !
stbVersion!binary filing!public! !
!

!Core.Object methodsFor!

stbFixup: anSTBInFiler at: newObjectIndex
	"Answer the true object that must be used to represent the receiver when read from anSTBInFiler.
	Typically this is overridden by subclasses of STBProxy to answer the proxied object. Other classes
	may also override this method to effectively 'one way become' the receiver to some other object"

	^self! !
!Core.Object categoriesForMethods!
stbFixup:at:!binary filing!public! !
!

!Core.OrderedCollection class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	^anSTBInFiler
		readExtensibleCollection: self
		format: anSTBClassConversion
		size: anInteger! !
!Core.OrderedCollection class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!Core.Set class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	^anSTBInFiler
		readExtensibleCollection: self
		format: anSTBClassConversion
		size: anInteger! !
!Core.Set class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!Core.String class methodsFor!

stbConvertFrom: aSTBClassConversion
	"As of version 1, String is abstract and non-instantiable. We want to create AnsiString instances instead, but this will be done by the STBVersion0Policy.  We have to supply a conversion block because the String stbVersion was incremented, but we don't expect it to be called."

	^[:data | _AssertionFailureSignal signal]!

stbReadFrom: anSTxInFiler format: anSTxClassConversion
	"Note that although this is primarily used by STB, since STL stores the majority of Strings as literals, some unprintable strings do not have a literal form, so may be saved as raw UTF-8 bytes even in STL."

	^anSTxInFiler readString: self format: anSTxClassConversion!

stbVersion
	^1! !
!Core.String class categoriesForMethods!
stbConvertFrom:!binary filing!public! !
stbReadFrom:format:!constants!public! !
stbVersion!binary filing!constants!public! !
!

!Core.Utf16String class methodsFor!

stbConvertFrom: aSTBClassConversion
	"version 0 would have been a UnicodeString instance, which will translate directly to a Utf16String."

	^[:data | self fromByteArray: data]! !
!Core.Utf16String class categoriesForMethods!
stbConvertFrom:!binary filing!public! !
!

!External.DynamicLinkLibrary class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	| singleton |
	singleton := self default.
	anSTBInFiler register: singleton.
	^singleton! !
!External.DynamicLinkLibrary class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!External.ResourceLibrary class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Convert from version 1 ExternalResourceLibrary (adds loadFlags inst. var)"

	"Shouldn't be needed, as resource libraries were proxied, and now have a special format"

	anSTBClassFormat version == 0 ifTrue: [^[:data | { data at: 1. self defaultLoadFlags } becomeA: self]].
	^super stbConvertFrom: anSTBClassFormat!

stbReadFrom: anSTxInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	"Implementation Note: Overridden in order to maintain unique instances without using a proxy. Pre-D8 STB streams will still contained the proxies, and so this will not be called."

	| reslib ref fileName |
	ref := anSTxInFiler register: nil.
	fileName := anSTxInFiler basicNext.
	reslib := self open: fileName.
	anSTxInFiler fixup: ref to: reslib.
	^reslib!

stbVersion
	"Answer the current binary filer version number for instances of the receiver."

	^1! !
!External.ResourceLibrary class categoriesForMethods!
stbConvertFrom:!binary filing!public! !
stbReadFrom:format:size:!binary filing!public! !
stbVersion!binary filing!public! !
!

!External.Structure class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	self ensureDefined.
	^anSTBInFiler
		readObjectOfClass: self
		format: anSTBClassConversion
		size: anInteger! !
!External.Structure class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!External.StructureArray class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Convert from earlier version models.
		1: Added 'owner' instance variable, default to nil.

		Version 0: bytes length elementClass
		Version 1: bytes length elementClass owner elementSpacing"

	anSTBClassFormat version == 0
		ifTrue: 
			[^
			[:data |
			(data resize: 5) becomeA: StructureArray.
			"Ensure the elementSpacing is set correctly in case importing data from 2.1"
			data elementClass: data elementClass.
			data]].
	^super stbConvertFrom: anSTBClassFormat!

stbVersion
	"Answer the current binary filer version number for instances of the receiver."

	^1! !
!External.StructureArray class categoriesForMethods!
stbConvertFrom:!binary filing!public! !
stbVersion!binary filing!public! !
!

!Kernel.AbsoluteFileLocator class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	| singleton |
	singleton := self current.
	anSTBInFiler register: singleton.
	^singleton! !
!Kernel.AbsoluteFileLocator class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!Kernel.BindingReference class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Convert from version 0:
		- RelativeBindingReference introduced - context pushed down
		- flags replaced with private inst var"

	^anSTBClassFormat version < 1
		ifTrue: [[:data | self stbConvertFromVersion0: data]]
		ifFalse: [[:data | self stbConvertFromVersion1: data]]!

stbVersion
	^2! !
!Kernel.BindingReference class categoriesForMethods!
stbConvertFrom:!binary filing!public! !
stbVersion!binary filing!public! !
!

!Kernel.BlockClosure class methodsFor!

stbVersion
	"Answer the current binary filer version number for instances of the receiver.
		0 	- Original Smalltalk-80 style blocks (pre Dolphin 6.0)
		1..2	- Interim formats used during development of proper closures.
		3	- Dolphin 6.0 closures.
	"

	^3! !
!Kernel.BlockClosure class categoriesForMethods!
stbVersion!binary filing!public! !
!

!Kernel.ClassLocator class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Convert from earlier version models.
	1: Added 'packageName' instance variable."

	^
	[:data |
	self basicNew
		codeBase: (data at: 1);
		key: (data at: 2);
		yourself]!

stbVersion
	"Answer the current binary filer version number for instances of the receiver."

	^1! !
!Kernel.ClassLocator class categoriesForMethods!
stbConvertFrom:!binary filing!public! !
stbVersion!binary filing!public! !
!

!Kernel.ImageRelativeFileLocator class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	| singleton |
	singleton := self current.
	anSTBInFiler register: singleton.
	^singleton! !
!Kernel.ImageRelativeFileLocator class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!Kernel.InstallRelativeFileLocator class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	| singleton |
	singleton := self current.
	anSTBInFiler register: singleton.
	^singleton! !
!Kernel.InstallRelativeFileLocator class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!Kernel.MetaBindingReference class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Version 0: Did not exist
	Version 1: Introduced
	Version 2: No change"

	^[:data | self instance: (data at: 1)]! !
!Kernel.MetaBindingReference class categoriesForMethods!
stbConvertFrom:!binary filing!public! !
!

!Kernel.SingletonSearchPolicy class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	| singleton |
	singleton := self current.
	anSTBInFiler register: singleton.
	^singleton! !
!Kernel.SingletonSearchPolicy class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!Kernel.SmalltalkLocale class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	^anSTBClassConversion
		ifNotNil: 
			[anSTBInFiler register: Current.
			anSTBClassConversion instSize timesRepeat: [anSTBInFiler basicNext].
			Current]
		ifNil: [self error: 'Unexpected SmalltalkLocale instance in STB stream']! !
!Kernel.SmalltalkLocale class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!Kernel.VariableBinding class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Convert from previous version resource. 
	Version Changes:
		1) Adds 'environment' (early D8)
		2) Adds 'flags'
	"

	| ver |
	ver := anSTBClassFormat version.
	ver == 1 ifTrue: [^[:data | (self stbConvertFromVersion1: data) becomeA: self]].
	ver == 0 ifTrue: [^[:data | (self stbConvertFromVersion0: data) becomeA: self]].
	^super stbConvertFrom: anSTBClassFormat!

stbVersion
	^2! !
!Kernel.VariableBinding class categoriesForMethods!
stbConvertFrom:!binary filing!public! !
stbVersion!binary filing!public! !
!

!OS.InvariantLocale class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	^self error: 'Unexpected InvariantLocale instance in STB stream'! !
!OS.InvariantLocale class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!OS.WindowsLocale class methodsFor!

stbReadFrom: anSTBInFiler format: anSTBClassConversion size: anInteger
	"Read an instance of the receiver from the binary filer, aSTBInFiler."

	"Implementation Note: Overridden in order to maintain unique instances without using an
	STBSingletonProxy."

	^anSTBClassConversion
		ifNotNil: 
			[| ref lcid locale |
			ref := anSTBInFiler register: nil.
			"Version 0 had 3 inst vars: 'numberFormat', 'lcid', and 'info'. The first and last are cached info and can be discarded."
			self assert: [anSTBClassConversion instSize == 3].
			anSTBInFiler basicNext.
			lcid := anSTBInFiler basicNext.
			anSTBInFiler basicNext.
			locale := self lcid: lcid.
			anSTBInFiler fixup: ref to: locale.
			locale]
		ifNil: [self error: 'Unexpected WindowsLocale instance in STB stream']! !
!OS.WindowsLocale class categoriesForMethods!
stbReadFrom:format:size:!binary filing!public! !
!

!UI.ResourceIdentifier class methodsFor!

stbConvertFrom: anSTBClassFormat
	"Convert from previous version resource. 
	Version Changes:
		1) removes stores a selector as the resource name rather than a string name (this change was made an age ago, and not properly converted)
	"

	anSTBClassFormat version == 0
		ifTrue: 
			[^
			[:data |
			data becomeA: self.
			data selector isSymbol ifFalse: [data name: data selector].
			data]].
	^super stbConvertFrom: anSTBClassFormat!

stbVersion
	^1! !
!UI.ResourceIdentifier class categoriesForMethods!
stbConvertFrom:!binary filing!private! !
stbVersion!binary filing!public! !
!

"End of package definition"!

