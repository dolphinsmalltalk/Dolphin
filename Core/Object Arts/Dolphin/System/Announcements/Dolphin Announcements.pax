| package |
package := Package name: 'Dolphin Announcements'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{Kernel.Announcement}
	#{Kernel.AnnouncementSet}
	#{Kernel.AnnouncementSubscription}
	#{Kernel.Announcer}
	#{Kernel.SubscriptionRegistry}
	#{Kernel.WeakAnnouncementSubscription}
	#{Kernel.WeakSubscriptionBuilder}
).

package setMethodNames: #(
	#(#{Core.MessageSend} #asWeakMessageSend)
	#(#{Core.MessageSendAbstract} #announcementSubscriber)
	#(#{Core.Symbol} #asAnnouncement)
	#(#{Core.Symbol} #handlesAnnouncement:)
	#(#{Kernel.BlockClosure} #announcementSubscriber)
	#(#{Kernel.BlockClosure} #asWeakMessageSend)
).

package setVariableNames: #(
	#{Kernel.WeakMessageSend}
).

package setAliasVariableNames: #(
	#{Kernel.WeakMessageSend}
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Kernel.Announcement'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Kernel.AnnouncementSubscription'
	instanceVariableNames: 'announcer announcementClass subscriber action'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Kernel.Announcer'
	instanceVariableNames: 'registry'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Kernel.SubscriptionRegistry'
	instanceVariableNames: 'subscriptions monitor'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Kernel.WeakSubscriptionBuilder'
	instanceVariableNames: 'announcer'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.WeakArray
	variableSubclass: #'Kernel.WeakAnnouncementSubscription'
	instanceVariableNames: 'announcer announcementClass action'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Set
	variableSubclass: #'Kernel.AnnouncementSet'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Variable Aliases"!

Kernel.WeakMessageSend := Kernel.EventMessageSend!


"Loose Methods"!

!Core.MessageSend methodsFor!

asWeakMessageSend
	^WeakMessageSend
		receiver: receiver
		selector: selector
		arguments: args copy! !
!Core.MessageSend categoriesForMethods!
asWeakMessageSend!converting!public! !
!

!Core.MessageSendAbstract methodsFor!

announcementSubscriber
	^self receiver! !
!Core.MessageSendAbstract categoriesForMethods!
announcementSubscriber!public! !
!

!Core.Symbol methodsFor!

asAnnouncement
	^self!

handlesAnnouncement: anAnnouncement 
	"Anything else than the announcement identifier (in the case of symbol i.e. #foo for ... on: #foo send: #bar to: nil) will not 
	be handled."

	"Announcer new 
		on: #FOO send: #bar to: nil;
		announce: #FOO should raise DNU bar"

	^anAnnouncement == self! !
!Core.Symbol categoriesForMethods!
asAnnouncement!converting!public! !
handlesAnnouncement:!converting!public! !
!

!Kernel.BlockClosure methodsFor!

announcementSubscriber
	^self!

asWeakMessageSend
	self receiver notNil ifTrue: [self error: 'Only clean blocks can be weak'].
	^self! !
!Kernel.BlockClosure categoriesForMethods!
announcementSubscriber!public! !
asWeakMessageSend!converting!public! !
!

"End of package definition"!

