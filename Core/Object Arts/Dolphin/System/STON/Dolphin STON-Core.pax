| package |
package := Package name: 'Dolphin STON-Core'.
package paxVersion: 2.1;
	basicComment: 'Dolphin STON-Core
Copyright (c) Object Arts Ltd, 2019. Portions Copyright (C) 2012 Sven Van Caekenberghe 

STON was ported to Dolphin and originally had a separate STON-Core package which contained Sven''s original classes with only minor modifications for Dolphin, and then a Dolphin package that subclassed (and replaced) much of the implementation in those classes. This started as a porting exercise to address dialect incompatibilites, but ended up as a significant rewrite of the Reader and Writer in particular. The original implementations are too slow (in Dolphin) to use as a general purpose serialisation mechanism. This does mean that the implementation has diverged significantly, and will make it much more difficult to consume any changes made in the base. However that is relatively stable now, and much of the value of STON is in the standardised format, rather than the implementation per se.

As of Dolphin 8 the original two packages have been merged into this single package, and the contents of this package represent the derived work. Sven''s original comment and licensing information are below.

This package is now loaded early in the boot process in order to de-serialize packaged binary variables. It is important that its prerequisites remain limited to the Dolphin system package only.

---

# STON - Smalltalk Object Notation

[!![Build Status](https://travis-ci.org/svenvc/ston.svg?branch=master)](https://travis-ci.org/svenvc/ston)


A lightweight text-based, human-readable data interchange format 
for class-based object-oriented languages like Smalltalk.
It can be used to serialize domain level objects, 
either for persistency or network transport. 
As its name suggests, it is based on JSON (Javascript Object Notation). 
It adds symbols as a primitive value, class tags for object values and references. 
Implementations for Pharo Smalltalk, Squeak and Gemstone Smalltalk are available.


## Documentation

The original [Smalltalk Object Notation](https://github.com/svenvc/ston/blob/master/ston-paper.md) paper

The Pharo Enterprise book [STON](https://ci.inria.fr/pharo-contribution/job/EnterprisePharoBook/lastSuccessfulBuild/artifact/book-result/STON/STON.html) chapter

The most formal description is [The STON Specification](https://github.com/svenvc/ston/blob/master/ston-spec.md)

*Sven Van Caekenberghe* 
[MIT Licensed](https://github.com/svenvc/ston/blob/master/license.txt)

----

MIT License

Copyright (C) 2012 Sven Van Caekenberghe

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'.


package setClassNames: #(
	#{STON}
	#{STON.CStyleCommentsSkipStream}
	#{STON.ListWriter}
	#{STON.MapWriter}
	#{STON.PrettyPrinter}
	#{STON.Reader}
	#{STON.ReaderError}
	#{STON.Reference}
	#{STON.ShortListWriter}
	#{STON.StreamWriter}
	#{STON.Writer}
	#{STON.WriterError}
).

package setMethodNames: #(
	#(#{Core.Association} #stonOn:)
	#(#{Core.Bag} #stonOn:)
	#(#{Core.Bag class} #fromSton:)
	#(#{Core.Boolean} #stonContainSubObjects)
	#(#{Core.Boolean} #stonOn:)
	#(#{Core.ByteArray} #hex)
	#(#{Core.ByteArray} #stonContainSubObjects)
	#(#{Core.ByteArray} #stonOn:)
	#(#{Core.ByteArray class} #fromSton:)
	#(#{Core.ByteArray class} #readHexFrom:)
	#(#{Core.Character} #stonOn:)
	#(#{Core.Character class} #fromSton:)
	#(#{Core.Class} #stonOn:)
	#(#{Core.Class class} #fromSton:)
	#(#{Core.ClassDescription} #stonContainSubObjects)
	#(#{Core.Collection} #stonOn:)
	#(#{Core.Collection class} #fromSton:)
	#(#{Core.DateAndTime} #stonContainSubObjects)
	#(#{Core.DateAndTime} #stonOn:)
	#(#{Core.DateAndTime class} #fromSton:)
	#(#{Core.Dictionary} #stonOn:)
	#(#{Core.Dictionary class} #fromSton:)
	#(#{Core.Float class} #fromSton:)
	#(#{Core.Fraction} #stonOn:)
	#(#{Core.GUID} #stonOn:)
	#(#{Core.GUID class} #fromSton:)
	#(#{Core.Integer} #stonOn:)
	#(#{Core.Interval} #fromSton:)
	#(#{Core.Interval} #stonOn:)
	#(#{Core.Interval class} #fromSton:)
	#(#{Core.MessageSequence} #stonOn:)
	#(#{Core.MessageSequence class} #fromSton:)
	#(#{Core.Metaclass} #instanceSide)
	#(#{Core.Metaclass} #stonName)
	#(#{Core.Metaclass} #stonOn:)
	#(#{Core.Metaclass class} #fromSton:)
	#(#{Core.Model class} #stonAllInstVarNames)
	#(#{Core.Number} #stonContainSubObjects)
	#(#{Core.Number} #stonOn:)
	#(#{Core.Object} #fromSton:)
	#(#{Core.Object} #isStonReference)
	#(#{Core.Object} #stonContainSubObjects)
	#(#{Core.Object} #stonOn:)
	#(#{Core.Object} #stonShouldWriteNilInstVars)
	#(#{Core.Object class} #fromSton:)
	#(#{Core.Object class} #stonAllInstVarNames)
	#(#{Core.Object class} #stonName)
	#(#{Core.OrderedDictionary} #stonOn:)
	#(#{Core.RunArray} #fromSton:)
	#(#{Core.RunArray} #stonOn:)
	#(#{Core.RunArray class} #fromSton:)
	#(#{Core.ScaledDecimal} #stonOn:)
	#(#{Core.SearchPolicy class} #fromSton:)
	#(#{Core.SequenceableCollection} #stonOn:)
	#(#{Core.SequenceableCollection class} #fromSton:)
	#(#{Core.Set} #stonPostReferenceResolution)
	#(#{Core.SortedCollection} #fromSton:)
	#(#{Core.SortedCollection} #stonOn:)
	#(#{Core.SortedCollection class} #fromSton:)
	#(#{Core.SortedCollection class} #stonAllInstVarNames)
	#(#{Core.String} #stonContainSubObjects)
	#(#{Core.String} #stonOn:)
	#(#{Core.String class} #findFirstInString:inSet:startingAt:)
	#(#{Core.Symbol} #stonOn:)
	#(#{Core.UndefinedObject} #stonContainSubObjects)
	#(#{Core.UndefinedObject} #stonOn:)
	#(#{External.DynamicLinkLibrary} #stonOn:)
	#(#{External.DynamicLinkLibrary class} #fromSton:)
	#(#{Kernel.BindingReference} #stonOn:)
	#(#{Kernel.BindingReference class} #fromSton:)
	#(#{Kernel.BindingReference class} #stonName)
	#(#{Kernel.BlockClosure} #fromSton:)
	#(#{Kernel.BlockClosure} #stonOn:)
	#(#{Kernel.CompiledCode} #fromSton:)
	#(#{Kernel.CompiledCode} #stonOn:)
	#(#{Kernel.ProcessorScheduler} #stonOn:)
	#(#{Kernel.ProcessorScheduler class} #fromSton:)
	#(#{Kernel.SingletonSearchPolicy} #stonOn:)
	#(#{Kernel.SingletonSearchPolicy class} #stonName)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Kernel.Namespace
	subclass: #STON
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{Core private} #{Kernel private})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'STON.CStyleCommentsSkipStream'
	instanceVariableNames: 'stream peekedCharacter delimiter escape'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'STON.Reader'
	instanceVariableNames: 'readStream objects classes stringStream acceptUnknownClasses newLine convertNewLines classInstVarMaps currentCharacter objectProperties renamedClasses'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'EscapeChars'
				-> (IdentityDictionary withAll: {
								$" -> $".
								$' -> $'.
								$/ -> $/.
								$0 -> $\0.
								$\ -> $\.
								$b -> $\b.
								$f -> $\f.
								$n -> $\n.
								$r -> $\r.
								$t -> $\t.
								$v -> $\v
							}).
			'HexDigitValues'
				-> #(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil 16r0 16r1 16r2 16r3 16r4 16r5 16r6 16r7 16r8 16r9 nil nil nil nil nil nil nil 16rA 16rB 16rC 16rD 16rE 16rF nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil 16rA 16rB 16rC 16rD 16rE 16rF)
		}!

Core.Object
	subclass: #'STON.Reference'
	instanceVariableNames: 'index refCount'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'STON.StreamWriter'
	instanceVariableNames: 'writer first'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'STON.Writer'
	instanceVariableNames: 'writeStream stonCharacters newLine asciiOnly keepNewLines referencePolicy objects classInstVarMaps'
	classVariableNames: 'ExtendedCharacters'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'STONCharacters'
				-> #(nil nil nil nil nil nil nil nil '\b' '\t' '\n' nil '\f' '\r' nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil #pass #pass #pass #pass #pass #pass #pass '\''' #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass '\\' #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass #pass).
			'STONSimpleSymbolCharacters'
				-> #[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
		}!

Core.Error
	subclass: #'STON.ReaderError'
	instanceVariableNames: 'streamPosition'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Error
	subclass: #'STON.WriterError'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

STON.StreamWriter
	subclass: #'STON.ListWriter'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

STON.StreamWriter
	subclass: #'STON.MapWriter'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

STON.ListWriter
	subclass: #'STON.ShortListWriter'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

STON.Writer
	subclass: #'STON.PrettyPrinter'
	instanceVariableNames: 'level'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Association methodsFor!

stonOn: stonWriter
	self class == STON associationClass
		ifTrue: [stonWriter writeAssociation: self]
		ifFalse: [super stonOn: stonWriter]! !

!Core.Association categoriesForMethods!
stonOn:!public!ston! !
!

!Core.Bag methodsFor!

stonOn: stonWriter
	"Use a map with element-occurrences pairs as representation"

	stonWriter writeObject: self do: [stonWriter encodeMap: contents]! !

!Core.Bag categoriesForMethods!
stonOn:!public!ston! !
!

!Core.Bag class methodsFor!

fromSton: stonReader
	"Read a map representation containing element/occurrences pairs"
	
	| bag |
	bag := self new.
	stonReader parseMapDo: [ :key :value |
		bag add: key withOccurrences: value ].
	^ bag! !

!Core.Bag class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.Boolean methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	stonWriter writeBoolean: self! !

!Core.Boolean categoriesForMethods!
stonContainSubObjects!public!ston! !
stonOn:!public!ston! !
!

!Core.ByteArray methodsFor!

hex
	"Answer a hexadecimal representation of the receiver"

	^self asHexString!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	"Use a hex representation"
	
	stonWriter writeObject: self listSingleton: self hex! !

!Core.ByteArray categoriesForMethods!
hex!public! !
stonContainSubObjects!public!ston! !
stonOn:!public!ston! !
!

!Core.ByteArray class methodsFor!

fromSton: stonReader
	"Use a hex representation"
	
	^ self readHexFrom: stonReader parseListSingleton!

readHexFrom: aString
	^self fromHexString: aString! !

!Core.ByteArray class categoriesForMethods!
fromSton:!public!ston! !
readHexFrom:!public!ston! !
!

!Core.Character methodsFor!

stonOn: stonWriter
	stonWriter writeObject: self listSingleton: self asString! !

!Core.Character categoriesForMethods!
stonOn:!public!ston! !
!

!Core.Character class methodsFor!

fromSton: stonReader
	"For Dolphin we have to override this because the first element of a UTF-encoded string may be a surrogate character (i.e. a code unit that is part of a code point).
	To get the full Character we need to read from a stream."

	^ stonReader parseListSingleton readStream next! !

!Core.Character class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.Class methodsFor!

stonOn: stonWriter
	name ifNil: [self error: 'Anonymous classes are not serializable'].
	stonWriter writeObject: self listSingleton: self unaliasedName asSymbol! !

!Core.Class categoriesForMethods!
stonOn:!public!ston! !
!

!Core.Class class methodsFor!

fromSton: stonReader
	| theClassName theClass |
	theClassName := stonReader parseListSingleton.
	theClass := theClassName asQualifiedReference value.
	^theClass! !

!Core.Class class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.ClassDescription methodsFor!

stonContainSubObjects
	^ false! !

!Core.ClassDescription categoriesForMethods!
stonContainSubObjects!public!ston! !
!

!Core.Collection methodsFor!

stonOn: stonWriter
	"For collections we chose to write a list of elements as delivered by #do:
	This is not the best or most correct solution for all subclasses though,
	so some will revert to standard object behavior or chose another solution"

	stonWriter writeObject: self do: [stonWriter encodeList: self]! !

!Core.Collection categoriesForMethods!
stonOn:!public!ston! !
!

!Core.Collection class methodsFor!

fromSton: stonReader
	"For collections we chose to instantiate based a list of elements using #add:
	This is not the best or most correct solution for all subclasses though,
	so some will revert to standard object behavior or chose another solution."
	
	| collection |
	collection := self new.
	stonReader parseListDo: [ :each |
		collection add: each ].
	^ collection! !

!Core.Collection class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.DateAndTime methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	"Use an ISO representation with all details YYYY-MM-DDTHH:MM:SS.N+TZ (with optional nanoseconds and timezone offset)"

	stonWriter writeObject: self
		listSingleton: (String streamContents: [:stream | self printOn: stream withLeadingSpace: false])! !

!Core.DateAndTime categoriesForMethods!
stonContainSubObjects!public!ston! !
stonOn:!public!ston! !
!

!Core.DateAndTime class methodsFor!

fromSton: stonReader
	^ self readFrom: stonReader parseListSingleton readStream! !

!Core.DateAndTime class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.Dictionary methodsFor!

stonOn: stonWriter
	"Instances of STON mapClass will be encoded directly, without a class tag.
	Other (sub)classes will be encoded with a class tag and will use a map representation. "

	self class == STON mapClass
		ifTrue: [stonWriter writeMap: self]
		ifFalse: [stonWriter writeObject: self do: [stonWriter encodeMap: self]]! !

!Core.Dictionary categoriesForMethods!
stonOn:!public! !
!

!Core.Dictionary class methodsFor!

fromSton: stonReader
	"Instances of STON mapClass will be read directly and won't arrive here.
	Other (sub)classes will use this method."
	
	| dictionary |
	dictionary := self new.
	stonReader parseMapDo: [ :key :value |
		dictionary at: key put: value ].
	^ dictionary! !

!Core.Dictionary class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.Float class methodsFor!

fromSton: stonReader
	| argument |
	argument := stonReader parseListSingleton.
	argument isNumber ifTrue: [^argument].
	"Replace #perform: in standard STON code with a dictionary lookup. Although guarded, #perform: is best avoided in a deserializer for security reasons."
	^(##(IdentityDictionary withAll: {
				#nan -> Float.NaN.
				#infinity -> Float.Infinity.
				#negativeInfinity -> Float.NegativeInfinity
			})
		lookup: argument) ifNil: [stonReader error: 'special Float not recognized']! !

!Core.Float class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.Fraction methodsFor!

stonOn: stonWriter
	stonWriter writeFraction: self! !

!Core.Fraction categoriesForMethods!
stonOn:!public!ston! !
!

!Core.GUID methodsFor!

stonOn: stonWriter
	"Use a hex representation"
	
	stonWriter writeObject: self listSingleton: self idlString! !

!Core.GUID categoriesForMethods!
stonOn:!public!ston! !
!

!Core.GUID class methodsFor!

fromSton: stonReader
	^ self fromIdlString: stonReader parseListSingleton! !

!Core.GUID class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.Integer methodsFor!

stonOn: stonWriter
	stonWriter writeInteger: self! !

!Core.Integer categoriesForMethods!
stonOn:!public!ston! !
!

!Core.Interval methodsFor!

fromSton: stonReader
	"Overwritten to get back the standard object behavior"
	
	stonReader parseNamedInstVarsFor: self!

stonOn: stonWriter
	"Overwritten to get back the standard object behavior"

	stonWriter writeObject: self! !

!Core.Interval categoriesForMethods!
fromSton:!public!ston! !
stonOn:!public!ston! !
!

!Core.Interval class methodsFor!

fromSton: stonReader
	"Overwritten to get back the standard object behavior"
	
	^ self basicNew
		fromSton: stonReader;
		yourself! !

!Core.Interval class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.MessageSequence methodsFor!

stonOn: stonWriter
	stonWriter writeObject: self do: [stonWriter encodeList: messages]! !

!Core.MessageSequence categoriesForMethods!
stonOn:!public!ston! !
!

!Core.MessageSequence class methodsFor!

fromSton: stonReader
	"MessageSequences are like OrderedCollections of Messages."

	| collection |
	collection := self new.
	stonReader parseListDo: [:each | collection add: each].
	^collection! !

!Core.MessageSequence class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.Metaclass methodsFor!

instanceSide
	"For Pharo compatibility - used by STON"

	^instanceClass!

stonName
	^#Class!

stonOn: stonWriter
	stonWriter
		writeObject: self 
		listSingleton: self instanceSide name asSymbol! !

!Core.Metaclass categoriesForMethods!
instanceSide!accessing!private! !
stonName!public!ston! !
stonOn:!public!ston! !
!

!Core.Metaclass class methodsFor!

fromSton: stonReader
	| theClassName theClass theMetaclass |
	theClassName := stonReader parseListSingleton.
	theClass := theClassName asQualifiedReference value.
	theMetaclass := theClass class.
	^ theMetaclass! !

!Core.Metaclass class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.Model class methodsFor!

stonAllInstVarNames
	"Override to exclude the events instance variable as we never want to serialize these."

	^superclass == Object ifTrue: [#()] ifFalse: [superclass stonAllInstVarNames , self instanceVariableNames]! !

!Core.Model class categoriesForMethods!
stonAllInstVarNames!public!ston! !
!

!Core.Number methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	stonWriter writeFloat: self asFloat! !

!Core.Number categoriesForMethods!
stonContainSubObjects!public!ston! !
stonOn:!public!ston! !
!

!Core.Object methodsFor!

fromSton: stonReader
	"Decode non-variable classes from a map of their instance variables and values.
	Override to customize and add a matching #toSton: (see implementors)."
	
	self class isVariable 
		ifTrue: [
			stonReader error: 'custom #fromSton: implementation needed for variable/indexable class' ]
		ifFalse: [
			stonReader parseNamedInstVarsFor: self ]!

isStonReference
	^ false!

stonContainSubObjects
	"Return true if I contain subObjects that should be processed, false otherwise.
	Overwrite when necessary. See also #stonProcessSubObjects:"
	
	^ true!

stonOn: stonWriter
	"Encode non-variable classes with a map of their instance variable and values.
	Override to customize and add a matching #fromSton: (see implementors)."

	self class isVariable 
		ifTrue: [
			stonWriter error: 'custom #stonOn: implementation needed for variable/indexable class' ]
		ifFalse: [
			stonWriter writeObject: self ]
!

stonShouldWriteNilInstVars
	"Return true if my instance variables that are nil should be written out, 
	false otherwise. Overwrite when necessary. By default, return false."
	
	^ false! !

!Core.Object categoriesForMethods!
fromSton:!public!ston! !
isStonReference!public!ston! !
stonContainSubObjects!public!ston! !
stonOn:!public!ston! !
stonShouldWriteNilInstVars!public!ston!testing! !
!

!Core.Object class methodsFor!

fromSton: stonReader
	"Create a new instance and delegate decoding to instance side.
	Override only when new instance should be created directly (see implementors). "

	| instance |
	"Divergence from standard STON in using #basicNew. As we are trying to restore an Object, we don't want it to run its normal initialization."
	instance := self basicNew.
	"We also call back to the reader to inform it of the new instance, as it can then use this to resolve any internal references. This is only really necessary if the receiving class creates external references as it is being materialized."
	stonReader registerNewObject: instance.
	^instance
		fromSton: stonReader;
		yourself!

stonAllInstVarNames
	"Override to encode my instances using a custom set of instance variables or to define their order."
	
	^ self allInstanceVariableNames !

stonName
	"Override to encode my instances using a different class name.
	Use symbols as class name/tag."

	^self unaliasedName! !

!Core.Object class categoriesForMethods!
fromSton:!public!ston! !
stonAllInstVarNames!public!ston! !
stonName!public!ston! !
!

!Core.OrderedDictionary methodsFor!

stonOn: stonWriter
	"I store my instances as maps. When in JSON mode,
	encode me directly, without a class tag, keeping the order."

	stonWriter jsonMode
		ifTrue: [stonWriter encodeMap: self]
		ifFalse: [stonWriter writeObject: self do: [stonWriter encodeMap: self]]! !

!Core.OrderedDictionary categoriesForMethods!
stonOn:!public!ston! !
!

!Core.RunArray methodsFor!

fromSton: stonReader
	"Overwritten to get back the standard object behavior"
	
	stonReader parseNamedInstVarsFor: self!

stonOn: stonWriter
	"Overwritten to get back the standard object behavior"
	
	stonWriter writeObject: self! !

!Core.RunArray categoriesForMethods!
fromSton:!public!ston! !
stonOn:!public!ston! !
!

!Core.RunArray class methodsFor!

fromSton: stonReader
	^ self new
		fromSton: stonReader;
		yourself! !

!Core.RunArray class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.ScaledDecimal methodsFor!

stonOn: stonWriter
	stonWriter writeScaledDecimal: self! !

!Core.ScaledDecimal categoriesForMethods!
stonOn:!public!ston! !
!

!Core.SearchPolicy class methodsFor!

fromSton: stonReader
	^stonReader isList
		ifTrue: [self perform: stonReader parseListSingleton]
		ifFalse: [super fromSton: stonReader]! !

!Core.SearchPolicy class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.SequenceableCollection methodsFor!

stonOn: stonWriter
	"Instances of STON listClass will be encoded directly, without a class tag.
	Other (sub)classes will be encoded with a class tag and will use a list representation. "

	self class == STON listClass
		ifTrue: [stonWriter writeList: self]
		ifFalse: [super stonOn: stonWriter]! !

!Core.SequenceableCollection categoriesForMethods!
stonOn:!public!ston! !
!

!Core.SequenceableCollection class methodsFor!

fromSton: stonReader
	"Overwritten to use #streamContents: and #nextPut:"
	
	^ self streamContents: [ :stream |
		stonReader parseListDo: [ :each |
			stream nextPut: each ] ]! !

!Core.SequenceableCollection class categoriesForMethods!
fromSton:!public!ston! !
!

!Core.Set methodsFor!

stonPostReferenceResolution
	"When references were resolved in me, the hash of my elements might have changed.
	Check if I am still healthy and rehash me if not."
	
	self isHealthy ifFalse: [ self rehash ]! !

!Core.Set categoriesForMethods!
stonPostReferenceResolution!public!ston! !
!

!Core.SortedCollection methodsFor!

fromSton: stonReader
	"Overridden to get back the standard object behavior"

	stonReader parseMapDo: 
			[:name :value |
			name == #algorithm
				ifTrue: [self algorithm: value]
				ifFalse: 
					[name == #array
						ifTrue: 
							[| size |
							size := value size.
							self basicResize: size.
							self firstIndex: 1 lastIndex: size.
							1 to: size do: [:i | self basicAt: i put: (value at: i)]]
						ifFalse: [stonReader error: 'Unexpected SortedCollection variable ' , name]]]!

stonOn: stonWriter
	"Overridden to ensure the sort block, etc, is preserved"

	stonWriter writeObject: self extra: {#array -> self asArray}! !

!Core.SortedCollection categoriesForMethods!
fromSton:!public!ston! !
stonOn:!public!ston! !
!

!Core.SortedCollection class methodsFor!

fromSton: stonReader
	"Overwritten to get back the standard object behavior"

	^ self new
		fromSton: stonReader;
		yourself!

stonAllInstVarNames
	"Override to encode my instances using a custom set of instance variables or to define their order."
	
	^#('algorithm')! !

!Core.SortedCollection class categoriesForMethods!
fromSton:!public!ston! !
stonAllInstVarNames!public!ston! !
!

!Core.String methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	stonWriter writeString: self! !

!Core.String categoriesForMethods!
stonContainSubObjects!public!ston! !
stonOn:!public!ston! !
!

!Core.String class methodsFor!

findFirstInString: aSymbol inSet: aByteArray startingAt: anInteger
	^Error notYetImplemented! !

!Core.String class categoriesForMethods!
findFirstInString:inSet:startingAt:!public! !
!

!Core.Symbol methodsFor!

stonOn: stonWriter
	stonWriter writeSymbol: self! !

!Core.Symbol categoriesForMethods!
stonOn:!public!ston! !
!

!Core.UndefinedObject methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	stonWriter writeNull! !

!Core.UndefinedObject categoriesForMethods!
stonContainSubObjects!public!ston! !
stonOn:!public!ston! !
!

!External.DynamicLinkLibrary methodsFor!

stonOn: stonWriter
	stonWriter writeObject: self listSingleton: #default! !

!External.DynamicLinkLibrary categoriesForMethods!
stonOn:!public!ston! !
!

!External.DynamicLinkLibrary class methodsFor!

fromSton: stonReader
	stonReader parseListSingleton.
	^self default
! !

!External.DynamicLinkLibrary class categoriesForMethods!
fromSton:!public!ston! !
!

!Kernel.BindingReference methodsFor!

stonOn: stonWriter
	stonWriter writeObject: self
		streamMap: 
			[:dictionary |
			| pathString |
			pathString := String smalltalkWriteStream: 32.
			self displayOn: pathString.
			self isPrivate ifTrue: [pathString nextPutAll: ' private'].
			dictionary at: #pathString put: pathString contents.
			self scope ifNotNil: [:scope | dictionary at: #scope put: scope]]! !

!Kernel.BindingReference categoriesForMethods!
stonOn:!public!ston/core! !
!

!Kernel.BindingReference class methodsFor!

fromSton: stonReader
	| values |
	values := LookupTable new.
	stonReader parseMapDo: [:key :value | values at: key put: value].
	^self pathString: (values at: #pathString) scope: (values lookup: #scope)!

stonName
	^#BindingReference! !

!Kernel.BindingReference class categoriesForMethods!
fromSton:!public!ston! !
stonName!public!ston! !
!

!Kernel.BlockClosure methodsFor!

fromSton: stonReader
	| instVars |
	instVars := stonReader instVarMapFor: BlockClosure.
	stonReader parseMapDo: 
			[:name :value |
			name == #copiedValues
				ifTrue: 
					[| count |
					count := value size.
					self resize: count.
					value
						replaceElementsOf: self
						from: 1
						to: count
						startingAt: 1]
				ifFalse: [self instVarAt: (instVars at: name) put: value]]!

stonOn: stonWriter
	stonWriter writeObject: self
		streamMap: 
			[:dictionary |
			"BlockClosures have a fixed set of inst vars that cannot be changed"
			BlockClosure instanceVariableNames
				keysAndValuesDo: [:i :each | (self instVarAt: i) ifNotNil: [:value | dictionary at: each asSymbol put: value]].
			dictionary at: #copiedValues put: self copiedValues]! !

!Kernel.BlockClosure categoriesForMethods!
fromSton:!public! !
stonOn:!public!ston! !
!

!Kernel.CompiledCode methodsFor!

fromSton: stonReader
	| instVars |
	instVars := stonReader instVarMapFor: CompiledCode.
	stonReader parseMapDo: 
			[:name :value |
			name == #literals
				ifTrue: 
					[| count |
					count := value size.
					self resize: count.
					value
						replaceElementsOf: self
						from: 1
						to: count
						startingAt: 1]
				ifFalse: [self instVarAt: (instVars at: name) put: value]]!

stonOn: stonWriter
	stonWriter writeObject: self
		streamMap: 
			[:dictionary |
			"CompiledMethods have a fixed set of inst vars that cannot be changed"
			CompiledCode instanceVariableNames
				keysAndValuesDo: [:i :each | (self instVarAt: i) ifNotNil: [:value | dictionary at: each asSymbol put: value]].
			"Store the indexable fields as a literals list"
			dictionary at: #literals put: self literals]! !

!Kernel.CompiledCode categoriesForMethods!
fromSton:!public! !
stonOn:!public!ston! !
!

!Kernel.ProcessorScheduler methodsFor!

stonOn: aSTONWriter 
	aSTONWriter 
		writeObject: self 
		do: []! !

!Kernel.ProcessorScheduler categoriesForMethods!
stonOn:!public!ston! !
!

!Kernel.ProcessorScheduler class methodsFor!

fromSton: stonReader
	^Processor! !

!Kernel.ProcessorScheduler class categoriesForMethods!
fromSton:!public!ston! !
!

!Kernel.SingletonSearchPolicy methodsFor!

stonOn: stonWriter
	self name
		ifNil: [stonWriter writeObject: self]
		ifNotNil: [:name | stonWriter writeObject: self listSingleton: name asSymbol]! !

!Kernel.SingletonSearchPolicy categoriesForMethods!
stonOn:!public!ston! !
!

!Kernel.SingletonSearchPolicy class methodsFor!

stonName
	^#SearchPolicy! !

!Kernel.SingletonSearchPolicy class categoriesForMethods!
stonName!public!ston! !
!

"End of package definition"!

