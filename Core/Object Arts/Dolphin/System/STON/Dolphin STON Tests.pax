| package |
package := Package name: 'Dolphin STON Tests'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin STON SUnit tests
Copyright (c) Object Arts Ltd, 2019

Tests of Dolphin specific aspects of the STON implementation.'.


package setMethodNames: #(
	#(#{Core.Array} #asDictionary)
	#(#{Core.Collection} #atRandom)
	#(#{Core.Integer} #atRandom)
	#(#{Core.SequenceableCollection} #asFloatArray)
	#(#{Core.SequenceableCollection} #asIntegerArray)
	#(#{Core.SequenceableCollection} #atRandom)
	#(#{Core.SequenceableCollection} #doWithIndex:)
	#(#{Core.String class} #crlf)
	#(#{Core.Symbol class} #hasInterned:ifTrue:)
	#(#{Core.Tests.ByteArrayTest} #testHex)
	#(#{Core.Time class} #hour:minute:second:)
	#(#{Core.Time class} #hour:minute:second:nanoSecond:)
	#(#{STON.Tests.ReaderTest} #testColorInvalid)
	#(#{STON.Tests.ReaderTest} #testReferenceCycle2)
	#(#{STON.Tests.ReaderTest} #testSymbolMultiByte)
	#(#{STON.Tests.STONTestUser class} #icon)
	#(#{STON.Tests.TestDomainObject class} #icon)
	#(#{STON.Tests.TestKnownObject class} #icon)
	#(#{STON.Tests.WriteReadTest} #testBindingReferenceFull)
	#(#{STON.Tests.WriteReadTest} #testBindingReferenceMeta)
	#(#{STON.Tests.WriteReadTest} #testBindingReferenceRelative)
	#(#{STON.Tests.WriteReadTest} #testBindingReferences)
	#(#{STON.Tests.WriteReadTest} #testColorReferences)
	#(#{STON.Tests.WriteReadTest} #testCompiledMethodsAndBlocks)
	#(#{STON.Tests.WriteReadTest} #testDynamicLinkLibraries)
	#(#{STON.Tests.WriteReadTest} #testExtendedCharacters)
	#(#{STON.Tests.WriteReadTest} #testFramingCalculation)
	#(#{STON.Tests.WriteReadTest} #testNamedColors)
	#(#{STON.Tests.WriteReadTest} #testPluggableColors)
	#(#{STON.Tests.WriteReadTest} #testProcessor)
	#(#{STON.Tests.WriteReadTest} #testSearchPolicy)
	#(#{STON.Tests.WriteReadTest} #testSystemDictionary)
	#(#{STON.Tests.WriterTest} #testBindingReferenceFull)
	#(#{STON.Tests.WriterTest} #testBindingReferenceMeta)
	#(#{STON.Tests.WriterTest} #testBindingReferenceRelative)
	#(#{STON.Tests.WriterTest} #testColorReferences)
	#(#{STON.Tests.WriterTest} #testFramingCalculation)
	#(#{STON.Tests.WriterTest} #testIsSimpleSymbol2)
	#(#{STON.Tests.WriterTest} #testLegacyDate)
	#(#{STON.Tests.WriterTest} #testProcessor)
	#(#{STON.Tests.WriterTest} #testSearchPolicy)
	#(#{STON.Tests.WriterTest} #testSymbolMultiByte)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'..\..\Base\Tests\Dolphin Base Tests'
	'..\..\MVP\Graphics\Dolphin GDI Graphics'
	'..\..\Base\Dolphin Legacy Date & Time'
	'..\..\MVP\Base\Dolphin MVP Base'
	'..\Random\Dolphin Random Stream'
	'Dolphin STON-Core'
	'Dolphin STON-MVP'
	'..\..\..\..\Contributions\svenc\STON\STON-Tests'
).

package setManualPrerequisites: #(
	'Dolphin STON-MVP'
).

package!

"Loose Methods"!

!Core.Array methodsFor!

asDictionary
	"Private - Questionable conversion message from Pharo that works only it the target collection contains associations (or at least elements that understand #key and #value). 
	It is here only for the STON tests."

	^Dictionary withAll: self! !
!Core.Array categoriesForMethods!
asDictionary!private! !
!

!Core.Collection methodsFor!

atRandom
	| r i |
	r := self size atRandom.
	i := 1.
	self do: [:each | i == r ifTrue: [^each]].
	^self errorEmptyCollection! !
!Core.Collection categoriesForMethods!
atRandom!public! !
!

!Core.Integer methodsFor!

atRandom
	"Answer a random integer from 1 to self."

	^(Random default next * self) truncated + 1! !
!Core.Integer categoriesForMethods!
atRandom!public! !
!

!Core.SequenceableCollection methodsFor!

asFloatArray
	^External.FLOATArray withAll: self!

asIntegerArray
	^External.Int32Array withAll: self!

atRandom
	^self at: self size atRandom!

doWithIndex: aDyadicValuable 
	"For Pharo compatibility; #keysAndValuesDo: is preferred (and faster)"

	self keysAndValuesDo: [:index :value | aDyadicValuable value: value value: index]! !
!Core.SequenceableCollection categoriesForMethods!
asFloatArray!public! !
asIntegerArray!public! !
atRandom!public! !
doWithIndex:!public! !
!

!Core.String class methodsFor!

crlf
	^##(String with: $\r with: $\n)! !
!Core.String class categoriesForMethods!
crlf!public! !
!

!Core.Symbol class methodsFor!

hasInterned: aString ifTrue: aMonadicValuable 
	^(self findInterned: aString) ifNil: [false] ifNotNil: [:symbol | aMonadicValuable value: symbol. true]! !
!Core.Symbol class categoriesForMethods!
hasInterned:ifTrue:!public! !
!

!Core.Tests.ByteArrayTest methodsFor!

testHex
	self assert: #[122 43 213 7] hex equals: '7a2bd507'.
	self assert: #[151 193 242 221 249 32 153 72 179 41 49 154 48 193 99 134] hex
		equals: '97c1f2ddf9209948b329319a30c16386'.
	self assert: (ByteArray readHexFrom: '7A2BD507') equals: #[122 43 213 7].
	self assert: (ByteArray readHexFrom: '7a2bd507') equals: #[122 43 213 7]! !
!Core.Tests.ByteArrayTest categoriesForMethods!
testHex!public! !
!

!Core.Time class methodsFor!

hour: anInteger minute: anInteger2 second: anInteger3 
	^self hours: anInteger minutes: anInteger2 seconds: anInteger3!

hour: hoursInteger minute: minutesInteger second: secondsInteger nanoSecond: nanosInteger
	^self fromSeconds: (hoursInteger * 60 + minutesInteger) * 60 + secondsInteger + (nanosInteger / 1e9)! !
!Core.Time class categoriesForMethods!
hour:minute:second:!public! !
hour:minute:second:nanoSecond:!public! !
!

!STON.Tests.ReaderTest methodsFor!

testColorInvalid
	"This is a handy test of DolphinSTONReader>>parseListSingleton"

	self
		should: [self materialize: 'Color[#red,#blue]']
		raise: ReaderError
		matching: [:ex | ex description = 'At character 11: ] expected'].
	self
		should: [self materialize: 'Color[]']
		raise: ReaderError
		matching: [:ex | ex description = 'At character 7: invalid input']!

testReferenceCycle2
	| object |
	object := self materialize: 'Link{#nextLink:@1}'.
	self assert: object class equals: Link.
	self assert: object nextLink identicalTo: object!

testSymbolMultiByte
	"https://github.com/svenvc/ston/issues/25"

	self assert: (self materialize: '#''£''') equals: #'£'.
	self assert: (self materialize: '#''€''') equals: Character euro asSymbol.
	self assert: (self materialize: '#''你好''') equals: #'你好'.
	self assert: (self materialize: '#''🐬''') equals: #'🐬'! !
!STON.Tests.ReaderTest categoriesForMethods!
testColorInvalid!public!tests! !
testReferenceCycle2!public!tests! !
testSymbolMultiByte!public!tests! !
!

!STON.Tests.STONTestUser class methodsFor!

icon
	"Answers an Icon that can be used to represent this class"

	^STONTest icon! !
!STON.Tests.STONTestUser class categoriesForMethods!
icon!constants!public! !
!

!STON.Tests.TestDomainObject class methodsFor!

icon
	"Answers an Icon that can be used to represent this class"

	^STONTest icon! !
!STON.Tests.TestDomainObject class categoriesForMethods!
icon!constants!public! !
!

!STON.Tests.TestKnownObject class methodsFor!

icon
	"Answers an Icon that can be used to represent this class"

	^STONTest icon! !
!STON.Tests.TestKnownObject class categoriesForMethods!
icon!constants!public! !
!

!STON.Tests.WriteReadTest methodsFor!

testBindingReferenceFull
	| rehydrated |
	rehydrated := self serializeAndMaterialize: #{Core.Object private}.
	self deny: rehydrated isRelative.
	self assert: rehydrated isPrivate.
	self assert: rehydrated value identicalTo: Object!

testBindingReferenceMeta
	| rehydrated |
	rehydrated := self serializeAndMaterialize: #{Core.Object class private}.
	self deny: rehydrated isRelative.
	self assert: rehydrated isPrivate.
	self assert: rehydrated value identicalTo: Core.Object class
	!

testBindingReferenceRelative
	| rehydrated |
	rehydrated := self serializeAndMaterialize: (BindingReference
						path: #('_' 'Tests' 'WriterTest')
						private: true
						scope: STON).
	self assert: rehydrated isRelative.
	self assert: rehydrated isPrivate.
	rehydrated := self serializeAndMaterialize: #{WriterTest}.
	self assert: rehydrated isRelative.
	self deny: rehydrated isPrivate!

testBindingReferences
	| objects rehydrated |
	objects := {self class fullyQualifiedReference.
				#{Object}.
				#{Core.Object}.
				#{Core.Object}
					binding;
					yourself}.
	rehydrated := self serializeAndMaterialize: objects.
	self assert: (rehydrated allSatisfy: [:each | each getBinding isNil])!

testColorReferences
	| light lighter |
	light := Color red lighter lighter.
	lighter := light lighter.
	self serializeAndMaterialize: {Color red. light. lighter. light. Color red. lighter}!

testCompiledMethodsAndBlocks
	self serializeAndMaterialize: self class methodDictionary!

testDynamicLinkLibraries
	| libs |
	libs := STON listClass withAll: {OS.Kernel32.
						{OS.Kernel32}.
						CompilerLibrary default.
						VM.
						OS.Ucrt.
						OS.CRTLibrary nonblocking}.
	self serializeAndMaterialize: libs!

testExtendedCharacters
	| characters |
	characters := {$£. $\x6587. $\x1F37A. $£. $\x394}.
	self serializeAndMaterialize: characters!

testFramingCalculation
	| objects |
	objects := {UI.FramingCalculation fixedParentLeft. UI.FramingCalculation relativeParentHeight}.
	self serializeAndMaterialize: objects!

testNamedColors
	| objects |
	"A mix of SystemColors, ThemeColors, RGBs, etc."
	objects := {Color face3d.  Color named: #smalltalkSystem. Color named: #darkGreen. Color default. Color none}.
	self serializeAndMaterialize: objects.
	"IndexedColors will materialize as the equivalent RGB. As IndexedColors are effectively deprecated, this is OK"
	self assert: (self materialize: (self serialize: (Color named: #maroon))) equals: Color maroon!

testPluggableColors
	| objects |
	objects := {PluggableColor with: [Color window lighter]}.
	self serializeAndMaterialize: objects!

testProcessor
	self serializeAndMaterialize: {'Foo'. Processor. 'Bar'}!

testSearchPolicy
	| objects |
	objects := {SearchPolicy always. SearchPolicy identity. SearchPolicy method. SearchPolicy caseInsensitive}.
	self serializeAndMaterialize: objects!

testSystemDictionary
	self serializeAndMaterialize: {'Foo'. Smalltalk. 'Bar'}! !
!STON.Tests.WriteReadTest categoriesForMethods!
testBindingReferenceFull!public!tests! !
testBindingReferenceMeta!public!tests! !
testBindingReferenceRelative!public!tests! !
testBindingReferences!public!tests! !
testColorReferences!public!tests! !
testCompiledMethodsAndBlocks!public!tests! !
testDynamicLinkLibraries!public!tests! !
testExtendedCharacters!public!tests! !
testFramingCalculation!public!tests! !
testNamedColors!public!tests! !
testPluggableColors!public!tests! !
testProcessor!public!tests! !
testSearchPolicy!public!tests! !
testSystemDictionary!public!tests! !
!

!STON.Tests.WriterTest methodsFor!

testBindingReferenceFull
	self assert: (self serialize: (#{Core.Object private}
						binding;
						yourself))
		equals: 'BindingReference{#pathString:''Core.Object private''}'!

testBindingReferenceMeta
	self assert: (self serialize: (#{Core.Object class private}
						binding;
						yourself))
		equals: 'BindingReference{#pathString:''Core.Object class private''}'!

testBindingReferenceRelative
	self
		assert: (self serialize: ((BindingReference
						path: #('_' 'Tests' 'WriterTest')
						private: true
						scope: STON)
						binding;
						yourself))
		equals: 'BindingReference{#pathString:''_.Tests.WriterTest private'',#scope:Class[#STON]}'.
	self assert: (self serialize: #{ReaderTest})
		equals: 'BindingReference{#pathString:''ReaderTest'',#scope:Class[#STON.Tests.WriterTest]}'.
	self assert: (self serialize: #{_.ReaderTest})
		equals: 'BindingReference{#pathString:''ReaderTest'',#scope:Class[#STON.Tests.WriterTest]}'!

testColorReferences
	| serialized light |
	light := Color red lighter lighter.
	serialized := self serialize: {Color red. light. light. light. Color red. light}.
	self assert: serialized
		equals: '[Color[#red],Color{#red:1.0,#green:0.063,#blue:0.063,#alpha:1.0},@3,@3,@2,@3]'!

testFramingCalculation
	self assert: (self serialize: UI.FramingCalculation fixedParentLeft)
		equals: 'FramingCalculation[#fixedParentLeft]'!

testIsSimpleSymbol2
	self deny: (STON writer isSimpleSymbol: #'£').
	self deny: (STON writer isSimpleSymbol: Character euro asSymbol).
	self deny: (STON writer isSimpleSymbol: Character dolphin asSymbol)!

testLegacyDate
	| date tz offset |
	offset := Locale timeZoneInformation offset.
	tz := offset = 0 seconds ifTrue: ['Z'] ifFalse: [offset printStringFormat: '+hh:mm'].
	date := Date
				year: 2012
				month: 1
				day: 1.
	self assert: (self serialize: date) equals: ('Date[''2012-01-01<1s>'']' expandMacrosWith: tz)!

testProcessor
	self assert: (self serialize: Processor) equals: 'ProcessorScheduler'!

testSearchPolicy
	self assert: (self serialize: SearchPolicy caseInsensitive) equals: 'SearchPolicy[#caseInsensitive]'.
	self assert: (self serialize: SearchPolicy ordinalCaseInsensitive) equals: 'SearchPolicy[#ordinalCaseInsensitive]'.
!

testSymbolMultiByte
	"https://github.com/svenvc/ston/issues/25"

	self assert: (self serialize: #'£') equals: '#''£'''.
	self assert: (self serialize: Character euro asSymbol) equals: '#''€'''.
	self assert: (self serialize: #'你好') equals: '#''你好'''.
	self assert: (self serialize: #'🐬') equals: '#''🐬'''! !
!STON.Tests.WriterTest categoriesForMethods!
testBindingReferenceFull!public!tests! !
testBindingReferenceMeta!public!tests! !
testBindingReferenceRelative!public!tests! !
testColorReferences!public!tests! !
testFramingCalculation!public!tests! !
testIsSimpleSymbol2!public!tests! !
testLegacyDate!public!tests! !
testProcessor!public!tests! !
testSearchPolicy!public!tests! !
testSymbolMultiByte!public!tests! !
!

"End of package definition"!

