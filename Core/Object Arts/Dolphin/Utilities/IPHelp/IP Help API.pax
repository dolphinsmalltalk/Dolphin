| package |
package := Package name: 'IP Help API'.
package paxVersion: 1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk IP Helper Library Package
Copyright (c) Object Arts Ltd, 2004

This package provides a wrapping around the IP Help API, which is useful for TCP/IP utilities, etc.'.

package basicPackageVersion: '6.1'.


package classNames
	add: #FIXED_INFO;
	add: #IP_ADAPTER_INDEX_MAP;
	add: #IP_ADAPTER_INFO;
	add: #IP_ADAPTER_ORDER_MAP;
	add: #IP_ADDR_STRING;
	add: #IP_INTERFACE_INFO;
	add: #IP_PER_ADAPTER_INFO;
	add: #IP_UNIDIRECTIONAL_ADAPTER_ADDRESS;
	add: #IpHlpApiTableStruct;
	add: #MIB_ICMP;
	add: #MIB_ICMP_EX;
	add: #MIB_IFNUMBER;
	add: #MIB_IFROW;
	add: #MIB_IFTABLE;
	add: #MIB_IPADDRROW;
	add: #MIB_IPADDRTABLE;
	add: #MIB_IPFORWARDROW;
	add: #MIB_IPFORWARDTABLE;
	add: #MIB_IPNETROW;
	add: #MIB_IPNETTABLE;
	add: #MIB_IPSTATS;
	add: #MIB_TCPEXROW;
	add: #MIB_TCPEXTABLE;
	add: #MIB_TCPROW;
	add: #MIB_TCPSTATS;
	add: #MIB_TCPTABLE;
	add: #MIB_UDPEXROW;
	add: #MIB_UDPEXTABLE;
	add: #MIB_UDPROW;
	add: #MIB_UDPSTATS;
	add: #MIB_UDPTABLE;
	add: #MIBICMPINFO;
	add: #MIBICMPSTATS;
	add: #MIBICMPSTATS_EX;
	yourself.

package methodNames
	add: #IPHlpApiLibrary -> #AddIPAddress:ipMask:ifIndex:nteContext:nteInstance:;
	add: #IPHlpApiLibrary -> #AllocateAndGetTcpExTableFromStack:bOrder:heap:zero:flags:;
	add: #IPHlpApiLibrary -> #AllocateAndGetUdpExTableFromStack:bOrder:heap:zero:flags:;
	add: #IPHlpApiLibrary -> #CancelIPChangeNotify:;
	add: #IPHlpApiLibrary -> #CreateIpForwardEntry:;
	add: #IPHlpApiLibrary -> #CreateIpNetEntry:;
	add: #IPHlpApiLibrary -> #CreateProxyArpEntry:dwMask:dwIfIndex:;
	add: #IPHlpApiLibrary -> #DeleteIPAddress:;
	add: #IPHlpApiLibrary -> #DeleteIpForwardEntry:;
	add: #IPHlpApiLibrary -> #DeleteIpNetEntry:;
	add: #IPHlpApiLibrary -> #DeleteProxyArpEntry:dwMask:dwIfIndex:;
	add: #IPHlpApiLibrary -> #DisableMediaSense:pOverlapped:;
	add: #IPHlpApiLibrary -> #EnableRouter:pOverlapped:;
	add: #IPHlpApiLibrary -> #FlushIpNetTable:;
	add: #IPHlpApiLibrary -> #GetAdapterIndex:ifIndex:;
	add: #IPHlpApiLibrary -> #GetAdapterOrderMap;
	add: #IPHlpApiLibrary -> #getAdaptersInfo;
	add: #IPHlpApiLibrary -> #GetAdaptersInfo:pOutBufLen:;
	add: #IPHlpApiLibrary -> #GetBestInterface:pdwBestIfIndex:;
	add: #IPHlpApiLibrary -> #GetBestRoute:dwSourceAddr:pBestRoute:;
	add: #IPHlpApiLibrary -> #GetFriendlyIfIndex:;
	add: #IPHlpApiLibrary -> #getIcmpStatistics;
	add: #IPHlpApiLibrary -> #GetIcmpStatistics:;
	add: #IPHlpApiLibrary -> #GetIcmpStatisticsEx:dwFamily:;
	add: #IPHlpApiLibrary -> #GetIfEntry:;
	add: #IPHlpApiLibrary -> #getIfTable;
	add: #IPHlpApiLibrary -> #GetIfTable:pdwSize:bOrder:;
	add: #IPHlpApiLibrary -> #getInterfaceInfo;
	add: #IPHlpApiLibrary -> #GetInterfaceInfo:dwOutBufLen:;
	add: #IPHlpApiLibrary -> #getIpAddrTable;
	add: #IPHlpApiLibrary -> #GetIpAddrTable:pdwSize:bOrder:;
	add: #IPHlpApiLibrary -> #GetIpErrorString:buffer:size:;
	add: #IPHlpApiLibrary -> #getIpForwardTable;
	add: #IPHlpApiLibrary -> #GetIpForwardTable:pdwSize:bOrder:;
	add: #IPHlpApiLibrary -> #getIpNetTable;
	add: #IPHlpApiLibrary -> #GetIpNetTable:pdwSize:bOrder:;
	add: #IPHlpApiLibrary -> #getIpStatistics;
	add: #IPHlpApiLibrary -> #GetIpStatistics:;
	add: #IPHlpApiLibrary -> #GetIpStatisticsEx:dwFamily:;
	add: #IPHlpApiLibrary -> #GetNetworkParams:pOutBufLen:;
	add: #IPHlpApiLibrary -> #GetNumberOfInterfaces:;
	add: #IPHlpApiLibrary -> #getPerAdapterInfo:;
	add: #IPHlpApiLibrary -> #GetPerAdapterInfo:pPerAdapterInfo:pOutBufLen:;
	add: #IPHlpApiLibrary -> #GetRTTAndHopCount:hopCount:maxHops:rtt:;
	add: #IPHlpApiLibrary -> #getTcpExTable;
	add: #IPHlpApiLibrary -> #getTcpStatistics;
	add: #IPHlpApiLibrary -> #GetTcpStatistics:;
	add: #IPHlpApiLibrary -> #GetTcpStatisticsEx:dwFamily:;
	add: #IPHlpApiLibrary -> #getTcpTable;
	add: #IPHlpApiLibrary -> #GetTcpTable:pdwSize:bOrder:;
	add: #IPHlpApiLibrary -> #getUdpStatistics;
	add: #IPHlpApiLibrary -> #GetUdpStatistics:;
	add: #IPHlpApiLibrary -> #GetUdpStatisticsEx:dwFamily:;
	add: #IPHlpApiLibrary -> #getUdpTable;
	add: #IPHlpApiLibrary -> #GetUdpTable:pdwSize:bOrder:;
	add: #IPHlpApiLibrary -> #getUniDirectionalAdapterInfo;
	add: #IPHlpApiLibrary -> #GetUniDirectionalAdapterInfo:dwOutBufLen:;
	add: #IPHlpApiLibrary -> #IpReleaseAddress:;
	add: #IPHlpApiLibrary -> #IpRenewAddress:;
	add: #IPHlpApiLibrary -> #NhpAllocateAndGetInterfaceInfoFromStack:pdwCount:bOrder:hHeap:dwFlags:;
	add: #IPHlpApiLibrary -> #NotifyAddrChange:overlapped:;
	add: #IPHlpApiLibrary -> #NotifyRouteChange:overlapped:;
	add: #IPHlpApiLibrary -> #RestoreMediaSense:lpdwEnableCount:;
	add: #IPHlpApiLibrary -> #SendARP:srcIP:pMacAddr:phyAddrLen:;
	add: #IPHlpApiLibrary -> #SetIfEntry:;
	add: #IPHlpApiLibrary -> #SetIpForwardEntry:;
	add: #IPHlpApiLibrary -> #SetIpNetEntry:;
	add: #IPHlpApiLibrary -> #SetIpStatistics:;
	add: #IPHlpApiLibrary -> #SetIpTTL:;
	add: #IPHlpApiLibrary -> #SetTcpEntry:;
	add: #IPHlpApiLibrary -> #UnenableRouter:lpdwEnableCount:;
	yourself.

package globalNames
	add: #IPHlpApiConstants;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'..\..\System\Win32\Dolphin Overlapped IO'
	'..\..\Sockets\Dolphin Sockets').

package!

"Class Definitions"!

ExternalStructure subclass: #FIXED_INFO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #IP_ADAPTER_INDEX_MAP
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_index _OffsetOf_Name'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #IP_ADAPTER_INFO
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_AdapterName _OffsetOf_Address _OffsetOf_AddressLength _OffsetOf_ComboIndex _OffsetOf_CurrentIpAddress _OffsetOf_Description _OffsetOf_DhcpEnabled _OffsetOf_DhcpServer _OffsetOf_GatewayList _OffsetOf_HaveWins _OffsetOf_index _OffsetOf_IpAddressList _OffsetOf_LeaseExpires _OffsetOf_LeaseObtained _OffsetOf_Next _OffsetOf_PrimaryWinsServer _OffsetOf_SecondaryWinsServer _OffsetOf_type'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #IP_ADDR_STRING
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_Context _OffsetOf_IpAddress _OffsetOf_IpMask _OffsetOf_Next'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #IP_PER_ADAPTER_INFO
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_AutoconfigActive _OffsetOf_AutoconfigEnabled _OffsetOf_CurrentDnsServer _OffsetOf_DnsServerList'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #IP_UNIDIRECTIONAL_ADAPTER_ADDRESS
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_Address _OffsetOf_NumAdapters'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #IpHlpApiTableStruct
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwNumEntries'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_ICMP
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_stats'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_ICMP_EX
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_icmpInStats _OffsetOf_icmpOutStats'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_IFNUMBER
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwValue'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_IFROW
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_bDescr _OffsetOf_bPhysAddr _OffsetOf_dwAdminStatus _OffsetOf_dwDescrLen _OffsetOf_dwIndex _OffsetOf_dwInDiscards _OffsetOf_dwInErrors _OffsetOf_dwInNUcastPkts _OffsetOf_dwInOctets _OffsetOf_dwInUcastPkts _OffsetOf_dwInUnknownProtos _OffsetOf_dwLastChange _OffsetOf_dwMtu _OffsetOf_dwOperStatus _OffsetOf_dwOutDiscards _OffsetOf_dwOutErrors _OffsetOf_dwOutNUcastPkts _OffsetOf_dwOutOctets _OffsetOf_dwOutQLen _OffsetOf_dwOutUcastPkts _OffsetOf_dwPhysAddrLen _OffsetOf_dwSpeed _OffsetOf_dwType _OffsetOf_wszName'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_IPADDRROW
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwAddr _OffsetOf_dwBCastAddr _OffsetOf_dwIndex _OffsetOf_dwMask _OffsetOf_dwReasmSize _OffsetOf_Unused1 _OffsetOf_wType'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_IPFORWARDROW
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwForwardAge _OffsetOf_dwForwardDest _OffsetOf_dwForwardIfIndex _OffsetOf_dwForwardMask _OffsetOf_dwForwardMetric1 _OffsetOf_dwForwardMetric2 _OffsetOf_dwForwardMetric3 _OffsetOf_dwForwardMetric4 _OffsetOf_dwForwardMetric5 _OffsetOf_dwForwardNextHop _OffsetOf_dwForwardNextHopAS _OffsetOf_dwForwardPolicy _OffsetOf_dwForwardProto _OffsetOf_dwForwardType'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_IPNETROW
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_bPhysAddr _OffsetOf_dwAddr _OffsetOf_dwIndex _OffsetOf_dwPhysAddrLen _OffsetOf_dwType'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_IPSTATS
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwDefaultTTL _OffsetOf_dwForwarding _OffsetOf_dwForwDatagrams _OffsetOf_dwFragCreates _OffsetOf_dwFragFails _OffsetOf_dwFragOks _OffsetOf_dwInAddrErrors _OffsetOf_dwInDelivers _OffsetOf_dwInDiscards _OffsetOf_dwInHdrErrors _OffsetOf_dwInReceives _OffsetOf_dwInUnknownProtos _OffsetOf_dwNumAddr _OffsetOf_dwNumIf _OffsetOf_dwNumRoutes _OffsetOf_dwOutDiscards _OffsetOf_dwOutNoRoutes _OffsetOf_dwOutRequests _OffsetOf_dwReasmFails _OffsetOf_dwReasmOks _OffsetOf_dwReasmReqds _OffsetOf_dwReasmTimeout _OffsetOf_dwRoutingDiscards'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_TCPROW
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwLocalAddr _OffsetOf_dwLocalPort _OffsetOf_dwRemoteAddr _OffsetOf_dwRemotePort _OffsetOf_dwState'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_TCPSTATS
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwActiveOpens _OffsetOf_dwAttemptFails _OffsetOf_dwCurrEstab _OffsetOf_dwEstabResets _OffsetOf_dwInErrs _OffsetOf_dwInSegs _OffsetOf_dwMaxConn _OffsetOf_dwNumConns _OffsetOf_dwOutRsts _OffsetOf_dwOutSegs _OffsetOf_dwPassiveOpens _OffsetOf_dwRetransSegs _OffsetOf_dwRtoAlgorithm _OffsetOf_dwRtoMax _OffsetOf_dwRtoMin'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_UDPROW
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwLocalAddr _OffsetOf_dwLocalPort'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIB_UDPSTATS
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwInDatagrams _OffsetOf_dwInErrors _OffsetOf_dwNoPorts _OffsetOf_dwNumAddrs _OffsetOf_dwOutDatagrams'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIBICMPINFO
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_icmpInStats _OffsetOf_icmpOutStats'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIBICMPSTATS
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwAddrMaskReps _OffsetOf_dwAddrMasks _OffsetOf_dwDestUnreachs _OffsetOf_dwEchoReps _OffsetOf_dwEchos _OffsetOf_dwErrors _OffsetOf_dwMsgs _OffsetOf_dwParmProbs _OffsetOf_dwRedirects _OffsetOf_dwSrcQuenchs _OffsetOf_dwTimeExcds _OffsetOf_dwTimestampReps _OffsetOf_dwTimestamps'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ExternalStructure subclass: #MIBICMPSTATS_EX
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwErrors _OffsetOf_dwMsgs _OffsetOf_rgdwTypeCount'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IpHlpApiTableStruct subclass: #IP_ADAPTER_ORDER_MAP
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_table'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IpHlpApiTableStruct subclass: #IP_INTERFACE_INFO
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_table'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IpHlpApiTableStruct subclass: #MIB_IFTABLE
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_table'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IpHlpApiTableStruct subclass: #MIB_IPADDRTABLE
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_table'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IpHlpApiTableStruct subclass: #MIB_IPFORWARDTABLE
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_table'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IpHlpApiTableStruct subclass: #MIB_IPNETTABLE
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_table'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IpHlpApiTableStruct subclass: #MIB_TCPTABLE
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_table'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IpHlpApiTableStruct subclass: #MIB_UDPTABLE
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_table'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MIB_TCPTABLE subclass: #MIB_TCPEXTABLE
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MIB_UDPTABLE subclass: #MIB_UDPEXTABLE
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MIB_TCPROW subclass: #MIB_TCPEXROW
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwProcessId'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MIB_UDPROW subclass: #MIB_UDPEXROW
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_dwProcessId'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!IPHlpApiLibrary methodsFor!

AddIPAddress: address ipMask: ipMask ifIndex: ifIndex nteContext: nteContext nteInstance: nteInstance
	"Invoke the AddIPAddress() function of the module wrapped by the receiver.

		unsigned long __stdcall AddIPAddress(
			unsigned long Address,
			unsigned long IpMask,
			unsigned long IfIndex,
			unsigned long* NTEContext,
			unsigned long* NTEInstance);"

	<stdcall: dword AddIPAddress  dword dword dword dword* dword*>
	^self invalidCall!

AllocateAndGetTcpExTableFromStack: pTcpTable bOrder: bOrder heap: heap zero: zero flags: flags
	"Invoke the AllocateAndGetTcpExTableFromStack() function of the module wrapped by the receiver.

		unsigned long __stdcall AllocateAndGetTcpExTableFromStack(
			MIB_TCPEXTABLE** pTcpTable,
			long bOrder,
			long heap,
			unsigned long zero,
			unsigned long flags);"

	<stdcall: dword AllocateAndGetTcpExTableFromStack  MIB_TCPEXTABLE** sdword sdword dword dword>
	^self invalidCall!

AllocateAndGetUdpExTableFromStack: pTcpTable bOrder: bOrder heap: heap zero: zero flags: flags
	"Invoke the AllocateAndGetUdpExTableFromStack() function of the module wrapped by the receiver.

		unsigned long __stdcall AllocateAndGetUdpExTableFromStack(
			MIB_UDPEXTABLE** pTcpTable,
			long bOrder,
			long heap,
			unsigned long zero,
			unsigned long flags);"

	<stdcall: dword AllocateAndGetUdpExTableFromStack  MIB_UDPEXTABLE** sdword sdword dword dword>
	^self invalidCall!

CancelIPChangeNotify: notifyOverlapped
	"Invoke the CancelIPChangeNotify() function of the module wrapped by the receiver.

		long __stdcall CancelIPChangeNotify(
			[in]OVERLAPPED* notifyOverlapped);"

	<stdcall: sdword CancelIPChangeNotify  OVERLAPPED*>
	^self invalidCall!

CreateIpForwardEntry: pRoute
	"Invoke the CreateIpForwardEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall CreateIpForwardEntry(
			[in]MIB_IPFORWARDROW* pRoute);"

	<stdcall: dword CreateIpForwardEntry  MIB_IPFORWARDROW*>
	^self invalidCall!

CreateIpNetEntry: pArpEntry
	"Invoke the CreateIpNetEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall CreateIpNetEntry(
			[in]MIB_IPNETROW* pArpEntry);"

	<stdcall: dword CreateIpNetEntry  MIB_IPNETROW*>
	^self invalidCall!

CreateProxyArpEntry: dwAddress dwMask: dwMask dwIfIndex: dwIfIndex
	"Invoke the CreateProxyArpEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall CreateProxyArpEntry(
			[in]unsigned long dwAddress,
			[in]unsigned long dwMask,
			[in]unsigned long dwIfIndex);"

	<stdcall: dword CreateProxyArpEntry  dword dword dword>
	^self invalidCall!

DeleteIPAddress: nteContext
	"Invoke the DeleteIPAddress() function of the module wrapped by the receiver.

		unsigned long __stdcall DeleteIPAddress(
			unsigned long NTEContext);"

	<stdcall: dword DeleteIPAddress  dword>
	^self invalidCall!

DeleteIpForwardEntry: pRoute
	"Invoke the DeleteIpForwardEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall DeleteIpForwardEntry(
			[in]MIB_IPFORWARDROW* pRoute);"

	<stdcall: dword DeleteIpForwardEntry  MIB_IPFORWARDROW*>
	^self invalidCall!

DeleteIpNetEntry: pArpEntry
	"Invoke the DeleteIpNetEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall DeleteIpNetEntry(
			[in]MIB_IPNETROW* pArpEntry);"

	<stdcall: dword DeleteIpNetEntry  MIB_IPNETROW*>
	^self invalidCall!

DeleteProxyArpEntry: dwAddress dwMask: dwMask dwIfIndex: dwIfIndex
	"Invoke the DeleteProxyArpEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall DeleteProxyArpEntry(
			[in]unsigned long dwAddress,
			[in]unsigned long dwMask,
			[in]unsigned long dwIfIndex);"

	<stdcall: dword DeleteProxyArpEntry  dword dword dword>
	^self invalidCall!

DisableMediaSense: pHandle pOverlapped: pOverlapped
	"Invoke the DisableMediaSense() function of the module wrapped by the receiver.

		unsigned long __stdcall DisableMediaSense(
			long* pHandle,
			OVERLAPPED* pOverlapped);"

	<stdcall: dword DisableMediaSense  sdword* OVERLAPPED*>
	^self invalidCall!

EnableRouter: pHandle pOverlapped: pOverlapped
	"Invoke the EnableRouter() function of the module wrapped by the receiver.

		unsigned long __stdcall EnableRouter(
			long* pHandle,
			OVERLAPPED* pOverlapped);"

	<stdcall: dword EnableRouter  sdword* OVERLAPPED*>
	^self invalidCall!

FlushIpNetTable: dwIfIndex
	"Invoke the FlushIpNetTable() function of the module wrapped by the receiver.

		unsigned long __stdcall FlushIpNetTable(
			[in]unsigned long dwIfIndex);"

	<stdcall: dword FlushIpNetTable  dword>
	^self invalidCall!

GetAdapterIndex: adapterName ifIndex: ifIndex
	"Invoke the GetAdapterIndex() function of the module wrapped by the receiver.

		unsigned long __stdcall GetAdapterIndex(
			[in]LPWSTR AdapterName,
			[out]unsigned long* IfIndex);"

	<stdcall: dword GetAdapterIndex  lpwstr dword*>
	^self invalidCall!

GetAdapterOrderMap
	"Invoke the GetAdapterOrderMap() function of the module wrapped by the receiver.

		IP_ADAPTER_ORDER_MAP* __stdcall GetAdapterOrderMap();"

	<stdcall: IP_ADAPTER_ORDER_MAP* GetAdapterOrderMap >
	^self invalidCall!

getAdaptersInfo
	"
	self default getAdaptersInfo
	"
	| dwSize struct |
	dwSize := DWORD new.
	self GetAdaptersInfo: nil pOutBufLen: dwSize.
	struct := IP_ADAPTER_INFO new: dwSize value.
	self GetAdaptersInfo: struct pOutBufLen: dwSize.
	^struct!

GetAdaptersInfo: pAdapterInfo pOutBufLen: pOutBufLen
	"Invoke the GetAdaptersInfo() function of the module wrapped by the receiver.

		unsigned long __stdcall GetAdaptersInfo(
			IP_ADAPTER_INFO* pAdapterInfo,
			unsigned long* pOutBufLen);"

	<stdcall: dword GetAdaptersInfo  IP_ADAPTER_INFO* dword*>
	^self invalidCall!

GetBestInterface: dwDestAddr pdwBestIfIndex: pdwBestIfIndex
	"Invoke the GetBestInterface() function of the module wrapped by the receiver.

		unsigned long __stdcall GetBestInterface(
			[in]unsigned long dwDestAddr,
			[out]unsigned long* pdwBestIfIndex);"

	<stdcall: dword GetBestInterface  dword dword*>
	^self invalidCall!

GetBestRoute: dwDestAddr dwSourceAddr: dwSourceAddr pBestRoute: pBestRoute
	"Invoke the GetBestRoute() function of the module wrapped by the receiver.

		unsigned long __stdcall GetBestRoute(
			[in]unsigned long dwDestAddr,
			[in]unsigned long dwSourceAddr,
			[out]MIB_IPFORWARDROW* pBestRoute);"

	<stdcall: dword GetBestRoute  dword dword MIB_IPFORWARDROW*>
	^self invalidCall!

GetFriendlyIfIndex: ifIndex
	"Invoke the GetFriendlyIfIndex() function of the module wrapped by the receiver.

		unsigned long __stdcall GetFriendlyIfIndex(
			unsigned long IfIndex);"

	<stdcall: dword GetFriendlyIfIndex  dword>
	^self invalidCall!

getIcmpStatistics
	"
	self default getIcmpStatistics
	"

	| struct err |
	struct := MIB_ICMP new.
	err := self GetIcmpStatistics: struct.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIcmpStatistics: pStats
	"Invoke the GetIcmpStatistics() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIcmpStatistics(
			[out]MIB_ICMP* pStats);"

	<stdcall: dword GetIcmpStatistics  MIB_ICMP*>
	^self invalidCall!

GetIcmpStatisticsEx: pStats dwFamily: dwFamily
	"Invoke the GetIcmpStatisticsEx() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIcmpStatisticsEx(
			[out]MIB_ICMP_EX* pStats,
			[in]unsigned long dwFamily);"

	<stdcall: dword GetIcmpStatisticsEx  MIB_ICMP_EX* dword>
	^self invalidCall!

GetIfEntry: pIfRow
	"Invoke the GetIfEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIfEntry(
			[in, out]MIB_IFROW* pIfRow);"

	<stdcall: dword GetIfEntry  MIB_IFROW*>
	^self invalidCall!

getIfTable
	"
	self default getIfTable
	"

	| struct err dwSize |
	dwSize := DWORD new.
	self 
		GetIfTable: nil
		pdwSize: dwSize
		bOrder: TRUE.
	struct := MIB_IFTABLE new: dwSize value.
	err := self 
				GetIfTable: struct
				pdwSize: dwSize
				bOrder: TRUE.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIfTable: pIfTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetIfTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIfTable(
			[out]MIB_IFTABLE* pIfTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetIfTable  MIB_IFTABLE* dword* sdword>
	^self invalidCall!

getInterfaceInfo
	"
	self default getInterfaceInfo
	"

	| dwSize struct |
	dwSize := DWORD new.
	self GetInterfaceInfo: nil dwOutBufLen: dwSize.
	struct := IP_INTERFACE_INFO new: dwSize value.
	self GetInterfaceInfo: struct dwOutBufLen: dwSize.
	^struct!

GetInterfaceInfo: pIfTable dwOutBufLen: dwOutBufLen
	"Invoke the GetInterfaceInfo() function of the module wrapped by the receiver.

		unsigned long __stdcall GetInterfaceInfo(
			[in]IP_INTERFACE_INFO* pIfTable,
			[out]unsigned long* dwOutBufLen);"

	<stdcall: dword GetInterfaceInfo  IP_INTERFACE_INFO* dword*>
	^self invalidCall!

getIpAddrTable
	"
	self default getIpAddrTable
	"

	| struct err dwSize |
	dwSize := DWORD new.
	self 
		GetIpAddrTable: nil
		pdwSize: dwSize
		bOrder: TRUE.
	struct := MIB_IPADDRTABLE new: dwSize value.
	err := self 
				GetIpAddrTable: struct
				pdwSize: dwSize
				bOrder: TRUE.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIpAddrTable: pIpAddrTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetIpAddrTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpAddrTable(
			[out]MIB_IPADDRTABLE* pIpAddrTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetIpAddrTable  MIB_IPADDRTABLE* dword* sdword>
	^self invalidCall!

GetIpErrorString: errorCode buffer: buffer size: size
	"Invoke the GetIpErrorString() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpErrorString(
			[in]unsigned long ErrorCode,
			[out]unsigned short* Buffer,
			[in, out]unsigned long* Size);"

	<stdcall: dword GetIpErrorString  dword word* dword*>
	^self invalidCall!

getIpForwardTable
	"
	self default getIpForwardTable
	"

	| struct err dwSize |
	dwSize := DWORD new.
	self 
		GetIpForwardTable: nil
		pdwSize: dwSize
		bOrder: TRUE.
	struct := MIB_IPFORWARDTABLE new: dwSize value.
	err := self 
				GetIpForwardTable: struct
				pdwSize: dwSize
				bOrder: TRUE.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIpForwardTable: pIpForwardTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetIpForwardTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpForwardTable(
			[out]MIB_IPFORWARDTABLE* pIpForwardTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetIpForwardTable  MIB_IPFORWARDTABLE* dword* sdword>
	^self invalidCall!

getIpNetTable
	"
	self default getIpNetTable
	"

	| struct err dwSize |
	dwSize := DWORD new.
	self 
		GetIpNetTable: nil
		pdwSize: dwSize
		bOrder: TRUE.
	struct := MIB_IPNETTABLE new: dwSize value.
	err := self 
				GetIpNetTable: struct
				pdwSize: dwSize
				bOrder: TRUE.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIpNetTable: pIpNetTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetIpNetTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpNetTable(
			[out]MIB_IPNETTABLE* pIpNetTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetIpNetTable  MIB_IPNETTABLE* dword* sdword>
	^self invalidCall!

getIpStatistics
	"
	self default getIpStatistics
	"

	| struct err |
	struct := MIB_IPSTATS new.
	err := self GetIpStatistics: struct.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIpStatistics: pStats
	"Invoke the GetIpStatistics() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpStatistics(
			[out]MIB_IPSTATS* pStats);"

	<stdcall: dword GetIpStatistics  MIB_IPSTATS*>
	^self invalidCall!

GetIpStatisticsEx: pStats dwFamily: dwFamily
	"Invoke the GetIpStatisticsEx() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpStatisticsEx(
			[out]MIB_IPSTATS* pStats,
			[in]unsigned long dwFamily);"

	<stdcall: dword GetIpStatisticsEx  MIB_IPSTATS* dword>
	^self invalidCall!

GetNetworkParams: pFixedInfo pOutBufLen: pOutBufLen
	"Invoke the GetNetworkParams() function of the module wrapped by the receiver.

		unsigned long __stdcall GetNetworkParams(
			FIXED_INFO* pFixedInfo,
			unsigned long* pOutBufLen);"

	<stdcall: dword GetNetworkParams  FIXED_INFO* dword*>
	^self invalidCall!

GetNumberOfInterfaces: pdwNumIf
	"Invoke the GetNumberOfInterfaces() function of the module wrapped by the receiver.

		unsigned long __stdcall GetNumberOfInterfaces(
			[out]unsigned long* pdwNumIf);"

	<stdcall: dword GetNumberOfInterfaces  dword*>
	^self invalidCall!

getPerAdapterInfo: ifIndex 
	"
	self default getPerAdapterInfo: 3
	"

	| struct dwSize error |
	struct := IP_PER_ADAPTER_INFO new.
	dwSize := DWORD fromInteger: struct byteSize.
	error := self 
				GetPerAdapterInfo: ifIndex
				pPerAdapterInfo: struct
				pOutBufLen: dwSize.
	error == 0 
		ifFalse: 
			[Win32Error signal: 'Error retrieving per-adapter info for ' , ifIndex displayString with: error].
	^struct!

GetPerAdapterInfo: ifIndex pPerAdapterInfo: pPerAdapterInfo pOutBufLen: pOutBufLen
	"Invoke the GetPerAdapterInfo() function of the module wrapped by the receiver.

		unsigned long __stdcall GetPerAdapterInfo(
			unsigned long IfIndex,
			IP_PER_ADAPTER_INFO* pPerAdapterInfo,
			unsigned long* pOutBufLen);"

	<stdcall: dword GetPerAdapterInfo  dword IP_PER_ADAPTER_INFO* dword*>
	^self invalidCall!

GetRTTAndHopCount: destIpAddress hopCount: hopCount maxHops: maxHops rtt: rtt
	"Invoke the GetRTTAndHopCount() function of the module wrapped by the receiver.

		long __stdcall GetRTTAndHopCount(
			unsigned long DestIpAddress,
			unsigned long* HopCount,
			unsigned long MaxHops,
			unsigned long* RTT);"

	<stdcall: sdword GetRTTAndHopCount  dword dword* dword dword*>
	^self invalidCall!

getTcpExTable
	"
	self default getTcpExTable
	"
	| struct |
	struct := MIB_TCPEXTABLE newHeapPointer.
	self AllocateAndGetTcpExTableFromStack: struct bOrder: TRUE heap: ExternalMemory processHeap zero: 2 flags: 2.
	^struct!

getTcpStatistics
	"
	self default getTcpStatistics
	"

	| struct err |
	struct := MIB_TCPSTATS new.
	err := self GetTcpStatistics: struct.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetTcpStatistics: pStats
	"Invoke the GetTcpStatistics() function of the module wrapped by the receiver.

		unsigned long __stdcall GetTcpStatistics(
			[out]MIB_TCPSTATS* pStats);"

	<stdcall: dword GetTcpStatistics  MIB_TCPSTATS*>
	^self invalidCall!

GetTcpStatisticsEx: pStats dwFamily: dwFamily
	"Invoke the GetTcpStatisticsEx() function of the module wrapped by the receiver.

		unsigned long __stdcall GetTcpStatisticsEx(
			[out]MIB_TCPSTATS* pStats,
			[in]unsigned long dwFamily);"

	<stdcall: dword GetTcpStatisticsEx  MIB_TCPSTATS* dword>
	^self invalidCall!

getTcpTable
	"
	table := IPHlpApiLibrary default getTcpTable.
	table collect: [:each | each dwLocalPort].
	"

	| dwSize error tcpTable |
	dwSize := DWORD new.
	error := self 
				GetTcpTable: nil
				pdwSize: dwSize
				bOrder: TRUE.
	"		if( error !!= ERROR_INSUFFICIENT_BUFFER ) {"
	tcpTable := MIB_TCPTABLE new: dwSize asInteger.
	error := self 
				GetTcpTable: tcpTable
				pdwSize: dwSize
				bOrder: TRUE.
	error == 0 ifFalse: [self error: 'Failed to snapshot TCP endpoints.'].
	^tcpTable!

GetTcpTable: pTcpTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetTcpTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetTcpTable(
			[out]MIB_TCPTABLE* pTcpTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetTcpTable  MIB_TCPTABLE* dword* sdword>
	^self invalidCall!

getUdpStatistics
	"
	self default getUdpStatistics
	"

	| struct err |
	struct := MIB_UDPSTATS new.
	err := self GetUdpStatistics: struct.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetUdpStatistics: pStats
	"Invoke the GetUdpStatistics() function of the module wrapped by the receiver.

		unsigned long __stdcall GetUdpStatistics(
			[out]MIB_UDPSTATS* pStats);"

	<stdcall: dword GetUdpStatistics  MIB_UDPSTATS*>
	^self invalidCall!

GetUdpStatisticsEx: pStats dwFamily: dwFamily
	"Invoke the GetUdpStatisticsEx() function of the module wrapped by the receiver.

		unsigned long __stdcall GetUdpStatisticsEx(
			[out]MIB_UDPSTATS* pStats,
			[in]unsigned long dwFamily);"

	<stdcall: dword GetUdpStatisticsEx  MIB_UDPSTATS* dword>
	^self invalidCall!

getUdpTable
	"
	table := IPHlpApiLibrary default getUdpTable
	table talbe collect: [:each | each port].
	"

	| dwSize error struct |
	dwSize := DWORD new.
	error := self 
				GetUdpTable: nil
				pdwSize: dwSize
				bOrder: TRUE.
	struct := MIB_UDPTABLE new: dwSize asInteger.
	error := self 
				GetUdpTable: struct
				pdwSize: dwSize
				bOrder: TRUE.
	error == 0 ifFalse: [Win32Error signalWith: error].
	^struct!

GetUdpTable: pUdpTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetUdpTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetUdpTable(
			[out]MIB_UDPTABLE* pUdpTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetUdpTable  MIB_UDPTABLE* dword* sdword>
	^self invalidCall!

getUniDirectionalAdapterInfo
	"
	self default getUniDirectionalAdapterInfo
	"
	| dwSize struct error |
	struct := IP_UNIDIRECTIONAL_ADAPTER_ADDRESS new.
	dwSize := DWORD fromInteger: struct size.
	error := self GetUniDirectionalAdapterInfo: struct dwOutBufLen: dwSize.
	error == 0 ifFalse: [Win32Error signalWith: error].
	^struct!

GetUniDirectionalAdapterInfo: pIPIfInfo dwOutBufLen: dwOutBufLen
	"Invoke the GetUniDirectionalAdapterInfo() function of the module wrapped by the receiver.

		unsigned long __stdcall GetUniDirectionalAdapterInfo(
			[out]IP_UNIDIRECTIONAL_ADAPTER_ADDRESS* pIPIfInfo,
			[out]unsigned long* dwOutBufLen);"

	<stdcall: dword GetUniDirectionalAdapterInfo  IP_UNIDIRECTIONAL_ADAPTER_ADDRESS* dword*>
	^self invalidCall!

IpReleaseAddress: adapterInfo
	"Invoke the IpReleaseAddress() function of the module wrapped by the receiver.

		unsigned long __stdcall IpReleaseAddress(
			IP_ADAPTER_INDEX_MAP* AdapterInfo);"

	<stdcall: dword IpReleaseAddress  IP_ADAPTER_INDEX_MAP*>
	^self invalidCall!

IpRenewAddress: adapterInfo
	"Invoke the IpRenewAddress() function of the module wrapped by the receiver.

		unsigned long __stdcall IpRenewAddress(
			IP_ADAPTER_INDEX_MAP* AdapterInfo);"

	<stdcall: dword IpRenewAddress  IP_ADAPTER_INDEX_MAP*>
	^self invalidCall!

NhpAllocateAndGetInterfaceInfoFromStack: ppTable pdwCount: pdwCount bOrder: bOrder hHeap: hHeap dwFlags: dwFlags
	"Invoke the NhpAllocateAndGetInterfaceInfoFromStack() function of the module wrapped by the receiver.

		unsigned long __stdcall NhpAllocateAndGetInterfaceInfoFromStack(
			[out]ip_interface_name_info** ppTable,
			[out]unsigned long* pdwCount,
			[in]long bOrder,
			[in]long hHeap,
			[in]unsigned long dwFlags);"

	<stdcall: dword NhpAllocateAndGetInterfaceInfoFromStack  void** dword* sdword sdword dword>
	^self invalidCall!

NotifyAddrChange: handle1 overlapped: overlapped
	"Invoke the NotifyAddrChange() function of the module wrapped by the receiver.

		unsigned long __stdcall NotifyAddrChange(
			[out]long* Handle,
			[in]OVERLAPPED* overlapped);"

	<stdcall: dword NotifyAddrChange  sdword* OVERLAPPED*>
	^self invalidCall!

NotifyRouteChange: handle1 overlapped: overlapped
	"Invoke the NotifyRouteChange() function of the module wrapped by the receiver.

		unsigned long __stdcall NotifyRouteChange(
			[out]long* Handle,
			[in]OVERLAPPED* overlapped);"

	<stdcall: dword NotifyRouteChange  sdword* OVERLAPPED*>
	^self invalidCall!

RestoreMediaSense: pOverlapped lpdwEnableCount: lpdwEnableCount
	"Invoke the RestoreMediaSense() function of the module wrapped by the receiver.

		unsigned long __stdcall RestoreMediaSense(
			OVERLAPPED* pOverlapped,
			unsigned long* lpdwEnableCount);"

	<stdcall: dword RestoreMediaSense  OVERLAPPED* dword*>
	^self invalidCall!

SendARP: destIP srcIP: srcIP pMacAddr: pMacAddr phyAddrLen: phyAddrLen
	"Invoke the SendARP() function of the module wrapped by the receiver.

		unsigned long __stdcall SendARP(
			unsigned long DestIP,
			unsigned long SrcIP,
			unsigned long* pMacAddr,
			unsigned long* PhyAddrLen);"

	<stdcall: dword SendARP  dword dword dword* dword*>
	^self invalidCall!

SetIfEntry: pIfRow
	"Invoke the SetIfEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall SetIfEntry(
			[in]MIB_IFROW* pIfRow);"

	<stdcall: dword SetIfEntry  MIB_IFROW*>
	^self invalidCall!

SetIpForwardEntry: pRoute
	"Invoke the SetIpForwardEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall SetIpForwardEntry(
			[in]MIB_IPFORWARDROW* pRoute);"

	<stdcall: dword SetIpForwardEntry  MIB_IPFORWARDROW*>
	^self invalidCall!

SetIpNetEntry: pArpEntry
	"Invoke the SetIpNetEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall SetIpNetEntry(
			[in]MIB_IPNETROW* pArpEntry);"

	<stdcall: dword SetIpNetEntry  MIB_IPNETROW*>
	^self invalidCall!

SetIpStatistics: pIpStats
	"Invoke the SetIpStatistics() function of the module wrapped by the receiver.

		unsigned long __stdcall SetIpStatistics(
			[in]MIB_IPSTATS* pIpStats);"

	<stdcall: dword SetIpStatistics  MIB_IPSTATS*>
	^self invalidCall!

SetIpTTL: nTTL
	"Invoke the SetIpTTL() function of the module wrapped by the receiver.

		unsigned long __stdcall SetIpTTL(
			unsigned int nTTL);"

	<stdcall: dword SetIpTTL  dword>
	^self invalidCall!

SetTcpEntry: pTcpRow
	"Invoke the SetTcpEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall SetTcpEntry(
			[in]MIB_TCPROW* pTcpRow);"

	<stdcall: dword SetTcpEntry  MIB_TCPROW*>
	^self invalidCall!

UnenableRouter: pOverlapped lpdwEnableCount: lpdwEnableCount
	"Invoke the UnenableRouter() function of the module wrapped by the receiver.

		unsigned long __stdcall UnenableRouter(
			OVERLAPPED* pOverlapped,
			unsigned long* lpdwEnableCount);"

	<stdcall: dword UnenableRouter  OVERLAPPED* dword*>
	^self invalidCall! !
!IPHlpApiLibrary categoriesFor: #AddIPAddress:ipMask:ifIndex:nteContext:nteInstance:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #AllocateAndGetTcpExTableFromStack:bOrder:heap:zero:flags:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #AllocateAndGetUdpExTableFromStack:bOrder:heap:zero:flags:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #CancelIPChangeNotify:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #CreateIpForwardEntry:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #CreateIpNetEntry:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #CreateProxyArpEntry:dwMask:dwIfIndex:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #DeleteIPAddress:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #DeleteIpForwardEntry:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #DeleteIpNetEntry:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #DeleteProxyArpEntry:dwMask:dwIfIndex:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #DisableMediaSense:pOverlapped:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #EnableRouter:pOverlapped:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #FlushIpNetTable:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetAdapterIndex:ifIndex:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetAdapterOrderMap!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getAdaptersInfo!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetAdaptersInfo:pOutBufLen:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetBestInterface:pdwBestIfIndex:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetBestRoute:dwSourceAddr:pBestRoute:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetFriendlyIfIndex:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getIcmpStatistics!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetIcmpStatistics:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetIcmpStatisticsEx:dwFamily:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetIfEntry:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getIfTable!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetIfTable:pdwSize:bOrder:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getInterfaceInfo!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetInterfaceInfo:dwOutBufLen:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getIpAddrTable!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetIpAddrTable:pdwSize:bOrder:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetIpErrorString:buffer:size:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getIpForwardTable!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetIpForwardTable:pdwSize:bOrder:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getIpNetTable!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetIpNetTable:pdwSize:bOrder:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getIpStatistics!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetIpStatistics:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetIpStatisticsEx:dwFamily:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetNetworkParams:pOutBufLen:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetNumberOfInterfaces:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getPerAdapterInfo:!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetPerAdapterInfo:pPerAdapterInfo:pOutBufLen:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetRTTAndHopCount:hopCount:maxHops:rtt:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getTcpExTable!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #getTcpStatistics!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetTcpStatistics:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetTcpStatisticsEx:dwFamily:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getTcpTable!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetTcpTable:pdwSize:bOrder:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getUdpStatistics!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetUdpStatistics:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #GetUdpStatisticsEx:dwFamily:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getUdpTable!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetUdpTable:pdwSize:bOrder:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #getUniDirectionalAdapterInfo!enquiries!public! !
!IPHlpApiLibrary categoriesFor: #GetUniDirectionalAdapterInfo:dwOutBufLen:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #IpReleaseAddress:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #IpRenewAddress:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #NhpAllocateAndGetInterfaceInfoFromStack:pdwCount:bOrder:hHeap:dwFlags:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #NotifyAddrChange:overlapped:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #NotifyRouteChange:overlapped:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #RestoreMediaSense:lpdwEnableCount:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #SendARP:srcIP:pMacAddr:phyAddrLen:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #SetIfEntry:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #SetIpForwardEntry:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #SetIpNetEntry:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #SetIpStatistics:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #SetIpTTL:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #SetTcpEntry:!**auto generated**!public! !
!IPHlpApiLibrary categoriesFor: #UnenableRouter:lpdwEnableCount:!**auto generated**!public! !

"End of package definition"!

