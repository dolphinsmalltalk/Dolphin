| package |
package := Package name: 'IP Help API'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk IP Helper Library Package
Copyright (c) Object Arts Ltd, 2004

This package provides a wrapping around the IP Help API, which is useful for TCP/IP utilities, etc.'.

package basicPackageVersion: '6.1'.


package setClassNames: #(
	#{OS.FIXED_INFO}
	#{OS.IP_ADAPTER_INDEX_MAP}
	#{OS.IP_ADAPTER_INFO}
	#{OS.IP_ADAPTER_ORDER_MAP}
	#{OS.IP_ADDR_STRING}
	#{OS.IP_INTERFACE_INFO}
	#{OS.IP_PER_ADAPTER_INFO}
	#{OS.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS}
	#{OS.IPHlpApiConstants}
	#{OS.IpHlpApiTableStruct}
	#{OS.MIB_ICMP}
	#{OS.MIB_ICMP_EX}
	#{OS.MIB_IFNUMBER}
	#{OS.MIB_IFROW}
	#{OS.MIB_IFTABLE}
	#{OS.MIB_IPADDRROW}
	#{OS.MIB_IPADDRTABLE}
	#{OS.MIB_IPFORWARDROW}
	#{OS.MIB_IPFORWARDTABLE}
	#{OS.MIB_IPNETROW}
	#{OS.MIB_IPNETTABLE}
	#{OS.MIB_IPSTATS}
	#{OS.MIB_TCPEXROW}
	#{OS.MIB_TCPEXTABLE}
	#{OS.MIB_TCPROW}
	#{OS.MIB_TCPSTATS}
	#{OS.MIB_TCPTABLE}
	#{OS.MIB_UDPEXROW}
	#{OS.MIB_UDPEXTABLE}
	#{OS.MIB_UDPROW}
	#{OS.MIB_UDPSTATS}
	#{OS.MIB_UDPTABLE}
	#{OS.MIBICMPINFO}
	#{OS.MIBICMPSTATS}
	#{OS.MIBICMPSTATS_EX}
).

package setMethodNames: #(
	#(#{OS.IPHlpApiLibrary} #AddIPAddress:ipMask:ifIndex:nteContext:nteInstance:)
	#(#{OS.IPHlpApiLibrary} #AllocateAndGetTcpExTableFromStack:bOrder:heap:zero:flags:)
	#(#{OS.IPHlpApiLibrary} #AllocateAndGetUdpExTableFromStack:bOrder:heap:zero:flags:)
	#(#{OS.IPHlpApiLibrary} #CancelIPChangeNotify:)
	#(#{OS.IPHlpApiLibrary} #CreateIpForwardEntry:)
	#(#{OS.IPHlpApiLibrary} #CreateIpNetEntry:)
	#(#{OS.IPHlpApiLibrary} #CreateProxyArpEntry:dwMask:dwIfIndex:)
	#(#{OS.IPHlpApiLibrary} #DeleteIPAddress:)
	#(#{OS.IPHlpApiLibrary} #DeleteIpForwardEntry:)
	#(#{OS.IPHlpApiLibrary} #DeleteIpNetEntry:)
	#(#{OS.IPHlpApiLibrary} #DeleteProxyArpEntry:dwMask:dwIfIndex:)
	#(#{OS.IPHlpApiLibrary} #DisableMediaSense:pOverlapped:)
	#(#{OS.IPHlpApiLibrary} #EnableRouter:pOverlapped:)
	#(#{OS.IPHlpApiLibrary} #FlushIpNetTable:)
	#(#{OS.IPHlpApiLibrary} #GetAdapterIndex:ifIndex:)
	#(#{OS.IPHlpApiLibrary} #GetAdapterOrderMap)
	#(#{OS.IPHlpApiLibrary} #getAdaptersInfo)
	#(#{OS.IPHlpApiLibrary} #GetAdaptersInfo:pOutBufLen:)
	#(#{OS.IPHlpApiLibrary} #GetBestInterface:pdwBestIfIndex:)
	#(#{OS.IPHlpApiLibrary} #GetBestRoute:dwSourceAddr:pBestRoute:)
	#(#{OS.IPHlpApiLibrary} #GetFriendlyIfIndex:)
	#(#{OS.IPHlpApiLibrary} #getIcmpStatistics)
	#(#{OS.IPHlpApiLibrary} #GetIcmpStatistics:)
	#(#{OS.IPHlpApiLibrary} #GetIcmpStatisticsEx:dwFamily:)
	#(#{OS.IPHlpApiLibrary} #GetIfEntry:)
	#(#{OS.IPHlpApiLibrary} #getIfTable)
	#(#{OS.IPHlpApiLibrary} #GetIfTable:pdwSize:bOrder:)
	#(#{OS.IPHlpApiLibrary} #getInterfaceInfo)
	#(#{OS.IPHlpApiLibrary} #GetInterfaceInfo:dwOutBufLen:)
	#(#{OS.IPHlpApiLibrary} #getIpAddrTable)
	#(#{OS.IPHlpApiLibrary} #GetIpAddrTable:pdwSize:bOrder:)
	#(#{OS.IPHlpApiLibrary} #GetIpErrorString:buffer:size:)
	#(#{OS.IPHlpApiLibrary} #getIpForwardTable)
	#(#{OS.IPHlpApiLibrary} #GetIpForwardTable:pdwSize:bOrder:)
	#(#{OS.IPHlpApiLibrary} #getIpNetTable)
	#(#{OS.IPHlpApiLibrary} #GetIpNetTable:pdwSize:bOrder:)
	#(#{OS.IPHlpApiLibrary} #getIpStatistics)
	#(#{OS.IPHlpApiLibrary} #GetIpStatistics:)
	#(#{OS.IPHlpApiLibrary} #GetIpStatisticsEx:dwFamily:)
	#(#{OS.IPHlpApiLibrary} #GetNetworkParams:pOutBufLen:)
	#(#{OS.IPHlpApiLibrary} #GetNumberOfInterfaces:)
	#(#{OS.IPHlpApiLibrary} #getPerAdapterInfo:)
	#(#{OS.IPHlpApiLibrary} #GetPerAdapterInfo:pPerAdapterInfo:pOutBufLen:)
	#(#{OS.IPHlpApiLibrary} #GetRTTAndHopCount:hopCount:maxHops:rtt:)
	#(#{OS.IPHlpApiLibrary} #getTcpExTable)
	#(#{OS.IPHlpApiLibrary} #getTcpStatistics)
	#(#{OS.IPHlpApiLibrary} #GetTcpStatistics:)
	#(#{OS.IPHlpApiLibrary} #GetTcpStatisticsEx:dwFamily:)
	#(#{OS.IPHlpApiLibrary} #getTcpTable)
	#(#{OS.IPHlpApiLibrary} #GetTcpTable:pdwSize:bOrder:)
	#(#{OS.IPHlpApiLibrary} #getUdpStatistics)
	#(#{OS.IPHlpApiLibrary} #GetUdpStatistics:)
	#(#{OS.IPHlpApiLibrary} #GetUdpStatisticsEx:dwFamily:)
	#(#{OS.IPHlpApiLibrary} #getUdpTable)
	#(#{OS.IPHlpApiLibrary} #GetUdpTable:pdwSize:bOrder:)
	#(#{OS.IPHlpApiLibrary} #getUniDirectionalAdapterInfo)
	#(#{OS.IPHlpApiLibrary} #GetUniDirectionalAdapterInfo:dwOutBufLen:)
	#(#{OS.IPHlpApiLibrary} #IpReleaseAddress:)
	#(#{OS.IPHlpApiLibrary} #IpRenewAddress:)
	#(#{OS.IPHlpApiLibrary} #NhpAllocateAndGetInterfaceInfoFromStack:pdwCount:bOrder:hHeap:dwFlags:)
	#(#{OS.IPHlpApiLibrary} #NotifyAddrChange:overlapped:)
	#(#{OS.IPHlpApiLibrary} #NotifyRouteChange:overlapped:)
	#(#{OS.IPHlpApiLibrary} #RestoreMediaSense:lpdwEnableCount:)
	#(#{OS.IPHlpApiLibrary} #SendARP:srcIP:pMacAddr:phyAddrLen:)
	#(#{OS.IPHlpApiLibrary} #SetIfEntry:)
	#(#{OS.IPHlpApiLibrary} #SetIpForwardEntry:)
	#(#{OS.IPHlpApiLibrary} #SetIpNetEntry:)
	#(#{OS.IPHlpApiLibrary} #SetIpStatistics:)
	#(#{OS.IPHlpApiLibrary} #SetIpTTL:)
	#(#{OS.IPHlpApiLibrary} #SetTcpEntry:)
	#(#{OS.IPHlpApiLibrary} #UnenableRouter:lpdwEnableCount:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'..\..\System\Win32\Dolphin Overlapped IO'
	'..\..\Sockets\Dolphin Sockets'
).

package!

"Class Definitions"!

Kernel.SharedPool
	subclass: #'OS.IPHlpApiConstants'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'ICMP4_DST_UNREACH' -> 16r3.
			'ICMP4_ECHO_REPLY' -> 16r0.
			'ICMP4_ECHO_REQUEST' -> 16r8.
			'ICMP4_MASK_REPLY' -> 16r12.
			'ICMP4_MASK_REQUEST' -> 16r11.
			'ICMP4_PARAM_PROB' -> 16rC.
			'ICMP4_REDIRECT' -> 16r5.
			'ICMP4_ROUTER_ADVERT' -> 16r9.
			'ICMP4_ROUTER_SOLICIT' -> 16rA.
			'ICMP4_SOURCE_QUENCH' -> 16r4.
			'ICMP4_TIME_EXCEEDED' -> 16rB.
			'ICMP4_TIMESTAMP_REPLY' -> 16rE.
			'ICMP4_TIMESTAMP_REQUEST' -> 16rD.
			'ICMP6_DST_UNREACH' -> 16r1.
			'ICMP6_ECHO_REPLY' -> 16r81.
			'ICMP6_ECHO_REQUEST' -> 16r80.
			'ICMP6_MEMBERSHIP_QUERY' -> 16r82.
			'ICMP6_MEMBERSHIP_REDUCTION' -> 16r84.
			'ICMP6_MEMBERSHIP_REPORT' -> 16r83.
			'ICMP6_PACKET_TOO_BIG' -> 16r2.
			'ICMP6_PARAM_PROB' -> 16r4.
			'ICMP6_TIME_EXCEEDED' -> 16r3.
			'ND_NEIGHBOR_ADVERT' -> 16r88.
			'ND_NEIGHBOR_SOLICIT' -> 16r87.
			'ND_REDIRECT' -> 16r89.
			'ND_ROUTER_ADVERT' -> 16r86.
			'ND_ROUTER_SOLICIT' -> 16r85
		}!
External.Structure
	subclass: #'OS.FIXED_INFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.Structure
	subclass: #'OS.IP_ADAPTER_INDEX_MAP'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_IP_ADAPTER_INDEX_MAP_Size' -> 16r104.
			'_OffsetOf_index' -> 16r0.
			'_OffsetOf_Name' -> 16r4
		}!
External.Structure
	subclass: #'OS.IP_ADAPTER_INFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_IP_ADAPTER_INFO_Size' -> 16r280.
			'_OffsetOf_AdapterName' -> 16r8.
			'_OffsetOf_Address' -> 16r194.
			'_OffsetOf_AddressLength' -> 16r190.
			'_OffsetOf_ComboIndex' -> 16r4.
			'_OffsetOf_CurrentIpAddress' -> 16r1A8.
			'_OffsetOf_Description' -> 16r10C.
			'_OffsetOf_DhcpEnabled' -> 16r1A4.
			'_OffsetOf_DhcpServer' -> 16r1FC.
			'_OffsetOf_GatewayList' -> 16r1D4.
			'_OffsetOf_HaveWins' -> 16r224.
			'_OffsetOf_index' -> 16r19C.
			'_OffsetOf_IpAddressList' -> 16r1AC.
			'_OffsetOf_LeaseExpires' -> 16r27C.
			'_OffsetOf_LeaseObtained' -> 16r278.
			'_OffsetOf_Next' -> 16r0.
			'_OffsetOf_PrimaryWinsServer' -> 16r228.
			'_OffsetOf_SecondaryWinsServer' -> 16r250.
			'_OffsetOf_type' -> 16r1A0
		}!
External.Structure
	subclass: #'OS.IP_ADDR_STRING'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_IP_ADDR_STRING_Size' -> 16r28.
			'_OffsetOf_Context' -> 16r24.
			'_OffsetOf_IpAddress' -> 16r4.
			'_OffsetOf_IpMask' -> 16r14.
			'_OffsetOf_Next' -> 16r0
		}!
External.Structure
	subclass: #'OS.IP_PER_ADAPTER_INFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_IP_PER_ADAPTER_INFO_Size' -> 16r34.
			'_OffsetOf_AutoconfigActive' -> 16r4.
			'_OffsetOf_AutoconfigEnabled' -> 16r0.
			'_OffsetOf_CurrentDnsServer' -> 16r8.
			'_OffsetOf_DnsServerList' -> 16rC
		}!
External.Structure
	subclass: #'OS.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_IP_UNIDIRECTIONAL_ADAPTER_ADDRESS_Size' -> 16r8.
			'_OffsetOf_Address' -> 16r4.
			'_OffsetOf_NumAdapters' -> 16r0
		}!
External.Structure
	subclass: #'OS.IpHlpApiTableStruct'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_IpHlpApiTableStruct_Size' -> 16r4. '_OffsetOf_dwNumEntries' -> 16r0 }!
External.Structure
	subclass: #'OS.MIB_ICMP'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_ICMP_Size' -> 16r68. '_OffsetOf_stats' -> 16r0 }!
External.Structure
	subclass: #'OS.MIB_ICMP_EX'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIB_ICMP_EX_Size' -> 16r810.
			'_OffsetOf_icmpInStats' -> 16r0.
			'_OffsetOf_icmpOutStats' -> 16r408
		}!
External.Structure
	subclass: #'OS.MIB_IFNUMBER'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_IFNUMBER_Size' -> 16r4. '_OffsetOf_dwValue' -> 16r0 }!
External.Structure
	subclass: #'OS.MIB_IFROW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIB_IFROW_Size' -> 16r35C.
			'_OffsetOf_bDescr' -> 16r25C.
			'_OffsetOf_bPhysAddr' -> 16r214.
			'_OffsetOf_dwAdminStatus' -> 16r21C.
			'_OffsetOf_dwDescrLen' -> 16r258.
			'_OffsetOf_dwIndex' -> 16r200.
			'_OffsetOf_dwInDiscards' -> 16r234.
			'_OffsetOf_dwInErrors' -> 16r238.
			'_OffsetOf_dwInNUcastPkts' -> 16r230.
			'_OffsetOf_dwInOctets' -> 16r228.
			'_OffsetOf_dwInUcastPkts' -> 16r22C.
			'_OffsetOf_dwInUnknownProtos' -> 16r23C.
			'_OffsetOf_dwLastChange' -> 16r224.
			'_OffsetOf_dwMtu' -> 16r208.
			'_OffsetOf_dwOperStatus' -> 16r220.
			'_OffsetOf_dwOutDiscards' -> 16r24C.
			'_OffsetOf_dwOutErrors' -> 16r250.
			'_OffsetOf_dwOutNUcastPkts' -> 16r248.
			'_OffsetOf_dwOutOctets' -> 16r240.
			'_OffsetOf_dwOutQLen' -> 16r254.
			'_OffsetOf_dwOutUcastPkts' -> 16r244.
			'_OffsetOf_dwPhysAddrLen' -> 16r210.
			'_OffsetOf_dwSpeed' -> 16r20C.
			'_OffsetOf_dwType' -> 16r204.
			'_OffsetOf_wszName' -> 16r0
		}!
External.Structure
	subclass: #'OS.MIB_IPADDRROW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIB_IPADDRROW_Size' -> 16r18.
			'_OffsetOf_dwAddr' -> 16r0.
			'_OffsetOf_dwBCastAddr' -> 16rC.
			'_OffsetOf_dwIndex' -> 16r4.
			'_OffsetOf_dwMask' -> 16r8.
			'_OffsetOf_dwReasmSize' -> 16r10.
			'_OffsetOf_Unused1' -> 16r14.
			'_OffsetOf_wType' -> 16r16
		}!
External.Structure
	subclass: #'OS.MIB_IPFORWARDROW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIB_IPFORWARDROW_Size' -> 16r38.
			'_OffsetOf_dwForwardAge' -> 16r1C.
			'_OffsetOf_dwForwardDest' -> 16r0.
			'_OffsetOf_dwForwardIfIndex' -> 16r10.
			'_OffsetOf_dwForwardMask' -> 16r4.
			'_OffsetOf_dwForwardMetric1' -> 16r24.
			'_OffsetOf_dwForwardMetric2' -> 16r28.
			'_OffsetOf_dwForwardMetric3' -> 16r2C.
			'_OffsetOf_dwForwardMetric4' -> 16r30.
			'_OffsetOf_dwForwardMetric5' -> 16r34.
			'_OffsetOf_dwForwardNextHop' -> 16rC.
			'_OffsetOf_dwForwardNextHopAS' -> 16r20.
			'_OffsetOf_dwForwardPolicy' -> 16r8.
			'_OffsetOf_dwForwardProto' -> 16r18.
			'_OffsetOf_dwForwardType' -> 16r14
		}!
External.Structure
	subclass: #'OS.MIB_IPNETROW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIB_IPNETROW_Size' -> 16r18.
			'_OffsetOf_bPhysAddr' -> 16r8.
			'_OffsetOf_dwAddr' -> 16r10.
			'_OffsetOf_dwIndex' -> 16r0.
			'_OffsetOf_dwPhysAddrLen' -> 16r4.
			'_OffsetOf_dwType' -> 16r14
		}!
External.Structure
	subclass: #'OS.MIB_IPSTATS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIB_IPSTATS_Size' -> 16r5C.
			'_OffsetOf_dwDefaultTTL' -> 16r4.
			'_OffsetOf_dwForwarding' -> 16r0.
			'_OffsetOf_dwForwDatagrams' -> 16r14.
			'_OffsetOf_dwFragCreates' -> 16r4C.
			'_OffsetOf_dwFragFails' -> 16r48.
			'_OffsetOf_dwFragOks' -> 16r44.
			'_OffsetOf_dwInAddrErrors' -> 16r10.
			'_OffsetOf_dwInDelivers' -> 16r20.
			'_OffsetOf_dwInDiscards' -> 16r1C.
			'_OffsetOf_dwInHdrErrors' -> 16rC.
			'_OffsetOf_dwInReceives' -> 16r8.
			'_OffsetOf_dwInUnknownProtos' -> 16r18.
			'_OffsetOf_dwNumAddr' -> 16r54.
			'_OffsetOf_dwNumIf' -> 16r50.
			'_OffsetOf_dwNumRoutes' -> 16r58.
			'_OffsetOf_dwOutDiscards' -> 16r2C.
			'_OffsetOf_dwOutNoRoutes' -> 16r30.
			'_OffsetOf_dwOutRequests' -> 16r24.
			'_OffsetOf_dwReasmFails' -> 16r40.
			'_OffsetOf_dwReasmOks' -> 16r3C.
			'_OffsetOf_dwReasmReqds' -> 16r38.
			'_OffsetOf_dwReasmTimeout' -> 16r34.
			'_OffsetOf_dwRoutingDiscards' -> 16r28
		}!
External.Structure
	subclass: #'OS.MIB_TCPROW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIB_TCPROW_Size' -> 16r14.
			'_OffsetOf_dwLocalAddr' -> 16r4.
			'_OffsetOf_dwLocalPort' -> 16r8.
			'_OffsetOf_dwRemoteAddr' -> 16rC.
			'_OffsetOf_dwRemotePort' -> 16r10.
			'_OffsetOf_dwState' -> 16r0
		}!
External.Structure
	subclass: #'OS.MIB_TCPSTATS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIB_TCPSTATS_Size' -> 16r3C.
			'_OffsetOf_dwActiveOpens' -> 16r10.
			'_OffsetOf_dwAttemptFails' -> 16r18.
			'_OffsetOf_dwCurrEstab' -> 16r20.
			'_OffsetOf_dwEstabResets' -> 16r1C.
			'_OffsetOf_dwInErrs' -> 16r30.
			'_OffsetOf_dwInSegs' -> 16r24.
			'_OffsetOf_dwMaxConn' -> 16rC.
			'_OffsetOf_dwNumConns' -> 16r38.
			'_OffsetOf_dwOutRsts' -> 16r34.
			'_OffsetOf_dwOutSegs' -> 16r28.
			'_OffsetOf_dwPassiveOpens' -> 16r14.
			'_OffsetOf_dwRetransSegs' -> 16r2C.
			'_OffsetOf_dwRtoAlgorithm' -> 16r0.
			'_OffsetOf_dwRtoMax' -> 16r8.
			'_OffsetOf_dwRtoMin' -> 16r4
		}!
External.Structure
	subclass: #'OS.MIB_UDPROW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIB_UDPROW_Size' -> 16r8.
			'_OffsetOf_dwLocalAddr' -> 16r0.
			'_OffsetOf_dwLocalPort' -> 16r4
		}!
External.Structure
	subclass: #'OS.MIB_UDPSTATS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIB_UDPSTATS_Size' -> 16r14.
			'_OffsetOf_dwInDatagrams' -> 16r0.
			'_OffsetOf_dwInErrors' -> 16r8.
			'_OffsetOf_dwNoPorts' -> 16r4.
			'_OffsetOf_dwNumAddrs' -> 16r10.
			'_OffsetOf_dwOutDatagrams' -> 16rC
		}!
External.Structure
	subclass: #'OS.MIBICMPINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIBICMPINFO_Size' -> 16r68.
			'_OffsetOf_icmpInStats' -> 16r0.
			'_OffsetOf_icmpOutStats' -> 16r34
		}!
External.Structure
	subclass: #'OS.MIBICMPSTATS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIBICMPSTATS_Size' -> 16r34.
			'_OffsetOf_dwAddrMaskReps' -> 16r30.
			'_OffsetOf_dwAddrMasks' -> 16r2C.
			'_OffsetOf_dwDestUnreachs' -> 16r8.
			'_OffsetOf_dwEchoReps' -> 16r20.
			'_OffsetOf_dwEchos' -> 16r1C.
			'_OffsetOf_dwErrors' -> 16r4.
			'_OffsetOf_dwMsgs' -> 16r0.
			'_OffsetOf_dwParmProbs' -> 16r10.
			'_OffsetOf_dwRedirects' -> 16r18.
			'_OffsetOf_dwSrcQuenchs' -> 16r14.
			'_OffsetOf_dwTimeExcds' -> 16rC.
			'_OffsetOf_dwTimestampReps' -> 16r28.
			'_OffsetOf_dwTimestamps' -> 16r24
		}!
External.Structure
	subclass: #'OS.MIBICMPSTATS_EX'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MIBICMPSTATS_EX_Size' -> 16r408.
			'_OffsetOf_dwErrors' -> 16r4.
			'_OffsetOf_dwMsgs' -> 16r0.
			'_OffsetOf_rgdwTypeCount' -> 16r8
		}!
OS.IpHlpApiTableStruct
	subclass: #'OS.IP_ADAPTER_ORDER_MAP'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_IP_ADAPTER_ORDER_MAP_Size' -> 16r8. '_OffsetOf_table' -> 16r4 }!
OS.IpHlpApiTableStruct
	subclass: #'OS.IP_INTERFACE_INFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_IP_INTERFACE_INFO_Size' -> 16r108. '_OffsetOf_table' -> 16r4 }!
OS.IpHlpApiTableStruct
	subclass: #'OS.MIB_IFTABLE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_IFTABLE_Size' -> 16r360. '_OffsetOf_table' -> 16r4 }!
OS.IpHlpApiTableStruct
	subclass: #'OS.MIB_IPADDRTABLE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_IPADDRTABLE_Size' -> 16r1C. '_OffsetOf_table' -> 16r4 }!
OS.IpHlpApiTableStruct
	subclass: #'OS.MIB_IPFORWARDTABLE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_IPFORWARDTABLE_Size' -> 16r3C. '_OffsetOf_table' -> 16r4 }!
OS.IpHlpApiTableStruct
	subclass: #'OS.MIB_IPNETTABLE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_IPNETTABLE_Size' -> 16r1C. '_OffsetOf_table' -> 16r4 }!
OS.IpHlpApiTableStruct
	subclass: #'OS.MIB_TCPTABLE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_TCPTABLE_Size' -> 16r18. '_OffsetOf_table' -> 16r4 }!
OS.IpHlpApiTableStruct
	subclass: #'OS.MIB_UDPTABLE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_UDPTABLE_Size' -> 16rC. '_OffsetOf_table' -> 16r4 }!
OS.MIB_TCPTABLE
	subclass: #'OS.MIB_TCPEXTABLE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_TCPEXTABLE_Size' -> 16r1C }!
OS.MIB_UDPTABLE
	subclass: #'OS.MIB_UDPEXTABLE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_UDPEXTABLE_Size' -> 16r10 }!
OS.MIB_TCPROW
	subclass: #'OS.MIB_TCPEXROW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_TCPEXROW_Size' -> 16r18. '_OffsetOf_dwProcessId' -> 16r14 }!
OS.MIB_UDPROW
	subclass: #'OS.MIB_UDPEXROW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_MIB_UDPEXROW_Size' -> 16rC. '_OffsetOf_dwProcessId' -> 16r8 }!

"Loose Methods"!

!OS.IPHlpApiLibrary methodsFor!

AddIPAddress: address ipMask: ipMask ifIndex: ifIndex nteContext: nteContext nteInstance: nteInstance
	"Invoke the AddIPAddress() function of the module wrapped by the receiver.

		unsigned long __stdcall AddIPAddress(
			unsigned long Address,
			unsigned long IpMask,
			unsigned long IfIndex,
			unsigned long* NTEContext,
			unsigned long* NTEInstance);"

	<stdcall: dword AddIPAddress  dword dword dword dword* dword*>
	^self invalidCall!

AllocateAndGetTcpExTableFromStack: pTcpTable bOrder: bOrder heap: heap zero: zero flags: flags
	"Invoke the AllocateAndGetTcpExTableFromStack() function of the module wrapped by the receiver.

		unsigned long __stdcall AllocateAndGetTcpExTableFromStack(
			MIB_TCPEXTABLE** pTcpTable,
			long bOrder,
			long heap,
			unsigned long zero,
			unsigned long flags);"

	<stdcall: dword AllocateAndGetTcpExTableFromStack  MIB_TCPEXTABLE** sdword sdword dword dword>
	^self invalidCall!

AllocateAndGetUdpExTableFromStack: pTcpTable bOrder: bOrder heap: heap zero: zero flags: flags
	"Invoke the AllocateAndGetUdpExTableFromStack() function of the module wrapped by the receiver.

		unsigned long __stdcall AllocateAndGetUdpExTableFromStack(
			MIB_UDPEXTABLE** pTcpTable,
			long bOrder,
			long heap,
			unsigned long zero,
			unsigned long flags);"

	<stdcall: dword AllocateAndGetUdpExTableFromStack  MIB_UDPEXTABLE** sdword sdword dword dword>
	^self invalidCall!

CancelIPChangeNotify: notifyOverlapped
	"Invoke the CancelIPChangeNotify() function of the module wrapped by the receiver.

		long __stdcall CancelIPChangeNotify(
			[in]OVERLAPPED* notifyOverlapped);"

	<stdcall: sdword CancelIPChangeNotify  OVERLAPPED*>
	^self invalidCall!

CreateIpForwardEntry: pRoute
	"Invoke the CreateIpForwardEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall CreateIpForwardEntry(
			[in]MIB_IPFORWARDROW* pRoute);"

	<stdcall: dword CreateIpForwardEntry  MIB_IPFORWARDROW*>
	^self invalidCall!

CreateIpNetEntry: pArpEntry
	"Invoke the CreateIpNetEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall CreateIpNetEntry(
			[in]MIB_IPNETROW* pArpEntry);"

	<stdcall: dword CreateIpNetEntry  MIB_IPNETROW*>
	^self invalidCall!

CreateProxyArpEntry: dwAddress dwMask: dwMask dwIfIndex: dwIfIndex
	"Invoke the CreateProxyArpEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall CreateProxyArpEntry(
			[in]unsigned long dwAddress,
			[in]unsigned long dwMask,
			[in]unsigned long dwIfIndex);"

	<stdcall: dword CreateProxyArpEntry  dword dword dword>
	^self invalidCall!

DeleteIPAddress: nteContext
	"Invoke the DeleteIPAddress() function of the module wrapped by the receiver.

		unsigned long __stdcall DeleteIPAddress(
			unsigned long NTEContext);"

	<stdcall: dword DeleteIPAddress  dword>
	^self invalidCall!

DeleteIpForwardEntry: pRoute
	"Invoke the DeleteIpForwardEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall DeleteIpForwardEntry(
			[in]MIB_IPFORWARDROW* pRoute);"

	<stdcall: dword DeleteIpForwardEntry  MIB_IPFORWARDROW*>
	^self invalidCall!

DeleteIpNetEntry: pArpEntry
	"Invoke the DeleteIpNetEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall DeleteIpNetEntry(
			[in]MIB_IPNETROW* pArpEntry);"

	<stdcall: dword DeleteIpNetEntry  MIB_IPNETROW*>
	^self invalidCall!

DeleteProxyArpEntry: dwAddress dwMask: dwMask dwIfIndex: dwIfIndex
	"Invoke the DeleteProxyArpEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall DeleteProxyArpEntry(
			[in]unsigned long dwAddress,
			[in]unsigned long dwMask,
			[in]unsigned long dwIfIndex);"

	<stdcall: dword DeleteProxyArpEntry  dword dword dword>
	^self invalidCall!

DisableMediaSense: pHandle pOverlapped: pOverlapped
	"Invoke the DisableMediaSense() function of the module wrapped by the receiver.

		unsigned long __stdcall DisableMediaSense(
			long* pHandle,
			OVERLAPPED* pOverlapped);"

	<stdcall: dword DisableMediaSense  sdword* OVERLAPPED*>
	^self invalidCall!

EnableRouter: pHandle pOverlapped: pOverlapped
	"Invoke the EnableRouter() function of the module wrapped by the receiver.

		unsigned long __stdcall EnableRouter(
			long* pHandle,
			OVERLAPPED* pOverlapped);"

	<stdcall: dword EnableRouter  sdword* OVERLAPPED*>
	^self invalidCall!

FlushIpNetTable: dwIfIndex
	"Invoke the FlushIpNetTable() function of the module wrapped by the receiver.

		unsigned long __stdcall FlushIpNetTable(
			[in]unsigned long dwIfIndex);"

	<stdcall: dword FlushIpNetTable  dword>
	^self invalidCall!

GetAdapterIndex: adapterName ifIndex: ifIndex
	"Invoke the GetAdapterIndex() function of the module wrapped by the receiver.

		unsigned long __stdcall GetAdapterIndex(
			[in]LPWSTR AdapterName,
			[out]unsigned long* IfIndex);"

	<stdcall: dword GetAdapterIndex  lpwstr dword*>
	^self invalidCall!

GetAdapterOrderMap
	"Invoke the GetAdapterOrderMap() function of the module wrapped by the receiver.

		IP_ADAPTER_ORDER_MAP* __stdcall GetAdapterOrderMap();"

	<stdcall: IP_ADAPTER_ORDER_MAP* GetAdapterOrderMap >
	^self invalidCall!

getAdaptersInfo
	"
	self default getAdaptersInfo
	"

	| dwSize struct |
	dwSize := UInt32 new.
	self GetAdaptersInfo: nil pOutBufLen: dwSize.
	struct := IP_ADAPTER_INFO new: dwSize value.
	self GetAdaptersInfo: struct pOutBufLen: dwSize.
	^struct!

GetAdaptersInfo: pAdapterInfo pOutBufLen: pOutBufLen
	"Invoke the GetAdaptersInfo() function of the module wrapped by the receiver.

		unsigned long __stdcall GetAdaptersInfo(
			IP_ADAPTER_INFO* pAdapterInfo,
			unsigned long* pOutBufLen);"

	<stdcall: dword GetAdaptersInfo  IP_ADAPTER_INFO* dword*>
	^self invalidCall!

GetBestInterface: dwDestAddr pdwBestIfIndex: pdwBestIfIndex
	"Invoke the GetBestInterface() function of the module wrapped by the receiver.

		unsigned long __stdcall GetBestInterface(
			[in]unsigned long dwDestAddr,
			[out]unsigned long* pdwBestIfIndex);"

	<stdcall: dword GetBestInterface  dword dword*>
	^self invalidCall!

GetBestRoute: dwDestAddr dwSourceAddr: dwSourceAddr pBestRoute: pBestRoute
	"Invoke the GetBestRoute() function of the module wrapped by the receiver.

		unsigned long __stdcall GetBestRoute(
			[in]unsigned long dwDestAddr,
			[in]unsigned long dwSourceAddr,
			[out]MIB_IPFORWARDROW* pBestRoute);"

	<stdcall: dword GetBestRoute  dword dword MIB_IPFORWARDROW*>
	^self invalidCall!

GetFriendlyIfIndex: ifIndex
	"Invoke the GetFriendlyIfIndex() function of the module wrapped by the receiver.

		unsigned long __stdcall GetFriendlyIfIndex(
			unsigned long IfIndex);"

	<stdcall: dword GetFriendlyIfIndex  dword>
	^self invalidCall!

getIcmpStatistics
	"
	self default getIcmpStatistics
	"

	| struct err |
	struct := MIB_ICMP new.
	err := self GetIcmpStatistics: struct.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIcmpStatistics: pStats
	"Invoke the GetIcmpStatistics() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIcmpStatistics(
			[out]MIB_ICMP* pStats);"

	<stdcall: dword GetIcmpStatistics  MIB_ICMP*>
	^self invalidCall!

GetIcmpStatisticsEx: pStats dwFamily: dwFamily
	"Invoke the GetIcmpStatisticsEx() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIcmpStatisticsEx(
			[out]MIB_ICMP_EX* pStats,
			[in]unsigned long dwFamily);"

	<stdcall: dword GetIcmpStatisticsEx  MIB_ICMP_EX* dword>
	^self invalidCall!

GetIfEntry: pIfRow
	"Invoke the GetIfEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIfEntry(
			[in, out]MIB_IFROW* pIfRow);"

	<stdcall: dword GetIfEntry  MIB_IFROW*>
	^self invalidCall!

getIfTable
	"
	self default getIfTable
	"

	| struct err dwSize |
	dwSize := UInt32 new.
	self
		GetIfTable: nil
		pdwSize: dwSize
		bOrder: TRUE.
	struct := MIB_IFTABLE new: dwSize value.
	err := self
				GetIfTable: struct
				pdwSize: dwSize
				bOrder: TRUE.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIfTable: pIfTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetIfTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIfTable(
			[out]MIB_IFTABLE* pIfTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetIfTable  MIB_IFTABLE* dword* sdword>
	^self invalidCall!

getInterfaceInfo
	"
	self default getInterfaceInfo
	"

	| dwSize struct |
	dwSize := UInt32 new.
	self GetInterfaceInfo: nil dwOutBufLen: dwSize.
	struct := IP_INTERFACE_INFO new: dwSize value.
	self GetInterfaceInfo: struct dwOutBufLen: dwSize.
	^struct!

GetInterfaceInfo: pIfTable dwOutBufLen: dwOutBufLen
	"Invoke the GetInterfaceInfo() function of the module wrapped by the receiver.

		unsigned long __stdcall GetInterfaceInfo(
			[in]IP_INTERFACE_INFO* pIfTable,
			[out]unsigned long* dwOutBufLen);"

	<stdcall: dword GetInterfaceInfo  IP_INTERFACE_INFO* dword*>
	^self invalidCall!

getIpAddrTable
	"
	self default getIpAddrTable
	"

	| struct err dwSize |
	dwSize := UInt32 new.
	self
		GetIpAddrTable: nil
		pdwSize: dwSize
		bOrder: TRUE.
	struct := MIB_IPADDRTABLE new: dwSize value.
	err := self
				GetIpAddrTable: struct
				pdwSize: dwSize
				bOrder: TRUE.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIpAddrTable: pIpAddrTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetIpAddrTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpAddrTable(
			[out]MIB_IPADDRTABLE* pIpAddrTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetIpAddrTable  MIB_IPADDRTABLE* dword* sdword>
	^self invalidCall!

GetIpErrorString: errorCode buffer: buffer size: size
	"Invoke the GetIpErrorString() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpErrorString(
			[in]unsigned long ErrorCode,
			[out]unsigned short* Buffer,
			[in, out]unsigned long* Size);"

	<stdcall: dword GetIpErrorString  dword word* dword*>
	^self invalidCall!

getIpForwardTable
	"
	self default getIpForwardTable
	"

	| struct err dwSize |
	dwSize := UInt32 new.
	self
		GetIpForwardTable: nil
		pdwSize: dwSize
		bOrder: TRUE.
	struct := MIB_IPFORWARDTABLE new: dwSize value.
	err := self
				GetIpForwardTable: struct
				pdwSize: dwSize
				bOrder: TRUE.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIpForwardTable: pIpForwardTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetIpForwardTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpForwardTable(
			[out]MIB_IPFORWARDTABLE* pIpForwardTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetIpForwardTable  MIB_IPFORWARDTABLE* dword* sdword>
	^self invalidCall!

getIpNetTable
	"
	self default getIpNetTable
	"

	| struct err dwSize |
	dwSize := UInt32 new.
	self
		GetIpNetTable: nil
		pdwSize: dwSize
		bOrder: TRUE.
	struct := MIB_IPNETTABLE new: dwSize value.
	err := self
				GetIpNetTable: struct
				pdwSize: dwSize
				bOrder: TRUE.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIpNetTable: pIpNetTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetIpNetTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpNetTable(
			[out]MIB_IPNETTABLE* pIpNetTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetIpNetTable  MIB_IPNETTABLE* dword* sdword>
	^self invalidCall!

getIpStatistics
	"
	self default getIpStatistics
	"

	| struct err |
	struct := MIB_IPSTATS new.
	err := self GetIpStatistics: struct.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetIpStatistics: pStats
	"Invoke the GetIpStatistics() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpStatistics(
			[out]MIB_IPSTATS* pStats);"

	<stdcall: dword GetIpStatistics  MIB_IPSTATS*>
	^self invalidCall!

GetIpStatisticsEx: pStats dwFamily: dwFamily
	"Invoke the GetIpStatisticsEx() function of the module wrapped by the receiver.

		unsigned long __stdcall GetIpStatisticsEx(
			[out]MIB_IPSTATS* pStats,
			[in]unsigned long dwFamily);"

	<stdcall: dword GetIpStatisticsEx  MIB_IPSTATS* dword>
	^self invalidCall!

GetNetworkParams: pFixedInfo pOutBufLen: pOutBufLen
	"Invoke the GetNetworkParams() function of the module wrapped by the receiver.

		unsigned long __stdcall GetNetworkParams(
			FIXED_INFO* pFixedInfo,
			unsigned long* pOutBufLen);"

	<stdcall: dword GetNetworkParams  FIXED_INFO* dword*>
	^self invalidCall!

GetNumberOfInterfaces: pdwNumIf
	"Invoke the GetNumberOfInterfaces() function of the module wrapped by the receiver.

		unsigned long __stdcall GetNumberOfInterfaces(
			[out]unsigned long* pdwNumIf);"

	<stdcall: dword GetNumberOfInterfaces  dword*>
	^self invalidCall!

getPerAdapterInfo: ifIndex
	"
	self default getPerAdapterInfo: 3
	"

	| struct dwSize error |
	struct := IP_PER_ADAPTER_INFO new.
	dwSize := UInt32 fromInteger: struct byteSize.
	error := self
				GetPerAdapterInfo: ifIndex
				pPerAdapterInfo: struct
				pOutBufLen: dwSize.
	error == 0
		ifFalse: 
			[Win32Error signal: 'Error retrieving per-adapter info for ' , ifIndex printString with: error].
	^struct!

GetPerAdapterInfo: ifIndex pPerAdapterInfo: pPerAdapterInfo pOutBufLen: pOutBufLen
	"Invoke the GetPerAdapterInfo() function of the module wrapped by the receiver.

		unsigned long __stdcall GetPerAdapterInfo(
			unsigned long IfIndex,
			IP_PER_ADAPTER_INFO* pPerAdapterInfo,
			unsigned long* pOutBufLen);"

	<stdcall: dword GetPerAdapterInfo  dword IP_PER_ADAPTER_INFO* dword*>
	^self invalidCall!

GetRTTAndHopCount: destIpAddress hopCount: hopCount maxHops: maxHops rtt: rtt
	"Invoke the GetRTTAndHopCount() function of the module wrapped by the receiver.

		long __stdcall GetRTTAndHopCount(
			unsigned long DestIpAddress,
			unsigned long* HopCount,
			unsigned long MaxHops,
			unsigned long* RTT);"

	<stdcall: sdword GetRTTAndHopCount  dword dword* dword dword*>
	^self invalidCall!

getTcpExTable
	"
	self default getTcpExTable
	"
	| struct |
	struct := MIB_TCPEXTABLE newHeapPointer.
	self AllocateAndGetTcpExTableFromStack: struct bOrder: TRUE heap: Memory processHeap zero: 2 flags: 2.
	^struct!

getTcpStatistics
	"
	self default getTcpStatistics
	"

	| struct err |
	struct := MIB_TCPSTATS new.
	err := self GetTcpStatistics: struct.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetTcpStatistics: pStats
	"Invoke the GetTcpStatistics() function of the module wrapped by the receiver.

		unsigned long __stdcall GetTcpStatistics(
			[out]MIB_TCPSTATS* pStats);"

	<stdcall: dword GetTcpStatistics  MIB_TCPSTATS*>
	^self invalidCall!

GetTcpStatisticsEx: pStats dwFamily: dwFamily
	"Invoke the GetTcpStatisticsEx() function of the module wrapped by the receiver.

		unsigned long __stdcall GetTcpStatisticsEx(
			[out]MIB_TCPSTATS* pStats,
			[in]unsigned long dwFamily);"

	<stdcall: dword GetTcpStatisticsEx  MIB_TCPSTATS* dword>
	^self invalidCall!

getTcpTable
	"
	table := IPHlpApiLibrary default getTcpTable.
	table collect: [:each | each dwLocalPort].
	"

	| dwSize error tcpTable |
	dwSize := UInt32 new.
	error := self
				GetTcpTable: nil
				pdwSize: dwSize
				bOrder: TRUE.
	"		if( error !!= ERROR_INSUFFICIENT_BUFFER ) {"
	tcpTable := MIB_TCPTABLE new: dwSize asInteger.
	error := self
				GetTcpTable: tcpTable
				pdwSize: dwSize
				bOrder: TRUE.
	error == 0 ifFalse: [self error: 'Failed to snapshot TCP endpoints.'].
	^tcpTable!

GetTcpTable: pTcpTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetTcpTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetTcpTable(
			[out]MIB_TCPTABLE* pTcpTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetTcpTable  MIB_TCPTABLE* dword* sdword>
	^self invalidCall!

getUdpStatistics
	"
	self default getUdpStatistics
	"

	| struct err |
	struct := MIB_UDPSTATS new.
	err := self GetUdpStatistics: struct.
	err == 0 ifFalse: [Win32Error signalWith: err].
	^struct!

GetUdpStatistics: pStats
	"Invoke the GetUdpStatistics() function of the module wrapped by the receiver.

		unsigned long __stdcall GetUdpStatistics(
			[out]MIB_UDPSTATS* pStats);"

	<stdcall: dword GetUdpStatistics  MIB_UDPSTATS*>
	^self invalidCall!

GetUdpStatisticsEx: pStats dwFamily: dwFamily
	"Invoke the GetUdpStatisticsEx() function of the module wrapped by the receiver.

		unsigned long __stdcall GetUdpStatisticsEx(
			[out]MIB_UDPSTATS* pStats,
			[in]unsigned long dwFamily);"

	<stdcall: dword GetUdpStatisticsEx  MIB_UDPSTATS* dword>
	^self invalidCall!

getUdpTable
	"
	table := IPHlpApiLibrary default getUdpTable
	table talbe collect: [:each | each port].
	"

	| dwSize error struct |
	dwSize := UInt32 new.
	error := self
				GetUdpTable: nil
				pdwSize: dwSize
				bOrder: TRUE.
	struct := MIB_UDPTABLE new: dwSize asInteger.
	error := self
				GetUdpTable: struct
				pdwSize: dwSize
				bOrder: TRUE.
	error == 0 ifFalse: [Win32Error signalWith: error].
	^struct!

GetUdpTable: pUdpTable pdwSize: pdwSize bOrder: bOrder
	"Invoke the GetUdpTable() function of the module wrapped by the receiver.

		unsigned long __stdcall GetUdpTable(
			[out]MIB_UDPTABLE* pUdpTable,
			[in, out]unsigned long* pdwSize,
			[in]long bOrder);"

	<stdcall: dword GetUdpTable  MIB_UDPTABLE* dword* sdword>
	^self invalidCall!

getUniDirectionalAdapterInfo
	"
	self default getUniDirectionalAdapterInfo
	"

	| dwSize struct error |
	struct := IP_UNIDIRECTIONAL_ADAPTER_ADDRESS new.
	dwSize := UInt32 fromInteger: struct size.
	error := self GetUniDirectionalAdapterInfo: struct dwOutBufLen: dwSize.
	error == 0 ifFalse: [Win32Error signalWith: error].
	^struct!

GetUniDirectionalAdapterInfo: pIPIfInfo dwOutBufLen: dwOutBufLen
	"Invoke the GetUniDirectionalAdapterInfo() function of the module wrapped by the receiver.

		unsigned long __stdcall GetUniDirectionalAdapterInfo(
			[out]IP_UNIDIRECTIONAL_ADAPTER_ADDRESS* pIPIfInfo,
			[out]unsigned long* dwOutBufLen);"

	<stdcall: dword GetUniDirectionalAdapterInfo  IP_UNIDIRECTIONAL_ADAPTER_ADDRESS* dword*>
	^self invalidCall!

IpReleaseAddress: adapterInfo
	"Invoke the IpReleaseAddress() function of the module wrapped by the receiver.

		unsigned long __stdcall IpReleaseAddress(
			IP_ADAPTER_INDEX_MAP* AdapterInfo);"

	<stdcall: dword IpReleaseAddress  IP_ADAPTER_INDEX_MAP*>
	^self invalidCall!

IpRenewAddress: adapterInfo
	"Invoke the IpRenewAddress() function of the module wrapped by the receiver.

		unsigned long __stdcall IpRenewAddress(
			IP_ADAPTER_INDEX_MAP* AdapterInfo);"

	<stdcall: dword IpRenewAddress  IP_ADAPTER_INDEX_MAP*>
	^self invalidCall!

NhpAllocateAndGetInterfaceInfoFromStack: ppTable pdwCount: pdwCount bOrder: bOrder hHeap: hHeap dwFlags: dwFlags
	"Invoke the NhpAllocateAndGetInterfaceInfoFromStack() function of the module wrapped by the receiver.

		unsigned long __stdcall NhpAllocateAndGetInterfaceInfoFromStack(
			[out]ip_interface_name_info** ppTable,
			[out]unsigned long* pdwCount,
			[in]long bOrder,
			[in]long hHeap,
			[in]unsigned long dwFlags);"

	<stdcall: dword NhpAllocateAndGetInterfaceInfoFromStack  void** dword* sdword sdword dword>
	^self invalidCall!

NotifyAddrChange: handle1 overlapped: overlapped
	"Invoke the NotifyAddrChange() function of the module wrapped by the receiver.

		unsigned long __stdcall NotifyAddrChange(
			[out]long* Handle,
			[in]OVERLAPPED* overlapped);"

	<stdcall: dword NotifyAddrChange  sdword* OVERLAPPED*>
	^self invalidCall!

NotifyRouteChange: handle1 overlapped: overlapped
	"Invoke the NotifyRouteChange() function of the module wrapped by the receiver.

		unsigned long __stdcall NotifyRouteChange(
			[out]long* Handle,
			[in]OVERLAPPED* overlapped);"

	<stdcall: dword NotifyRouteChange  sdword* OVERLAPPED*>
	^self invalidCall!

RestoreMediaSense: pOverlapped lpdwEnableCount: lpdwEnableCount
	"Invoke the RestoreMediaSense() function of the module wrapped by the receiver.

		unsigned long __stdcall RestoreMediaSense(
			OVERLAPPED* pOverlapped,
			unsigned long* lpdwEnableCount);"

	<stdcall: dword RestoreMediaSense  OVERLAPPED* dword*>
	^self invalidCall!

SendARP: destIP srcIP: srcIP pMacAddr: pMacAddr phyAddrLen: phyAddrLen
	"Invoke the SendARP() function of the module wrapped by the receiver.

		unsigned long __stdcall SendARP(
			unsigned long DestIP,
			unsigned long SrcIP,
			unsigned long* pMacAddr,
			unsigned long* PhyAddrLen);"

	<stdcall: dword SendARP  dword dword dword* dword*>
	^self invalidCall!

SetIfEntry: pIfRow
	"Invoke the SetIfEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall SetIfEntry(
			[in]MIB_IFROW* pIfRow);"

	<stdcall: dword SetIfEntry  MIB_IFROW*>
	^self invalidCall!

SetIpForwardEntry: pRoute
	"Invoke the SetIpForwardEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall SetIpForwardEntry(
			[in]MIB_IPFORWARDROW* pRoute);"

	<stdcall: dword SetIpForwardEntry  MIB_IPFORWARDROW*>
	^self invalidCall!

SetIpNetEntry: pArpEntry
	"Invoke the SetIpNetEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall SetIpNetEntry(
			[in]MIB_IPNETROW* pArpEntry);"

	<stdcall: dword SetIpNetEntry  MIB_IPNETROW*>
	^self invalidCall!

SetIpStatistics: pIpStats
	"Invoke the SetIpStatistics() function of the module wrapped by the receiver.

		unsigned long __stdcall SetIpStatistics(
			[in]MIB_IPSTATS* pIpStats);"

	<stdcall: dword SetIpStatistics  MIB_IPSTATS*>
	^self invalidCall!

SetIpTTL: nTTL
	"Invoke the SetIpTTL() function of the module wrapped by the receiver.

		unsigned long __stdcall SetIpTTL(
			unsigned int nTTL);"

	<stdcall: dword SetIpTTL  dword>
	^self invalidCall!

SetTcpEntry: pTcpRow
	"Invoke the SetTcpEntry() function of the module wrapped by the receiver.

		unsigned long __stdcall SetTcpEntry(
			[in]MIB_TCPROW* pTcpRow);"

	<stdcall: dword SetTcpEntry  MIB_TCPROW*>
	^self invalidCall!

UnenableRouter: pOverlapped lpdwEnableCount: lpdwEnableCount
	"Invoke the UnenableRouter() function of the module wrapped by the receiver.

		unsigned long __stdcall UnenableRouter(
			OVERLAPPED* pOverlapped,
			unsigned long* lpdwEnableCount);"

	<stdcall: dword UnenableRouter  OVERLAPPED* dword*>
	^self invalidCall! !
!OS.IPHlpApiLibrary categoriesForMethods!
AddIPAddress:ipMask:ifIndex:nteContext:nteInstance:!**auto generated**!public! !
AllocateAndGetTcpExTableFromStack:bOrder:heap:zero:flags:!**auto generated**!public! !
AllocateAndGetUdpExTableFromStack:bOrder:heap:zero:flags:!**auto generated**!public! !
CancelIPChangeNotify:!**auto generated**!public! !
CreateIpForwardEntry:!**auto generated**!public! !
CreateIpNetEntry:!**auto generated**!public! !
CreateProxyArpEntry:dwMask:dwIfIndex:!**auto generated**!public! !
DeleteIPAddress:!**auto generated**!public! !
DeleteIpForwardEntry:!**auto generated**!public! !
DeleteIpNetEntry:!**auto generated**!public! !
DeleteProxyArpEntry:dwMask:dwIfIndex:!**auto generated**!public! !
DisableMediaSense:pOverlapped:!**auto generated**!public! !
EnableRouter:pOverlapped:!**auto generated**!public! !
FlushIpNetTable:!**auto generated**!public! !
GetAdapterIndex:ifIndex:!**auto generated**!public! !
GetAdapterOrderMap!**auto generated**!public! !
getAdaptersInfo!enquiries!public! !
GetAdaptersInfo:pOutBufLen:!**auto generated**!public! !
GetBestInterface:pdwBestIfIndex:!**auto generated**!public! !
GetBestRoute:dwSourceAddr:pBestRoute:!**auto generated**!public! !
GetFriendlyIfIndex:!**auto generated**!public! !
getIcmpStatistics!enquiries!public! !
GetIcmpStatistics:!**auto generated**!public! !
GetIcmpStatisticsEx:dwFamily:!**auto generated**!public! !
GetIfEntry:!**auto generated**!public! !
getIfTable!enquiries!public! !
GetIfTable:pdwSize:bOrder:!**auto generated**!public! !
getInterfaceInfo!enquiries!public! !
GetInterfaceInfo:dwOutBufLen:!**auto generated**!public! !
getIpAddrTable!enquiries!public! !
GetIpAddrTable:pdwSize:bOrder:!**auto generated**!public! !
GetIpErrorString:buffer:size:!**auto generated**!public! !
getIpForwardTable!enquiries!public! !
GetIpForwardTable:pdwSize:bOrder:!**auto generated**!public! !
getIpNetTable!enquiries!public! !
GetIpNetTable:pdwSize:bOrder:!**auto generated**!public! !
getIpStatistics!enquiries!public! !
GetIpStatistics:!**auto generated**!public! !
GetIpStatisticsEx:dwFamily:!**auto generated**!public! !
GetNetworkParams:pOutBufLen:!**auto generated**!public! !
GetNumberOfInterfaces:!**auto generated**!public! !
getPerAdapterInfo:!enquiries!public! !
GetPerAdapterInfo:pPerAdapterInfo:pOutBufLen:!**auto generated**!public! !
GetRTTAndHopCount:hopCount:maxHops:rtt:!**auto generated**!public! !
getTcpExTable!enquiries!public! !
getTcpStatistics!enquiries!public! !
GetTcpStatistics:!**auto generated**!public! !
GetTcpStatisticsEx:dwFamily:!**auto generated**!public! !
getTcpTable!enquiries!public! !
GetTcpTable:pdwSize:bOrder:!**auto generated**!public! !
getUdpStatistics!enquiries!public! !
GetUdpStatistics:!**auto generated**!public! !
GetUdpStatisticsEx:dwFamily:!**auto generated**!public! !
getUdpTable!enquiries!public! !
GetUdpTable:pdwSize:bOrder:!**auto generated**!public! !
getUniDirectionalAdapterInfo!enquiries!public! !
GetUniDirectionalAdapterInfo:dwOutBufLen:!**auto generated**!public! !
IpReleaseAddress:!**auto generated**!public! !
IpRenewAddress:!**auto generated**!public! !
NhpAllocateAndGetInterfaceInfoFromStack:pdwCount:bOrder:hHeap:dwFlags:!**auto generated**!public! !
NotifyAddrChange:overlapped:!**auto generated**!public! !
NotifyRouteChange:overlapped:!**auto generated**!public! !
RestoreMediaSense:lpdwEnableCount:!**auto generated**!public! !
SendARP:srcIP:pMacAddr:phyAddrLen:!**auto generated**!public! !
SetIfEntry:!**auto generated**!public! !
SetIpForwardEntry:!**auto generated**!public! !
SetIpNetEntry:!**auto generated**!public! !
SetIpStatistics:!**auto generated**!public! !
SetIpTTL:!**auto generated**!public! !
SetTcpEntry:!**auto generated**!public! !
UnenableRouter:lpdwEnableCount:!**auto generated**!public! !
!

"End of package definition"!

