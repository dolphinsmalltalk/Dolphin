| package |
package := Package name: 'Database Connection'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk ODBC Database Connection Development Extensions
Copyright (c) Object Arts Ltd, 1997-2003. Portions copyright CGI Group (Europe) Ltd, 1997.

This package extends the ''Database Connection Base'' package with tools, etc, for use in development. 

N.B. This is a development time only package, but retains the name of the original Dolphin ODBC package, the runtime content of which is now in ''Database Connection Base''.

For documentation evaluate:
	SmalltalkSystem help: ''databaseconnectivity'''.

package basicPackageVersion: '6.1'.


package setMethodNames: #(
	#(#{Database.DBAbstractRow} #publishedAspects)
	#(#{Database.DBResultSet} #debugPrintOn:)
	#(#{Database.DBResultSet} #publishedKeyedAspectsBatchSize)
	#(#{Database.DBResultSet class} #newInstanceAspect:class:)
	#(#{Database.DBResultSet class} #publishedAspectsOfInstances)
).

package setPrerequisites: #(
	'Database Connection Base'
	'..\IDE\Base\Development System'
).

package!

"Loose Methods"!

!Database.DBAbstractRow methodsFor!

publishedAspects
	"Answer a <LookupTable> of the <Aspect>s published by the receiver."

	| aspects |
	aspects := self class publishedAspectsOfInstances.
	self columns 
		do: [:each | aspects add: ((self at: each name) newAspect: each name class: Tools.KeyedAspect)].
	^aspects! !

!Database.DBAbstractRow categoriesForMethods!
publishedAspects!constants!development!public! !
!

!Database.DBResultSet methodsFor!

debugPrintOn: aStream
	self printOn: aStream!

publishedKeyedAspectsBatchSize
	"Private - Answers the number of keyed aspects to display in the PAI return at a time"

	^10
! !

!Database.DBResultSet categoriesForMethods!
debugPrintOn:!development!printing!public! !
publishedKeyedAspectsBatchSize!constants!development!private! !
!

!Database.DBResultSet class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
	which is appropriate for representing aspects of the receiver's type."

	"We don't want to inherit the behavior to use a CollectionPresenter aspect to display instances of the receiver
	because this will attempt to access all the elements"

	^aspectClass name: aSymbol!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	^(super publishedAspectsOfInstances)
		add: (Tools.Aspect name: #statement);
		yourself! !

!Database.DBResultSet class categoriesForMethods!
newInstanceAspect:class:!adapters!development!private! !
publishedAspectsOfInstances!constants!development!public! !
!

"End of package definition"!

