| package |
package := Package name: 'Known Failing Tests'.
package paxVersion: 1;
	basicComment: 'These tests are known failures that have not yet been debugged or resolved. In general these tests should pass and are therefre in need of some debugging effort so that they may be reintroduced into the fold. This package is not loaded during normal regression testing (for obvious reasons).

Tests should not be added to this package without creating a Github issue, as otherwise there is nothing to track the failure and ensure it gets fixed.'.


package methodNames
	add: #BlockClosureTest -> #testFullBlockEquality;
	add: #CompilerTest -> #testOptimizedLoopReadBeforeWritten;
	add: #DebuggerTest -> #testRemapIPSmokeTest;
	add: #GdiplusBitmapTest -> #testAsByteArray;
	add: #ListViewTest -> #testColumnWidth;
	add: #MemoryMappedFileTest -> #testMaximumSize;
	add: #PackageSelectorTest -> #testPackageCreationDoesntAlterSelection;
	add: #PackageSelectorTest -> #testPackageRemovalDoesntAlterSelection;
	add: #PackageTest -> #testImageStripperPrereqs;
	add: #StyledContainerTest -> #test1PixDottedBorderPaint;
	add: #StyledContainerTest -> #test1PixDottedBorderPrint;
	add: #ViewComposerTest -> #testResizeDoesNotMove;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\IDE\Base\Development System Tests';
	add: '..\Base\Dolphin';
	add: '..\Base\Dolphin Base Tests';
	add: '..\MVP\Views\Common Controls\Dolphin Common Controls';
	add: '..\IDE\Dolphin IDE Tests';
	add: '..\System\Win32\Dolphin Memory-Mapped Files';
	add: '..\System\Win32\Dolphin MMF Tests';
	add: '..\MVP\Dolphin MVP Tests';
	add: '..\MVP\Views\Styled Views\Dolphin Styled Views';
	add: '..\MVP\Gdiplus\Gdiplus';
	add: '..\MVP\Gdiplus\Tests\Gdiplus Tests';
	yourself).

package!

"Class Definitions"!


"Global Aliases"!


"Loose Methods"!

!BlockClosureTest methodsFor!

testFullBlockEquality
	| block1 block2 count block3 |
	count := 1.
	block1 := [count := count + 1].
	block2 := [count := count + 1].
	block3 := [ | tmp | tmp := 1. count := count + tmp. tmp].
	self assert: block1 = block2.
	self assert: block1 ~= block3! !
!BlockClosureTest categoriesFor: #testFullBlockEquality!public!unit tests-known failures! !

!CompilerTest methodsFor!

testOptimizedLoopReadBeforeWritten
	| expected expr actual |
	expected := OrderedCollection new.
	(1 to: 5) do: 
			[:i | 
			| a |
			expected add: a displayString , i displayString.
			a := i].
	expr := (self 
				compileExpression: '| r | r := OrderedCollection new. 1 to: 5 do: [:i | | a | r add: a displayString, i displayString. a := i]. r') 
					method.
	actual := expr value.
	"Results of actual block evaluation in a loop and optimized loop should be the same - any
	read-before-written locals must be reinitialized to zero on each iteration"
	self assert: actual = expected! !
!CompilerTest categoriesFor: #testOptimizedLoopReadBeforeWritten!public!unit tests! !

!DebuggerTest methodsFor!

testRemapIPSmokeTest
	| frame instructions debugMethod debugInstructions info debugInfo textMap ip segment offset debugTextMap |
	CompiledCode initializeInfoCache.
	frame := StackFrame new.
	CompiledCode allSubinstances do: 
			[:each | 
			instructions := each byteCodeSegments.
			debugMethod := each asDebugMethod.
			debugInstructions := debugMethod byteCodeSegments.
			info := each debugInfo.
			debugInfo := debugMethod debugInfo.
			ip := 1.
			textMap := info textMap.
			debugTextMap := debugInfo textMap.
			textMap with: debugTextMap do: [:a :b | self assert: a value = b value].
			debugTextMap do: 
					[:assoc | 
					| byte |
					byte := debugMethod byteCodes at: assoc key.
					self assert: byte ~= 0]
			"			instructions do: 
					[:bytes | 
					segment := frame findIP: ip inTextMap: textMap.
					self deny: segment = 0.
					offset := ip - (textMap at: segment) key.
					self assert: offset >= 0.
					ip := ip + bytes size]"]! !
!DebuggerTest categoriesFor: #testRemapIPSmokeTest!public! !

!GdiplusBitmapTest methodsFor!

testAsByteArray
	| b1 b2 |
	model := GdiplusBitmap fromFile: self fileResource pafRgb0000FF_100x100bmp.
	b1 := model asByteArray: 'image/bmp'.
	b2 := self fileResource rgb0000FF_100x100bmpBytes.
	self assert: b1 size = b2 size.
	"difference is in the first 100 bytes ... what is the problem?"
	self assert: b1 = b2! !
!GdiplusBitmapTest categoriesFor: #testAsByteArray!public!unit tests! !

!ListViewTest methodsFor!

testColumnWidth
	"#1452, #1456"

	| column primary before after width |
	primary := presenter view primaryColumn.
	before := primary width.
	width := presenter view width - before + 50.
	column := ListViewColumn text: 'Blah' width: width.
	self assert: column width = width.
	width := width - 20.
	column width: width.
	self assert: column width = width.
	presenter view update.
	self assert: presenter view isLayoutValid.
	presenter view addColumn: column.
	self deny: presenter view isLayoutValid.
	presenter view validateLayout.
	self assert: presenter view isLayoutValid.
	after := primary width.
	self assert: after < before.
	self assert: column width = 80.
	column width: 100.
	self deny: presenter view isLayoutValid.
	presenter view validateLayout.
	self assert: presenter view isLayoutValid.
	self assert: primary width < after.
	self assert: column width = 100! !
!ListViewTest categoriesFor: #testColumnWidth!public!unit tests! !

!MemoryMappedFileTest methodsFor!

testMaximumSize
	| array file fname mmf view count |
	fname := File temporaryFilename.
	mmf := MemoryMappedFile open: fname.
	"Choose size to be exactly one allocation block so that read/write off the end will cause a fault"
	count := 64 * 1024 / 4.
	mmf maximumSize: 4 * count.
	view := mmf mapView.
	array := DWORDArray fromAddress: view length: count.
	1 to: count do: [:each | array at: each put: each].
	self assert: array asArray = (1 to: count).
	"Now try and read/write off the end - it seems there is some slush (uh oh) but we can make it GPF by writing far enough away"
	array basicLength: count * 2.
	self should: [array at: count + 1] raise: GPFault.
	self should: [#(1 1024 2048 2049) do: [:each | array at: count + each put: count + each]]
		raise: GPFault.
	mmf free.
	view free.
	self should: [array at: count] raise: GPFault.
	(MemoryManager current)
		collectGarbage;
		administerLastRites.
	file := FileStream read: fname text: false.
	self assert: file size = (count * 4).
	array := (1 to: count) collect: [:each | file nextDWORD].
	self assert: array = (1 to: count).
	file close.
	"If this fails then one or other thing is holding the file open"
	File delete: fname! !
!MemoryMappedFileTest categoriesFor: #testMaximumSize!public! !

!PackageSelectorTest methodsFor!

testPackageCreationDoesntAlterSelection
	| selections |
	presenter selections: (Array with: self class owningPackage).
	selections := presenter selections.
	self assert: (selections size = 1 and: [selections first = self class owningPackage]).
	self 
		shouldnt: [packageA := self createPackage: 'Core\Object Arts\Dolphin\Tests\A']
		triggerAnyOf: #(#selectionChanged #selectionChanging)
		against: presenter.
	self assert: presenter selections = selections!

testPackageRemovalDoesntAlterSelection
	| selections newSelections |
	packageA := self createPackage: 'Core\Object Arts\Dolphin\Tests\A'.
	presenter selections: (Array with: self class owningPackage).
	selections := presenter selections.
	self assert: (selections size = 1 and: [selections first = self class owningPackage]).
	self 
		shouldnt: [self removePackage: packageA]
		triggerAnyOf: #(#selectionChanged #selectionChanging)
		against: presenter.
	packageA := nil.
	newSelections := presenter selections.
	self assert: newSelections = selections! !
!PackageSelectorTest categoriesFor: #testPackageCreationDoesntAlterSelection!public! !
!PackageSelectorTest categoriesFor: #testPackageRemovalDoesntAlterSelection!public! !

!PackageTest methodsFor!

testImageStripperPrereqs
	"#1476"

	self assert: ((Package manager packageNamed: 'Autoplay') prerequisiteNames asArray 
				includes: 'Lagoon Image Stripper')! !
!PackageTest categoriesFor: #testImageStripperPrereqs!public!unit tests! !

!StyledContainerTest methodsFor!

test1PixDottedBorderPaint
	"Tests the validity of WM_PAINT of a 1 pixel styled dotted border"

	| bitmap rect |
	containerView hasBorder: true.
	containerView styledPen: (StyledPen 
				color: self styledBorderColor
				width: 1
				style: #dotted).
	containerView parentView backcolor: self parentBackcolor.
	self waitForScreenUpdate.
	bitmap := self bitmapOfPaintView: containerView.
	rect := self borderRectangleOf: containerView.
	self 
		checkPoints: (Array 
				with: rect topRight
				with: rect bottomLeft
				with: rect topLeft)
		inBitmap: bitmap
		color: self styledBorderColor.
	self 
		checkPoints: (Array with: rect bottomRight)
		inBitmap: bitmap
		color: self parentBackcolor.
	self 
		checkRectangle: ((self borderRectangleOf: containerView) insetBy: 1 asPoint)
		inBitmap: bitmap
		color: self backgroundColor!

test1PixDottedBorderPrint
	"Tests the validity of WM_PRINT of a 1 pixel styled dotted border"

	| bitmap rect |
	containerView hasBorder: true.
	containerView styledPen: (StyledPen 
				color: self styledBorderColor
				width: 1
				style: #dotted).
	containerView parentView backcolor: self parentBackcolor.
	self waitForScreenUpdate.
	bitmap := self bitmapOfPrintView: containerView.
	rect := self borderRectangleOf: containerView.
	self 
		checkPoints: (Array with: rect topRight with: rect bottomLeft)
		inBitmap: bitmap
		color: self styledBorderColor.

	"Not sure why this test is failing .. appears to work okay in VC"
	self 
		checkPoints: (Array with: rect topLeft with: rect bottomRight)
		inBitmap: bitmap
		color: self parentBackcolor.
	self 
		checkRectangle: ((self borderRectangleOf: containerView) insetBy: 1 asPoint)
		inBitmap: bitmap
		color: self backgroundColor! !
!StyledContainerTest categoriesFor: #test1PixDottedBorderPaint!public! !
!StyledContainerTest categoriesFor: #test1PixDottedBorderPrint!public! !

!ViewComposerTest methodsFor!

testResizeDoesNotMove
	| static shell pos corner grabber extent |
	vc newShellView.
	shell := vc composingView.
	static := vc 
				pasteResource: self getStaticTextResource
				context: shell
				position: 0 @ 0.
	pos := ##(10 @ 10).
	static position: pos.
	self assert: static position = pos.
	extent := static extent.
	corner := static screenRectangle corner - vc hidingOffset + vc defaultComposingPosition.
	"Deferred actions are used by the grabbers - need to run these, or the grabber won't be hit"
	SessionManager inputState pumpMessages.
	grabber := vc grabberHitBy: corner.
	self assert: grabber aspect == #bottomRight.
	grabber endTrackingAt: corner + (21 @ 23).
	"It shouldn't have moved"
	self assert: static position = pos.
	self deny: static extent = extent.
	self assert: (vc constrainPoint: static extent) = static extent! !
!ViewComposerTest categoriesFor: #testResizeDoesNotMove!public!unit tests! !

"End of package definition"!

