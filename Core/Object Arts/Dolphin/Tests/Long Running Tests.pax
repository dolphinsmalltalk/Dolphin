| package |
package := Package name: 'Long Running Tests'.
package paxVersion: 1;
	basicComment: 'These tests take rather a long time to run (but do pass eventually). This package is not loaded during normal regression testing to allow the test pass to complete in a reasonable time.'.


package methodNames
	add: #CompilerTest -> #testTextMapExhaustive;
	add: #SortAlgorithmTest -> #testExtremeSortBlocks;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\IDE\Base\Development System Tests';
	add: '..\Base\Dolphin Base Tests';
	yourself).

package!

"Class Definitions"!


"Global Aliases"!


"Loose Methods"!

!CompilerTest methodsFor!

testTextMapExhaustive
	"Check that the release and debug text maps match for every method in the system .... with a
	couple of exceptions... ahem"

	self knownTextMapIssues not methodsDo: 
			[:each | 
			| debugTextMap debugMethod info textMap result |
			result := self getDebugInfoFor: each debug: true.
			debugMethod := result method.
			"If fails then the method failed to compile"
			self assert: debugMethod notNil.
			info := each debugInfo.
			textMap := info textMap.
			debugTextMap := result textMap.
			"The text maps should contain exactly the same number of entries, and the text range for each entry should be the same"
			textMap with: debugTextMap do: [:a :b | self assert: a value = b value].
			debugTextMap do: 
					[:assoc | 
					| byte ip |
					ip := assoc key.
					ip == 0 
						ifFalse: 
							[byte := debugMethod byteCodes at: ip.
							self assert: byte ~= 0]]]! !
!CompilerTest categoriesFor: #testTextMapExhaustive!public!unit tests-long running! !

!SortAlgorithmTest methodsFor!

testExtremeSortBlocks

	"This is a worst case ..."
	self sort: (1 to: 10000) sortBlock: [:a :b | true].

	self sort: (1 to: 10000) sortBlock: [:a :b | false]! !
!SortAlgorithmTest categoriesFor: #testExtremeSortBlocks!public!unit tests! !

"End of package definition"!

