| package |
package := Package name: 'Dolphin Sockets (Deprecated)'.
package paxVersion: 2.1;
	basicComment: ''.


package setClassNames: #(
	#{OS.HOSTENT}
).

package setMethodNames: #(
	#(#{Net.Socket} #send:count:)
	#(#{Net.Socket} #send:count:startingAt:)
	#(#{OS.IPHlpApiLibrary} #parseNetworkString:types:addressInfo:portNumber:prefixLength:)
	#(#{OS.WS2_32Library} #gethostbyaddr:len:type:)
	#(#{OS.WS2_32Library} #gethostbyname:)
).

package setVariableNames: #(
	#{Net.SocketReadStream}
	#{Net.SocketWriteStream}
).

package setAliasVariableNames: #(
	#{Net.SocketReadStream}
	#{Net.SocketWriteStream}
).

package setPrerequisites: #(
	'..\Base\Dolphin'
	'Dolphin Sockets'
).

package!

"Class Definitions"!

External.Structure
	subclass: #'OS.HOSTENT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.WinSocketConstants})
	classInstanceVariableNames: ''
	classConstants: {
			'_HOSTENT_Size' -> 16r10.
			'_OffsetOf_h_addr_list' -> 16rC.
			'_OffsetOf_h_addrtype' -> 16r8.
			'_OffsetOf_h_aliases' -> 16r4.
			'_OffsetOf_h_length' -> 16rA.
			'_OffsetOf_h_name' -> 16r0
		}!

"Variable Aliases"!

Net.SocketReadStream := Core.ExternalReadStream!

Net.SocketWriteStream := Core.ExternalWriteStream!


"Loose Methods"!

!Net.Socket methodsFor!

send: aByteObject count: anInteger
	#deprecated. "Use write:count:"
	self write: aByteObject count: anInteger!

send: aByteObject count: countInteger startingAt: startInteger
	#deprecated. "Use write:count:startingAt:"
	self
		write: aByteObject
		count: countInteger
		startingAt: startInteger! !

!Net.Socket categoriesForMethods!
send:count:!operations!public! !
send:count:startingAt:!operations!public! !
!

!OS.IPHlpApiLibrary methodsFor!

parseNetworkString: networkString types: types addressInfo: addressInfo portNumber: portNumber prefixLength: prefixLength
	"Invoke the ParseNetworkString() function of the module wrapped by the receiver.
	Helpstring: Parses the input network string and checks whether it is a legal representation of the specified IP network string type. If the string matches a type and its specification, the function can optionally return the parsed result.

		unsigned long __stdcall ParseNetworkString(
			LPCWSTR NetworkString,
			unsigned long Types,
			PNET_ADDRESS_INFO AddressInfo,
			unsigned short* PortNumber,
			BYTE* PrefixLength);"

	<stdcall: uint32 ParseNetworkString lpwstr uint32 NET_ADDRESS_INFO* uint16* uint8*>
	#deprecated.
	^self invalidCall: _failureCode! !

!OS.IPHlpApiLibrary categoriesForMethods!
parseNetworkString:types:addressInfo:portNumber:prefixLength:!**auto generated**!public! !
!

!OS.WS2_32Library methodsFor!

gethostbyaddr: addr len: len type: type
	"Invoke the gethostbyaddr() function of the module wrapped by the receiver.

		hostent* __stdcall gethostbyaddr(
			CHAR* addr,
			int len,
			int Type);"

	<overlap stdcall: HOSTENT* gethostbyaddr lpvoid int32 int32>
	#deprecated.	"Not compatible with IPv6. Replaced by GetAddrInfo()"
	^self invalidOverlappedCall: _failureCode!

gethostbyname: name
	"Answer host information corresponding to a host name from the host database.

		hostent* __stdcall gethostbyname(
			CHAR* name);"

	<overlap stdcall: HOSTENT* gethostbyname lpstr>
	#deprecated.	"Not compatible with IPv6. Replaced by GetNameInfo()"
	^self invalidOverlappedCall: _failureCode! !

!OS.WS2_32Library categoriesForMethods!
gethostbyaddr:len:type:!public!win32 functions-windows sockets 2! !
gethostbyname:!public!win32 functions-windows sockets 2! !
!

"End of package definition"!

