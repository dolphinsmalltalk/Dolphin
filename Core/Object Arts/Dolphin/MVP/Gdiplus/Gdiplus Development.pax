| package |
package := Package name: 'Gdiplus Development'.
package paxVersion: 2.1;
	basicComment: ''.


package setMethodNames: #(
	#(#{Graphics.Gdiplus.AbstractCustomLineCap class} #icon)
	#(#{Graphics.Gdiplus.AdjustableArrowCap class} #exampleGdipAACArrowCap)
	#(#{Graphics.Gdiplus.AdjustableArrowCap class} #icon)
	#(#{Graphics.Gdiplus.Bitmap class} #exampleGdipBFromBitmap)
	#(#{Graphics.Gdiplus.Bitmap class} #exampleGdipBFromByteArray)
	#(#{Graphics.Gdiplus.Bitmap class} #exampleGdipBFromDIB)
	#(#{Graphics.Gdiplus.Bitmap class} #exampleGdipBFromXPIcon)
	#(#{Graphics.Gdiplus.Bitmap class} #exampleGdipBResize1)
	#(#{Graphics.Gdiplus.Bitmap class} #exampleGdipBResize2)
	#(#{Graphics.Gdiplus.Bitmap class} #exampleGdipBResize3)
	#(#{Graphics.Gdiplus.Brush class} #icon)
	#(#{Graphics.Gdiplus.CachedBitmap class} #exampleGdipCBPerformance)
	#(#{Graphics.Gdiplus.CustomLineCap class} #exampleGdipCLCStrokeCaps)
	#(#{Graphics.Gdiplus.Font class} #exampleGdipFontHeight)
	#(#{Graphics.Gdiplus.Font class} #icon)
	#(#{Graphics.Gdiplus.FontFamily class} #exampleGdipFFClone)
	#(#{Graphics.Gdiplus.FontFamily class} #exampleGdipFFMetrics)
	#(#{Graphics.Gdiplus.GdiplusBase class} #fileResource)
	#(#{Graphics.Gdiplus.GdiplusBase class} #icon)
	#(#{Graphics.Gdiplus.GdiplusBase class} #showExample:)
	#(#{Graphics.Gdiplus.GdiplusBase class} #showExample:viewMode:)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGAlphaBlending)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGCropAndScale)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGDrawingALine)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGDrawingAString)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGDrawingShapes)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGFromCanvas)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGMeasureString)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGRotate)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGShear)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGTransformations)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipGTransformPoints)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipMeasureCharacterRanges)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipNestedContainers)
	#(#{Graphics.Gdiplus.GdiplusGraphics class} #exampleGdipState)
	#(#{Graphics.Gdiplus.GradientBrush class} #icon)
	#(#{Graphics.Gdiplus.GraphicsPath class} #exampleAddString)
	#(#{Graphics.Gdiplus.GraphicsPath class} #exampleGdipGPCreatingFigures)
	#(#{Graphics.Gdiplus.GraphicsPath class} #exampleGdipGPFillingFigures)
	#(#{Graphics.Gdiplus.GraphicsPath class} #exampleGdipGPGetBounds)
	#(#{Graphics.Gdiplus.GraphicsPath class} #exampleGdipGPRotate)
	#(#{Graphics.Gdiplus.GraphicsPath class} #exampleGdipGPShear)
	#(#{Graphics.Gdiplus.GraphicsPath class} #exampleGdipGPShear2)
	#(#{Graphics.Gdiplus.GraphicsPath class} #icon)
	#(#{Graphics.Gdiplus.HatchBrush class} #exampleGdipHBFillAShape)
	#(#{Graphics.Gdiplus.HatchBrush class} #exampleGdipHBFillAString)
	#(#{Graphics.Gdiplus.HatchBrush class} #exampleGdipHBStyles)
	#(#{Graphics.Gdiplus.HatchBrush class} #icon)
	#(#{Graphics.Gdiplus.Image class} #createMultiframeImage)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIDecoderFileExtensions)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIDecoders)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIEncoderClsid)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIEncoderFileExtensions)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIEncoderParameters)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIEncoders)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIEncoderValues)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIFlags)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIInterpMode)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIJPEGCompression)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipILoadImage)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipILoadImages)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipILosslessRotation)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIMetadata)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIMetadata2)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIMultiFrame)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIMultiFrame2)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIMultiFrame3)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIPrinting1)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIPrinting2)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIPrinting3)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIPrinting4LabeledToAPage)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIPropertiesCopy)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIPropertyItem)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIPropertyItems)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipISaveFrames)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipISkewing)
	#(#{Graphics.Gdiplus.Image class} #exampleGdipIThumbnails)
	#(#{Graphics.Gdiplus.Image class} #prompt)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleColorBars1)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleColorBars2)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleColorBars3)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleColorBars4)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleColorKeyTest)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleGdipIAAlphaBlending)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleGdipIAColorKey)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleGdipIAColorMatrix)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleGdipIAColorRemap)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleGdipIAGamma)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleGdipIAOutputChannel)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleGdipIAScaleColors)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleGdipIAShearColors)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleGdipIAThreshold)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleGdipIATranslateColors)
	#(#{Graphics.Gdiplus.ImageAttributes class} #exampleRemapInput)
	#(#{Graphics.Gdiplus.InstalledFontCollection class} #exampleGdipIFCEnumerating)
	#(#{Graphics.Gdiplus.LinearGradientBrush class} #exampleGdipLGChangingColors)
	#(#{Graphics.Gdiplus.LinearGradientBrush class} #exampleGdipLGCustom)
	#(#{Graphics.Gdiplus.LinearGradientBrush class} #exampleGdipLGDiagonal)
	#(#{Graphics.Gdiplus.LinearGradientBrush class} #exampleGdipLGHorizontal)
	#(#{Graphics.Gdiplus.LinearGradientBrush class} #exampleGdipLGModeConstants)
	#(#{Graphics.Gdiplus.LinearGradientBrush class} #exampleGdipLGScaleAndTranslate)
	#(#{Graphics.Gdiplus.LinearGradientBrush class} #exampleGdipLGTiling)
	#(#{Graphics.Gdiplus.Matrix class} #exampleGdipMShadows)
	#(#{Graphics.Gdiplus.Matrix class} #exampleGdipMShear)
	#(#{Graphics.Gdiplus.Matrix class} #exampleGdipMTranslate)
	#(#{Graphics.Gdiplus.Matrix class} #icon)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGBlendColors)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGBlendFactors)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGBounds)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGCenterColor)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGCenterPoint)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGFocusScales)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGGamma)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGMultiply)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGScale)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGScaleAndTranslate)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGSurroundColors)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGSurroundColors2)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGTransform)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGTranslate)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #exampleGdipPGWrapMode)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #examplesWorkspace)
	#(#{Graphics.Gdiplus.PathGradientBrush class} #icon)
	#(#{Graphics.Gdiplus.Pen class} #exampleGdipPAttributes)
	#(#{Graphics.Gdiplus.Pen class} #exampleGdipPCompoundArray)
	#(#{Graphics.Gdiplus.Pen class} #exampleGdipPCustomCaps)
	#(#{Graphics.Gdiplus.Pen class} #exampleGdipPDashCap)
	#(#{Graphics.Gdiplus.Pen class} #exampleGdipPDashPattern)
	#(#{Graphics.Gdiplus.Pen class} #exampleGdipPDrawing)
	#(#{Graphics.Gdiplus.Pen class} #exampleGdipPFillWithTexture)
	#(#{Graphics.Gdiplus.Pen class} #exampleGdipPJoiningLines)
	#(#{Graphics.Gdiplus.Pen class} #exampleGdipPLineCaps)
	#(#{Graphics.Gdiplus.Pen class} #examplesWorkspace)
	#(#{Graphics.Gdiplus.Pen class} #icon)
	#(#{Graphics.Gdiplus.Region class} #exampleClippingSimple)
	#(#{Graphics.Gdiplus.Region class} #exampleGdipRClipWithRegion)
	#(#{Graphics.Gdiplus.Region class} #exampleGdipRHitTesting)
	#(#{Graphics.Gdiplus.SolidBrush class} #exampleGdipDropShadow)
	#(#{Graphics.Gdiplus.SolidBrush class} #exampleGdipSBFillAShape)
	#(#{Graphics.Gdiplus.SolidBrush class} #icon)
	#(#{Graphics.Gdiplus.StringFormat class} #exampleGdipSFFormatText)
	#(#{Graphics.Gdiplus.StringFormat class} #exampleGdipSFGenerics)
	#(#{Graphics.Gdiplus.StringFormat class} #exampleGdipSFGenericTypographic)
	#(#{Graphics.Gdiplus.StringFormat class} #exampleGdipSFHotkeyPrefix)
	#(#{Graphics.Gdiplus.StringFormat class} #exampleGdipSFTabs)
	#(#{Graphics.Gdiplus.StringFormat class} #exampleGdipSFTrimming)
	#(#{Graphics.Gdiplus.StringFormat class} #icon)
	#(#{Graphics.Gdiplus.TextureBrush class} #exampleGdipTBFillAShape)
	#(#{Graphics.Gdiplus.TextureBrush class} #exampleGdipTBTilingAShape)
	#(#{Graphics.Gdiplus.TextureBrush class} #icon)
	#(#{Graphics.Gdiplus.TransformableBrush class} #icon)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'..\Base\Dolphin Basic Geometry'
	'..\Dialogs\Common\Dolphin Common Dialogs'
	'..\Graphics\Dolphin GDI Graphics'
	'..\Presenters\Image\Dolphin Image Presenter'
	'..\..\System\Win32\MessageBox\Dolphin Message Box'
	'..\Icons\Dolphin Text Tile Icons'
	'Gdiplus'
).

package!

"Loose Methods"!

!Graphics.Gdiplus.AbstractCustomLineCap class methodsFor!

icon
	^##((TextTileIcon text: $\x22B6 fontName: 'Segoe UI') yourself)! !

!Graphics.Gdiplus.AbstractCustomLineCap class categoriesForMethods!
icon!constants!public! !
!

!Graphics.Gdiplus.AdjustableArrowCap class methodsFor!

exampleGdipAACArrowCap
	"This example displays several lines with arrow caps, showing the effects of changing aspects.

		self exampleGdipAACArrowCap showExample
	"

	| bitmap graphics arrowCap pen |
	bitmap := Bitmap extent: 350 @ 300.
	graphics := bitmap graphics.
	graphics smoothingMode: SmoothingModeHighQuality.
	arrowCap := AdjustableArrowCap
				height: 10
				width: 10
				isFilled: false.
	arrowCap widthScale: 2.
	pen := Pen red width: 2.
	pen customEndCap: arrowCap.
	graphics drawLine: (20 @ 20 extent: 250 @ 0) pen: pen.
	arrowCap strokeJoin: LineJoinRound.
	pen customStartCap: arrowCap.
	arrowCap isFilled: true.
	pen customEndCap: arrowCap.
	graphics drawLine: (20 @ 70 extent: 250 @ 0) pen: pen.
	pen customStartCap: arrowCap.
	arrowCap height: 20.
	pen customEndCap: arrowCap.
	graphics drawLine: (20 @ 120 extent: 250 @ 0) pen: pen.
	pen customStartCap: arrowCap.
	arrowCap width: 10.
	pen customEndCap: arrowCap.
	graphics drawLine: (20 @ 170 extent: 250 @ 0) pen: pen.
	pen customStartCap: arrowCap.
	arrowCap middleInset: 5.
	pen customEndCap: arrowCap.
	graphics drawLine: (20 @ 220 extent: 250 @ 0) pen: pen.
	pen customStartCap: arrowCap.
	pen customEndCap: CustomLineCap new.
	graphics drawLine: (20 @ 270 extent: 250 @ 0) pen: pen.
	^bitmap!

icon
	^##((TextTileIcon text: $\x27A4 fontName: 'Segoe UI') yourself)! !

!Graphics.Gdiplus.AdjustableArrowCap class categoriesForMethods!
exampleGdipAACArrowCap!examples!public!unit tests! !
icon!constants!public! !
!

!Graphics.Gdiplus.Bitmap class methodsFor!

exampleGdipBFromBitmap
	"This example displays a GdiplusBitmap created from a bitmap that's a copy of an icon.

		self exampleGdipBFromBitmap showExample
	"

	| bmp |
	bmp := Graphics.Bitmap
				gdipCopyOfIcon: self icon
				extent: 32 @ 32
				backcolor: Color black.
	^Bitmap fromBitmap: bmp!

exampleGdipBFromByteArray
	"This example displays a GdiplusBitmap created from a ByteArray.

		self exampleGdipBFromByteArray showExample
	"

	| testBytes |
	testBytes := self fileResource fish32x32pngBytes.
	^Bitmap fromByteArray: testBytes!

exampleGdipBFromDIB
	"This example creates aGdiplusBitmap from a DIBSection.

		self exampleGdipBFromDIB showExample
	"

	| bmp |
	bmp := DIBSection
				gdipCopyOfIcon: self icon
				extent: 256 @ 256
				backcolor: Color black.
	^Bitmap fromBitmap: bmp!

exampleGdipBFromXPIcon
	"This example creates aGdiplusBitmap from an Icon file.
	The file contains  three XP formats; 16x16/32x32/48x48

		self exampleGdipBFromXPIcon showExample
	"

	| testIcon |
	testIcon := Icon fromFile: self fileResource pafWinXP32x32ico.
	^Bitmap fromIcon: testIcon!

exampleGdipBResize1
	"This example creates an image from an existing file and then creates several copies 
	of the image, each resized a different way.  The copies are all displayed, each with a 
	thin black line around the image bounds.

		self exampleGdipBResize1 showExample
	"

	| bitmap image copy1 copy2 copy3 copy4 |
	bitmap := Bitmap extent: 620 @ 200.
	image := Image fromFile: self fileResource pafEyeJpg.
	copy1 := Bitmap fromImage: image extent: 100 @ 150.
	copy2 := Bitmap fromImage: image centeredIn: 100 @ 150.
	copy3 := Bitmap fromImage: image scaledBy: 1 / 4.
	copy4 := Bitmap fromImage: image crop: (180 @ 220 extent: 200 @ 150).
	bitmap graphics
		drawImage: copy1 at: 10 @ 10;
		drawRectangle: (10 @ 10 extent: copy1 extent);
		drawString: 'withExtent:' at: 10 @ 170;
		drawImage: copy2 at: 120 @ 10;
		drawRectangle: (120 @ 10 extent: copy2 extent);
		drawString: 'withCentering:' at: 120 @ 170;
		drawImage: copy3 at: 230 @ 10;
		drawRectangle: (230 @ 10 extent: copy3 extent);
		drawString: 'withScale:' at: 230 @ 170;
		drawImage: copy4 at: 400 @ 10;
		drawRectangle: (400 @ 10 extent: copy4 extent);
		drawString: 'withCrop:' at: 400 @ 170.
	^bitmap!

exampleGdipBResize2
	"This example resizes an image from an existing file and saves the resized image to a file.

		self exampleGdipBResize2 showExample
	"

	| image resizedImage toFile |
	image := self fromFile: self fileResource pafSeattleNightJpg.
	resizedImage := Bitmap fromImage: image scaledBy: 1 / 3.
	toFile := self fileResource fileLocator localFileSpecFor: 'testResize.jpg'.
	resizedImage saveToFile: toFile.
	^self fromFile: toFile!

exampleGdipBResize3
	"This example resizes an image from an existing file and saves the resized image to a file.

		self exampleGdipBResize3 showExample
	"

	| image resizedImage toFile |
	image := self fromFile: self fileResource pafSeattleNightJpg.
	resizedImage := Bitmap fromImage: image centeredIn: 400 @ 200.
	toFile := self fileResource fileLocator localFileSpecFor: 'testResize.png'.
	resizedImage saveToFile: toFile.
	^self fromFile: toFile! !

!Graphics.Gdiplus.Bitmap class categoriesForMethods!
exampleGdipBFromBitmap!examples!public!sunit! !
exampleGdipBFromByteArray!examples!public!sunit! !
exampleGdipBFromDIB!examples!public!sunit! !
exampleGdipBFromXPIcon!examples!public!sunit! !
exampleGdipBResize1!examples!public!sunit! !
exampleGdipBResize2!examples!public!sunit! !
exampleGdipBResize3!examples!public!sunit! !
!

!Graphics.Gdiplus.Brush class methodsFor!

icon
	^##((TextTileIcon text: $\x1F58C fontName: 'Segoe UI Emoji')
		textcolor: Color navy;
		yourself)! !

!Graphics.Gdiplus.Brush class categoriesForMethods!
icon!constants!development!public! !
!

!Graphics.Gdiplus.CachedBitmap class methodsFor!

exampleGdipCBPerformance
	"MSDN: Using GDI+ > Using Images, Bitmaps, and Metafiles > Using a Cached Bitmap to Improve Performance
	This example creates an image from file and a cached bitmap from the image.  It draws each a number of times, then shows the elapsed times.

		UI.RichTextPresenter showOn: self exampleGdipCBPerformance
	"

	| graphics image cachedBitmap extent origin strm time bitmap |
	bitmap := Bitmap new.
	graphics := bitmap graphics.
	image := Image fromFile: 'Resources/Beach Ball.bmp' usingLocator: FileLocator installRelative.
	image forceValidation.
	strm := String smalltalkWriteStream.
	strm
		display: 'CachedBitmap drawing time';
		cr.
	extent := image extent.
	origin := 10 @ 10.
	time := 
			[100 timesRepeat: 
					[graphics
						drawImage: image
						at: origin
						extent: extent]]
					timeToRun.
	strm display: '#drawImage: '.
	time displayOn: strm.
	strm cr.
	cachedBitmap := CachedBitmap bitmap: image graphics: graphics.
	origin := 10 @ 200.
	time := [100 timesRepeat: [graphics drawCachedBitmap: cachedBitmap at: origin]] timeToRun.
	strm display: '#drawCachedBitmap: '.
	time displayOn: strm.
	^strm contents! !

!Graphics.Gdiplus.CachedBitmap class categoriesForMethods!
exampleGdipCBPerformance!examples!public!sunit! !
!

!Graphics.Gdiplus.CustomLineCap class methodsFor!

exampleGdipCLCStrokeCaps
	"This example creates a GdiplusCustomLineCap object , sets its stroke cap, and then 
	assigns the custom cap's stroke cap as the end cap of a GdiplusPen.  The pen draws a
	diagonal line.

		self exampleGdipCLCStrokeCaps showExample
	"

	| bitmap graphics path customCap pen rect |
	bitmap := Bitmap extent: 450 @ 300.
	graphics := bitmap graphics.
	graphics smoothingMode: SmoothingModeHighQuality.
	path := GraphicsPath lines: {-15 @ -15. 0 @ 0. 15 @ -15}.
	customCap := CustomLineCap strokePath: path.
	customCap startCap: LineCapTriangle endCap: LineCapRound.
	pen := Pen red width: 5.5.
	pen customEndCap: customCap.
	rect := 50 @ 50 extent: 300 @ 100.
	graphics
		drawLine: rect pen: pen;
		drawRectangle: rect pen: Pen black.
	^bitmap! !

!Graphics.Gdiplus.CustomLineCap class categoriesForMethods!
exampleGdipCLCStrokeCaps!examples!public!unit tests! !
!

!Graphics.Gdiplus.Font class methodsFor!

exampleGdipFontHeight
	"MSDN:  Font::GetHeight
	This example gets a font's line spacing and draws a few strings with different spacings between them.

		self exampleGdipFontHeight showExample
	"

	| bitmap graphics font height |
	bitmap := Bitmap extent: 450 @ 150.
	graphics := bitmap graphics.
	font := Font name: 'Arial' pointSize: 18.
	height := font heightFromGraphics: graphics.
	graphics
		drawString: 'The first line of text at the very top'
			font: font
			at: Point zero;
		drawString: 'The second line of text maybe too close'
			font: font
			at: 0 @ 0.6 * height;
		drawString: 'The third line of text is single spaced'
			font: font
			at: 0 @ 1.6 * height.
	^bitmap!

icon
	^##((TextTileIcon text: 'ᵀT' fontName: 'Segoe UI Symbol')
		textcolor: Color navy;
		yourself)! !

!Graphics.Gdiplus.Font class categoriesForMethods!
exampleGdipFontHeight!examples!public!sunit! !
icon!constants!public! !
!

!Graphics.Gdiplus.FontFamily class methodsFor!

exampleGdipFFClone
	"MSDN: FontFamily::Clone
	This example creates a GdiplusFontFamily, clones it, then creates a GdiplusFont from the clone.

		self exampleGdipFFClone showExample
	"

	| bitmap fontFamily cloneFontFamily font |
	bitmap := Bitmap extent: 250 @ 100.
	fontFamily := FontFamily name: 'arial'.
	cloneFontFamily := fontFamily clone.
	font := Font fontFamily: cloneFontFamily pointSize: 16.
	bitmap graphics
		drawString: 'This is an <1s> font' << font name
		font: font
		at: 10 @ 10.
	^bitmap!

exampleGdipFFMetrics
	"MSDN: Using GDI+ ... Using Text and Fonts ... Obtaining Font Metrics 

		UI.RichTextPresenter showOn: self exampleGdipFFMetrics
	"

	| ascent ascentPixel descent descentPixel lineSpacing lineSpacingPixel fontFamily font info |
	fontFamily := FontFamily name: 'Arial'.
	font := Font
				fontFamily: fontFamily
				emSize: 16
				style: FontStyleRegular
				unit: UnitPixel.
	info := String writeStream.
	"Display the font size in pixels."
	info
		nextPutAll: 'font.GetSize() returns ';
		print: font emSize;
		cr.

	"Display the font family em height in design units."
	info
		nextPutAll: 'fontFamily.GetEmHeight() returns ';
		print: fontFamily emHeight;
		cr;
		cr.

	"Display the ascent in design units and pixels"
	ascent := fontFamily cellAscent.
	"14.484375 = 16.0 * 1854 / 2048"
	ascentPixel := font emSize * ascent / fontFamily emHeight.
	info
		nextPutAll: 'The ascent is ';
		print: ascent;
		nextPutAll: ' design units, ';
		print: ascentPixel;
		nextPutAll: ' pixels.';
		cr.

	"Display the descent in design units and pixels."
	descent := fontFamily cellDescent.

	"3.390625 = 16.0 * 434 / 2048"
	descentPixel := font emSize * descent / fontFamily emHeight.
	info
		nextPutAll: 'The descent is ';
		print: descent;
		nextPutAll: ' design units, ';
		print: descentPixel;
		nextPutAll: ' pixels.';
		cr.

	"Display the line spacing in design units and pixels."
	lineSpacing := fontFamily lineSpacing.

	"18.398438 = 16.0 * 2355 / 2048"
	lineSpacingPixel := font emSize * lineSpacing / fontFamily emHeight.
	info
		nextPutAll: 'The line spacing is ';
		print: lineSpacing;
		nextPutAll: ' design units, ';
		print: lineSpacingPixel;
		nextPutAll: ' pixels.';
		cr.
	^info contents! !

!Graphics.Gdiplus.FontFamily class categoriesForMethods!
exampleGdipFFClone!examples!public!sunit! !
exampleGdipFFMetrics!examples!public!sunit! !
!

!Graphics.Gdiplus.GdiplusBase class methodsFor!

fileResource
	"Answer a TestResource that provides access to resources, e.g., disk files, for examples and testing."

	^#{Graphics.Gdiplus.Tests.FileResource} ifDefined: [:class | class current]
		ifNotDefined: 
			["If you encounter this error, you can load the test packages by evaluating: 
				SourceManager default fileIn: (FileLocator installRelative localFileSpecFor: 'RegressionTestsLoad.st')
			"
			self error: 'GdiplusTests package needs to be installed for this example to work.']!

icon
	^Gdiplus icon!

showExample: anImage
	"Display anImage."

	^self showExample: anImage viewMode: #normal!

showExample: anImage viewMode: aSymbol
	"Display anImage."

	| presenter |
	presenter := UI.ImagePresenter show: 'Gdiplus view' on: anImage.
	presenter view
		viewMode: aSymbol;
		isWholeBackgroundErased: true.
	presenter topShell extent: anImage extent + presenter topShell rectangle extent
				- presenter topShell clientRectangle extent.
	^presenter! !

!Graphics.Gdiplus.GdiplusBase class categoriesForMethods!
fileResource!examples!public! !
icon!constants!public! !
showExample:!examples!public! !
showExample:viewMode:!examples!public! !
!

!Graphics.Gdiplus.GdiplusGraphics class methodsFor!

exampleGdipGAlphaBlending
	"Using GDI+ .... Alpha Blending Lines and Fills ... Using Compositing Mode to Control Alpha Blending 

		self exampleGdipGAlphaBlending showExample
	"

	"Create a blank bitmap."

	| bitmap graphics redBrush greenBrush bitmap2 graphics2 |
	bitmap := Bitmap width: 180 height: 100.
	"Create a Graphics object that we can use to draw on the bitmap."
	graphics := bitmap graphics.
	"Create a red brush and a green brush, each with an alpha value of 160."
	redBrush := Brush color: (Color fromArray: #(210 255 0 0)).
	greenBrush := Brush color: (Color fromArray: #(210 0 255 0)).
	"Set the compositing mode so that when we draw overlapping ellipses, 
	the colors of the ellipses are not blended."
	graphics compositingMode: CompositingModeSourceCopy.
	"Fill an ellipse using a red brush that has an alpha value of 160."
	graphics fillEllipse: (0 @ 0 extent: 150 @ 70) brush: redBrush.
	"Fill a second ellipse using green brush that has an alpha value of 160. 
	The green ellipse overlaps the red ellipse, but the green is not blended with the red."
	graphics fillEllipse: (30 @ 30 extent: 150 @ 70) brush: greenBrush.
	"Prepare to draw on the screen."
	bitmap2 := Bitmap extent: 400 @ 200.
	bitmap2 erase.
	graphics2 := bitmap2 graphics.
	graphics2 compositingQuality: CompositingQualityGammaCorrected.
	"Draw a multicolored background."
	graphics2 fillRectangle: (200 @ 0 extent: 60 @ 100) brush: (Brush color: Color aqua).
	graphics2 fillRectangle: (260 @ 0 extent: 60 @ 100) brush: (Brush color: Color yellow).
	graphics2 fillRectangle: (320 @ 0 extent: 60 @ 100) brush: (Brush color: Color fuchsia).
	"Display the bitmap with a white background."
	graphics2 drawImage: bitmap.
	"Display the bitmap with a multicolored background."
	graphics2 drawImage: bitmap at: 200 @ 0.
	^bitmap2!

exampleGdipGCropAndScale
	"This example draws an image with its upper-left corner at (0, 0) and then draws a portion 
	of the image, scaled so that it fills a specified destination rectangle.

		self exampleGdipGCropAndScale showExample
	"

	| image bitmap |
	bitmap := Bitmap extent: 800 @ 400.
	image := Image fromFile: 'Resources/Beach Ball.bmp' usingLocator: FileLocator installRelative.
	bitmap graphics
		drawImage: image at: 0 @ 0;
		drawImage: image
			at: 50 @ 100
			extent: (image extent * 1.3) ceiling
			from: 0 @ 0
			extent: (image extent * 0.7) ceiling.
	^bitmap!

exampleGdipGDrawingALine
	"From MSDN: Using GDI+ > Getting Started > Drawing a Line
	This example uses a pen to draw a line on a Graphics object (which is obtained from an Image (bitmap).

		self exampleGdipGDrawingALine showExample
	"

	| bitmap |
	bitmap := Bitmap extent: 250 @ 200.
	bitmap graphics
		drawLineFrom: 10 @ 10
		to: 200 @ 100
		pen: Pen red.
	^bitmap!

exampleGdipGDrawingAString
	"From MSDN: Using GDI+ > Getting Started > Drawing a String.
	This example draws a string on a Graphics object, using font and brush objects.
	The font is actually derived from a GdiplusFontFamily object, using the helper constructor 
	in GdiplusFont.  A second string is drawn relying on defaults for font and brush.

		self exampleGdipGDrawingAString showExample
	"

	| bitmap font |
	bitmap := Bitmap extent: 250 @ 100.
	font := Font name: 'Times New Roman' pointSize: 24.
	bitmap graphics
		drawString: 'Hello Dolphin!!'
			font: font
			at: 10 @ 20
			format: nil
			brush: Brush blue;
		drawString: 'Hello Lagoon' at: 10 @ 75.
	^bitmap!

exampleGdipGDrawingShapes
	"This example draws and fills a number of shapes, including arcs, pies, and curves.

		self exampleGdipGDrawingShapes showExample
	"

	| bitmap graphics redPen blackPen greenBrush rectEllipse polygonPoints arcRect pieRect bezierPoints curvePoints closedCurvePoints |
	bitmap := Bitmap extent: 700 @ 400.
	graphics := bitmap graphics.
	redPen := Pen red width: 5.
	blackPen := Pen black.
	greenBrush := Brush green.
	"Ellipse: Draw and fill."
	rectEllipse := 10 @ 10 extent: 200 @ 100.
	graphics drawEllipse: rectEllipse pen: redPen.
	graphics fillEllipse: rectEllipse brush: greenBrush.
	graphics drawRectangle: rectEllipse pen: blackPen.
	"Polygon: Draw and fill."
	polygonPoints := (OrderedCollection
				with: 100 @ 130
				with: 200 @ 160
				with: 150 @ 230
				with: 50 @ 230)
				add: 10 @ 160;
				yourself.
	graphics drawPolygon: polygonPoints pen: redPen.
	graphics fillPolygon: polygonPoints brush: greenBrush.
	1 to: polygonPoints size do: [:i | graphics drawString: i displayString at: (polygonPoints at: i)].
	"Arc: Draw"
	arcRect := rectEllipse translateBy: 220 @ 0.
	graphics
		drawArc: arcRect
		pen: redPen
		startAngle: 90
		sweepAngle: 215.
	graphics drawRectangle: arcRect pen: blackPen.
	"Pie: Draw and fill."
	pieRect := arcRect translateBy: 0 @ 120.
	graphics
		drawPie: pieRect
		pen: redPen
		startAngle: 0
		sweepAngle: 215.
	graphics
		fillPie: pieRect
		brush: greenBrush
		startAngle: 0
		sweepAngle: 215.
	graphics drawRectangle: pieRect pen: blackPen.
	"Bezier: Draw"
	bezierPoints := (polygonPoints collect: [:e | 0 @ 120 + e])
				removeLast;
				yourself.
	graphics drawBezier: bezierPoints pen: redPen.
	graphics drawPolygon: bezierPoints pen: blackPen.
	1 to: 4 do: [:i | graphics drawString: i displayString at: (bezierPoints at: i)].
	"Curve:  Draw"
	curvePoints := (polygonPoints collect: [:e | 220 @ 120 + e])
				removeAtIndex: 3;
				yourself.
	graphics drawCurve: curvePoints pen: redPen.	"same as with tension: 0.5"
	graphics
		drawCurve: curvePoints
		pen: blackPen
		tension: 0.
	graphics
		drawCurve: curvePoints
		pen: (Pen blue width: 3)
		tension: 1.
	graphics
		drawCurve: curvePoints
		pen: (Pen green width: 3)
		tension: 2.
	1 to: curvePoints size do: [:i | graphics drawString: i displayString at: (curvePoints at: i)].
	"Closed Curve:  Draw and fill"
	closedCurvePoints := (polygonPoints collect: [:e | 440 @ -120 + e])
				removeAtIndex: 3;
				yourself.
	graphics
		drawClosedCurve: closedCurvePoints
		pen: blackPen
		tension: 0.
	graphics
		drawClosedCurve: closedCurvePoints
		pen: redPen
		tension: 0.5.
	graphics
		drawClosedCurve: closedCurvePoints
		pen: (Pen blue width: 3)
		tension: -1.
	graphics
		drawClosedCurve: closedCurvePoints
		pen: (Pen green width: 3)
		tension: -2.
	1 to: curvePoints size do: [:i | graphics drawString: i displayString at: (closedCurvePoints at: i)].
	^bitmap!

exampleGdipGFromCanvas
	"This example creates aGdiplusGraphics from a Canvas.

		self showExample: self exampleGdipGFromCanvas
	"

	| bmp canvas graphics |
	bmp := DIBSection
				width: 256
				height: 256
				depth: 32.
	canvas := bmp canvas.
	self icon
		drawOn: bmp canvas
		at: 0 @ 0
		extent: 256 @ 256.
	canvas := bmp canvas.
	graphics := GdiplusGraphics fromCanvas: canvas.
	graphics drawString: 'Hi' at: 120 @ 120.
	bmp freeDC.
	^bmp!

exampleGdipGMeasureString
	"MSDN: GDI+ Reference > Classes > Graphics > Graphics Methods > MeasureString Methods
	This example draws a string, then measures the string size and draws a rectangle around it.

		self exampleGdipGMeasureString showExample
	"

	| bitmap graphics string font layoutRect format boundRect |
	bitmap := Bitmap extent: 300 @ 200.
	graphics := bitmap graphics.
	string := 'Measure the size of text to be placed in a rectangle.'.
	font := Font name: 'Arial' pointSize: 16.
	layoutRect := 30 @ 20 extent: 200 @ 125.
	format := StringFormat centered.
	boundRect := graphics
				measureString: string
				font: font
				rect: layoutRect
				format: format.
	graphics
		drawRectangle: layoutRect pen: Pen black;
		drawRectangle: boundRect pen: Pen blue;
		drawString: string
			font: font
			rect: layoutRect
			format: format
			brush: Brush blue.
	^bitmap!

exampleGdipGRotate
	"MSDN:   GDI+ >  GDI+ Reference >  Classes >  Graphics >  Graphics Methods > RotateTransform
	This example draws two ellipses (in black) and then rotates both (in red).  Notice the text in the
	rotated ellipses is also rotated.
	
		self  exampleGdipGRotate showExample
	"

	| bitmap graphics rect1 rect2 format |
	bitmap := Bitmap extent: 400 @ 350.
	graphics := bitmap graphics.
	rect1 := 0 @ 0 extent: 200 @ 80.
	rect2 := 150 @ 75 extent: 200 @ 80.
	format := StringFormat centered.
	graphics
		translate: 25 @ 0;
		drawEllipse: rect1 pen: Pen red;
		rotate: 30;
		drawEllipse: rect1 pen: Pen red;
		drawString: '#1 rotated'
			font: nil
			rect: rect1
			format: format
			brush: Brush red;
		resetTransform;
		translate: 25 @ 0;
		drawEllipse: rect2 pen: Pen blue;
		rotate: 30;
		drawEllipse: rect2 pen: Pen blue;
		drawString: '#2 rotated'
			font: nil
			rect: rect2
			format: format
			brush: Brush blue.
	^bitmap!

exampleGdipGShear
	"
		self exampleGdipGShear showExample
	"

	| bitmap graphics rect dashPen |
	bitmap := Bitmap extent: 550 @ 150.
	graphics := bitmap graphics.
	rect := 0 @ 0 extent: 200 @ 100.
	dashPen := Color gray gdiplusPen
				dashStyle: DashStyleDot;
				yourself.
	graphics
		drawRectangle: rect pen: dashPen;
		drawEllipse: rect pen: Pen black;
		shear: 3 @ 0;
		drawRectangle: rect pen: dashPen;
		drawEllipse: rect pen: Pen red.
	^bitmap!

exampleGdipGTransformations
	"MSDN:  GDI+ >  Using GDI+ >  Transformations > Using the World Transformation
	This example draws a rectangle, then applies several transformations to a graphics, drawing
	the rectangle each time.

		self exampleGdipGTransformations showExample
	"

	| bitmap graphics rect transform |
	bitmap := Bitmap extent: 550 @ 350.
	graphics := bitmap graphics.
	rect := 100 @ 50 extent: 100 @ 100.
	graphics
		drawRectangle: rect;
		drawString: 'Original' at: rect origin;
		scale: 1.75 @ 0.75;
		drawRectangle: rect pen: Pen red;
		drawString: 'Scaled'
			font: nil
			at: rect origin
			brush: Brush red;
		rotate: 28;
		drawRectangle: rect pen: Pen blue;
		drawString: ' and Rotated'
			font: nil
			at: rect origin
			brush: Brush blue;
		translate: 150 @ 0;
		drawRectangle: rect;
		drawString: ' and Translated' at: rect origin.
	transform := graphics transform asArray collect: [:e | e roundTo: 1.0e-002].
	graphics resetTransform drawString: 'Final world transform: ' , transform displayString at: 10 @ 250.
	^bitmap!

exampleGdipGTransformPoints
	"MSDN:  GDI+ >  GDI+ Reference >  Classes >  Graphics >  Graphics Methods > TransformPoints
	This example shows how GdiplusGraphics>>transformPoints actually changes the points
	in an array.  A set of points is drawn, then the graphics is transformed and the points are
	transformed according to the graphics' transformation.  The graphics transformation is reset
	and the points are drawn again, showing the points have been transformed.

		self exampleGdipGTransformPoints showExample
	"

	| bitmap pen points graphics |
	bitmap := Bitmap extent: 300 @ 200.
	pen := Pen blue width: 5.
	points := {10 @ 10. 150 @ 50}.
	graphics := bitmap graphics.
	graphics
		drawLineFrom: points first
			to: points second
			pen: pen;
		translate: 30 @ 60.
	points := graphics
				transformPoints: points
				destSpace: CoordinateSpacePage
				srcSpace: CoordinateSpaceWorld.
	graphics
		resetTransform;
		drawLineFrom: points first
			to: points second
			pen: pen.
	^bitmap!

exampleGdipMeasureCharacterRanges
	"Ported from: https://docs.microsoft.com/en-us/windows/win32/api/gdiplusgraphics/nf-gdiplusgraphics-graphics-measurecharacterranges, with a minor change to include non-ascii characters:

		self exampleGdipMeasureCharacterRanges showExample
	"

	| bitmap graphics blueBrush redBrush blackPen charRanges layoutRect_A layoutRect_B layoutRect_C strFormat charRangeRegions string myFont |
	bitmap := Bitmap width: 510 height: 160.
	"Create a Graphics object that we can use to draw on the bitmap."
	graphics := bitmap graphics.
	"Brushes and pens used for drawing and painting"
	blueBrush := Brush color: (Color fromArray: #(255 0 0 255)).
	redBrush := Brush color: (Color fromArray: #(100 255 0 0)).
	blackPen := Pen color: (Color fromArray: #(255 0 0 0)).

	"Layout rectangles used for drawing strings"
	layoutRect_A := 20 @ 20 extent: 130 @ 130.
	layoutRect_B := 160 @ 20 extent: 165 @ 130.
	layoutRect_C := 335 @ 20 extent: 165 @ 130.

	"Three different ranges of character positions within the string expressed as first position and length pairs."
	"Note that per Smalltalk conventions we use Intervals with 1-based positions, whereas the source example is zero-based"
	charRanges := {5 to: 9. 16 to: 18. 31 to: 45}.

	"Font and string format to apply to string when drawing"
	myFont := Font name: 'Segoe UI Emoji' pointSize: 14.0.
	strFormat := StringFormat new.

	"Other variables"
	string := 'The quick, blue 🐬 easily jumps over the lazy 🐕.'.

	"Set three ranges of character positions."
	strFormat measurableCharacterRanges: charRanges.

	"Get the regions that correspond to the ranges within the string when
	layout rectangle A is used. Then draw the string, and show the regions."
	charRangeRegions := graphics
				measureCharacterRanges: string
				font: myFont
				rect: layoutRect_A
				format: strFormat.
	graphics
		drawString: string
		font: myFont
		rect: layoutRect_A
		format: strFormat
		brush: blueBrush.
	graphics drawRectangle: layoutRect_A pen: blackPen.
	charRangeRegions do: [:each | graphics fillRegion: each brush: redBrush].
	"charRangeRegions collect: [:each | each bounds: graphics]"

	"Get the regions that correspond to the ranges within the string when
	layout rectangle B is used. Then draw the string, and show the regions."
	charRangeRegions := graphics
				measureCharacterRanges: string
				font: myFont
				rect: layoutRect_B
				format: strFormat.
	graphics
		drawString: string
		font: myFont
		rect: layoutRect_B
		format: strFormat
		brush: blueBrush.
	graphics drawRectangle: layoutRect_B pen: blackPen.
	charRangeRegions do: [:each | graphics fillRegion: each brush: redBrush].

	"Get the regions that correspond to the ranges within the string when
	layout rectangle C is used. Set trailing spaces to be included in the
	regions. Then draw the string, and show the regions."
	strFormat flags: StringFormatFlagsMeasureTrailingSpaces.
	charRangeRegions := graphics
				measureCharacterRanges: string
				font: myFont
				rect: layoutRect_C
				format: strFormat.
	graphics
		drawString: string
		font: myFont
		rect: layoutRect_C
		format: strFormat
		brush: blueBrush.
	graphics drawRectangle: layoutRect_C pen: blackPen.
	charRangeRegions do: [:region | graphics fillRegion: region brush: redBrush].
	^bitmap!

exampleGdipNestedContainers
	"MSDN:  Using GDI+ >  Using Graphics Containers > Nested Graphics Containers

		self exampleGdipNestedContainers showExample
	"

	| bitmap graphics brush container redPen bluePen greenBrush outerContainer innerContainer path region font |
	bitmap := Bitmap extent: 650 @ 450.
	"Transformations in Nested Containers"
	redPen := Pen red.
	graphics := bitmap graphics.
	graphics translate: 100 @ 80.
	container := graphics beginContainer.
	graphics
		rotate: 30;
		drawRectangle: (-60 @ -30 extent: 120 @ 60) pen: redPen;
		endContainer: container;
		drawRectangle: (-60 @ -30 extent: 120 @ 60) pen: redPen.

	"Clipping in Nested Containers"
	redPen := Pen red width: 2.
	bluePen := Pen blue width: 2.
	greenBrush := Brush color: Color paleGreen.
	graphics clip: (50 @ 65 extent: 150 @ 120).
	graphics clear: Color aqua.
	container := graphics beginContainer.
	path := GraphicsPath ellipse: (75 @ 50 extent: 100 @ 150).
	region := Region fromPath: path.
	graphics
		fillRegion: region brush: greenBrush;
		clip: region;
		drawLine: (50 @ 0 extent: 350 @ 300) pen: redPen;
		endContainer: container;
		drawLine: (70 @ 0 extent: 370 @ 300) pen: bluePen.

	"Several Layers of Nested Containers"
	graphics resetClip translate: 175 @ 175.
	brush := Brush blue.
	font := Font name: 'Times New Roman' pointSize: 36.
	graphics textRenderingHint: TextRenderingHintAntiAlias.
	outerContainer := graphics beginContainer.
	graphics textRenderingHint: TextRenderingHintSingleBitPerPixel.
	innerContainer := graphics beginContainer.
	graphics
		textRenderingHint: TextRenderingHintAntiAlias;
		drawString: 'Inner Container'
			font: font
			at: 20 @ 10
			format: nil
			brush: brush;
		endContainer: innerContainer;
		drawString: 'Outer Container'
			font: font
			at: 20 @ 50
			format: nil
			brush: brush;
		endContainer: outerContainer;
		drawString: 'Graphics Object'
			font: font
			at: 20 @ 90
			format: nil
			brush: brush.
	^bitmap!

exampleGdipState
	"MSDN:  Using GDI+ >  Using Graphics Containers > The State of a Graphics Object

		self exampleGdipState
	"

	"Quality Settings"

	| bitmap graphics pen brush region |
	bitmap := Bitmap extent: 250 @ 275 dpi: 96.
	graphics := bitmap graphics.
	pen := Pen red width: 5.
	graphics smoothingMode: SmoothingModeAntiAlias.
	graphics drawEllipse: (10 @ 10 extent: 200 @ 100) pen: pen.
	graphics smoothingMode: SmoothingModeHighSpeed.
	graphics drawEllipse: (10 @ 150 extent: 200 @ 100) pen: pen.
	bitmap showExample.

	"Transformations"
	bitmap := Bitmap extent: 325 @ 325 dpi: 96.
	graphics := bitmap graphics.
	pen := Pen red.
	graphics resetTransform.
	graphics rotate: 30.
	graphics drawEllipse: (50 @ 10 extent: 50 @ 25) pen: pen.
	graphics pageUnit: UnitMillimeter.
	graphics drawEllipse: (50 @ 10 extent: 50 @ 25) pen: pen.
	bitmap showExample.

	"Clipping Region"
	bitmap := Bitmap extent: 175 @ 175 dpi: 96.
	graphics := bitmap graphics.
	pen := Pen red width: 5.
	brush := Brush color: (Color fromArray: #(255 180 255 255)).
	"Create a plus-shaped region by forming the union of two rectangles."
	region := (Region fromRectangle: (50 @ 0 extent: 50 @ 150)) union: (0 @ 50 extent: 150 @ 50).
	graphics fillRegion: region brush: brush.
	"Set the clipping region."
	graphics clip: region.
	"Draw two clipped lines."
	graphics drawLine: (0 @ 30 corner: 150 @ 160) pen: pen.
	graphics drawLine: (40 @ 20 corner: 190 @ 150) pen: pen.
	bitmap showExample! !

!Graphics.Gdiplus.GdiplusGraphics class categoriesForMethods!
exampleGdipGAlphaBlending!examples!public!sunit! !
exampleGdipGCropAndScale!examples!public!sunit! !
exampleGdipGDrawingALine!examples!public!sunit! !
exampleGdipGDrawingAString!examples!public!sunit! !
exampleGdipGDrawingShapes!examples!public!sunit! !
exampleGdipGFromCanvas!examples!public!sunit! !
exampleGdipGMeasureString!examples!public!sunit! !
exampleGdipGRotate!examples!public!sunit! !
exampleGdipGShear!examples!public!sunit! !
exampleGdipGTransformations!examples!public!sunit! !
exampleGdipGTransformPoints!examples!public!sunit! !
exampleGdipMeasureCharacterRanges!examples!public!sunit! !
exampleGdipNestedContainers!examples!public!sunit! !
exampleGdipState!examples!public! !
!

!Graphics.Gdiplus.GradientBrush class methodsFor!

icon
	"Demonstrates use of a (Linear)GradientBrush for painting the background of a TextTileIcon"

	^##((TextTileIcon
		text: $\x1F58C
		fontName: 'Segoe UI Emoji'
		color: (LinearGradientBrush
				rect: (0 @ 0 extent: 256 @ 256)
				color1: Color white
				color2: Color seaGreen
				mode: LinearGradientModeForwardDiagonal))
		textcolor: Color white;
		yourself)! !

!Graphics.Gdiplus.GradientBrush class categoriesForMethods!
icon!constants!public! !
!

!Graphics.Gdiplus.GraphicsPath class methodsFor!

exampleAddString
	"
		self exampleAddString showExample
	"

	| bitmap path font graphics |
	bitmap := Bitmap extent: 450 @ 200.
	font := Font name: 'Times New Roman' pixelSize: 64.
	path := GraphicsPath new.
	path
		addString: 'Hello World'
		font: font
		rectangle: (20 @ 20 extent: 175 @ 100)
		format: nil.
	graphics := bitmap graphics.
	graphics
		fillPath: path brush: Brush red;
		drawPath: path;
		drawString: '<1p> points' << path pointCount at: path bounds bottomLeft + 5.
	"We can flatten the path to reduce the number of points"
	path flatten: (Matrix new
				translate: 200 @ 0;
				yourself)
		flatness: 0.5.
	graphics
		fillPath: path brush: Brush green;
		drawPath: path;
		drawString: '<1p> points' << path pointCount at: path bounds bottomLeft + 5.
	^bitmap!

exampleGdipGPCreatingFigures
	"MSDN:  Using GDI+ >  Constructing and Drawing Paths > Creating Figures from Lines, Curves, and Shapes

		self exampleGdipGPCreatingFigures showExample
	"

	| bitmap graphics path pen brush |
	bitmap := Bitmap extent: 400 @ 300.
	graphics := bitmap graphics.
	pen := Pen red.
	path := GraphicsPath new.
	path addArc: (0 @ 0 extent: 50 @ 50) angles: 0 @ -180.
	graphics drawPath: path pen: pen.
	"Create and draw a path that has two figures. The first is an arc followed by a line. The second 
	is a line followed by a curve, followed by a line. The first is left open, and the second is closed."
	pen color: Color blue.
	path := GraphicsPath new.
	graphics translateTransform: 100 @ 0 order: nil.
	path addArc: (175 @ 50 extent: 50 @ 50) angles: 0 @ 180.
	path addLineFrom: 100 @ 0 to: 250 @ 20.
	path startFigure.
	path addLineFrom: 50 @ 20 to: 5 @ 90.
	path addCurve: {40 @ 60. 50 @ 70. 30 @ 90}.
	path addLineFrom: 50 @ 150 to: 150 @ 180.
	path closeFigure.
	graphics drawPath: path pen: pen.
	"Create, draw and fill a path that has two lines, a rectangle, and an ellipse."
	path := GraphicsPath new.
	graphics translateTransform: -100 @ 100 order: nil.
	pen color: Color red.
	brush := Brush color: Color darkGreen.
	path addLineFrom: 10 @ 10 to: 100 @ 40.
	path addLineFrom: 100 @ 60 to: 30 @ 60.
	path addRectangle: (50 @ 35 extent: 20 @ 40).
	path addEllipse: (10 @ 75 extent: 40 @ 30).
	graphics drawPath: path pen: pen.
	graphics fillPath: path brush: brush.
	^bitmap!

exampleGdipGPFillingFigures
	"MSDN:   GDI+ >  Using GDI+ >  Constructing and Drawing Paths > Filling Open Figures

		self exampleGdipGPFillingFigures showExample
	"

	| path pen brush bitmap |
	path := GraphicsPath new.
	path addArc: (0 @ 0 extent: 150 @ 120) angles: 30 @ 120.
	path addEllipse: (50 @ 50 extent: 50 @ 100).
	pen := Pen blue width: 5.
	brush := Brush red.
	bitmap := Bitmap extent: 200 @ 200.
	bitmap graphics
		fillPath: path brush: brush;
		drawPath: path pen: pen.
	^bitmap!

exampleGdipGPGetBounds
	"
		self exampleGdipGPGetBounds showExample
	"

	| bitmap graphics yellowPen pts path rect |
	bitmap := Bitmap extent: 400 @ 400.
	graphics := bitmap graphics.
	yellowPen := Pen color: Color yellow width: 10.
	pts := {120 @ 120. 200 @ 130. 150 @ 200. 130 @ 180}.

	"Create a path that has one curve and one ellipse"
	path := GraphicsPath new
				addClosedCurve: pts;
				addEllipse: (120 @ 220 extent: 100 @ 40);
				yourself.

	"Draw the path with a thick yellow pen and a thin black pen."
	graphics
		drawPath: path pen: yellowPen;
		drawPath: path.

	"Get the path's bounding rectangle."
	rect := path boundsWithPen: yellowPen.
	"This is much larger than I'd expect."
	graphics drawRectangle: rect pen: Pen red.
	^bitmap!

exampleGdipGPRotate
	"
		self  exampleGdipGPRotate showExample
	cf.
		GdiplusGraphics exampleGdipGRotate showExample
	"

	| bitmap graphics rect1 rect2 path path2 |
	bitmap := Bitmap extent: 400 @ 350.
	graphics := bitmap graphics.
	rect1 := 0 @ 0 extent: 200 @ 80.
	path := self ellipse: rect1.
	rect2 := 150 @ 75 extent: 200 @ 80.
	graphics
		translate: 25 @ 0;
		drawPath: path pen: Pen red.
	path rotate: 30.
	graphics
		drawPath: path pen: Pen red;
		rotate: 30;
		drawString: '#1 rotated'
			font: nil
			rect: rect1
			format: StringFormat centered
			brush: Brush red;
		resetTransform.
	path2 := self ellipse: rect2.
	graphics
		translate: 25 @ 0;
		drawPath: path2 pen: Pen blue.
	path2 rotate: 30.
	graphics
		drawPath: path2 pen: Pen blue;
		rotate: 30;
		drawString: '#2 rotated'
			font: nil
			rect: rect2
			format: StringFormat centered
			brush: Brush blue.
	^bitmap!

exampleGdipGPShear
	"
		self exampleGdipPShear showExample
	cf.
		GdiplusGraphics exampleGdipGShear showExample
	"

	| bitmap graphics rect dashPen path |
	bitmap := Bitmap extent: 550 @ 150.
	graphics := bitmap graphics.
	rect := 0 @ 0 extent: 200 @ 100.
	dashPen := Color gray gdiplusPen
				dashStyle: DashStyleDot;
				yourself.
	path := GraphicsPath ellipse: rect.
	graphics
		drawRectangle: rect pen: dashPen;
		drawPath: path;
		shear: 3 @ 0;
		drawRectangle: rect pen: dashPen;
		resetTransform.
	path shear: 3 @ 0.
	graphics drawPath: path pen: Pen red.
	^bitmap!

exampleGdipGPShear2
	"
		self exampleGdipPShear2 showExample
	cf.
		Matrix exampleGdipMShear showExample
	"

	| bitmap graphics rect path |
	bitmap := Bitmap extent: 550 @ 150.
	graphics := bitmap graphics.
	rect := 0 @ 0 extent: 100 @ 50.
	path := self fromRectangle: rect.
	graphics drawPath: path.
	path scale: 2 @ 2.
	graphics drawPath: path pen: Pen blue.
	path shear: 3 @ 0.
	graphics drawPath: path pen: Pen red.
	^bitmap!

icon
	^##((TextTileIcon text: $\x2307 fontName: 'Segoe UI')
		textcolor: Color navy;
		yourself)! !

!Graphics.Gdiplus.GraphicsPath class categoriesForMethods!
exampleAddString!examples!public!sunit! !
exampleGdipGPCreatingFigures!examples!public!sunit! !
exampleGdipGPFillingFigures!examples!public!sunit! !
exampleGdipGPGetBounds!examples!public!sunit! !
exampleGdipGPRotate!examples!public!sunit! !
exampleGdipGPShear!examples!public!sunit! !
exampleGdipGPShear2!examples!public!sunit! !
icon!constants!public! !
!

!Graphics.Gdiplus.HatchBrush class methodsFor!

exampleGdipHBFillAShape
	"MSDN: GDI+ > Using GDI+ > Using a Brush to Fill Shapes > Filling a Shape with a Hatch Pattern
	This example fills an ellipse with a hatch pattern.

		self exampleGdipHBFillAShape showExample
	"

	| bitmap brush |
	bitmap := Bitmap extent: 250 @ 150.
	brush := HatchBrush
				style: HatchStyleHorizontal
				forecolor: Color red
				backcolor: Color cyan.
	bitmap graphics fillEllipse: (10 @ 10 extent: 200 @ 100) brush: brush.
	^bitmap!

exampleGdipHBFillAString
	"This example fills a string with a hatch pattern.

		self exampleGdipHBFillAString showExample
	"

	| bitmap brush font |
	bitmap := Bitmap extent: 600 @ 150.
	brush := HatchBrush
				style: HatchStyleLargeConfetti
				forecolor: Color yellow
				backcolor: Color blue.
	font := Font name: 'Arial' pointSize: 72.
	bitmap graphics
		drawString: 'Hello Dolphin'
		font: font
		at: 10 @ 10
		format: nil
		brush: brush.
	^bitmap!

exampleGdipHBStyles
	"This example displays the effects of all HatchStyle constants.

		self exampleGdipHBStyles showExample
	"

	| bitmap brush font row col corner graphics |
	bitmap := Bitmap extent: 800 @ 530.
	font := Font name: 'Arial' pointSize: 10.
	graphics := bitmap graphics.
	0 to: HatchStyleMax
		do: 
			[:i |
			| styleName rect |
			brush := HatchBrush
						style: i
						forecolor: Color red
						backcolor: Color yellow.
			col := i \\ 8.
			row := (i / 8) truncated.
			corner := (col * 100 + 5) @ (row * 75 + 5).
			styleName := brush hatchStyleName.
			rect := corner extent: 90 @ 65.
			graphics
				fillRectangle: rect brush: brush;
				drawString: (styleName midString: styleName size - 10 from: 11)
					font: font
					rect: rect
					format: nil
					brush: nil.
			brush free].
	^bitmap!

icon
	"Demonstrates use of a HatchBrush for painting the background of a TextTileIcon."

	^##((TextTileIcon
		text: $\x1F58C
		fontName: 'Segoe UI Emoji'
		color: (self
				style: HatchStyleForwardDiagonal
				forecolor: Color dialog
				backcolor: Color darkSeaGreen))
			yourself)! !

!Graphics.Gdiplus.HatchBrush class categoriesForMethods!
exampleGdipHBFillAShape!examples!public!sunit! !
exampleGdipHBFillAString!examples!public!sunit! !
exampleGdipHBStyles!examples!public!sunit! !
icon!constants!public! !
!

!Graphics.Gdiplus.Image class methodsFor!

createMultiframeImage
	| encoderParameters parameter value image1 image2 image3 toFile |
	toFile := self fileResource fileLocator localFileSpecFor: 'testMultiframeImage.tif'.
	(File exists: toFile) ifTrue: [^toFile].
	encoderParameters := EncoderParameters new Count: 1.
	parameter := encoderParameters Parameter first.
	value := UInt32Bytes new.
	parameter
		Guid: EncoderSaveFlag;
		Type: EncoderParameterValueTypeLong;
		NumberOfValues: 1;
		Value: value yourAddress.
	image1 := Image fromFile: self fileResource pafEyeJpg.
	image2 := Image fromFile: self fileResource pafFish32x32png.
	image3 := Image fromFile: self fileResource pafRgb0000FF_100x100bmp.
	value value: EncoderValueMultiFrame.
	image1 saveToFile: toFile encoderParams: encoderParameters.
	value value: EncoderValueFrameDimensionPage.
	image1 saveAddImage: image2 encoderParams: encoderParameters.
	image2 free.
	image1 saveAddImage: image3 encoderParams: encoderParameters.
	image3 free.
	value value: EncoderValueFlush.
	image1 saveAdd: encoderParameters.
	image1 free.
	^toFile!

exampleGdipIDecoderFileExtensions
	"This example displays the file extensions for all of the available image decoders.

		UI.RichTextPresenter showOn: self exampleGdipIDecoderFileExtensions
	"

	| strm |
	strm := String writeStream.
	strm
		display: 'Decoder file extensions: ';
		cr.
	self decoderFileExtensions do: 
			[:e |
			strm
				tab;
				display: e;
				cr].
	^strm contents!

exampleGdipIDecoders
	"MSDN:  Using GDI+ >  Using Image Encoders and Decoders > Listing Installed Decoders
	This example displays the mime types for all of the available image decoders.

		UI.RichTextPresenter showOn: self exampleGdipIDecoders
	"

	| strm |
	strm := String writeStream.
	strm
		display: 'Decoder mime types: ';
		cr.
	self decoderMimeTypes do: 
			[:e |
			strm
				tab;
				display: e;
				cr].
	^strm contents!

exampleGdipIEncoderClsid
	"MSDN:  Using GDI+ >  Using Image Encoders and Decoders > Retrieving the Class Identifier
	This example displays information about the image encoder for the png mime type.

		UI.RichTextPresenter showOn: self exampleGdipIEncoderClsid
	"

	self encoders keysAndValuesDo: 
			[:i :e |
			e MimeType asString = 'image/png'
				ifTrue: 
					[^String writeStream
						display: 'An ImageCodecInfo object representing the PNG encoder';
						cr;
						display: 'was found at position ';
						display: i;
						display: ' in the array.';
						cr;
						display: 'The CLSID of the PNG encoder is ';
						display: e Clsid;
						contents]]!

exampleGdipIEncoderFileExtensions
	"This example displays the file extensions for all of the available image encoders.

		UI.RichTextPresenter showOn: self exampleGdipIEncoderFileExtensions
	"

	| strm |
	strm := String writeStream.
	strm
		display: 'Encoder file extensions: ';
		cr.
	self encoderFileExtensions do: 
			[:e |
			strm
				tab;
				display: e;
				cr].
	^strm contents!

exampleGdipIEncoderParameters
	"MSDN: Using GDI+ >  Using Image Encoders & Decoders > Determining Parameters Supported
	This example displays information about the image encoder for the jpeg mime type, as well as
	one of the encoder parameters - EncoderQuality.

		UI.RichTextPresenter showOn: self exampleGdipIEncoderParameters
	"

	| image mimeType encoderClsid listSize encoderParameters encoder encoderParameterName valueType |
	image := Bitmap new.
	mimeType := 'image/jpeg'.
	encoderClsid := Image encoderClsid: mimeType.
	listSize := image encoderParameterListSize: encoderClsid.
	encoderParameters := image encoderParameterList: encoderClsid.
	encoder := encoderParameters Parameter at: 2.
	encoderParameterName := (image class guidsEncoder detect: [:e | e value = encoder Guid]) key.
	valueType := UInt64 atAddress: encoder Value.
	^String writeStream
		display: 'Parameters supported by mime type <s><n><n>' << mimeType;
		display: 'The parameter list requires <d> bytes.<n>' << listSize;
		display: 'There are <d> GpEncoderParameter objects in the array.<n><n>' << encoderParameters Count;
		display: 'Parameter 2: <s><n>' << encoderParameterName;
		display: 'The GUID is <d><n>' << encoder Guid;
		display: 'The value type is ';
		display: (EncoderParameterValueTypeNames at: encoder Type + 1);
		nextPutAll: ' (';
		display: encoder Type;
		nextPut: $);
		cr;
		display: 'The number of values is <d><n>' << encoder NumberOfValues;
		display: '	The minimum possible quality value is <d><n>' << valueType lowPart;
		display: '	The maximum possible quality value is <d><n>' << valueType highPart;
		contents!

exampleGdipIEncoders
	"MSDN:  Using GDI+ >  Using Image Encoders and Decoders > Listing Installed Encoders
	This example displays the mime types for all of the available image encoders.

		UI.RichTextPresenter showOn: self exampleGdipIEncoders
	"

	| strm |
	strm := String writeStream.
	strm
		display: 'Encoder mime types: ';
		cr.
	self encoderMimeTypes do: 
			[:e |
			strm
				tab;
				display: e;
				cr].
	^strm contents!

exampleGdipIEncoderValues
	"MSDN: Using GDI+ >  Using Image Encoders & Decoders > Determining Parameters > EncoderValue
	A given encoder supports certain parameter categories, and for each of those categories, that encoder
	allows certain values.  This example displays information about the image encoder for the jpeg mime 
	type.

		UI.RichTextPresenter showOn: self exampleGdipIEncoderValues
	"

	| image mimeType encoderClsid listSize encoderParameters strm |
	image := Bitmap new.
	mimeType := 'image/jpeg'.
	encoderClsid := Image encoderClsid: mimeType.
	listSize := image encoderParameterListSize: encoderClsid.
	encoderParameters := image encoderParameterList: encoderClsid.
	strm := String new writeStream.
	strm
		display: 'Parameters supported by mime type <p>:<n><n>' << mimeType;
		display: 'The parameter list requires <d> bytes.<n>' << listSize;
		display: 'There are <d> EncoderParameter objects in the array.<n>' << encoderParameters Count.
	encoderParameters Parameter keysAndValuesDo: 
			[:i :encoder |
			| encoderParameterName valueType valueTypeName |
			encoderParameterName := (image class guidsEncoder detect: [:e | e value = encoder Guid]
						ifNone: ['Unknown' -> encoder Guid]) key.
			valueType := UInt32Array fromAddress: encoder Value yourAddress length: encoder NumberOfValues.
			valueTypeName := EncoderParameterValueTypeNames at: encoder Type + 1.
			strm
				display: '<n>Parameter <d>: <s><n>' << {i. encoderParameterName};
				display: 'The GUID is <d>.<n>' << encoder Guid;
				display: 'The value type is <d>, which is type <s>.<n>' << {encoder Type. valueTypeName};
				display: 'The number of values is <d>.<n>' << encoder NumberOfValues.
			encoder NumberOfValues > 0
				ifTrue: 
					[strm
						display: 'The allowable values are:';
						cr.
					valueType do: 
							[:e |
							strm
								tab;
								display: e asInteger;
								nextPutAll: ' (';
								nextPutAll: (EncoderParameterValueTypeNames at: encoder Type + 1);
								nextPut: $);
								cr]]].
	^strm contents!

exampleGdipIFlags
	"This example enumerates the ImageFlags values for an image.

		UI.RichTextPresenter showOn: self exampleGdipIFlags
	"

	| image flags strm |
	image := self fromFile: self fileResource pafEyeJpg.
	flags := image flags.
	strm := String writeStream.
	strm display: 'Image flags for file <p>:<n>' << image filename.
	{ImageFlagsScalable.
		ImageFlagsHasAlpha.
		ImageFlagsHasTranslucent.
		ImageFlagsPartiallyScalable.
		ImageFlagsColorSpaceRGB.
		ImageFlagsColorSpaceCMYK.
		ImageFlagsColorSpaceGRAY.
		ImageFlagsColorSpaceYCBCR.
		ImageFlagsColorSpaceYCCK.
		ImageFlagsHasRealDPI.
		ImageFlagsHasRealPixelSize.
		ImageFlagsReadOnly.
		ImageFlagsCaching} do: 
				[:flag |
				| flagName |
				flagName := Image nameOfImageFlag: flag.
				strm
					tab;
					display: (flagName midString: flagName size - 10 from: 11);
					nextPutAll: ' = ';
					display: (flags anyMask: flag);
					cr].
	^strm contents!

exampleGdipIInterpMode
	"MSDN: GDI+ > Using GDI+ > Using Images, Bitmaps, and Metafiles 
		> Using Interpolation Mode to Control Image Quality During Scaling
	This example displays the same image drawn using different interpolation modes.

		self exampleGdipIInterpMode showExample
	"

	| bitmap image |
	image := Image fromFile: self fileResource pafEyeJpg.
	bitmap := Bitmap extent: 600 @ 420.
	(bitmap graphics)
		interpolationMode: InterpolationModeLowQuality;
		drawImage: image
			at: 0 @ 0
			extent: (0.4 * image extent) rounded;
		drawString: 'LowQuality' at: 0 @ 0;
		interpolationMode: InterpolationModeBilinear;
		drawImage: image
			at: 0 @ 210
			extent: (0.4 * image extent) rounded;
		drawString: 'Bilinear' at: 0 @ 210;
		interpolationMode: InterpolationModeNearestNeighbor;
		drawImage: image
			at: 300 @ 0
			extent: (0.4 * image extent) rounded;
		drawString: 'NearestNeighbor' at: 300 @ 0;
		interpolationMode: InterpolationModeHighQualityBicubic;
		drawImage: image
			at: 300 @ 210
			extent: (0.4 * image extent) rounded;
		drawString: 'HighQualityBicubic' at: 300 @ 210.
	^bitmap!

exampleGdipIJPEGCompression
	"MSDN: Using GDI+ >  Using Image Encoders & Decoders > Setting JPEG Compression Level
	This example saves the same image to several different files, using different compression levels.
	It then reads all files back and displays the images.

		self exampleGdipIJPEGCompression showExample
	"

	| image encoderParameters encoderParameter quality images bitmap toFile points |
	image := Image fromFile: self fileResource pafEyeJpg.
	encoderParameters := EncoderParameters new.
	encoderParameters Count: 1.
	(encoderParameter := encoderParameters Parameter first)
		Guid: EncoderQuality;
		Type: EncoderParameterValueTypeLong;
		NumberOfValues: 1.
	quality := UInt32Bytes new.
	encoderParameter Value: quality yourAddress.
	images := OrderedCollection new.
	#(0 30 70 100) do: 
			[:num |
			quality value: num.
			toFile := self fileResource fileLocator localFileSpecFor: 'test' , num displayString , '.jpg'.
			image saveToFile: toFile encoderParams: encoderParameters.
			images add: (Image fromFile: toFile)].
	bitmap := Bitmap extent: 810 @ 610.
	points := {0 @ 0. 410 @ 0. 0 @ 310. 410 @ 310}.
	images keysAndValuesDo: 
			[:i :e |
			| point fileSize text |
			fileSize := ((File find: e filename) first fileSize / 1024) rounded.
			point := points at: i.
			text := (File splitFilenameFrom: e filename) , ' (' , fileSize displayString , ' kb)'.
			bitmap graphics
				drawImage: e
					at: point
					extent: 400 @ 300;
				drawString: text at: point].
	^bitmap!

exampleGdipILoadImage
	"This example loads an image from a file.

		self exampleGdipILoadImage showExample
	"

	^Image fromFile: self fileResource pafRgb0000FF_100x100bmp!

exampleGdipILoadImages
	"From MSDN: Using GDI+ > Using Images, Bitmaps, and Metafiles > Loading and Displaying Bitmaps
	This example displays two images, one loaded from a disk file, the other from an Icon resource.

		self exampleGdipILoadImages showExample
	"

	| bitmap image |
	bitmap := Bitmap extent: 400 @ 300.
	image := Image fromFile: 'Resources/Beach Ball.bmp' usingLocator: FileLocator installRelative.
	bitmap graphics drawImage: image at: 60 @ 10.
	image := Bitmap fromIcon: (Icon fromSystemId: IDI_WARNING extent: 64@64).
	bitmap graphics drawImage: image at: 10 @ 60.
	^bitmap!

exampleGdipILosslessRotation
	"MSDN:  Using GDI+ >  Using Image Encoders & Decoders > Transforming a JPEG Without Loss
	This example creates a GdiplusImage, rotates it left, saves it under a new filename, and answers 
	a GdiplusImage from the new file.  Note: only image files whose width and height are
	multiples of 16 can be rotated with no loss in quality.

		self exampleGdipILosslessRotation showExample
	"

	| image encoderParameters toFilename encValue |
	image := Image fromFile: self fileResource pafEyeJpg.
	"self assert: [image extent / 16 truncated * 16 = image extent]."
	encoderParameters := EncoderParameters new Count: 1.
	encValue := UInt32 fromInteger: EncoderValueTransformRotate90.
	encoderParameters Parameter first
		Guid: EncoderTransformation;
		Type: EncoderParameterValueTypeLong;
		NumberOfValues: 1;
		Value: encValue yourAddress.
	toFilename := self fileResource fileLocator localFileSpecFor: 'testLosslessRotation.jpg'.
	image saveToFile: toFilename encoderParams: encoderParameters.
	^Image fromFile: toFilename!

exampleGdipIMetadata
	"MSDN:  GDI+ >  Using GDI+ >  Using Images, Bitmaps, and Metafiles > Reading and Writing Metadata
	This example reads and displays a file's property items (metadata).

		UI.Examples.WordPad showOn: self exampleGdipIMetadata
	"

	| image strm |
	image := Image fromFile: self fileResource pafEyeJpg.
	strm := String writeStream.
	strm
		display: 'File: <s><n>' << image filename;
		display: 'There are <d> property items in the file.<n>' << image propertiesCount;
		display: 'The total size of all property items is <d> bytes.<n>' << image propertiesSize.
	image properties keysAndValuesDo: 
			[:i :e |
			strm
				display: 'Property item <d><n>' << i;
				display: '  id: <s><n>' << e id hex;
				display: '  type: <s><n>' << e typeName;
				display: '  length: <d><n>' << e length].
	^strm contents!

exampleGdipIMetadata2
	"This example lists all of a file's image property items' descriptions and values.

		UI.Examples.WordPad showOn: self exampleGdipIMetadata2
	"

	| image strm |
	image := Image fromFile: self fileResource pafEyeJpg.
	(strm := String writeStream)
		nextPutAll: image filename;
		cr;
		cr.
	image properties do: 
			[:e |
			e id printOn: strm base: 16.
			strm
				nextPutAll: ': ';
				nextPutAll: e name;
				nextPutAll: ' = ';
				display: e valueArray;
				cr].
	^strm contents!

exampleGdipIMultiFrame
	"MSDN:  Using GDI+ >  Using Image Encoders & Decoders > Multiple-Frame Image 
	This example creates a multiple-frame image and saves it to disk.  It then loads the file
	and displays some frame information.

		UI.RichTextPresenter showOn: self exampleGdipIMultiFrame
	"

	| image guids frameInfo |
	image := Image fromFile: self createMultiframeImage.
	guids := image frameDimensionsList.
	frameInfo := String writeStream
				nextPutAll: 'Frame information for file: <p>:<n>' << image filename;
				nextPutAll: 'The number of dimensions is <d>.<n>' << image frameDimensionsCount;
				nextPutAll: 'The first dimension ID is <d>.<n>' << guids first;
				nextPutAll: 'The number of frames in that dimension is <d>.<n>' << (image frameCount: guids first);
				contents.
	image free.
	^frameInfo!

exampleGdipIMultiFrame2
	"MSDN:  Using GDI+ >  Using Image Encoders & Decoders > Copying Individual Frames 
	This example saves each frame in a multiple-frame image to its own file on disk.  
	It then loads all images from these files and displays them on a single bitmap.

		self exampleGdipIMultiFrame2 showExample
	"

	| image bitmap graphics dstFile0 dstFile1 dstFile2 |
	dstFile0 := self fileResource fileLocator localFileSpecFor: 'testMultiframe0.png'.
	dstFile1 := self fileResource fileLocator localFileSpecFor: 'testMultiframe1.png'.
	dstFile2 := self fileResource fileLocator localFileSpecFor: 'testMultiframe2.png'.
	image := Image fromFile: self createMultiframeImage.
	self assert: [image frameCount = 3].
	image selectActiveFrame: 0.
	image saveToFile: dstFile0.
	image selectActiveFrame: 1.
	image saveToFile: dstFile1.
	image selectActiveFrame: 2.
	image saveToFile: dstFile2.
	bitmap := Bitmap extent: 260 @ 350.
	graphics := bitmap graphics.
	image := Image fromFile: dstFile0.
	graphics
		drawImage: image
		at: 10 @ 10
		extent: 240 @ 180.
	image := Image fromFile: dstFile1.
	graphics drawImage: image at: 10 @ 200.
	image := Image fromFile: dstFile2.
	graphics drawImage: image at: 10 @ 240.
	^bitmap!

exampleGdipIMultiFrame3
	"This example prompts for a multi-frame image file, e.g., an animated gif.  
	It then displays every sixth frame in a separate view.

		self exampleGdipIMultiFrame3
	"

	| frames |
	frames := Image prompt frames.
	1 to: frames size
		by: 6
		do: [:i | UI.ImagePresenter show: 'Basic image' on: (frames at: i)]!

exampleGdipIPrinting1
	"This example prints an image, plain and simple.  No units conversion or scaling is done.
	The sample image has an extent of 909@682 which in default units of hundredths of inches
	is 9.09 in. wide by 6.82 in. high.  If the prompted-for printer is set for portrait, the image will
	be clipped, if set for landscape the full picture should print.

		self exampleGdipIPrinting1
	"

	| printer graphics image |
	printer := PrinterCanvas choose.
	graphics := GdiplusGraphics fromCanvas: printer.
	image := Image fromFile: self fileResource pafSeattleNightJpg.
	printer startDoc.
	graphics drawImage: image.
	printer endDoc!

exampleGdipIPrinting2
	"This example draws an image scaled to fit the page's longer dimension.  It prompts for a 
	printer and displays a preview, then prompts for whether the image should be printed.

		self exampleGdipIPrinting2
	"

	| printer graphics image pageExtent layoutRect bitmap graphicsB |
	printer := PrinterCanvas choose.
	graphics := GdiplusGraphics fromCanvas: printer.
	image := Image fromFile: self fileResource pafSeattleNightJpg.
	"Convert pixels to hundredths of inches."
	pageExtent := (printer extent * 100 / graphics resolution) truncated.
	pageExtent x < pageExtent y ifTrue: [image rotateLeft].
	layoutRect := Point zero extent: (image extent scaledTo: pageExtent) truncated.
	"Preview image"
	bitmap := Bitmap extent: (pageExtent / 2) rounded.
	graphicsB := bitmap graphics.
	graphicsB scale: 0.5 @ 0.5 order: nil.
	graphicsB drawImage: image rectangle: layoutRect.
	bitmap showExample.
	"Print image"
	(UI.MessageBox confirm: 'Ok to print?') ifFalse: [^nil].
	printer startDoc.
	graphics drawImage: image rectangle: layoutRect.
	printer endDoc!

exampleGdipIPrinting3
	"This example prints some example bitmaps.  The page is divided into three sections - 2 quarter pages at the top and a half page at the bottom.  

		self exampleGdipIPrinting3
	"

	| printer graphics image1 image2 image3 res margin pageSize layoutSize boundingRect layoutRect |
	image1 := self exampleGdipIMultiFrame2.
	image2 := GdiplusGraphics exampleGdipGDrawingShapes rotateLeft.
	image3 := HatchBrush exampleGdipHBStyles.
	printer := PrinterCanvas choose.
	printer ifNil: [^self].
	graphics := GdiplusGraphics fromCanvas: printer.
	"Calculate 1/4 of page in hundredths of inches."
	res := graphics resolution.
	pageSize := ((printer extent x / res x) @ (printer extent y / res y) * 100) truncated.
	margin := 25.
	layoutSize := ((pageSize - margin) / 2) truncated.
	pageSize x > pageSize y ifTrue: [graphics rotate: 90 at: pageSize x @ 0].
	"Print first image in upper left."
	printer startDoc.
	boundingRect := Point zero extent: layoutSize.
	layoutRect := image1 rectScaledToFit: boundingRect centered: true.
	graphics drawImage: image1 rectangle: layoutRect.
	graphics drawRectangle: boundingRect.
	"Print second image in upper right."
	boundingRect := (pageSize x - layoutSize x) @ 0 extent: layoutSize.
	layoutRect := image2 rectScaledToFit: boundingRect centered: true.
	graphics drawImage: image2 rectangle: layoutRect.
	graphics drawRectangle: boundingRect.
	"Print third image in lower half."
	boundingRect := 0 @ (pageSize y - layoutSize y) extent: pageSize x @ layoutSize y.
	layoutRect := image3 rectScaledToFit: boundingRect centered: true.
	graphics drawImage: image3 rectangle: layoutRect.
	graphics drawRectangle: boundingRect.
	printer endDoc!

exampleGdipIPrinting4LabeledToAPage
	"This example prompts for and prints 4 images on a page.  First the printer dialog is shown and
	then a file open dialog (four times).  A text label (e.g., filename or date) is printed for each 
	picture, within the picture's frame at the lower right, taking into account any rotation.  A preview 
	window shows what the printed page will look like and a prompt is issued whether to print or not.

		self exampleGdipIPrinting4LabeledToAPage
	"

	| printer graphicsPrn res pagesize isPrinterPortrait margin quarterExtent font images image rotate extents corners bitmap graphicsB labels angle extent measure drawBlock x |
	printer := PrinterCanvas choose.
	graphicsPrn := GdiplusGraphics fromCanvas: printer.
	res := graphicsPrn resolution.
	pagesize := (printer extent / res * 100) truncated.	"hundredths of inches"
	isPrinterPortrait := pagesize x < pagesize y.
	margin := 25.	"1/4 inch"
	"Calculate 1/4 of page in hundredths of inches."
	quarterExtent := ((printer extent / res * 100 - margin) / 2) truncated.
	font := Font name: 'Arial' pointSize: 6.

	"Load images, rotate as needed, calculate extents, assign labels."
	images := Array new: 4.
	rotate := Array new: 4.
	extents := Array new: 4.
	labels := Array new: 4.
	1 to: 4
		do: 
			[:i |
			image := Image prompt.
			images at: i put: image.
			labels at: i put: (File splitStemFrom: image filename).
			image isLandscape = isPrinterPortrait
				ifTrue: 
					[rotate at: i put: true.
					extents at: i put: (image extent transpose scaledTo: quarterExtent) truncated]
				ifFalse: 
					[rotate at: i put: false.
					extents at: i put: (image extent scaledTo: quarterExtent) truncated]].

	"Calculate corners for each image."
	corners := Array new: 4.
	corners at: 1 put: Point zero.
	corners at: 2 put: ((extents at: 1) x + margin) @ 0.
	corners at: 3 put: 0 @ (quarterExtent y + margin).
	corners at: 4 put: ((extents at: 3) x + margin) @ (corners at: 3) y.

	"This could easily be a separate method."
	drawBlock := 
			[:graphics :scale |
			1 to: 4
				do: 
					[:i |
					angle := (rotate at: i) ifTrue: [90] ifFalse: [0].
					extent := (rotate at: i) ifTrue: [(extents at: i) transpose] ifFalse: [extents at: i].
					x := (rotate at: i) ifTrue: [(extents at: i) x] ifFalse: [0].
					measure := graphics measureString: (labels at: i) font: font.
					graphics
						resetTransform;
						scale: scale order: nil;
						translate: (corners at: i);
						rotate: angle at: x @ 0;
						drawImage: (images at: i)
							at: 0 @ 0
							extent: extent;
						drawString: (labels at: i)
							font: font
							at: extent - measure
							format: nil
							brush: Brush red]].

	"Preview images.  Draw them on a bitmap that's scaled to half the printer page."
	bitmap := Bitmap extent: (pagesize / 2) rounded.
	graphicsB := bitmap graphics.
	drawBlock value: graphicsB value: 0.5 @ 0.5.
	bitmap showExample.

	"Print images"
	(UI.MessageBox confirm: 'Ok to print?') ifFalse: [^nil].
	printer startDoc.
	drawBlock value: graphicsPrn value: 1 @ 1.
	printer endDoc!

exampleGdipIPropertiesCopy
	"This example takes an image from an existing file, resizes the image, copies all
	of the first image's property items to the second, and saves the second image to file.  
	It then loads the second file image and answers the image.

		self exampleGdipIPropertiesCopy showExample
	"

	| image resizedImage toFile |
	image := self fromFile: self fileResource pafEyeJpg.
	resizedImage := Bitmap fromImage: image scaledBy: 1 / 4.
	resizedImage copyPropertiesFrom: image.
	toFile := self fileResource fileLocator localFileSpecFor: 'testPropertiesCopy.jpg'.
	resizedImage saveToFile: toFile.
	^self fromFile: toFile!

exampleGdipIPropertyItem
	"MSDN:  GDI+ >  GDI+ Reference >  Classes >  Image >  Image Methods > SetPropertyItem 
	This example creates an Image object based on a jpeg file (some image formats, e.g., bmp,
	don't support properties), sets the Title property, then retrieves and displays the new title.  Note
	that it does not save the image back to file.

		self exampleGdipIPropertyItem
	"

	| image title propItem |
	image := Image fromFile: 'Resources/LagoonSideBar.jpg' usingLocator: FileLocator installRelative.
	title := 'Lagoon Sidebar'.
	(propItem := PropertyItem new)
		id: PropertyTagImageTitle;
		length: title size;
		Type: PropertyTagTypeASCII;
		Value: title yourAddress.
	image property: propItem.
	propItem := title := nil.
	propItem := image propertyFromId: PropertyTagImageTitle.
	^title := AnsiString fromAddress: propItem Value!

exampleGdipIPropertyItems
	"This example prompts for a directory.  For each jpeg in the directory, the filename,
	number of properties, and file extent are displayed.   It also checks for certain properties 
	of each image and displays them if they exist.

		UI.RichTextPresenter show value: self exampleGdipIPropertyItems
	"

	| directory filenames strm image |
	(directory := #{UI.BrowseFolderDialog} value new
				value: #{Shell32} value myPictures;
				showModal) ifNil: [^nil].
	filenames := (File find: (File composePath: directory subPath: '*.jpg')) collect: [:e | e path].
	strm := String writeStream.
	filenames do: 
			[:filename |
			image := Image fromFile: filename.
			"Force realization now."
			(
			[image handle.
			true] on: Error do: [:err | false])
				ifTrue: 
					[strm
						display: image propertiesCount;
						nextPutAll: ': ';
						nextPutAll: filename;
						nextPutAll: ', extent = ';
						display: image extent;
						cr.
					(image hasPropertyId: PropertyTagExifUserComment)
						ifTrue: 
							[strm
								tab;
								nextPutAll: 'PropertyTagExifUserComment: ';
								nextPutAll: (image propertyFromId: PropertyTagExifUserComment) valueArray asString trimNulls
											trimBlanks;
								cr].
					(image hasPropertyId: PropertyTagSoftwareUsed)
						ifTrue: 
							[strm
								tab;
								nextPutAll: 'PropertyTagSoftwareUsed: ';
								nextPutAll: (image propertyFromId: PropertyTagSoftwareUsed) valueArray asString trimNulls trimBlanks;
								cr].
					(image hasPropertyId: PropertyTagThumbnailWidth)
						ifTrue: 
							[strm
								tab;
								nextPutAll: 'PropertyTagThumbnailWidth: ';
								display: (image propertyFromId: PropertyTagThumbnailWidth) valueArray first;
								cr].
					(image hasPropertyId: PropertyTagThumbnailData)
						ifTrue: 
							[strm
								tab;
								nextPutAll: 'Image has PropertyTagThumbnailData';
								cr]]].
	^strm contents!

exampleGdipISaveFrames
	"This example prompts for a multi-frame file (e.g., an animated gif) and saves each frame to a separate file.
	Output files are saved in the GdiplusTests file resource directory.

		self exampleGdipISaveFrames
	"

	Image prompt saveFramesToFiles: self fileResource fileLocator basePath!

exampleGdipISkewing
	"MSDN: GDI+ > Using GDI+ > Using Images, Bitmaps, and Metafiles 
	> Rotating, Reflecting, and Skewing Images

		self exampleGdipISkewing showExample
	"

	| bitmap image graphics |
	bitmap := Bitmap extent: 300 @ 250.
	graphics := bitmap graphics.
	image := (Image fromFile: 'Resources/Beach Ball.bmp' usingLocator: FileLocator installRelative)
				thumbnailWithHeight: 75.
	graphics
		drawImage: image at: 10 @ 10;
		drawImage: image points: {200 @ 20. 110 @ 200. 250 @ 50}.
	^bitmap!

exampleGdipIThumbnails
	"MSDN: GDI+ > Using GDI+ > Using Images, Bitmaps, and Metafiles > Creating Thumbnail Images

		self exampleGdipIThumbnails	showExample
	"

	| bitmap image thumbnail graphics attr |
	bitmap := Bitmap extent: 300 @ 300.
	image := Image fromFile: 'Resources/Beach Ball.bmp' usingLocator: FileLocator installRelative.
	thumbnail := image thumbnailScaledBy: 0.4.
	graphics := bitmap graphics.
	graphics drawImage: image at: 10 @ 10.
	attr := ImageAttributes new
				remapColor: Color white to: (Color white alpha: 0);
				yourself.
	graphics
		drawImage: thumbnail
		at: 10 @ 200
		attributes: attr.
	graphics free.
	^bitmap!

prompt
	"Prompt for an image file.  Answer an Image created from that file or nil."

	^((UI.FileOpenDialog new fileTypes: self fileTypes)
		defaultExtension: 'png';
		showModal) ifNotNil: [:file | self fromFile: file]! !

!Graphics.Gdiplus.Image class categoriesForMethods!
createMultiframeImage!examples!private! !
exampleGdipIDecoderFileExtensions!examples!public!sunit! !
exampleGdipIDecoders!examples!public!sunit! !
exampleGdipIEncoderClsid!examples!public!sunit! !
exampleGdipIEncoderFileExtensions!examples!public!sunit! !
exampleGdipIEncoderParameters!examples!public!sunit! !
exampleGdipIEncoders!examples!public!sunit! !
exampleGdipIEncoderValues!examples!public!sunit! !
exampleGdipIFlags!examples!public!sunit! !
exampleGdipIInterpMode!examples!public!sunit! !
exampleGdipIJPEGCompression!examples!public!sunit! !
exampleGdipILoadImage!examples!public!sunit! !
exampleGdipILoadImages!examples!public!sunit! !
exampleGdipILosslessRotation!examples!public!sunit! !
exampleGdipIMetadata!examples!public!sunit! !
exampleGdipIMetadata2!examples!public!sunit! !
exampleGdipIMultiFrame!examples!public!sunit! !
exampleGdipIMultiFrame2!examples!public!sunit! !
exampleGdipIMultiFrame3!examples!public! !
exampleGdipIPrinting1!examples!public! !
exampleGdipIPrinting2!examples!public! !
exampleGdipIPrinting3!examples!public! !
exampleGdipIPrinting4LabeledToAPage!examples!public! !
exampleGdipIPropertiesCopy!examples!public!sunit! !
exampleGdipIPropertyItem!examples!public!sunit! !
exampleGdipIPropertyItems!examples!public! !
exampleGdipISaveFrames!examples!public! !
exampleGdipISkewing!examples!public!sunit! !
exampleGdipIThumbnails!examples!public!sunit! !
prompt!development!instance creation!public! !
!

!Graphics.Gdiplus.ImageAttributes class methodsFor!

exampleColorBars1
	| bitmap |
	bitmap := Bitmap extent: 160 @ 120.
	bitmap graphics
		fillRectangle: (0 @ 0 extent: 40 @ 120) brush: Brush black;
		fillRectangle: (40 @ 0 extent: 40 @ 120) brush: Brush red;
		fillRectangle: (80 @ 0 extent: 40 @ 120) brush: Brush green;
		fillRectangle: (120 @ 0 extent: 40 @ 120) brush: Brush blue.
	^bitmap!

exampleColorBars2
	| bitmap |
	bitmap := Bitmap extent: 160 @ 120.
	bitmap graphics
		fillRectangle: (0 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 0.4 0.4 0.4)));
		fillRectangle: (40 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 0.4 0.2 0.2)));
		fillRectangle: (80 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 0.2 0.4 0.2)));
		fillRectangle: (120 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 0.4 0.4 0.8))).
	^bitmap!

exampleColorBars3
	| bitmap |
	bitmap := Bitmap extent: 160 @ 120.
	bitmap graphics
		fillRectangle: (0 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 0.6 0.6 0.6)));
		fillRectangle: (40 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 0 1 1)));
		fillRectangle: (80 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 1 1 0)));
		fillRectangle: (120 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 1 0 1))).
	^bitmap!

exampleColorBars4
	| bitmap |
	bitmap := Bitmap extent: 160 @ 120.
	bitmap graphics
		fillRectangle: (0 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 0 0 1)));
		fillRectangle: (40 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 0.5 1 0.5)));
		fillRectangle: (80 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 1 1 0)));
		fillRectangle: (120 @ 0 extent: 40 @ 120)
			brush: (Brush color: (Color fromNormalizedArray: #(1 0.4 0.4 0.4))).
	^bitmap!

exampleColorKeyTest
	| bitmap |
	bitmap := Bitmap extent: 160 @ 120.
	bitmap graphics
		fillRectangle: (0 @ 0 extent: 160 @ 40) brush: (Brush color: (Color fromArray: #(255 90 90 20)));
		fillRectangle: (0 @ 40 extent: 160 @ 40) brush: (Brush color: (Color fromArray: #(255 130 130 40)));
		fillRectangle: (0 @ 80 extent: 160 @ 40)
			brush: (Brush color: (Color fromArray: #(255 150 150 150))).
	^bitmap!

exampleGdipIAAlphaBlending
	"Using GDI+ .... Alpha Blending Lines and Fills ... Using a Color Matrix to Set Alpha Values in Images

		self exampleGdipIAAlphaBlending showExample
	"

	| bitmap graphics image pen colorMatrix imageAtt |
	bitmap := Bitmap extent: 250 @ 150.
	graphics := bitmap graphics.
	image := Bitmap fromFile: self fileResource pafFish32x32png.
	"Initialize the color matrix and change the value at row 4 column 4."
	colorMatrix := ColorMatrix identity atPoint: 4 @ 4 put: 0.8.
	"Create an ImageAttributes object and set its color matrix. "
	imageAtt := ImageAttributes new colorMatrix: colorMatrix.
	"First draw a wide black line. "
	pen := Pen color: (Color fromArray: #(255 0 0 0)) width: 5.
	graphics drawLine: (10 @ 55 corner: 200 @ 55) pen: pen.
	"Now draw the semitransparent bitmap image"
	graphics
		drawImage: image
		at: 30 @ 0
		extent: image extent * 3
		attributes: imageAtt.
	^bitmap!

exampleGdipIAColorKey
	"MSDN:  ImageAttributes::SetColorKey Method 

		self exampleGdipIAColorKey showExample
	"

	| bitmap graphics image imageAtt |
	bitmap := Bitmap extent: 450 @ 250.
	graphics := bitmap graphics.
	image := ImageAttributes exampleColorKeyTest.
	imageAtt := ImageAttributes new
				colorKeys: ColorAdjustTypeBitmap
					colorLow: (Color fromArray: #(255 100 95 30))
					colorHigh: (Color fromArray: #(255 250 245 60));
				yourself.
	graphics
		drawImage: image at: 10 @ 70;
		drawImage: image
			at: 210 @ 70
			attributes: imageAtt;
		drawString: 'Original' at: 10 @ 40;
		drawString: 'Color key set - middle stripe is transparent' layoutRect: (210 @ 20 extent: 220 @ 50).
	^bitmap!

exampleGdipIAColorMatrix
	"MSDN:  GDI+ >  Using GDI+ >  Recoloring > Using a Color Matrix to Transform a Single Color

		self exampleGdipIAColorMatrix showExample
 	"

	| bitmap image colorMatrix imageAttributes |
	image := Bitmap extent: 160 @ 120.
	"Create an image that's a solid color."
	image graphics clear: (Color fromNormalizedArray: #(1 0.2 0 0.4)).
	"Create a color matrix and draw the image unchanged and changed."
	colorMatrix := ColorMatrix identity
				atPoint: 1 @ 1 put: 2;
				atPoint: 5 @ 1 put: 0.2;
				atPoint: 5 @ 2 put: 0.2;
				atPoint: 5 @ 3 put: 0.2;
				yourself.
	imageAttributes := ImageAttributes new colorMatrix: colorMatrix.
	bitmap := Bitmap extent: 400 @ 330.
	bitmap graphics
		drawImage: image at: 10 @ 10;
		drawImage: image
			at: 200 @ 10
			attributes: imageAttributes.
	"Using the same color matrix, draw a picture, unchanged and changed."
	image := Image fromFile: self fileResource pafEyeJpg.
	bitmap graphics
		drawImage: image
			at: 10 @ 150
			extent: image extent / 4;
		drawImage: image
			at: 200 @ 150
			extent: image extent / 4
			attributes: imageAttributes.
	^bitmap!

exampleGdipIAColorRemap
	"MSDN:  GDI+ >  Using GDI+ >  Recoloring > Using a Color Remap Table
	Remapping is the process of converting the colors in an image according to a color remap table,
	an array of GpColorMap structures, each of which contains an oldColor and a newColor.
	This example creates a remap table with a single entry that maps all red pixels to blue.

		self exampleGdipIAColorRemap showExample
 	"

	| image imageAttributes bitmap |
	image := self exampleRemapInput.
	imageAttributes := ImageAttributes new
				remapColor: Color red to: Color blue;
				yourself.
	bitmap := Bitmap extent: 400 @ 200.
	bitmap graphics
		drawImage: image at: 10 @ 10;
		drawImage: image
			at: 200 @ 10
			attributes: imageAttributes;
		drawString: 'Using a remap table - map red to blue' at: 50 @ 150.
	^bitmap!

exampleGdipIAGamma
	" GDI+ Ref .... Classes ... ImageAttributes::SetGamma Method

		self exampleGdipIAGamma showExample
	"

	| image graphics bitmap imageAtt |
	image := Image fromFile: self fileResource pafEyeJpg.
	imageAtt := ImageAttributes new.
	imageAtt gamma: 0.7 type: ColorAdjustTypeBitmap.
	bitmap := Bitmap extent: 700 @ 300.
	graphics := bitmap graphics.
	graphics
		drawImage: image
			at: 25 @ 25
			extent: (image extent / 2) rounded;
		drawImage: image
			at: 350 @ 25
			extent: (image extent / 2) rounded
			attributes: imageAtt.
	^bitmap!

exampleGdipIAOutputChannel
	"MSDN:  ImageAttributes::SetOutputChannel Method 
	This example displays the CMYK intensities of an image.

		self exampleGdipIAOutputChannel showExample
	"

	| bitmap graphics image imageAtt |
	bitmap := Bitmap extent: 550 @ 200.
	graphics := bitmap graphics.
	image := Image fromFile: self fileResource pafMosaic2Bmp.
	graphics
		drawString: 'CMYK intensities of an image' at: 150 @ 10;
		drawString: 'Original' at: 10 @ 50;
		drawString: 'Cyan' at: 110 @ 50;
		drawString: 'Magenta' at: 210 @ 50;
		drawString: 'Yellow' at: 310 @ 50;
		drawString: 'Black' at: 410 @ 50.
	graphics drawImage: image at: 10 @ 70.
	imageAtt := ImageAttributes new.
	imageAtt outputChannel: ColorAdjustTypeBitmap channelFlags: ColorChannelFlagsC.
	graphics
		drawImage: image
		at: 110 @ 70
		attributes: imageAtt.
	imageAtt outputChannel: ColorAdjustTypeBitmap channelFlags: ColorChannelFlagsM.
	graphics
		drawImage: image
		at: 210 @ 70
		attributes: imageAtt.
	imageAtt outputChannel: ColorAdjustTypeBitmap channelFlags: ColorChannelFlagsY.
	graphics
		drawImage: image
		at: 310 @ 70
		attributes: imageAtt.
	imageAtt outputChannel: ColorAdjustTypeBitmap channelFlags: ColorChannelFlagsK.
	graphics
		drawImage: image
		at: 410 @ 70
		attributes: imageAtt.
	^bitmap!

exampleGdipIAScaleColors
	"MSDN:  GDI+ >  Using GDI+ >  Recoloring > Scaling Colors
	A scaling multiples one or more of the four color components by a number. The color matrix's 
	diagonal (1@1 through 4@4) has values that correspond to scalings for red, green, blue and alpha.  
	This example displays two rows:  In the first row, a set of color bars is shown unchanged and then
	with the blue component scaled by 2.  A picture with the blue component scaled is also shown.  
	The second row shows a different set of color bars, first unchanged, then with rgb components 
	scaled.  Again, a picture is shown with rgb scaled.

		self exampleGdipIAScaleColors showExample
 	"

	| bitmap bars image colorMatrix imageAttributes |
	bars := self exampleColorBars2.
	image := Image fromFile: self fileResource pafEyeJpg.
	colorMatrix := ColorMatrix identity.
	colorMatrix atPoint: 3 @ 3 put: 2.
	imageAttributes := ImageAttributes new.
	imageAttributes colorMatrix: colorMatrix.
	bitmap := Bitmap extent: 600 @ 300.
	bitmap graphics
		drawImage: bars at: 10 @ 10;
		drawImage: bars
			at: 200 @ 10
			attributes: imageAttributes;
		drawImage: image
			at: 400 @ 10
			extent: image extent / 4
			attributes: imageAttributes.
	"Using the same color matrix, draw a picture, unchanged and changed."
	bars := self exampleColorBars3.
	colorMatrix
		atPoint: 1 @ 1 put: 0.75;
		atPoint: 2 @ 2 put: 0.65;
		atPoint: 3 @ 3 put: 0.5.
	imageAttributes colorMatrix: colorMatrix.
	bitmap graphics
		drawImage: bars at: 10 @ 150;
		drawImage: bars
			at: 200 @ 150
			attributes: imageAttributes;
		drawImage: image
			at: 400 @ 150
			extent: image extent / 4
			attributes: imageAttributes.
	^bitmap!

exampleGdipIAShearColors
	"MSDN:  GDI+ >  Using GDI+ >  Recoloring > Shearing Colors
	Shearing increases or decreases a color component by an amount proportional to another color
	component. This example increases the red component by one half the value of the blue component.
.
		self exampleGdipIAShearColors showExample
 	"

	| bitmap image colorMatrix imageAttributes |
	image := self exampleColorBars4.
	colorMatrix := ColorMatrix identity.
	colorMatrix atPoint: 3 @ 1 put: 0.5.
	imageAttributes := ImageAttributes new.
	imageAttributes colorMatrix: colorMatrix.
	bitmap := Bitmap extent: 600 @ 150.
	bitmap graphics
		drawImage: image at: 10 @ 10;
		drawImage: image
			at: 200 @ 10
			attributes: imageAttributes.
	image := Image fromFile: self fileResource pafEyeJpg.
	bitmap graphics
		drawImage: image
		at: 400 @ 10
		extent: image extent / 4
		attributes: imageAttributes.
	^bitmap!

exampleGdipIAThreshold
	" GDI+ Ref .... Classes ... ImageAttributes::SetThreshold Method 

		self exampleGdipIAThreshold showExample
	"

	| bitmap graphics image imageAtt |
	bitmap := Bitmap extent: 300 @ 150.
	graphics := bitmap graphics.
	image := Image fromFile: self fileResource pafFish32x32png.
	"Create an ImageAttributes object, and set its bitmap threshold."
	imageAtt := ImageAttributes new threshold: 0.6.
	graphics
		drawImage: image
		at: 100 @ 10
		extent: image extent * 3
		attributes: imageAtt.
	^bitmap!

exampleGdipIATranslateColors
	"MSDN:  GDI+ >  Using GDI+ >  Recoloring > Translating Colors
	A translation adds a value to one or more of the four color components. The color matrix's fifth
	row (5@1 through 5@4) has values that correspond to translations for red, green, blue and alpha.  
	This example adds .75 to the red component of each pixel in two images.

		self exampleGdipIATranslateColors showExample
 	"

	| bitmap image colorMatrix imageAttributes |
	image := self exampleColorBars1.
	colorMatrix := ColorMatrix identity.
	colorMatrix atPoint: 5 @ 1 put: 0.75.
	imageAttributes := ImageAttributes new colorMatrix: colorMatrix.
	bitmap := Bitmap extent: 400 @ 300.
	bitmap graphics
		drawImage: image at: 10 @ 10;
		drawImage: image
			at: 200 @ 10
			attributes: imageAttributes.
	image := Image fromFile: self fileResource pafEyeJpg.
	bitmap graphics
		drawImage: image
			at: 10 @ 150
			extent: image extent / 4;
		drawImage: image
			at: 200 @ 150
			extent: image extent / 4
			attributes: imageAttributes.
	^bitmap!

exampleRemapInput
	"
		self exampleRemapInput showExample
	"

	| bitmap |
	bitmap := Bitmap extent: 160 @ 120.
	bitmap graphics
		clear: Color red;
		fillRectangle: (50 @ 40 corner: 115 @ 80) brush: (Brush color: Color yellow);
		fillEllipse: (30 @ 20 corner: 70 @ 100) brush: (Brush color: Color cyan);
		fillRectangle: (80 @ 70 corner: 140 @ 100) brush: (Brush green);
		fillEllipse: (80 @ 20 corner: 140 @ 50) brush: (Brush color: Color magenta).
	^bitmap! !

!Graphics.Gdiplus.ImageAttributes class categoriesForMethods!
exampleColorBars1!examples!private! !
exampleColorBars2!examples!private! !
exampleColorBars3!examples!private! !
exampleColorBars4!examples!private! !
exampleColorKeyTest!examples!private! !
exampleGdipIAAlphaBlending!examples!public!sunit! !
exampleGdipIAColorKey!examples!public!sunit! !
exampleGdipIAColorMatrix!examples!public!sunit! !
exampleGdipIAColorRemap!examples!public!sunit! !
exampleGdipIAGamma!examples!public!sunit! !
exampleGdipIAOutputChannel!examples!public!sunit! !
exampleGdipIAScaleColors!examples!public!sunit! !
exampleGdipIAShearColors!examples!public!sunit! !
exampleGdipIAThreshold!examples!public!sunit! !
exampleGdipIATranslateColors!examples!public!sunit! !
exampleRemapInput!examples!private! !
!

!Graphics.Gdiplus.InstalledFontCollection class methodsFor!

exampleGdipIFCEnumerating
	"MSDN:  GDI+ >  Using GDI+ >  Using Text and Fonts > Enumerating Installed Fonts
	This example displays the names of all installed fonts in a rectangle that's inset from
	the bounds of the bitmap.

		self exampleGdipIFCEnumerating showExample
	"

	| bitmap rect families stream |
	bitmap := Bitmap extent: 500 @ 400.
	rect := bitmap bounds insetBy: 40.
	families := FontCollection installedFamilies.
	(stream := String new writeStream)
		display: 'There are ';
		display: families size;
		display: ' installed fonts.  The family names are: '.
	families keys asSortedArray do: [:each | stream nextPutAll: each]
		separatedBy: [stream nextPutAll: ', '].
	bitmap graphics
		drawString: stream contents layoutRect: rect;
		drawRectangle: rect.
	^bitmap! !

!Graphics.Gdiplus.InstalledFontCollection class categoriesForMethods!
exampleGdipIFCEnumerating!examples!public!sunit! !
!

!Graphics.Gdiplus.LinearGradientBrush class methodsFor!

exampleGdipLGChangingColors
	"This example shows changing starting and ending colors.

		self exampleGdipLGChangingColors showExample
	"

	| bitmap graphics points colors brush |
	bitmap := Bitmap new.
	graphics := bitmap graphics.
	points := {0 @ 0. 300 @ 0. 0 @ 200. 300 @ 200}.
	colors := #(#red #green #blue #magenta #cyan).
	brush := LinearGradientBrush
				point1: 0 @ 0
				point2: 0 @ 200
				color1: Color blue
				color2: Color blue.
	points keysAndValuesDo: 
			[:i :point |
			brush startingColor: (Color named: (colors at: i)) endingColor: (Color named: (colors at: i + 1)).
			graphics fillRectangle: (point extent: 300 @ 200) brush: brush].
	^bitmap!

exampleGdipLGCustom
	"MSDN:   Using GDI+ >  Filling Shapes with a Gradient Brush > Creating a Linear Gradient, Custom
	This example uses a customized linear gradient brush to fill an ellipse and a rectangle.

		self exampleGdipLGCustom showExample
	"

	| bitmap brush |
	bitmap := Bitmap extent: 600 @ 400.
	brush := LinearGradientBrush
				point1: 0 @ 10
				point2: 200 @ 10
				color1: Color black
				color2: Color red.
	brush blendFactors: #(0.0 0.5 1.0) positions: #(0.0 0.2 1.0).
	bitmap graphics
		fillEllipse: (0 @ 30 extent: 200 @ 100) brush: brush;
		fillRectangle: (0 @ 155 extent: 500 @ 30) brush: brush.
	^bitmap!

exampleGdipLGDiagonal
	"MSDN:   Using GDI+ >  Filling Shapes with a Gradient Brush > Creating a Linear Gradient, Diagonal
	This example uses a customized linear gradient brush to fill an ellipse and a line.

		self exampleGdipLGDiagonal showExample
	"

	| bitmap brush1 pen brush2 |
	bitmap := Bitmap extent: 600 @ 400.
	brush1 := LinearGradientBrush
				point1: 10 @ 20
				point2: 210 @ 120
				color1: Color blue
				color2: Color green.
	pen := Pen brush: brush1 width: 10.
	brush2 := LinearGradientBrush
				rect: (10 @ 20 corner: 210 @ 120)
				color1: Color blue
				color2: Color green
				mode: LinearGradientModeForwardDiagonal.
	bitmap graphics
		drawLine: (0 @ 0 extent: 600 @ 300) pen: pen;
		fillEllipse: (10 @ 100 extent: 200 @ 100) brush: brush2;
		fillEllipse: (10 @ 200 extent: 200 @ 100) brush: brush1.
	^bitmap!

exampleGdipLGHorizontal
	"MSDN:   Using GDI+ >  Filling Shapes with a Gradient Brush > Creating a Linear Gradient, Horizontal
	This example uses a horizontal linear gradient brush to draw a line and fill an ellipse and rectangle.

		self exampleGdipLGHorizontal showExample
	"

	| bitmap brush pen |
	bitmap := Bitmap extent: 600 @ 250.
	"Zero vertical extent implies a horizontal gradient"
	brush := LinearGradientBrush
				point1: 0 @ 10
				point2: 200 @ 10
				color1: Color red
				color2: Color blue.
	pen := Pen brush: brush width: 3.
	bitmap graphics
		drawLine: (0 @ 10 corner: 200 @ 10) pen: pen;
		fillEllipse: (0 @ 30 extent: 200 @ 100) brush: brush;
		fillRectangle: (0 @ 155 extent: 500 @ 30) brush: brush.
	^bitmap!

exampleGdipLGModeConstants
	"This example shows the different effects of LinearGradientMode constants.

		self exampleGdipLGModeConstants showExample
	"

	| bitmap graphics brush |
	bitmap := Bitmap new.
	graphics := bitmap graphics.
	{LinearGradientModeHorizontal.
		LinearGradientModeVertical.
		LinearGradientModeForwardDiagonal.
		LinearGradientModeBackwardDiagonal} with: {0 @ 0. 300 @ 0. 0 @ 200. 300 @ 200}
			do: 
				[:mode :point |
				brush := LinearGradientBrush
							rect: (0 @ 0 corner: 300 @ 200)
							color1: Color red
							color2: Color yellow
							mode: mode.
				graphics
					fillRectangle: (point extent: 300 @ 200) brush: brush;
					drawString: (Gdiplus.LinearGradientModeNames at: mode + 1) at: point].
	^bitmap!

exampleGdipLGScaleAndTranslate
	"This example shows the effect of scaling and translating a linear gradient brush.

		self exampleGdipLGScaleAndTranslate showExample
	"

	| bitmap brush graphics |
	bitmap := Bitmap extent: 800 @ 350.
	brush := LinearGradientBrush
				rect: (0 @ 0 extent: 80 @ 40)
				color1: Color red
				color2: Color blue
				mode: LinearGradientModeHorizontal.
	graphics := bitmap graphics.
	"Fill an area with the linear gradient brush (no transformation)."
	graphics fillRectangle: (0 @ 0 extent: 800 @ 150) brush: brush.
	brush
		scale: 2 @ 1;
		translate: 30 @ 0 order: MatrixOrderAppend.
	"Fill the same area with the transformed linear  gradient brush."
	graphics fillRectangle: (0 @ 200 extent: 800 @ 150) brush: brush.
	^bitmap!

exampleGdipLGTiling
	"This example shows the different effects of tiling with LinearGradientMode constants.

		self exampleGdipLGTiling showExample
	"

	| bitmap graphics brush |
	bitmap := Bitmap new.
	graphics := bitmap graphics.
	{LinearGradientModeHorizontal.
		LinearGradientModeVertical.
		LinearGradientModeForwardDiagonal.
		LinearGradientModeBackwardDiagonal} with: {0 @ 0. 300 @ 0. 0 @ 200. 300 @ 200}
			do: 
				[:mode :point |
				brush := LinearGradientBrush
							rect: (0 @ 0 corner: 75 @ 50)
							color1: Color blue
							color2: Color cyan
							mode: mode.
				graphics
					fillRectangle: (point extent: 300 @ 200) brush: brush;
					drawString: (Gdiplus.LinearGradientModeNames at: mode + 1) at: point].
	^bitmap! !

!Graphics.Gdiplus.LinearGradientBrush class categoriesForMethods!
exampleGdipLGChangingColors!examples!public!sunit! !
exampleGdipLGCustom!examples!public!sunit! !
exampleGdipLGDiagonal!examples!public!sunit! !
exampleGdipLGHorizontal!examples!public!sunit! !
exampleGdipLGModeConstants!examples!public!sunit! !
exampleGdipLGScaleAndTranslate!examples!public!sunit! !
exampleGdipLGTiling!examples!public!sunit! !
!

!Graphics.Gdiplus.Matrix class methodsFor!

exampleGdipMShadows
	"This example shows various transformations (shear, scale and translate) to display a string
	in large font and its shadow.

		self exampleGdipMShadows showExample
	"

	| bitmap graphics font matrix brush characterPositions |
	bitmap := Bitmap extent: 750 @ 200.
	graphics := bitmap graphics.
	matrix := Matrix new
				shear: -1.4 @ 0;
				scale: 1 @ 0.6;
				translate: 180 @ 86;
				yourself.
	graphics transform: matrix.
	font := Font name: 'Times New Roman' pointSize: 100.
	brush := Brush color: Color gray.
	characterPositions := #(50 150 250 330 415 510 560).
	characterPositions with: 'DOLPHIN'
		do: 
			[:num :char |
			graphics
				drawString: char asString
				font: font
				at: num @ 10
				brush: brush].
	graphics resetTransform.
	brush color: Color blue.
	characterPositions with: 'DOLPHIN'
		do: 
			[:num :char |
			graphics
				drawString: char asString
				font: font
				at: num @ 10
				brush: brush].
	^bitmap!

exampleGdipMShear
	" MSDN:  GDI+ >  GDI+ Reference >  Classes >  Matrix >  Matrix Methods > Shear
	This example creates a Matrix object and performs first a scale, then a shearing transformation on it.
	A rectangle is drawn initially and then again after each transformation.  This particular shearing
	slides the bottom edge of the rectangle to the right. The distance that the bottom edge slides is
	3 multiplied by the height of the rectangle after it is stretched by the scaling transformation.

		self exampleGdipMShear showExample
	"

	| bitmap graphics rect matrix |
	bitmap := Bitmap extent: 550 @ 150.
	graphics := bitmap graphics.
	rect := 0 @ 0 extent: 100 @ 50.
	graphics drawRectangle: rect pen: Pen black.
	matrix := Matrix new.
	matrix scale: 2 @ 2.
	graphics transform: matrix.
	graphics drawRectangle: rect pen: Pen blue.
	matrix shear: 3 @ 0 order: MatrixOrderAppend.
	graphics transform: matrix.
	graphics drawRectangle: rect pen: Pen red.
	^bitmap!

exampleGdipMTranslate
	"This example creates a GdiplusMatrix object, sets its elements to a rotation, then updates 
	the matrix with the product of itself and a translation matrix. At that point, the matrix 
	represents a composite transformation: first rotate, then translate, and it is used to set the 
	world transformation of a GdiplusGraphics object, on which an ellipse is drawn.

		self exampleGdipMTranslate showExample
	"

	| bitmap matrix pen |
	bitmap := Bitmap extent: 500 @ 300.
	matrix := Matrix new
				rotate: 30 at: 250 @ 100;
				yourself.
	pen := Pen blue.
	bitmap graphics
		drawEllipse: (Point zero extent: 200 @ 100) pen: pen;
		drawString: 'Original' at: 60 @ 40;
		transform: matrix;
		drawEllipse: (Point zero extent: 200 @ 100) pen: pen;
		drawString: 'Rotated and Translated' at: 20 @ 40;
		drawLine: (-100 @ 0 corner: 100 @ 0) pen: pen;
		drawLine: (0 @ -100 corner: 0 @ 100) pen: pen;
		drawString: '0 @ 0' at: 0 @ 0.
	^bitmap!

icon
	^##((TextTileIcon text: $\x1F522 fontName: 'Segoe UI Emoji')
		textcolor: Color navy;
		yourself)! !

!Graphics.Gdiplus.Matrix class categoriesForMethods!
exampleGdipMShadows!examples!public!sunit! !
exampleGdipMShear!examples!public!sunit! !
exampleGdipMTranslate!examples!public!sunit! !
icon!constants!public! !
!

!Graphics.Gdiplus.PathGradientBrush class methodsFor!

exampleGdipPGBlendColors
	"This example displays a triangular brush with different color and positions controlling the gradient areas.

		self exampleGdipPGBlendColors showExample
	"

	| bitmap graphics brush colors |
	bitmap := Bitmap extent: 400 @ 400.
	graphics := bitmap graphics.
	brush := PathGradientBrush points: {100 @ 0. 200 @ 200. 0 @ 200} wrapMode: WrapModeTile.
	colors := {Color red. Color green. Color blue}.
	graphics
		fillRectangle: (0 @ 0 extent: 200 @ 200) brush: brush;
		drawString: 'Original' at: 0 @ 0 + 10.
	brush blendColors: colors positions: #(0 0.1 1).
	graphics
		fillRectangle: (200 @ 0 extent: 200 @ 200) brush: brush;
		drawString: 'Pos: ' , (brush blend positions second roundTo: 0.1) displayString at: 200 @ 0 + 10.
	brush blendColors: colors positions: #(0 0.5 1).
	graphics
		fillRectangle: (0 @ 200 extent: 200 @ 200) brush: brush;
		drawString: 'Pos: ' , (brush blend positions second roundTo: 0.1) displayString at: 0 @ 200 + 10.
	brush blendColors: colors positions: #(0 0.9 1).
	graphics
		fillRectangle: (200 @ 200 extent: 200 @ 200) brush: brush;
		drawString: 'Pos: ' , (brush blend positions second roundTo: 0.1) displayString at: 200 @ 200 + 10.
	^bitmap!

exampleGdipPGBlendFactors
	"This example shows the effects of setting blend factors and positions on ellipse and rectangle brushes.

		self exampleGdipPGBlendFactors showExample
	"

	| bitmap graphics path brush |
	bitmap := Bitmap extent: 600 @ 300.
	graphics := bitmap graphics.
	path := GraphicsPath new addEllipse: (0 @ 0 corner: 200 @ 150).
	brush := (PathGradientBrush path: path)
		wrapMode: WrapModeTile;
		centerColor: Color blue;
		surroundColors: {Color red};
		yourself.
	graphics fillRectangle: (0 @ 0 extent: 200 @ 150) brush: brush.
	brush blendFactors: #(0 0.4 0.8 1) positions: #(0 0.1 0.9 1).
	graphics fillRectangle: (200 @ 0 extent: 200 @ 150) brush: brush.
	brush blendFactors: #(0 0.1 0.5 1) positions: #(0 0.3 0.7 1).
	graphics fillRectangle: (400 @ 0 extent: 200 @ 150) brush: brush.
	path := GraphicsPath new addRectangle: (0 @ 0 corner: 200 @ 150).
	(brush := PathGradientBrush path: path)
		wrapMode: WrapModeTile;
		centerColor: Color blue;
		surroundColors: {Color green. Color red}.
	graphics fillRectangle: (0 @ 150 extent: 200 @ 150) brush: brush.
	brush blendFactors: #(0 0.4 0.8 1) positions: #(0 0.1 0.9 1).
	graphics fillRectangle: (200 @ 150 extent: 200 @ 150) brush: brush.
	brush blendFactors: #(0 0.1 0.5 1) positions: #(0 0.3 0.7 1).
	graphics fillRectangle: (400 @ 150 extent: 200 @ 150) brush: brush.
	^bitmap!

exampleGdipPGBounds
	"This example creates a path gradient brush from a polygon defined by 4 points and gets the
	bounding rectangle of that polygon, i.e., the smallest rectangle that the polygon fits in.  It then
	fills the polygon with the brush and draws outlines of the polygon and the bounding rectangle.
	NB:  See comment below regarding former problem with #bounds.

		self exampleGdipPGBounds showExample
	"

	| bitmap points brush bounds |
	bitmap := Bitmap extent: 250 @ 300.
	points := {0 @ 0. 120 @ 20. 70 @ 80. 30 @ 180}.
	"We are going to translate the brush, shifting its origin. This didn't work correctly in Dolphin 7 because the bounding rectangle was assumed to be returned as an origin and corner pair, but rectangles in Gdiplus are always origin and extent. In Dolphin 8 this has been corrected."
	points := points collect: [:e | e + (20 @ 30)].
	brush := PathGradientBrush points: points.
	bitmap graphics translate: 20 @ 30.
	bounds := brush bounds.
	bitmap graphics
		fillRectangle: bounds brush: brush;
		drawRectangle: bounds pen: Pen new;
		drawPolygon: points pen: Pen red.
	^bitmap!

exampleGdipPGCenterColor
	"This example creates a GdiplusPathGradientBrush from a path and sets its center color.

		self exampleGdipPGCenterColor showExample
	"

	| bitmap brush |
	bitmap := Bitmap extent: 350 @ 250.
	brush := PathGradientBrush path: (GraphicsPath ellipse: (10 @ 10 corner: 300 @ 200)).
	brush centerColor: Color blue.
	bitmap graphics fillRectangle: (10 @ 10 corner: 300 @ 200) brush: brush.
	^bitmap!

exampleGdipPGCenterPoint
	"This example shows the effect of changing the center point.

		self exampleGdipPGCenterPoint showExample
	"

	| bitmap graphics path brush |
	bitmap := Bitmap extent: 300 @ 450.
	graphics := bitmap graphics.
	path := GraphicsPath new addEllipse: (Point zero extent: 300 @ 150).
	(brush := PathGradientBrush path: path)
		centerColor: Color blue;
		wrapMode: WrapModeTile;
		surroundColor: Color cyan.
	graphics fillEllipse: (0 @ 0 extent: 300 @ 150) brush: brush.
	graphics drawString: 'Center Point - center' at: 0 @ 0 + 10.
	brush centerPoint: 250 @ 75.
	graphics fillEllipse: (0 @ 150 extent: 300 @ 150) brush: brush.
	graphics drawString: 'Center Point - on right, inside ellipse' at: 0 @ 150 + 10.
	brush centerPoint: 300 @ 75.
	graphics fillEllipse: (0 @ 300 extent: 300 @ 150) brush: brush.
	graphics drawString: 'Center Point - on right, outside ellipse' at: 0 @ 300 + 10.
	^bitmap!

exampleGdipPGFocusScales
	"This example shows a triangle brush at normal size and then with focus scaled.

		self exampleGdipPGFocusScales showExample
	"

	| bitmap brush focusBrush |
	bitmap := Bitmap extent: 500 @ 250.
	brush := PathGradientBrush points: {100 @ 0. 200 @ 200. 0 @ 200}.
	brush blendColors: {Color red. Color blue} positions: #(0 1).
	focusBrush := brush clone focusScales: 0.2 @ 0.6.
	bitmap graphics
		fillRectangle: (0 @ 0 extent: 200 @ 200) brush: brush;
		drawString: 'Original' at: 0 @ 0;
		translate: 250 @ 0;
		fillRectangle: (0 @ 0 extent: 200 @ 200) brush: focusBrush;
		drawString: 'Focus scales' at: 0 @ 0;
		free.
	^bitmap!

exampleGdipPGGamma
	"MSDN:  Using GDI+ >  Filling Shapes with a Gradient Brush > Applying Gamma Correction to a Gradient
	This example shows a brush based on a star-shaped path with and without gamma correction applied.

		self exampleGdipPGGamma showExample
	"

	| bitmap path colors brush |
	bitmap := Bitmap extent: 400 @ 200.
	path := GraphicsPath polygon: {75 @ 0.
						100 @ 50.
						150 @ 50.
						112 @ 75.
						150 @ 150.
						75 @ 100.
						0 @ 150.
						37 @ 75.
						0 @ 50.
						50 @ 50}.
	colors := {Color black.
				Color green.
				Color blue.
				Color white.
				Color black.
				Color green.
				Color blue.
				Color white.
				Color black.
				Color green}.
	(brush := PathGradientBrush path: path)
		centerColor: Color red;
		surroundColors: colors.
	bitmap graphics fillPath: path brush: brush.
	brush isGammaCorrected: true.
	bitmap graphics
		translate: 200 @ 0;
		fillPath: path brush: brush;
		resetTransform;
		drawString: 'Original' at: 0 @ 160;
		drawString: 'Gamma corrected' at: 200 @ 160.
	^bitmap!

exampleGdipPGMultiply
	"This example shows a triangle brush at normal size, then scaled, then scaled and multiplied.

		self exampleGdipPGMultiply showExample
	"

	| bitmap graphics points matrix brush |
	bitmap := Bitmap extent: 650 @ 350.
	graphics := bitmap graphics.
	points := {0 @ 0. 150 @ 0. 150 @ 150}.
	brush := PathGradientBrush points: points.
	graphics
		fillRectangle: (0 @ 0 extent: 200 @ 200) brush: brush;
		drawString: 'Original' at: 0 @ 40.
	brush scale: 3 @ 1.
	graphics
		fillRectangle: (0 @ 0 extent: 450 @ 150) brush: brush;
		drawString: 'Scaled' at: 200 @ 0.
	matrix := Matrix fromArray: #(1 0 0 1 150 150).
	brush multiply: matrix order: MatrixOrderAppend.
	graphics
		fillRectangle: (0 @ 0 extent: 600 @ 300) brush: brush;
		drawString: 'Scaled and Multiplied' at: 350 @ 150.
	^bitmap!

exampleGdipPGScale
	"This example shows a triangle brush at normal size and then scaled.

		self exampleGdipPGScale showExample
	"

	| bitmap brush scaledBrush |
	bitmap := Bitmap extent: 650 @ 350.
	brush := PathGradientBrush points: {100 @ 0. 200 @ 200. 0 @ 200}.
	brush centerColor: Color red.
	scaledBrush := brush copy scale: 3 @ 1.5.
	bitmap graphics
		fillRectangle: (0 @ 0 extent: 200 @ 200) brush: brush;
		drawString: 'Original' at: 0 @ 40;
		fillRectangle: (0 @ 0 extent: 600 @ 600) brush: scaledBrush;
		drawString: 'Scaled' at: 200 @ 0.
	^bitmap!

exampleGdipPGScaleAndTranslate
	"This example shows a triangle brush before and after scaling and translation.

		self exampleGdipPGScaleAndTranslate showExample
	"

	| bitmap brush graphics |
	bitmap := Bitmap extent: 500 @ 500.
	brush := PathGradientBrush points: {0 @ 0. 50 @ 0. 50 @ 50} wrapMode: WrapModeTileFlipXY.
	graphics := bitmap graphics.
	"Fill an area with the path gradient brush (no transformation)."
	graphics fillRectangle: (0 @ 0 extent: 500 @ 500) brush: brush.
	brush
		scale: 3 @ 1;
		translate: 100 @ 50 order: MatrixOrderAppend.
	"Fill the same area with the transformed path gradient brush."
	graphics fillRectangle: (0 @ 0 extent: 500 @ 500) brush: brush.
	^bitmap!

exampleGdipPGSurroundColors
	"This example creates a path gradient brush from a path, then sets its center and outer boundary colors.

		self exampleGdipPGSurroundColors showExample
	"

	| bitmap brush |
	bitmap := Bitmap extent: 400 @ 400.
	brush := PathGradientBrush points: {100 @ 0. 200 @ 200. 0 @ 200}.
	brush wrapMode: WrapModeTile.
	brush centerColor: Color yellow.
	bitmap graphics fillRectangle: (0 @ 0 extent: 200 @ 200) brush: brush.
	brush surroundColor: Color red.
	bitmap graphics fillRectangle: (200 @ 0 extent: 200 @ 200) brush: brush.
	brush surroundColors: {Color red. Color green}.
	bitmap graphics fillRectangle: (0 @ 200 extent: 200 @ 200) brush: brush.
	brush surroundColors: {Color red. Color green. Color blue}.
	bitmap graphics fillRectangle: (200 @ 200 extent: 200 @ 200) brush: brush.
	^bitmap!

exampleGdipPGSurroundColors2
	"This example creates a path gradient brush from an elliptical path, then sets its outer boundary colors.

		self exampleGdipPGSurroundColors2 showExample
	"

	| bitmap path brush rgb |
	bitmap := Bitmap extent: 600 @ 450.
	path := GraphicsPath new addEllipse: (0 @ 0 extent: 200 @ 150).
	(brush := PathGradientBrush path: path)
		wrapMode: WrapModeTile;
		centerColor: Color yellow.
	bitmap graphics fillRectangle: (0 @ 0 extent: 200 @ 150) brush: brush.
	brush surroundColors: {Color red}.
	bitmap graphics fillRectangle: (200 @ 0 extent: 200 @ 150) brush: brush.
	brush surroundColors: {Color red. Color green}.
	bitmap graphics fillRectangle: (400 @ 0 extent: 200 @ 150) brush: brush.
	rgb := {Color red. Color green. Color blue}.
	brush surroundColors: rgb.
	bitmap graphics fillRectangle: (0 @ 150 extent: 200 @ 150) brush: brush.
	brush surroundColors: rgb , {Color cyan}.
	bitmap graphics fillRectangle: (200 @ 150 extent: 200 @ 150) brush: brush.
	brush surroundColors: rgb , {Color cyan. Color magenta}.
	bitmap graphics fillRectangle: (400 @ 150 extent: 200 @ 150) brush: brush.
	brush surroundColors: rgb , {Color cyan. Color magenta. Color black}.
	bitmap graphics fillRectangle: (0 @ 300 extent: 200 @ 150) brush: brush.
	brush
		surroundColors: (Array new: 13 withAll: Color cyan) , (Array new: 13 withAll: Color magenta)
				, (Array new: 13 withAll: Color yellow) , (Array new: 13 withAll: Color red)
				, (Array new: 13 withAll: Color blue).
	bitmap graphics fillRectangle: (200 @ 300 extent: 200 @ 150) brush: brush.
	brush surroundColor: Color red.
	bitmap graphics fillRectangle: (400 @ 300 extent: 200 @ 150) brush: brush.
	^bitmap!

exampleGdipPGTransform
	"This example shows a triangle brush untransformed, then rotated and translated.

		self exampleGdipPGTransform showExample
	"

	| bitmap graphics matrix brush |
	bitmap := Bitmap extent: 500 @ 350.
	graphics := bitmap graphics.
	brush := PathGradientBrush points: {100 @ 0. 200 @ 200. 0 @ 200}.
	brush wrapMode: WrapModeTile.
	brush centerColor: Color yellow.
	brush surroundColors: {Color red. Color green. Color blue}.
	graphics
		fillRectangle: (0 @ 0 extent: 200 @ 200) brush: brush;
		drawString: 'Original' at: 0 @ 0.
	"Set the transformation for the brush (rotate, then translate)."
	matrix := Matrix fromArray: #(0 1 -1 0 250 100).
	brush transform: matrix.
	graphics
		fillRectangle: (250 @ 100 extent: 200 @ 200) brush: brush;
		drawString: 'Rotated and translated' at: 250 @ 80.
	^bitmap!

exampleGdipPGTranslate
	"This example shows a triangle brush before and after translation.

		self exampleGdipPGTranslate showExample
	"

	| bitmap brush translateBrush |
	bitmap := Bitmap extent: 400 @ 300.
	brush := PathGradientBrush points: {100 @ 0. 200 @ 200. 0 @ 200}.
	brush centerColor: Color blue.
	translateBrush := brush clone translate: 125 @ 75.
	bitmap graphics
		fillRectangle: (0 @ 0 extent: 200 @ 200) brush: brush;
		drawString: 'Original' at: 0 @ 0;
		fillRectangle: (0 @ 0 extent: 400 @ 300) brush: translateBrush;
		drawString: 'Translated' at: 200 @ 75.
	^bitmap!

exampleGdipPGWrapMode
	"This example displays the effects of different WrapMode constants.

		self exampleGdipPGWrapMode showExample
	"

	| bitmap brush |
	bitmap := Bitmap extent: 600 @ 400.
	brush := PathGradientBrush points: {5 @ 5. 25 @ 30. 35 @ 60. 10 @ 50}.
	brush centerColor: Color red.
	"Take out 'reverse' in next line and see the effect on WrapModeClamp."
	{WrapModeTile. WrapModeTileFlipX. WrapModeTileFlipY. WrapModeTileFlipXY. WrapModeClamp} reverse
		with: {0 @ 0. 200 @ 0. 400 @ 0. 0 @ 200. 200 @ 200}
		do: 
			[:mode :point |
			brush wrapMode: mode.
			bitmap graphics
				fillRectangle: (point + 10 extent: 180 @ 180) brush: brush;
				drawString: (Gdiplus.WrapModeNames at: mode + 1) at: point].
	^bitmap!

examplesWorkspace
	"Private - These are examples in progress.  Evaluate each block separately (or all at once).

		self examplesWorkspace
	"

	| graphics bitmap points brush path colors rect |

	"#blendFactors:positions:"
	graphics := (bitmap := Bitmap new) graphics.
	path := GraphicsPath new addEllipse: (10 @ 10 corner: 300 @ 200).
	brush := PathGradientBrush path: path.
	brush centerColor: Color red.
	brush surroundColor: Color cyan.
	brush blendFactors: #(0 0.4 0.8 1) positions: #(0 0.3 0.7 1).
	graphics fillRectangle: (10 @ 10 corner: 350 @ 350) brush: brush.
	bitmap showExample.

	"blendTriangularShape:scale:"
	graphics := (bitmap := Bitmap new) graphics.
	path := GraphicsPath new addEllipse: (10 @ 10 corner: 300 @ 200).
	brush := PathGradientBrush path: path.
	brush centerColor: Color red.
	colors := {Color blue}.
	brush surroundColors: colors.
	brush blendTriangularShape: 0.2 scale: 0.7.
	graphics fillRectangle: (10 @ 10 corner: 350 @ 350) brush: brush.
	bitmap showExample.

	"blendBellShape:scale:"
	graphics := (bitmap := Bitmap new) graphics.
	path := GraphicsPath new addEllipse: (10 @ 10 corner: 300 @ 200).
	brush := PathGradientBrush path: path.
	brush centerColor: Color red.
	colors := {Color blue}.
	brush surroundColors: colors.
	brush blendBellShape: 0.2 scale: 0.7.
	graphics fillRectangle: (10 @ 10 corner: 350 @ 350) brush: brush.
	bitmap showExample.

	"#bounds"
	graphics := (bitmap := Bitmap new) graphics.
	points := {30 @ 20. 150 @ 40. 100 @ 100. 60 @ 200}.
	"	points := points collect: [:e | e - (30@20)].		"
	"	points := points collect: [:e | e + (100@100)].	"
	brush := PathGradientBrush points: points.
	rect := brush bounds.
	graphics fillRectangle: rect brush: brush.
	graphics drawRectangle: rect pen: Pen new.
	graphics drawPolygon: points pen: Pen red.
	"	graphics fillPolygon: points brush: brush.	"
	bitmap showExample!

icon
	"Demonstrates use of a PathGradientBrush for painting the background of a TextTileIcon"

	^##((TextTileIcon
		text: $\x1F58C
		fontName: 'Segoe UI Emoji'
		color: ((self path: ((GraphicsPath ellipse: (0 @ 0 extent: 256 @ 164))
						rotate: -45;
						translate: -24 @ 164;
						yourself))
				surroundColor: Color lightCyan;
				centerColor: Color midnightBlue;
				blendTriangularShape: 0.1 scale: 0.7;
				yourself))
			yourself)! !

!Graphics.Gdiplus.PathGradientBrush class categoriesForMethods!
exampleGdipPGBlendColors!examples!public!sunit! !
exampleGdipPGBlendFactors!examples!public!sunit! !
exampleGdipPGBounds!examples!public!sunit! !
exampleGdipPGCenterColor!examples!public!sunit! !
exampleGdipPGCenterPoint!examples!public!sunit! !
exampleGdipPGFocusScales!examples!public!sunit! !
exampleGdipPGGamma!examples!public!sunit! !
exampleGdipPGMultiply!examples!public!sunit! !
exampleGdipPGScale!examples!public!sunit! !
exampleGdipPGScaleAndTranslate!examples!public!sunit! !
exampleGdipPGSurroundColors!examples!public!sunit! !
exampleGdipPGSurroundColors2!examples!public!sunit! !
exampleGdipPGTransform!examples!public!sunit! !
exampleGdipPGTranslate!examples!public!sunit! !
exampleGdipPGWrapMode!examples!public!sunit! !
examplesWorkspace!examples!private! !
icon!constants!public! !
!

!Graphics.Gdiplus.Pen class methodsFor!

exampleGdipPAttributes
	"From MSDN: Using GDI+ > Using a Pen to Draw Lines and Shapes > Setting Pen Width and Alignment

		self exampleGdipPAttributes showExample
	"

	| bitmap graphics blackPen greenPen |
	bitmap := Bitmap extent: 150 @ 300.
	graphics := bitmap graphics.
	blackPen := Pen black.
	greenPen := Pen green width: 10.
	graphics
		drawLine: (10 @ 10 corner: 100 @ 50) pen: greenPen;
		drawLine: (10 @ 10 corner: 100 @ 50) pen: blackPen;
		drawRectangle: (10 @ 100 corner: 100 @ 150) pen: greenPen;
		drawRectangle: (10 @ 100 corner: 100 @ 150) pen: blackPen.
	greenPen
		alignment: PenAlignmentInset;
		width: 15.
	graphics
		drawRectangle: (10 @ 200 corner: 100 @ 250) pen: greenPen;
		drawRectangle: (10 @ 200 corner: 100 @ 250) pen: blackPen.
	^bitmap!

exampleGdipPCompoundArray
	"This example draws several thick lines that each appear as several thinner parallel lines.

		self exampleGdipPCompoundArray showExample
	"

	| bitmap graphics pen |
	bitmap := Bitmap extent: 450 @ 350.
	graphics := bitmap graphics.
	pen := Pen blue width: 30.
	pen compoundArray: #(0 1).
	graphics
		drawLine: (10 @ 60 corner: 400 @ 60) pen: pen;
		drawString: 'compoundArray: ' 
					, (pen compoundArray collect: [:e | e roundTo: 0.1]) displayString
			at: 100 @ 10.
	pen compoundArray: #(0 0.5 0.9 1).
	graphics
		drawLine: (10 @ 160 corner: 400 @ 160) pen: pen;
		drawString: 'compoundArray: ' 
					, (pen compoundArray collect: [:e | e roundTo: 0.1]) displayString
			at: 100 @ 110.
	pen compoundArray: #(0 0.5 0.6 0.7 0.9 1).
	graphics
		drawLine: (10 @ 260 corner: 400 @ 260) pen: pen;
		drawString: 'compoundArray: ' 
					, (pen compoundArray collect: [:e | e roundTo: 0.1]) displayString
			at: 100 @ 210.
	^bitmap!

exampleGdipPCustomCaps
	"MSDN:  Pen::SetCustomStartCap and Pen::SetCustomEndCap Methods
	This example creates a GdiplusGraphicsPath object and adds a rectangle to it
	The code then creates a GdiplusPen object, sets the custom start and end caps 
	based on the path object, and draws a line.

		self exampleGdipPCustomCaps showExample
	"

	| bitmap graphics strokePath pen custCap |
	bitmap := Bitmap extent: 300 @ 200.
	graphics := bitmap graphics.
	strokePath := GraphicsPath fromRectangle: (-10 @ -5 corner: 20 @ 10).
	pen := Pen blue.
	custCap := CustomLineCap strokePath: strokePath.
	pen customStartCap: custCap.
	pen customEndCap: custCap.
	graphics drawLine: (20 @ 20 corner: 200 @ 100) pen: pen.
	^bitmap!

exampleGdipPDashCap
	"MSDN:  Pen::SetDashCap Method

		self exampleGdipPDashCap showExample
	"

	| bitmap graphics pen |
	bitmap := Bitmap extent: 300 @ 200.
	graphics := bitmap graphics.
	pen := Pen blue width: 15.
	pen dashStyle: DashStyleDash.
	pen dashCap: DashCapTriangle.
	graphics drawLine: (20 @ 20 corner: 280 @ 180) pen: pen.
	^bitmap!

exampleGdipPDashPattern
	"This example draws a dashed line.  An array specifies the size of each pair of dash and space.

		self exampleGdipPDashPattern showExample
	"

	| bitmap pen |
	bitmap := Bitmap extent: 450 @ 200.
	pen := Pen blue width: 5.
	pen dashPattern: #(10 2).
	(bitmap graphics)
		drawLine: (10 @ 40 extent: 400 @ 0) pen: pen;
		drawString: 'dashPattern: ' , (pen dashPattern collect: [:e | e asInteger]) displayString
			at: 50 @ 10.
	pen dashPattern: #(10 2 7 4).
	(bitmap graphics)
		drawLine: (10 @ 100 extent: 400 @ 0) pen: pen;
		drawString: 'dashPattern: ' , (pen dashPattern collect: [:e | e asInteger]) displayString
			at: 50 @ 70.
	pen dashPattern: #(10 2 2 2 2 2).
	(bitmap graphics)
		drawLine: (10 @ 160 extent: 400 @ 0) pen: pen;
		drawString: 'dashPattern: ' , (pen dashPattern collect: [:e | e asInteger]) displayString
			at: 50 @ 130.
	^bitmap!

exampleGdipPDrawing
	"MSDN:  Using GDI+ > Using a Pen to Draw Lines and Shapes > Using a Pen to Draw Lines and Rectangles 
	This example draws a line and a thick-bordered rectangle.

		self exampleGdipPDrawing showExample
	"

	| bitmap pen |
	bitmap := Bitmap extent: 350 @ 150.
	pen := Pen black.
	bitmap graphics
		drawLine: (20 @ 10 corner: 300 @ 100) pen: pen;
		drawRectangle: (10 @ 10 corner: 100 @ 50) pen: (pen width: 5).
	^bitmap!

exampleGdipPFillWithTexture
	"MSDN: Using GDI+ > Using a Pen to Draw Lines and Shapes > Drawing a Line Filled with a Texture
	This example creates a blank Bitmap and accesses its Graphics object.  It creates a thumbnail Image
	from an Image from a file.  It creates a Brush based on the image and a thick Pen based on the brush.
	Finally, the graphics object draws the thumbnail Image and an ellipses. 

		self exampleGdipPFillWithTexture showExample
	"

	| bitmap image brush pen |
	bitmap := Bitmap extent: 350 @ 150.
	image := (Image fromFile: self fileResource pafEyeJpg) thumbnailWithHeight: 32.
	brush := TextureBrush image: image.
	pen := Pen brush: brush width: 30.
	bitmap graphics
		drawImage: image;
		drawEllipse: (100 @ 20 extent: 200 @ 100) pen: pen.
	^bitmap!

exampleGdipPJoiningLines
	"From MSDN: Using GDI+ > Using a Pen to Draw Lines and Shapes > Joining Lines

		self exampleGdipPJoiningLines showExample
	"

	| bitmap graphics path pen joins |
	joins := {LineJoinMiter. LineJoinBevel. LineJoinRound. LineJoinMiterClipped}.
	bitmap := Bitmap extent: 600 @ 400.
	graphics := bitmap graphics.
	pen := Pen blue width: 15.
	path := GraphicsPath lines: {20 @ 50. 70 @ 50. 70 @ 50. 50 @ 100}.
	joins do: 
			[:each |
			pen lineJoin: each.
			graphics
				drawPath: path pen: pen;
				drawString: (Gdiplus.LineJoinNames at: each + 1) at: 0 @ 20]
		separatedBy: [graphics translate: 120 @ 0].
	graphics resetTransform.
	path := GraphicsPath lines: {20 @ 150. 70 @ 150. 70 @ 200}.
	joins do: 
			[:each |
			pen lineJoin: each.
			graphics drawPath: path pen: pen]
		separatedBy: [graphics translate: 120 @ 0].
	graphics resetTransform.
	path := GraphicsPath lines: {20 @ 250. 70 @ 250. 90 @ 300}.
	joins do: 
			[:each |
			pen lineJoin: each.
			graphics drawPath: path pen: pen]
		separatedBy: [graphics translate: 120 @ 0].
	^bitmap!

exampleGdipPLineCaps
	"This example displays the various LineCap styles that can be used at the start and end of 
	lines drawn with a pen.  For each cap style, the pen draws a vertical and diagonal line.  
	Horizontal lines are drawn above and below all the lines to show where each line cap 
	ends relative to its line end.

		self exampleGdipPLineCaps showExample
	"

	| bitmap graphics pen row x y |
	bitmap := Bitmap extent: 750 @ 500.
	graphics := bitmap graphics.
	pen := Pen red width: 9.
	{LineCapFlat.
		LineCapSquare.
		LineCapRound.
		LineCapTriangle.
		LineCapNoAnchor.
		LineCapSquareAnchor.
		LineCapRoundAnchor.
		LineCapDiamondAnchor.
		LineCapArrowAnchor.
		LineCapAnchorMask.
		LineCapCustom} keysAndValuesDo: 
				[:i :each |
				pen startCap: each.
				pen endCap: each.
				row := (i - 1) // 4.
				y := row * 160 + 40.
				x := (i - 1 - (row * 4)) * 175 + 10.
				graphics
					drawLine: (x @ y extent: 100 @ 100) pen: pen;
					drawLine: ((x + 50) @ y extent: 0 @ 100) pen: pen;
					drawString: (Gdiplus nameOfLineCap: each) at: x @ (row * 160 + 5)].
	pen := Pen blue.
	0 to: 2
		do: 
			[:i |
			graphics
				drawLine: (5 @ (i * 160 + 40) extent: 700 @ 0) pen: pen;
				drawLine: (5 @ (i * 160 + 140) extent: 700 @ 0) pen: pen].
	^bitmap!

examplesWorkspace
	"Private - These are examples in progress.  Evaluate each block separately (or all at once).

		self examplesWorkspace
	"

	| bitmap graphics pen matrix brush |
	#GdiplusPen.

	"#transform:"
	bitmap := Bitmap new.
	graphics := bitmap graphics.
	pen := Pen blue width: 2.
	graphics drawRectangle: (10 @ 50 extent: 150 @ 100) pen: Pen black.
	matrix := Matrix fromArray: #(20 0 0 10 0 0).
	pen transform: matrix.
	graphics drawRectangle: (210 @ 50 extent: 150 @ 100) pen: pen.
	pen resetTransform.
	graphics drawRectangle: (10 @ 50 extent: 150 @ 100) pen: (pen color: Color red).
	bitmap showExample.

	"#scale:"
	bitmap := Bitmap new.
	graphics := bitmap graphics.
	pen := Pen blue width: 2.
	graphics drawRectangle: (50 @ 50 extent: 150 @ 100) pen: pen.
	pen scale: 8 @ 4.
	graphics drawRectangle: (250 @ 50 extent: 150 @ 100) pen: pen.
	bitmap showExample.

	"#rotate:"
	bitmap := Bitmap new.
	graphics := bitmap graphics.
	pen := Pen blue width: 5.
	"pen rotate: 30."
	pen scale: 1 @ 4 order: MatrixOrderAppend.
	graphics drawEllipse: (50 @ 50 extent: 200 @ 150) pen: pen.
	pen resetTransform.
	graphics drawEllipse: (50 @ 50 extent: 200 @ 150) pen: (pen color: Color red).
	bitmap showExample.

	"#dashStyle:"
	bitmap := Bitmap new.
	graphics := bitmap graphics.
	pen := Pen blue width: 15.
	pen dashStyle: DashStyleDash.
	graphics drawLine: (0 @ 50 corner: 400 @ 150) pen: pen.
	pen dashStyle: DashStyleDot.
	graphics drawLine: (0 @ 80 corner: 400 @ 180) pen: pen.
	pen dashStyle: DashStyleDashDot.
	graphics drawLine: (0 @ 110 corner: 400 @ 210) pen: pen.
	bitmap showExample.

	"#brush:"
	bitmap := Bitmap new.
	graphics := bitmap graphics.
	brush := HatchBrush 
				style: HatchStyleVertical
				forecolor: Color red
				backcolor: Color blue.
	pen := Pen green width: 10.
	graphics drawLine: (10 @ 10 corner: 200 @ 50) pen: pen.
	pen brush: brush.
	graphics drawLine: (10 @ 10 corner: 200 @ 100) pen: pen.
	bitmap showExample!

icon
	^##((TextTileIcon text: $\x1F58A fontName: 'Segoe UI Emoji')
		textcolor: Color navy;
		yourself)! !

!Graphics.Gdiplus.Pen class categoriesForMethods!
exampleGdipPAttributes!examples!public!sunit! !
exampleGdipPCompoundArray!examples!public!sunit! !
exampleGdipPCustomCaps!examples!public!sunit! !
exampleGdipPDashCap!examples!public!sunit! !
exampleGdipPDashPattern!examples!public!sunit! !
exampleGdipPDrawing!examples!public!sunit! !
exampleGdipPFillWithTexture!examples!public!sunit! !
exampleGdipPJoiningLines!examples!public!sunit! !
exampleGdipPLineCaps!examples!public!unit tests! !
examplesWorkspace!examples!private! !
icon!constants!public! !
!

!Graphics.Gdiplus.Region class methodsFor!

exampleClippingSimple
	"Why is the region twice the width of the rectangle?
	LAS: Good question - seems to be some sort of scaling going on relative to Point zero.
	BM: Due to the general bug with the representation of rectangles (they are always [origin,extent] in Gdip, not [origin,corner]). Now fixed.

		self exampleClippingSimple showExample
	"

	| bitmap graphics brush rect1 region1 |
	bitmap := Bitmap extent: 350 @ 350.
	graphics := bitmap graphics.
	brush := Brush blue.
	rect1 := 100 @ 50 extent: 50 @ 150.
	region1 := Region fromRectangle: rect1.
	region1 handle.
	graphics
		fillRegion: region1 brush: brush;
		drawRectangle: rect1 pen: Pen black.
	^bitmap!

exampleGdipRClipWithRegion
	"MSDN:   GDI+ >  Using GDI+ >  Using Regions > Clipping with a Region

		self exampleGdipRClipWithRegion showExample
	"

	| bitmap graphics path fontFamily font brush |
	bitmap := Bitmap extent: 200 @ 200.
	graphics := bitmap graphics.
	path := GraphicsPath polygon: {10 @ 10. 150 @ 10. 100 @ 75. 100 @ 150}.
	graphics drawPath: path.
	graphics clip: (Region fromPath: path).
	fontFamily := FontFamily name: 'Arial'.
	font := Font
				fontFamily: fontFamily
				emSize: 36
				style: FontStyleBold
				unit: UnitPixel.
	brush := Brush red.
	graphics
		drawString: 'A Clipping Region'
		font: font
		at: 15 @ 15
		format: nil
		brush: brush.
	graphics
		drawString: 'A Clipping Region'
		font: font
		at: 15 @ 68
		format: nil
		brush: brush.
	^bitmap!

exampleGdipRHitTesting
	"NB:  This example still does not work right.  Quite a puzzle.
	MSDN:  GDI+ >  Using GDI+ >  Using Regions > Hit Testing with a Region

		self exampleGdipRHitTesting
	"

	| bitmap graphics brush rect1 rect2 region1 presenter onLeftButtonPressed |
	bitmap := Bitmap new.
	graphics := bitmap graphics.
	brush := Brush green.
	rect1 := 50 @ 0 extent: 50 @ 150.
	rect2 := 0 @ 50 extent: 150 @ 50.
	region1 := Region fromRectangle: rect1.
	region1 := region1 union: rect2.
	graphics fillRegion: region1 brush: brush.
	"Show in blue what region1's area should be."
	graphics fillRectangle: rect1 brush: Brush blue.
	graphics fillRectangle: rect2 brush: Brush blue.
	(presenter := UI.ImagePresenter show: 'Basic image' on: bitmap) view viewMode: #normal.
	onLeftButtonPressed := 
			[:aMouseEvent |
			(region1 isVisible: aMouseEvent x @ aMouseEvent y graphics: graphics)
				ifTrue: [brush color: Color green]
				ifFalse: [brush color: Color red].
			graphics fillRegion: region1 brush: brush.
			presenter view invalidate].
	presenter propertyAt: #clickHandler put: onLeftButtonPressed.
	presenter
		when: #leftButtonPressed:
		send: #value:
		to: onLeftButtonPressed! !

!Graphics.Gdiplus.Region class categoriesForMethods!
exampleClippingSimple!examples!public! !
exampleGdipRClipWithRegion!examples!public!sunit! !
exampleGdipRHitTesting!examples!public! !
!

!Graphics.Gdiplus.SolidBrush class methodsFor!

exampleGdipDropShadow
	"
	self exampleGdipDropShadow showExample
	"

	| rect shadowRect shadow bitmap offset |
	rect := 0 @ 0 corner: 100 @ 60.
	offset := 8 @ 8.
	shadowRect := rect topLeft // offset corner: rect extent // offset.
	shadow := Bitmap extent: shadowRect extent.
	shadow graphics fillRectangle: shadowRect
		brush: (Brush color: (Color
						a: 128
						r: 0
						g: 0
						b: 0)).
	bitmap := Bitmap extent: rect extent + (offset * 2).
	bitmap graphics
		interpolationMode: InterpolationModeHighQualityBicubic;
		drawImage: shadow
			at: offset
			extent: rect extent
			from: 0 @ 0
			extent: shadowRect extent.
	shadow free.
	bitmap graphics
		fillRectangle: rect brush: (Brush color: Color white);
		drawRectangle: rect.
	^bitmap!

exampleGdipSBFillAShape
	"MSDN: GDI+ > Using GDI+ > Using a Brush to Fill Shapes > Filling a Shape with a Solid Color

		self exampleGdipSBFillAShape showExample
	"

	| bitmap |
	bitmap := Bitmap extent: 200 @ 150.
	bitmap graphics fillEllipse: (50 @ 50 extent: 100 @ 60) brush: Brush red.
	^bitmap!

icon
	^##(TextTileIcon
		text: $\x1F58C
		fontName: 'Segoe UI Emoji'
		color: Color darkSeaGreen)! !

!Graphics.Gdiplus.SolidBrush class categoriesForMethods!
exampleGdipDropShadow!examples!public!sunit! !
exampleGdipSBFillAShape!examples!public!sunit! !
icon!constants!public! !
!

!Graphics.Gdiplus.StringFormat class methodsFor!

exampleGdipSFFormatText
	"MSDN:  GDI+ >  Using GDI+ >  Using Text and Fonts > Formatting Text
	This example displays a string centered within a rectangle.

		self exampleGdipSFFormatText showExample
	"

	| bitmap font rect |
	bitmap := Bitmap extent: 300 @ 300.
	font := Font
				name: 'Arial'
				emSize: 12
				style: FontStyleBold
				unit: UnitPoint.
	rect := bitmap bounds insetBy: 75.
	bitmap graphics
		drawString: 'Use StringFormat and Rectangle objects to center text in a rectangle.'
			font: font
			rect: rect
			format: StringFormat centered
			brush: Brush blue;
		drawRectangle: rect.
	^bitmap!

exampleGdipSFGenerics
	" GDI+ >  GDI+ Reference >  Classes >  StringFormat >  StringFormat Methods
	This example draws a string three times, using different GdiplusStringFormat creation methods.
 
		self exampleGdipSFGenerics showExample
	"

	| bitmap graphics brush font rect stringFormat pen |
	bitmap := Bitmap extent: 300 @ 350.
	bitmap resolution: 96@96.
	graphics := bitmap graphics.
	brush := Brush blue.
	font := Font name: 'Times New Roman' pointSize: 12.
	rect := 30 @ 30 extent: 160 @ 50.
	pen := Pen blue.
	stringFormat := StringFormat genericDefault.
	graphics
		drawString: 'This text was formatted by a generic StringFormat object.'
		font: font
		rect: rect
		format: stringFormat
		brush: brush.
	graphics drawRectangle: rect pen: pen.
	rect moveBy: 0 @ 100.
	pen color: Color red.
	brush color: Color red.
	stringFormat := StringFormat genericTypographic.
	graphics
		drawString: 'This text was formatted by a typographic StringFormat object.'
		font: font
		rect: rect
		format: stringFormat
		brush: brush.
	graphics drawRectangle: rect pen: pen.
	rect moveBy: 0 @ 100.
	pen color: Color black.
	brush color: Color black.
	stringFormat := StringFormat new.
	graphics
		drawString: 'This text was formatted by a new StringFormat object.'
		font: font
		rect: rect
		format: stringFormat
		brush: brush.
	graphics drawRectangle: rect pen: pen.
	^bitmap!

exampleGdipSFGenericTypographic
	" This example draws a string using the generic typographic format, and then using a custom string format with what the Microsoft docs claim are the settings of the generic typographic format. It is clear from the results that the documentation does not accurately describe the generic typographic settings. One of the most notable differences is that there is no left margin when using the generic typographic format, and it does not appear to be possible to reproduce this particular aspect using the public StringFormat API.
 
		self exampleGdipSFGenericTypographic showExample
	"

	| bitmap graphics font rect genericTypographic supposedlyGenericTypographic string |
	bitmap := Bitmap extent: 300 @ 350.
	graphics := bitmap graphics.
	font := Font name: 'Times New Roman' pointSize: 12.

	"Create a generic typographic StringFormat object."
	genericTypographic := StringFormat genericTypographic.
	"Use the generic typographic StringFormat object 
	in a call to DrawString."
	rect := 30 @ 30 extent: 100 @ 120.
	string := '&Now is the time for all good men to come to the aid of their country'.
	graphics
		drawString: string
		font: font
		rect: rect
		format: genericTypographic
		brush: Brush black.
	"Draw the rectangle that encloses the text."
	graphics drawRectangle: (graphics
				measureString: string
				font: font
				rect: rect
				format: genericTypographic)
		pen: Pen red.
	graphics translate: 0 @ 150.
	"If we create a StringFormat that supposedly has the same settings as genericTypographic, you can see from the measureString result that actually there is something special about the generic typographic format - there is no horizontal indent at all, and there seems no way to create a StringFormat that is actually the same."
	supposedlyGenericTypographic := (StringFormat
				flags: ##(StringFormatFlagsNoClip | StringFormatFlagsLineLimit | StringFormatFlagsNoFitBlackBox
						| StringFormatFlagsBypassGDI)
				language: NlsConstants.LANG_NEUTRAL)
				alignment: StringAlignmentNear;
				lineAlignment: StringAlignmentNear;
				trimming: StringTrimmingNone;
				digitSubstitution: StringDigitSubstituteUser;
				hotkeyPrefix: HotkeyPrefixNone;
				yourself.
	graphics
		drawString: string
		font: font
		rect: rect
		format: supposedlyGenericTypographic
		brush: Brush black.
	graphics drawRectangle: (graphics
				measureString: string
				font: font
				rect: rect
				format: supposedlyGenericTypographic)
		pen: Pen blue.
	^bitmap!

exampleGdipSFHotkeyPrefix
	"
		self exampleGdipSFHotkeyPrefix showExample
	"

	| bitmap graphics font stringFormat string rect |
	bitmap := Bitmap extent: 220 @ 260.
	graphics := bitmap graphics.
	font := Font name: 'Times New Roman' pixelSize: 24.
	stringFormat := StringFormat new.
	stringFormat hotkeyPrefix: HotkeyPrefixShow.
	string := 'This &text has some &underlined characters.'.
	rect := 30 @ 30 extent: 160 @ 200.
	graphics
		drawString: string
			font: font
			rect: rect
			format: stringFormat
			brush: Brush black;
		drawRectangle: rect pen: Pen red.
	^bitmap!

exampleGdipSFTabs
	"This example creates a GdiplusStringFormat instance, sets its tab-stops, and then draws a
	string that contains embedded tabs.

		self exampleGdipSFTabs showExample
	"

	| bitmap graphics font rect stringFormat offset |
	bitmap := Bitmap extent: 550 @ 200.
	bitmap resolution: 96@96.
	graphics := bitmap graphics.
	font := Font name: 'Courier New' pointSize: 12.
	stringFormat := StringFormat new tabOffsets: #(150 100 100).
	rect := 20 @ 20 extent: 500 @ 100.
	offset := 0.
	graphics
		drawString: 'Name	Test 1	Test 2	Test 3'
			font: font
			rect: rect
			format: stringFormat
			brush: Brush blue;
		drawString: 'Tabs set at: '
					, (stringFormat tabOffsets collect: 
								[:e |
								offset := offset + e.
								offset asInteger])
							displayString
			font: font
			at: 20 @ 50
			format: stringFormat
			brush: Brush red;
		drawRectangle: rect.
	^bitmap!

exampleGdipSFTrimming
	"This example draws a string, using each of the available trimming styles.

		self exampleGdipSFTrimming showExample
	"

	| bitmap graphics string font captionHeight |
	bitmap := Bitmap extent: 550 @ 450.
	bitmap resolution: 96@96.
	graphics := bitmap graphics.
	string := 'One two three four five six seven eight nine'.
	font := Font name: 'Times New Roman' pointSize: 24.
	captionHeight := (graphics measureString: Gdiplus.StringTrimmingNames first font: Font new) y.
	{StringTrimmingNone.
		StringTrimmingCharacter.
		StringTrimmingWord.
		StringTrimmingEllipsisCharacter.
		StringTrimmingEllipsisWord.
		StringTrimmingEllipsisPath} do: 
				[:each |
				| stringFormat row rect |
				stringFormat := StringFormat new trimming: each.
				row := each // 2.
				rect := ((each - (row * 2)) * 250 + 30) @ (row * 130 + 30) extent: 200 @ 80.
				graphics
					drawRectangle: rect;
					drawString: (Gdiplus.StringTrimmingNames at: each + 1) at: rect origin - (0 @ captionHeight + 1);
					drawString: string
						font: font
						rect: rect
						format: stringFormat
						brush: Brush red].
	^bitmap!

icon
	^##((TextTileIcon text: $\x1F5DA fontName: 'Segoe UI Symbol')
		textcolor: Color navy;
		fontStyle: #italic;
		yourself)! !

!Graphics.Gdiplus.StringFormat class categoriesForMethods!
exampleGdipSFFormatText!examples!public!sunit! !
exampleGdipSFGenerics!examples!public!sunit! !
exampleGdipSFGenericTypographic!examples!public!sunit! !
exampleGdipSFHotkeyPrefix!examples!public!sunit! !
exampleGdipSFTabs!examples!public!sunit! !
exampleGdipSFTrimming!examples!public!sunit! !
icon!constants!public! !
!

!Graphics.Gdiplus.TextureBrush class methodsFor!

exampleGdipTBFillAShape
	"MSDN: GDI+ > Using GDI+ > Using a Brush to Fill Shapes > Filling a Shape with an Image Texture
	The following example fills an ellipse with an image.  The code first creates an Image and then a 
	Brush based on the image. The image in the brush is then scaled and the brush is used to fill an 
	ellipse.  Three ellipses are drawn, with varying scales, i.e., smaller, equal, and greater, compared to 
	the image.  When the scaled brush image is smaller than the ellipse, the brush is tiled in the ellipse.

		self exampleGdipTBFillAShape showExample
	"

	| bitmap graphics image brush layoutExtent matrix fac |
	bitmap := Bitmap extent: 600 @ 350.
	graphics := bitmap graphics.
	image := Image fromFile: self fileResource pafEyeJpg.
	layoutExtent := 180 @ 135.
	fac := 0.25 * layoutExtent x / image width.
	graphics
		drawImage: image
		at: 200 @ 0
		extent: layoutExtent.
	brush := TextureBrush image: image.
	"matrix := Matrix rectangle: (fac @ 0 extent: 0 @ fac) point: 0@0.
	brush transform: matrix.
	graphics fillEllipse: (0 @ 170 extent: layoutExtent) brush: brush.
	"fac := layoutExtent x / image width.
	matrix := Matrix rectangle: (fac @ 0 extent: 0 @ fac) point: 0@0.
"	brush transform: matrix."
	graphics fillEllipse: (200 @ 170 extent: layoutExtent) brush: brush.
	"fac := 4 * layoutExtent x / image width.
	matrix := Matrix rectangle: (fac @ 0 extent: 0 @ fac) point: 0@0.
	brush transform: matrix.
	graphics fillEllipse: (400 @ 170 extent: layoutExtent) brush: brush."
	^bitmap!

exampleGdipTBTilingAShape
	"MSDN: GDI+ > Using GDI+ > Using a Brush to Fill Shapes > Tiling a Shape with an Image

		self exampleGdipTBTilingAShape showExample
	"

	| bitmap image brush pen |
	bitmap := Bitmap extent: 450 @ 225.
	image := (Image fromFile: self fileResource pafFish32x32png) thumbnailWithHeight: 75.
	brush := TextureBrush image: image.
	pen := Pen black.
	bitmap graphics
		drawRectangle: (15 @ 15 extent: 200 @ 200) pen: pen;
		fillRectangle: (15 @ 15 extent: 200 @ 200) brush: brush.
	brush free.
	brush := TextureBrush image: image wrapMode: WrapModeTileFlipX.
	bitmap graphics
		drawRectangle: (225 @ 15 extent: 200 @ 200) pen: pen;
		fillRectangle: (225 @ 15 extent: 200 @ 200) brush: brush.
	^bitmap!

icon
	^##(TextTileIcon
		text: $\x1F58C
		fontName: 'Segoe UI Emoji'
		color: (self
				image: (Image fromFile: 'Resources/Beach Ball.png' usingLocator: FileLocator installRelative)))! !

!Graphics.Gdiplus.TextureBrush class categoriesForMethods!
exampleGdipTBFillAShape!examples!public!sunit! !
exampleGdipTBTilingAShape!examples!public!sunit! !
icon!constants!public! !
!

!Graphics.Gdiplus.TransformableBrush class methodsFor!

icon
	^##((TextTileIcon
		text: $\x1F522
		fontName: 'Segoe UI Emoji'
		color: Color darkSeaGreen)
		textcolor: Color navy;
		yourself)! !

!Graphics.Gdiplus.TransformableBrush class categoriesForMethods!
icon!constants!public! !
!

"End of package definition"!

