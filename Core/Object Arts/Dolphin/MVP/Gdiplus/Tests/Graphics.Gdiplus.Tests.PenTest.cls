"Filed out from Dolphin Smalltalk"!

Graphics.Gdiplus.Tests.GdiplusObjectTest
	subclass: #'Graphics.Gdiplus.Tests.PenTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.Gdiplus.Tests.PenTest guid: (Core.GUID fromString: '{0f847c60-85b3-11d7-b609-00e0987e8081}')!
Graphics.Gdiplus.Tests.PenTest comment: ''!
!Graphics.Gdiplus.Tests.PenTest methodsFor!

createCanonicalSubject
	^Pen red!

getPenAlignment: aGdiplusPen
	| buf |
	buf := UInt32Bytes new.
	Gdip gdipGetPenMode: aGdiplusPen handle penMode: buf.
	^buf asSignedInteger!

getPenColor: aGdiplusPen
	| buf |
	buf := UInt32Bytes new.
	Gdip gdipGetPenColor: aGdiplusPen handle argb: buf.
	^Color fromArgbCode: buf asInteger!

getPenCompoundArray: aGdiplusPen
	| count floats handle |
	handle := aGdiplusPen handle.
	count := UInt32Bytes new.
	Gdip gdipGetPenCompoundCount: handle count: count.
	count := count asSignedInteger.
	floats := FLOATArray new: count.
	Gdip
		gdipGetPenCompoundArray: handle
		dash: floats
		count: count.
	^floats!

getPenCustomEndCap: aGdiplusPen
	| gpHandle |
	gpHandle := Handle new.
	Gdip gdipGetPenCustomEndCap: aGdiplusPen handle customCap: gpHandle.
	^gpHandle isNull ifFalse: [CustomLineCap fromOwnedHandle: gpHandle]!

getPenCustomStartCap: aGdiplusPen
	| gpHandle |
	gpHandle := Handle new.
	Gdip gdipGetPenCustomStartCap: aGdiplusPen handle customCap: gpHandle.
	^gpHandle isNull ifFalse: [CustomLineCap fromOwnedHandle: gpHandle]!

getPenDashCap: aGdiplusPen
	| cap |
	cap := UInt32Bytes new.
	Gdip gdipGetPenDashCap197819: aGdiplusPen handle dashCap: cap.
	^cap asInteger!

getPenDashPattern: aGdiplusPen
	| handle count floats |
	handle := aGdiplusPen handle.
	count := UInt32Bytes new.
	Gdip gdipGetPenDashCount: handle count: count.
	count := count asSignedInteger.
	floats := FLOATArray new: count.
	Gdip
		gdipGetPenDashArray: aGdiplusPen handle
		dash: floats
		count: count.
	^floats!

getPenDashStyle: aGdiplusPen
	| style |
	style := UInt32Bytes new.
	Gdip gdipGetPenDashStyle: aGdiplusPen handle dashStyle: style.
	^style asInteger!

getPenEndCap: aGdiplusPen
	| cap |
	cap := UInt32Bytes new.
	Gdip gdipGetPenEndCap: aGdiplusPen handle endCap: cap.
	^cap asInteger!

getPenLineJoin: aGdiplusPen
	| lineJoin |
	lineJoin := UInt32Bytes new.
	Gdip gdipGetPenLineJoin: aGdiplusPen handle lineJoin: lineJoin.
	^lineJoin asInteger!

getPenStartCap: aGdiplusPen
	| cap |
	cap := UInt32Bytes new.
	Gdip gdipGetPenStartCap: aGdiplusPen handle startCap: cap.
	^cap asInteger!

getPenWidth: aGdiplusPen
	| width |
	width := FLOAT newBuffer.
	Gdip gdipGetPenWidth: aGdiplusPen handle width: width.
	^width value!

getTransform: aGdiplusPen
	| transform |
	transform := Matrix new.
	Gdip gdipGetPenTransform: aGdiplusPen handle matrix: transform asParameter.
	^transform!

subjectClass
	^Pen!

testAlignment
	| image graphics rectangle |
	model := Pen brush: Brush red width: 10.
	self assert: model alignment equals: PenAlignmentCenter.
	self assert: (self getPenAlignment: model) equals: PenAlignmentCenter.
	image := Bitmap extent: 100 @ 100.
	graphics := image graphics.
	rectangle := 0 @ 0 extent: 100 @ 100.
	graphics drawRectangle: rectangle pen: model.
	graphics drawRectangle: rectangle.
	self assert: (image pixelAt: 1 @ 1) equals: Color red.
	self deny: (image pixelAt: 5 @ 5) equals: Color white.
	"Overwrite"
	rectangle := rectangle insetBy: 5.
	model color: Color blue.
	graphics drawRectangle: rectangle pen: model.
	graphics drawRectangle: rectangle.
	"Original rectangle should be obliterated"
	self assert: (image pixelAt: 0 @ 0) equals: Color blue.
	self assert: (image pixelAt: 9 @ 9) equals: Color blue.
	rectangle := rectangle insetBy: 5.
	model color: Color green.
	model alignment: PenAlignmentInset.
	self assert: model alignment equals: PenAlignmentInset.
	self assert: (self getPenAlignment: model) equals: PenAlignmentInset.
	model free.
	self assert: model alignment equals: PenAlignmentInset.
	self assert: (self getPenAlignment: model) equals: PenAlignmentInset.
	graphics drawRectangle: rectangle pen: model.
	graphics drawRectangle: rectangle.
	self assert: (image pixelAt: 9 @ 9) equals: Color blue.
	false ifTrue: [image showExample]!

testBrushOfColorPen
	| brush reconstituted |
	brush := Brush green.
	model := Pen color: Color green.
	self assert: model brush equals: brush.
	reconstituted := self assertPersistedValid.
	self assert: reconstituted brush equals: brush.
	reconstituted free!

testChangeColor
	| rect bitmap graphics |
	rect := 0 @ 0 extent: 100 @ 100.
	bitmap := Bitmap extent: rect extent.
	graphics := bitmap graphics.
	model := Pen blue.
	self assert: model color equals: Color blue.
	rect := rect insetBy: 1.
	graphics drawRectangle: rect pen: model.
	self assert: (bitmap pixelAt: rect origin) equals: Color blue.
	model color: Color purple.
	self assert: model color equals: Color purple.
	rect := rect insetBy: 5.
	graphics drawRectangle: rect pen: model.
	self assert: (bitmap pixelAt: rect origin) equals: Color purple.
	model color: Color green.
	self assert: model color equals: Color green.
	"Now check that will persist using current colour, not the original one"
	model free.
	rect := rect insetBy: 5.
	graphics drawRectangle: rect pen: model.
	self assert: (bitmap pixelAt: rect origin) equals: Color green.
	"SolidBrush pen"
	model := Pen brush: Brush red width: 2.
	rect := rect insetBy: 5.
	graphics drawRectangle: rect pen: model.
	self assert: (bitmap pixelAt: rect origin) equals: Color red.
	"Color of a SolidBrush Pen can also be changed"
	model color: Color blueViolet.
	rect := rect insetBy: 5.
	graphics drawRectangle: rect pen: model.
	self assert: (bitmap pixelAt: rect origin) equals: Color blueViolet.
	"And should persist"
	model color: Color aqua.
	model free.
	rect := rect insetBy: 5.
	graphics drawRectangle: rect pen: model.
	self assert: (bitmap pixelAt: rect origin) equals: Color aqua.
	"But we can't change the color of other brush types"
	model := Pen brush: (LinearGradientBrush
						rect: (0 @ 0 corner: 75 @ 50)
						color1: Color brown
						color2: Color antiqueWhite
						mode: LinearGradientModeHorizontal)
				width: 3.
	rect := rect insetBy: 5.
	graphics drawRectangle: rect pen: model.
	"If we change the colour, the Pen reverts to solid ink"
	model color: Color darkSlateBlue.
	rect := rect insetBy: 5.
	graphics drawRectangle: rect pen: model.
	self assert: model brush equals: (Brush color: Color darkSlateBlue).
	self assert: (bitmap pixelAt: rect origin) equals: Color darkSlateBlue!

testChangeWidth
	| rect bitmap graphics |
	rect := 0 @ 0 extent: 100 @ 100.
	bitmap := Bitmap extent: rect extent.
	graphics := bitmap graphics.
	graphics clear: Color white.
	model := Pen blue.
	self assert: model color equals: Color blue.
	rect := rect insetBy: 1.
	graphics drawRectangle: rect pen: model.
	self assert: (bitmap pixelAt: rect origin) equals: Color blue.
	self assert: (bitmap pixelAt: rect origin + 1) equals: Color white.
	model width: 22 / 7.
	self assert: (model width closeTo: 22 / 7 precision: 1.0e-7).
	rect := rect insetBy: 5.
	self assert: (bitmap pixelAt: rect origin) equals: Color white.
	graphics drawRectangle: rect pen: model.
	self assert: (bitmap pixelAt: rect origin) equals: Color blue.
	self assert: (bitmap pixelAt: rect origin + 1) equals: Color blue.
	model width: 3.
	"New width should persist"
	model free.
	self assert: model width equals: 3.
	rect := rect insetBy: 5.
	self assert: (bitmap pixelAt: rect origin) equals: Color white.
	graphics drawRectangle: rect pen: model.
	self assert: (bitmap pixelAt: rect origin) equals: Color blue.
	self assert: (bitmap pixelAt: rect origin + 1) equals: Color blue!

testColor
	| canonical |
	self newCanonicalModel.
	self assert: model width equals: 1.
	canonical := self createCanonicalSubject.
	self assert: model equals: canonical.
	model color: Color magenta.
	self assert: model color equals: Color magenta.
	self assert: (self getPenColor: model) equals: Color magenta.
	self deny: model equals: canonical.
	self assert: model printString equals: '(Gdiplus.Pen ink: Color magenta)'.
	canonical free!

testComparing
	| pen2 |
	self newCanonicalModel.
	pen2 := Pen color: Color red width: 1.0.
	self assert: model equals: pen2.
	self assert: model hash equals: pen2 hash.
	model width: 1.
	pen2 width: nil.
	self assert: model equals: pen2.
	self assert: model hash equals: pen2 hash.
	pen2 := Pen color: Color red width: 2.
	self deny: model equals: pen2.
	self deny: model hash equals: pen2 hash.
	pen2 := Pen brush: Brush red.
	self deny: model equals: pen2.
	self deny: model hash equals: pen2 hash.
	model := Pen brush: Brush red width: 1.
	self assert: model equals: pen2.
	self assert: model hash equals: pen2 hash.
	pen2 := Pen brush: Brush red width: 2.
	self deny: model equals: pen2.
	self deny: model hash equals: pen2 hash.
	pen2 := Pen brush: Brush green.
	self deny: model equals: pen2.
	self deny: model hash equals: pen2 hash!

testCompoundArray
	| array cloned |
	self newCanonicalModel.
	array := #(0 0.5 0.6 0.7 0.9 1).
	model compoundArray: array.
	self assert: (model compoundArray closeTo: array).
	self assert: ((self getPenCompoundArray: model) closeTo: array).
	cloned := self assertPersistedValid.
	self assert: (cloned compoundArray closeTo: array).
	self assert: ((self getPenCompoundArray: model) closeTo: array)!

testCustomEndCap
	| customCap fillPath rect |
	self newCanonicalModel.
	rect := -10 @ -5 corner: 20 @ 10.
	fillPath := GraphicsPath fromRectangle: rect.
	customCap := CustomLineCap
				fillPath: fillPath
				baseCap: Gdiplus.LineCapCustom
				baseInset: 3.
	model customEndCap: customCap.
	self assert: model customEndCap identicalTo: customCap.
	self deny: model isSelfEvaluating.
	false
		ifTrue: 
			[| bitmap |
			bitmap := Bitmap extent: 400 @ 200.
			bitmap graphics drawLine: (50 @ 50 extent: 300 @ 100) pen: model.
			bitmap showExample].

	"We can't reconstitute a CustomLineCap from a handle, so can't verify that the custom cap is as expected in any meaningful way."
	"	self assert: (self getPenCustomEndCap: model) equals: customCap."
	"Can persist though"
	self assertPersistedValid free!

testDashCap
	self newCanonicalModel.
	self assert: model dashCap equals: DashCapFlat.
	self assert: (self getPenDashCap: model) equals: DashCapFlat.
	model dashCap: DashCapTriangle.
	self assert: model dashCap equals: DashCapTriangle.
	self assert: (self getPenDashCap: model) equals: DashCapTriangle.
	model free.
	self assert: (self getPenDashCap: model) equals: DashCapTriangle!

testDashPattern
	| array |
	self newCanonicalModel.
	array := #(5 2 8 4 12).
	model dashPattern: array.
	self assert: (model dashPattern closeTo: array).
	self assert: ((self getPenDashPattern: model) closeTo: array).
	model free.
	self assert: (model dashPattern closeTo: array).
	self assert: ((self getPenDashPattern: model) closeTo: array)!

testDashStyle
	| model2 |
	self newCanonicalModel.
	self assert: model dashStyle equals: DashStyleSolid.
	self assert: (self getPenDashStyle: model) equals: DashStyleSolid.
	model dashStyle: DashStyleDashDotDot.
	self assert: model dashStyle equals: DashStyleDashDotDot.
	self assert: (self getPenDashStyle: model) equals: DashStyleDashDotDot.
	model free.
	self assert: (self getPenDashStyle: model) equals: DashStyleDashDotDot.
	model2 := Pen dashDotDot
				color: Color red;
				yourself.
	self verifyEqualToModel: model2.
	model2 free!

testEndCap
	self newCanonicalModel.
	self assert: model endCap equals: LineCapFlat.
	self assert: (self getPenEndCap: model) equals: LineCapFlat.
	model endCap: LineCapDiamondAnchor.
	self assert: model endCap equals: LineCapDiamondAnchor.
	self assert: (self getPenEndCap: model) equals: LineCapDiamondAnchor.
	model free.
	self assert: (self getPenEndCap: model) equals: LineCapDiamondAnchor!

testIsSelfEvaluating
	self newCanonicalModel.
	self assert: model isSelfEvaluating.
	self verifyEqualToModel: (Compiler evaluate: model printString)!

testLineJoin
	self newCanonicalModel.
	self assert: model lineJoin equals: LineJoinMiter.

	model lineJoin: LineCapDiamondAnchor.
	self assert: model lineJoin equals: LineCapDiamondAnchor.
	self assert: (self getPenLineJoin: model) equals: LineCapDiamondAnchor.
	model free.
	self assert: (self getPenLineJoin: model) equals: LineCapDiamondAnchor!

testMultiplyTransform
	| matrix matrix2 |
	self newCanonicalModel.
	matrix := Matrix fromArray: #(2 3 4 5 150 150).
	model multiply: matrix order: MatrixOrderAppend.
	self assert: model transform equals: matrix.
	self assert: (self getTransform: model) equals: matrix.
	matrix2 := Matrix fromArray: #(0.75 0.5 0.25 0.2 2 3).
	model multiply: matrix2.
	self assert: (model transform closeTo: #(3.5 4.75 1.3 1.75 166 171)).
	self assert: (self getTransform: model) equals: model transform.!

testPrintStringBrush
	| expr model2 expr2 array |
	model := Pen brush: Brush blue.
	expr := model printString.
	self assert: expr equals: '(Gdiplus.Pen ink: (Gdiplus.Brush color: Color blue))'.
	model2 := Pen brush: Brush green width: 10.
	expr2 := model2 printString.
	self assert: expr2 equals: '(Gdiplus.Pen ink: (Gdiplus.Brush color: Color green) width: 10)'.
	array := Compiler evaluate: '{<1s>. <2s>}' << {expr. expr2}.
	self assert: array equals: {model. model2}!

testPrintStringColor
	| expr model2 expr2 array |
	self newCanonicalModel.
	expr := model printString.
	self assert: expr equals: '(Gdiplus.Pen ink: Color red)'.
	model2 := Pen color: Color green width: 10.
	expr2 := model2 printString.
	self assert: expr2 equals: '(Gdiplus.Pen ink: Color green width: 10)'.
	array := Compiler evaluate: '{<1s>. <2s>}' << {expr. expr2}.
	self assert: array equals: {model. model2}.
	model2 alignment: Gdiplus.PenAlignmentInset.
	self assert: model2 printString
		equals: 'a Gdiplus.Pen(ink: Color green width: 10; alignment: Gdiplus.PenAlignmentInset)'!

testResetTransform
	self newCanonicalModel.
	self assert: model transform isIdentity.
	model transform: (Matrix fromArray: #(0.5 2 1.2 7 1 0.2)).
	self deny: model transform isIdentity.
	model resetTransform.
	self assert: model transform isIdentity.
	self assert: (self getTransform: model) isIdentity!

testRotateTransform
	self newCanonicalModel.
	model rotate: 45.
	self assert: (model transform closeTo: #(0.7071067 0.7071066 -0.7071067 0.7071067 -0.0 -0.0)
				precision: 0.000001).
	self assert: (self getTransform: model) equals: model transform!

testScaleTransform
	self newCanonicalModel.
	model scale: 0.2 @ 1.2.
	self assert: (model transform closeTo: #(0.2 0 0 1.2 0 0)).
	self assert: (self getTransform: model) equals: model transform!

testSolidBrush
	| brush |
	model := Pen brush: Brush red width: 10.
	brush := Brush green.
	model brush: brush.
	self assert: model brush equals: brush.
	model free.
	self assert: model brush equals: brush!

testStartCap
	self newCanonicalModel.
	self assert: model startCap equals: LineCapFlat.
	self assert: (self getPenStartCap: model) equals: LineCapFlat.
	model startCap: LineCapDiamondAnchor.
	self assert: model startCap equals: LineCapDiamondAnchor.
	self assert: (self getPenStartCap: model) equals: LineCapDiamondAnchor.
	model free.
	self assert: (self getPenStartCap: model) equals: LineCapDiamondAnchor!

testStlUpgradeFromD7
	| pens |
	pens := Object
				fromLiteralStoreArray: #(#'!!STL' 4 34 2 656134 ##(Smalltalk.GdiplusPen) nil true 1966854 ##(Smalltalk.GdiplusPenFromColorInitializer) nil 327686 ##(Smalltalk.Color) #blue nil 418 nil true 1966854 ##(Smalltalk.GdiplusPenFromBrushInitializer) nil 1704710 ##(Smalltalk.GdiplusLinearGradientBrush) nil true 3081478 ##(Smalltalk.GdiplusLinearGradientBrushFromPointsInitializer) nil 328198 ##(Smalltalk.Point) 1 21 626 401 21 482 #red 496 7).
	self assert: pens first equals: Pen blue.
	self assert: pens second
		equals: (Pen brush: (LinearGradientBrush
						point1: 0 @ 10
						point2: 200 @ 10
						color1: Color red
						color2: Color blue)
				width: 3)!

testTransform
	self newCanonicalModel.
	self assert: model transform isIdentity.
	model transform: (Matrix fromArray: #(0.5 2 1.2 7 1 0.2)).
	self assert: (model transform closeTo: #(0.5 2 1.2 7 1 0.2)).
	self assert: (self getTransform: model) equals: model transform.
	model resetTransform.
	self assert: model transform asArray equals: #(1 0 0 1 0 0)!

testTranslateTransform
	self newCanonicalModel.
	model translate: 100 @ 50.
	self assert: (model transform asArray collect: [:each | each roundTo: 0.0001]) equals: #(1 0 0 1 100 50).
	self assert: (self getTransform: model) equals: model transform!

testWidth
	self newCanonicalModel.
	model width: 10.
	self assert: model width equals: 10! !
!Graphics.Gdiplus.Tests.PenTest categoriesForMethods!
createCanonicalSubject!accessing!public! !
getPenAlignment:!helpers!private! !
getPenColor:!helpers!private! !
getPenCompoundArray:!helpers!private! !
getPenCustomEndCap:!helpers!private! !
getPenCustomStartCap:!helpers!private! !
getPenDashCap:!helpers!private! !
getPenDashPattern:!helpers!private! !
getPenDashStyle:!helpers!private! !
getPenEndCap:!helpers!private! !
getPenLineJoin:!helpers!private! !
getPenStartCap:!helpers!private! !
getPenWidth:!helpers!private! !
getTransform:!helpers!private! !
subjectClass!constants!private! !
testAlignment!public!unit tests! !
testBrushOfColorPen!public!unit tests! !
testChangeColor!public!unit tests! !
testChangeWidth!public!unit tests! !
testColor!public!unit tests! !
testComparing!public!unit tests! !
testCompoundArray!public!unit tests! !
testCustomEndCap!public!unit tests! !
testDashCap!public!unit tests! !
testDashPattern!public!unit tests! !
testDashStyle!public!unit tests! !
testEndCap!public!unit tests! !
testIsSelfEvaluating!public!unit tests! !
testLineJoin!public!unit tests! !
testMultiplyTransform!public!unit tests! !
testPrintStringBrush!public!unit tests! !
testPrintStringColor!public!unit tests! !
testResetTransform!public!unit tests! !
testRotateTransform!public!unit tests! !
testScaleTransform!public!unit tests! !
testSolidBrush!public!unit tests! !
testStartCap!public!unit tests! !
testStlUpgradeFromD7!public!unit tests! !
testTransform!public!unit tests! !
testTranslateTransform!public!unit tests! !
testWidth!public!unit tests! !
!

