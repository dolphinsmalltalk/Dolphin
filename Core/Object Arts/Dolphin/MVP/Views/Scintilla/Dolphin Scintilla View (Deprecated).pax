| package |
package := Package name: 'Dolphin Scintilla View (Deprecated)'.
package paxVersion: 2.1;
	basicComment: 'Dolphin Smalltalk Scintilla View Deprecated Classes & Methods.

This package includes legacy classes and methods from Dolphin''s Scintilla View package that have been deprecated.'.


package setMethodNames: #(
	#(#{UI.Scintilla.Indicator} #type)
	#(#{UI.Scintilla.IndicatorStyle} #alphaPercent)
	#(#{UI.Scintilla.IndicatorStyle} #alphaPercent:)
	#(#{UI.Scintilla.IndicatorStyle} #hoverStyleName)
	#(#{UI.Scintilla.IndicatorStyle} #hoverStyleName:)
	#(#{UI.Scintilla.IndicatorStyle} #styleName)
	#(#{UI.Scintilla.IndicatorStyle} #styleName:)
	#(#{UI.Scintilla.IndicatorStyle class} #styleNames)
	#(#{UI.Scintilla.ScintillaView} #currentLineAlpha:)
	#(#{UI.Scintilla.ScintillaView} #firstVisibleLine:)
	#(#{UI.Scintilla.ScintillaView} #highlightRange:withIndicator:)
	#(#{UI.Scintilla.ScintillaView} #hoverTime)
	#(#{UI.Scintilla.ScintillaView} #hoverTime:)
	#(#{UI.Scintilla.ScintillaView} #indicatorDefinitions:)
	#(#{UI.Scintilla.ScintillaView} #isCurrentLineHighlighted:)
	#(#{UI.Scintilla.ScintillaView} #isDrawingBuffered)
	#(#{UI.Scintilla.ScintillaView} #isDrawingBuffered:)
	#(#{UI.Scintilla.ScintillaView} #isDrawingTwoPhase)
	#(#{UI.Scintilla.ScintillaView} #isDrawingTwoPhase:)
	#(#{UI.Scintilla.ScintillaView} #isKeyboardInputUnicode)
	#(#{UI.Scintilla.ScintillaView} #isKeyboardInputUnicode:)
	#(#{UI.Scintilla.ScintillaView} #marginCount)
	#(#{UI.Scintilla.ScintillaView} #marginCount:)
	#(#{UI.Scintilla.ScintillaView} #sciSetEdgeColumn:)
	#(#{UI.Scintilla.ScintillaView} #secondarySelectionAlpha:)
	#(#{UI.Scintilla.ScintillaView} #selectionAlpha:)
	#(#{UI.Scintilla.ScintillaView} #tokenEndAt:)
	#(#{UI.Scintilla.ScintillaView} #tokenRangeAt:)
	#(#{UI.Scintilla.ScintillaView} #tokensFrom:to:)
	#(#{UI.Scintilla.ScintillaView} #tokenStartAt:)
	#(#{UI.Scintilla.ScintillaView} #tokenTextAt:)
).

package setPrerequisites: #(
	'..\..\..\Base\Dolphin'
	'Dolphin Scintilla View'
).

package!

"Loose Methods"!

!UI.Scintilla.Indicator methodsFor!

type
	Notification deprecated.
	^self styleName! !
!UI.Scintilla.Indicator categoriesForMethods!
type!accessing!public! !
!

!UI.Scintilla.IndicatorStyle methodsFor!

alphaPercent
	"Answer an <integer> representing the percentage alpha (transparency) for the indicator.
	Note that this is a percentage (hence the name), and not the usual 0..255 range. Zero
	represents completely transparent, 100 completely opaque. Note that this is currently only
	relevant for the #roundBox indicator style."

	#deprecated.
	^self alpha ifNil: [30] ifNotNil: [:a | a * 100 // SC_ALPHA_OPAQUE]!

alphaPercent: anInteger 
	"Set the percentage alpha (transparency) for the indicator to the <integer> argument. Note
	that this is a percentage (hence the name), and not the usual 0..255 range. Zero represents
	completely transparent, 100 completely opaque. Note that this is currently only relevant for
	the #roundBox indicator style."

	#deprecated.
	self alpha: SC_ALPHA_OPAQUE * anInteger // 100!

hoverStyleName
	Notification deprecated.
	^self hoverStyle!

hoverStyleName: aSymbol
	Notification deprecated.
	self hoverStyle: aSymbol!

styleName
	Notification deprecated.
	^self style!

styleName: aSymbol
	Notification deprecated.
	self style: aSymbol! !
!UI.Scintilla.IndicatorStyle categoriesForMethods!
alphaPercent!accessing!public! !
alphaPercent:!accessing!public! !
hoverStyleName!accessing!public! !
hoverStyleName:!accessing!public! !
styleName!accessing!public! !
styleName:!accessing!public! !
!

!UI.Scintilla.IndicatorStyle class methodsFor!

styleNames
	Notification deprecated.
	^IndicatorStyles! !
!UI.Scintilla.IndicatorStyle class categoriesForMethods!
styleNames!initializing!public! !
!

!UI.Scintilla.ScintillaView methodsFor!

currentLineAlpha: alphaInteger
	"Set background alpha of the caret line."

	Notification deprecated.	"Use a currentLineBackcolor with a Color with alpha"
	self currentLineBackcolor: (self currentLineBackcolor alpha: alphaInteger)!

firstVisibleLine: anInteger
	"Scroll so that a display line is at the top of the display."

	Notification deprecated.
	self lineScroll: anInteger!

highlightRange: anInterval withIndicator: idInteger 
	"Apply the indicator identified by the <integer> argument to the range of text
	specified by the <Interval> argument."

	#deprecated.
	self setIndicator: idInteger range: anInterval!

hoverTime
	#deprecated.	"Use #hoverDwell"
	^self sciGetMouseDwellTime!

hoverTime: periodMillisecondsInteger
	#deprecated.	"Use #hoverDwell:. Retained to load legacy view state."
	self sciSetMouseDwellTime: periodMillisecondsInteger!

indicatorDefinitions: aSequenceableCollection 
	#deprecated.
	self indicatorStyles: aSequenceableCollection!

isCurrentLineHighlighted: showBoolean
	"Set whether the background of the line containing the caret is highlighted using a in a different colour than the ambient background colour."

	#deprecated.	"Retained for legacy view state."
	self setOrResetElement: SC_ELEMENT_CARET_LINE_BACK
		color: (showBoolean
				ifTrue: [(elementColors lookup: SC_ELEMENT_CARET_LINE_BACK) ifNil: [self defaultCurrentLineBackcolor]])!

isDrawingBuffered
	#deprecated.	"This setting is managed automatically - turned off when using directWrite, or on when using GDI (drawingMode = #default)"
	^self sciGetBufferedDraw!

isDrawingBuffered: bufferedBoolean
	#deprecated.	"This setting is managed automatically - turned off when using directWrite, or on when using GDI (drawingMode = #default)"
	self sciSetBufferedDraw: bufferedBoolean!

isDrawingTwoPhase
	"Is drawing done in two phases with backgrounds drawn before foregrounds?"

	#deprecated.
	^library
		directBooleanFunction: this
		msg: SCI_GETTWOPHASEDRAW
		wParam: 0
		lParam: 0!

isDrawingTwoPhase: twoPhaseBoolean
	"In twoPhaseDraw mode, drawing is performed in two phases, first the background and then the
	foreground. This avoids chopping off characters that overlap the next run."

	#deprecated.
	library
		directFunction: this
		msg: SCI_SETTWOPHASEDRAW
		wParam: twoPhaseBoolean asParameter
		lParam: 0!

isKeyboardInputUnicode
	"Are keys always interpreted as Unicode?"

	#deprecated.
	^library
		directBooleanFunction: this
		msg: SCI_GETKEYSUNICODE
		wParam: 0
		lParam: 0!

isKeyboardInputUnicode: keysUnicodeBoolean
	"Deprecated in 3.5.5 Always interpret keyboard input as Unicode"

	#deprecated.
	library
		directFunction: this
		msg: SCI_SETKEYSUNICODE
		wParam: keysUnicodeBoolean asParameter
		lParam: 0!

marginCount
	"Answer the maximum number of margins that can be displayed. As of Scintilla 3.7.0
	this is no longer fixed at three."

	#deprecated.
	^self sciGetMargins!

marginCount: anInteger
	"Set the maximum number of margins that can be displayed. As of Scintilla 3.7.0
	this is no longer fixed at three."

	#deprecated.
	^self sciSetMargins: anInteger!

sciSetEdgeColumn: columnInteger
	#deprecated. "For reading old view resources"
	self edgeColumn: columnInteger + 1!

secondarySelectionAlpha: alphaInteger
	#deprecated.	"Retained as used in old saved view state."
	self secondarySelectionBackcolor: (self secondarySelectionBackcolor alpha: alphaInteger)!

selectionAlpha: alphaInteger
	#deprecated.	"Retained as used in old saved view state."
	self selectionBackcolor: (self selectionBackcolor alpha: alphaInteger)!

tokenEndAt: anInteger
	#deprecated.	"Imprecise terminology, too easily confused with real scanner tokens. The 'tokens' here are just runs of the same style."
	^self styleRunEndAt: anInteger!

tokenRangeAt: anInteger
	#deprecated.	"Imprecise terminology, too easily confused with real scanner tokens. The 'tokens' here are just runs of the same style."
	^self styleRunRangeAt: anInteger!

tokensFrom: startInteger to: stopInteger
	#deprecated.	"Imprecise terminology, too easily confused with real scanner tokens. The 'tokens' here are just runs of the same style."
	^self styleRunsFrom: startInteger to: stopInteger!

tokenStartAt: anInteger
	#deprecated.	"Imprecise terminology, too easily confused with real scanner tokens. The 'tokens' here are just runs of the same style."
	^self styleRunStartAt: anInteger!

tokenTextAt: anInteger
	#deprecated.
	^self styleRunTextAt: anInteger! !
!UI.Scintilla.ScintillaView categoriesForMethods!
currentLineAlpha:!caret, selection, and hotspot styles!public! !
firstVisibleLine:!public!scrolling! !
highlightRange:withIndicator:!indicators!public! !
hoverTime!other settings!private! !
hoverTime:!other settings!private! !
indicatorDefinitions:!indicators!public! !
isCurrentLineHighlighted:!caret, selection, and hotspot styles!public! !
isDrawingBuffered!other settings!public!testing! !
isDrawingBuffered:!other settings!public! !
isDrawingTwoPhase!public!scintilla interface! !
isDrawingTwoPhase:!public!scintilla interface! !
isKeyboardInputUnicode!**auto generated**!other settings!public!scintilla interface!testing! !
isKeyboardInputUnicode:!**auto generated**!other settings!public!scintilla interface! !
marginCount!margins!public!scintilla interface! !
marginCount:!margins!public!scintilla interface! !
sciSetEdgeColumn:!long lines!private!scintilla interface! !
secondarySelectionAlpha:!caret, selection, and hotspot styles!public! !
selectionAlpha:!caret, selection, and hotspot styles!public! !
tokenEndAt:!enquiries!public! !
tokenRangeAt:!enquiries!public! !
tokensFrom:to:!public!text retrieval & modification! !
tokenStartAt:!enquiries!public! !
tokenTextAt:!enquiries!public! !
!

"End of package definition"!

