| package |
package := Package name: 'Dolphin GDI Graphics'.
package paxVersion: 2.1;
	basicComment: 'Dolphin Smalltalk GDI Graphics
Copyright ©️ Object Arts Ltd. 1997-2021. Portions Copyright (c) CGI Group (Europe) Ltd. 1997.'.


package setClassNames: #(
	#{External.SIZE}
	#{Graphics.AbstractBitmapFromBlankInitializer}
	#{Graphics.AbstractFont}
	#{Graphics.AbstractRGB}
	#{Graphics.ARGB}
	#{Graphics.Bitmap}
	#{Graphics.BitmapFromBlankInitializer}
	#{Graphics.BitmapFromBytesInitializer}
	#{Graphics.BitmapFromIconInitializer}
	#{Graphics.Brush}
	#{Graphics.Canvas}
	#{Graphics.Color}
	#{Graphics.ColorAlpha}
	#{Graphics.ColorDefault}
	#{Graphics.ColorNone}
	#{Graphics.ColorRef}
	#{Graphics.Cursor}
	#{Graphics.DIBSection}
	#{Graphics.DIBSectionFromBlankInitializer}
	#{Graphics.DisplayCompatibleBitmapInitializer}
	#{Graphics.Font}
	#{Graphics.GraphicsTool}
	#{Graphics.HatchBrush}
	#{Graphics.Icon}
	#{Graphics.IconFromSystemInitializer}
	#{Graphics.IconImageManager}
	#{Graphics.Image}
	#{Graphics.ImageFromFileInitializer}
	#{Graphics.ImageFromHandleInitializer}
	#{Graphics.ImageFromResourceInitializer}
	#{Graphics.ImageFromStringResourceInitializer}
	#{Graphics.ImageInitializer}
	#{Graphics.ImageList}
	#{Graphics.ImageManager}
	#{Graphics.IndexedColor}
	#{Graphics.NullIcon}
	#{Graphics.Pen}
	#{Graphics.PluggableColor}
	#{Graphics.PrinterCanvas}
	#{Graphics.Region}
	#{Graphics.RGB}
	#{Graphics.StockBrush}
	#{Graphics.StockFont}
	#{Graphics.StockPen}
	#{Graphics.SysColorBrush}
	#{Graphics.SystemColor}
	#{Graphics.SystemFont}
	#{Graphics.ThemeColor}
	#{Graphics.VirtualColor}
	#{Graphics.WatermarkBitmapInitializer}
	#{OS.AbstractLOGFONT}
	#{OS.BITMAP}
	#{OS.BITMAPFILEHEADER}
	#{OS.BITMAPINFO}
	#{OS.BITMAPINFOHEADER}
	#{OS.BLENDFUNCTION}
	#{OS.DEVMODE}
	#{OS.DIBSECTION}
	#{OS.DOCINFOW}
	#{OS.ENUMLOGFONTW}
	#{OS.GDILibrary}
	#{OS.GRADIENT_RECT}
	#{OS.GRADIENT_TRIANGLE}
	#{OS.ICONINFO}
	#{OS.LOGBRUSH}
	#{OS.LOGFONT}
	#{OS.LOGFONTW}
	#{OS.LOGPALETTE}
	#{OS.LOGPEN}
	#{OS.NEWTEXTMETRICW}
	#{OS.NONCLIENTMETRICSW}
	#{OS.OUTLINETEXTMETRICW}
	#{OS.PALETTEENTRY}
	#{OS.PANOSE}
	#{OS.RGBQUAD}
	#{OS.SIZEL}
	#{OS.SystemMetrics}
	#{OS.TEXTMETRICW}
	#{OS.TRIVERTEX}
).

package setMethodNames: #(
	#(#{Core.ClassDescription} #defaultIcon)
	#(#{Core.ClassDescription} #defaultIconName)
	#(#{Core.ClassDescription} #defaultResourceIcon)
	#(#{Core.ClassDescription} #defaultResourceIconName)
	#(#{Core.Object} #addToImageList:mask:)
	#(#{Core.Object} #asImageKey)
	#(#{OS.CommCtrlLibrary} #imageList_AddMasked:hbmImage:crMask:)
	#(#{OS.CommCtrlLibrary} #imageList_BeginDrag:iTrack:dxHotspot:dyHotspot:)
	#(#{OS.CommCtrlLibrary} #imageList_Create:cy:flags:cInitial:cGrow:)
	#(#{OS.CommCtrlLibrary} #imageList_Destroy:)
	#(#{OS.CommCtrlLibrary} #imageList_DragEnter:x:y:)
	#(#{OS.CommCtrlLibrary} #imageList_DragLeave:)
	#(#{OS.CommCtrlLibrary} #imageList_DragMove:y:)
	#(#{OS.CommCtrlLibrary} #imageList_DragShowNolock:)
	#(#{OS.CommCtrlLibrary} #imageList_Draw:i:hdcDst:x:y:fStyle:)
	#(#{OS.CommCtrlLibrary} #imageList_DrawEx:i:hdcDst:x:y:dx:dy:rgbBk:rgbFg:fStyle:)
	#(#{OS.CommCtrlLibrary} #imageList_Duplicate:)
	#(#{OS.CommCtrlLibrary} #imageList_EndDrag)
	#(#{OS.CommCtrlLibrary} #imageList_GetBkColor:)
	#(#{OS.CommCtrlLibrary} #imageList_GetIcon:i:flags:)
	#(#{OS.CommCtrlLibrary} #imageList_GetIconSize:cx:cy:)
	#(#{OS.CommCtrlLibrary} #imageList_GetImageCount:)
	#(#{OS.CommCtrlLibrary} #imageList_LoadImage:lpbmp:cx:cGrow:crMask:uType:uFlags:)
	#(#{OS.CommCtrlLibrary} #imageList_ReplaceIcon:i:hicon:)
	#(#{OS.CommCtrlLibrary} #imageList_SetBkColor:clrBk:)
	#(#{OS.CommCtrlLibrary} #imageList_SetDragCursorImage:iDrag:dxHotspot:dyHotspot:)
	#(#{OS.CommCtrlLibrary} #imageList_SetIconSize:cx:cy:)
	#(#{OS.CommCtrlLibrary} #loadIconWithScaleDown:pszName:cx:cy:phico:)
	#(#{OS.UserLibrary} #copyImage:uType:cxDesired:cyDesired:fuFlags:)
	#(#{OS.UserLibrary} #destroyCursor:)
	#(#{OS.UserLibrary} #destroyIcon:)
	#(#{OS.UserLibrary} #drawEdge:qrc:edge:grfFlags:)
	#(#{OS.UserLibrary} #drawIconEx:xLeft:yTop:hIcon:cxWidth:cyHeight:istepIfAniCur:hbrFlickerFreeDraw:diFlags:)
	#(#{OS.UserLibrary} #drawState:hbr:lpOutputFunc:lData:wData:x:y:cx:cy:fuFlags:)
	#(#{OS.UserLibrary} #drawTextEx:lpchText:cchText:lprc:dwDTFormat:lpDTParams:)
	#(#{OS.UserLibrary} #fillRect:lprc:hbr:)
	#(#{OS.UserLibrary} #frameRect:lprc:hbr:)
	#(#{OS.UserLibrary} #getCursor)
	#(#{OS.UserLibrary} #getCursorPos:)
	#(#{OS.UserLibrary} #getDC)
	#(#{OS.UserLibrary} #getDC:)
	#(#{OS.UserLibrary} #getIconInfo:piconinfo:)
	#(#{OS.UserLibrary} #invertRect:lprc:)
	#(#{OS.UserLibrary} #loadIcon:lpIconName:)
	#(#{OS.UserLibrary} #loadImage:lpszName:uType:cxDesired:cyDesired:fuLoad:)
	#(#{OS.UserLibrary} #releaseDC:)
	#(#{OS.UserLibrary} #releaseDC:hDC:)
	#(#{OS.UserLibrary} #setCursorPosX:y:)
	#(#{OS.UserLibrary} #showCursor:)
).

package setVariableNames: #(
	#{OS.ComCtl32}
	#{OS.Gdi32}
).

package setBinaryVariableNames: #(
	#{OS.ComCtl32}
	#{OS.Gdi32}
).

package setPrerequisites: #(
	'..\..\System\Win32\CommCtrl\Common Controls Library'
	'..\..\Base\Dolphin'
	'..\Base\Dolphin Basic Geometry'
	'..\..\Base\Dolphin Conformant Array Fields'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Graphics.Canvas'
	instanceVariableNames: 'handle source owned pen brush font saved saveIds'
	classVariableNames: 'DesktopResolution'
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Graphics.Color'
	instanceVariableNames: ''
	classVariableNames: 'Black ColorNames CommonColors Default Face3d NamedColors None White Window WindowText'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Graphics.GraphicsTool'
	instanceVariableNames: 'handle ownsHandle'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Graphics.ImageInitializer'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Graphics.ImageManager'
	instanceVariableNames: 'images imageLists maskcolor backcolor'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'OS.SystemMetrics'
	instanceVariableNames: 'menuCheckExtent dragHysteresis scrollThumbExtent sizingFrameExtent dialogFrameExtent borderExtent nonClientMetrics menuFont edgeExtent hasFlatMenus iconTitleFont hasSmoothScrollingLists defaultColorDepth isNotWine'
	classVariableNames: 'Current'
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.Canvas
	subclass: #'Graphics.PrinterCanvas'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.Color
	subclass: #'Graphics.AbstractRGB'
	instanceVariableNames: 'code'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.Color
	subclass: #'Graphics.IndexedColor'
	instanceVariableNames: 'index'
	classVariableNames: 'InstancesByIndex InstancesByName'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'Names'
				-> (IdentityDictionary withAll: {
								16r1000000 -> #black.
								16r1000001 -> #darkRed.
								16r1000002 -> #darkGreen.
								16r1000003 -> #brown.
								16r1000004 -> #darkBlue.
								16r1000005 -> #darkMagenta.
								16r1000006 -> #darkCyan.
								16r1000007 -> #gray.
								16r100000C -> #darkGray.
								16r100000D -> #red.
								16r100000E -> #green.
								16r100000F -> #yellow.
								16r1000010 -> #blue.
								16r1000011 -> #magenta.
								16r1000012 -> #cyan.
								16r1000013 -> #white
							})
		}!
Graphics.Color
	subclass: #'Graphics.SystemColor'
	instanceVariableNames: 'id'
	classVariableNames: 'ColorsById'
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {
			'NamesById'
				-> (IdentityDictionary withAll: {
								16r0 -> #scrollbar.
								16r1 -> #desktop.
								16r2 -> #caption.
								16r3 -> #inactiveCaption.
								16r4 -> #menu.
								16r5 -> #window.
								16r6 -> #windowFrame.
								16r7 -> #menuText.
								16r8 -> #windowText.
								16r9 -> #captionText.
								16rA -> #activeBorder.
								16rB -> #inactiveBorder.
								16rC -> #applicationWorkspace.
								16rD -> #highlight.
								16rE -> #highlightText.
								16rF -> #face3d.
								16r10 -> #shadow3d.
								16r11 -> #grayText.
								16r12 -> #buttonText.
								16r13 -> #inactiveCaptionText.
								16r14 -> #highlight3d.
								16r15 -> #buttonHighlight.
								16r16 -> #darkShadow3d.
								16r17 -> #light3d.
								16r18 -> #tooltip.
								16r19 -> #tooltipText.
								16r1A -> #hotlight.
								16r1B -> #gradientActiveCaption.
								16r1C -> #gradientInactiveCaption.
								16r1D -> #menuHilight.
								16r1E -> #menuBar
							})
		}!
Graphics.Color
	subclass: #'Graphics.VirtualColor'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.AbstractRGB
	subclass: #'Graphics.ARGB'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.AbstractRGB
	subclass: #'Graphics.ColorRef'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ColorRef
	subclass: #'Graphics.ColorDefault'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ColorRef
	subclass: #'Graphics.ColorNone'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ColorRef
	subclass: #'Graphics.RGB'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.VirtualColor
	subclass: #'Graphics.ColorAlpha'
	instanceVariableNames: 'color alpha'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.VirtualColor
	subclass: #'Graphics.PluggableColor'
	instanceVariableNames: 'valuable'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.VirtualColor
	subclass: #'Graphics.ThemeColor'
	instanceVariableNames: 'name actualColor'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.PermanentLibrary
	subclass: #'OS.GDILibrary'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.GraphicsTool
	subclass: #'Graphics.AbstractFont'
	instanceVariableNames: 'logfont resolution'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.GraphicsTool
	subclass: #'Graphics.Brush'
	instanceVariableNames: 'logBrush'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.GraphicsTool
	subclass: #'Graphics.Image'
	instanceVariableNames: 'initializer'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.GraphicsTool
	subclass: #'Graphics.ImageList'
	instanceVariableNames: 'extent initialSize growBy createFlags'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'ILC_COLOR' -> 16r0.
			'ILC_COLOR16' -> 16r10.
			'ILC_COLOR32' -> 16r20.
			'ILC_COLOR4' -> 16r4.
			'ILC_COLOR8' -> 16r8.
			'ILC_COLORDB' -> 16rFE.
			'ILC_HIGHQUALITYSCALE' -> 16r20000.
			'ILC_MASK' -> 16r1.
			'ILC_ORIGINALSIZE' -> 16r10000.
			'ILC_PALETTE' -> 16r800.
			'ILD_ASYNC' -> 16r8000.
			'ILD_BLEND' -> 16rF00.
			'ILD_BLEND25' -> 16r2.
			'ILD_BLEND50' -> 16r4.
			'ILD_DPISCALE' -> 16r4000.
			'ILD_FOCUS' -> 16r4.
			'ILD_IMAGE' -> 16r20.
			'ILD_MASK' -> 16r10.
			'ILD_NORMAL' -> 16r0.
			'ILD_OVERLAYMASK' -> 16rF00.
			'ILD_PRESERVEALPHA' -> 16r1000.
			'ILD_ROP' -> 16r40.
			'ILD_SCALE' -> 16r2000.
			'ILD_SELECTED' -> 16r4.
			'ILD_TRANSPARENT' -> 16r1
		}!
Graphics.GraphicsTool
	subclass: #'Graphics.Pen'
	instanceVariableNames: 'logPen'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'LineJoinNames'
				-> #('LineJoinMiter' 'LineJoinBevel' 'LineJoinRound' 'LineJoinMiterClipped')
		}!
Graphics.GraphicsTool
	subclass: #'Graphics.Region'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.AbstractFont
	subclass: #'Graphics.Font'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.AbstractFont
	subclass: #'Graphics.SystemFont'
	instanceVariableNames: 'id'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.SystemFont
	subclass: #'Graphics.StockFont'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'StockNames' -> (IdentityDictionary withAll: { 16rD -> #system. 16r11 -> #default })
		}!
Graphics.Brush
	subclass: #'Graphics.HatchBrush'
	instanceVariableNames: 'id color'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.Brush
	subclass: #'Graphics.StockBrush'
	instanceVariableNames: 'id'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.StockBrush
	subclass: #'Graphics.SysColorBrush'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.Image
	subclass: #'Graphics.Bitmap'
	instanceVariableNames: 'hdc flags extent'
	classVariableNames: 'SharedBitmaps'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'IsSharedMask' -> 16r2 }!
Graphics.Image
	subclass: #'Graphics.Icon'
	instanceVariableNames: ''
	classVariableNames: 'Blank DefaultApplication Error HasScaleDown Information LargeExtent Question SmallExtent Warning WinLogo'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'ExtraLargeExtent' -> (16r100 @ 16r100). 'TileExtent' -> (16r30 @ 16r30) }!
Graphics.Bitmap
	subclass: #'Graphics.DIBSection'
	instanceVariableNames: 'depth imageBits'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.Icon
	subclass: #'Graphics.Cursor'
	instanceVariableNames: ''
	classVariableNames: 'AppStarting Arrow Cross Current DDCopy DDCopyScroll DDLink DDLinkScroll DDMove DDMoveScroll DDNone DefaultExtent Hand Help IBeam No SizeAll SizeNESW SizeNS SizeNWSE SizeWE SplitHorizontal SplitVertical UpArrow Wait'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.Icon
	subclass: #'Graphics.NullIcon'
	instanceVariableNames: ''
	classVariableNames: 'Current'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.Pen
	subclass: #'Graphics.StockPen'
	instanceVariableNames: 'id'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ImageInitializer
	subclass: #'Graphics.AbstractBitmapFromBlankInitializer'
	instanceVariableNames: 'extent depth'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ImageInitializer
	subclass: #'Graphics.BitmapFromIconInitializer'
	instanceVariableNames: 'extent icon'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ImageInitializer
	subclass: #'Graphics.DisplayCompatibleBitmapInitializer'
	instanceVariableNames: 'extent'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ImageInitializer
	subclass: #'Graphics.IconFromSystemInitializer'
	instanceVariableNames: 'extent identifier'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ImageInitializer
	subclass: #'Graphics.ImageFromFileInitializer'
	instanceVariableNames: 'filename fileLocator flags extent'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ImageInitializer
	subclass: #'Graphics.ImageFromHandleInitializer'
	instanceVariableNames: 'handle'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ImageInitializer
	subclass: #'Graphics.ImageFromResourceInitializer'
	instanceVariableNames: 'identifier module flags extent'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ImageInitializer
	subclass: #'Graphics.WatermarkBitmapInitializer'
	instanceVariableNames: 'image alphaPercent backcolor'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.AbstractBitmapFromBlankInitializer
	subclass: #'Graphics.BitmapFromBlankInitializer'
	instanceVariableNames: 'planes'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.AbstractBitmapFromBlankInitializer
	subclass: #'Graphics.DIBSectionFromBlankInitializer'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.BitmapFromBlankInitializer
	subclass: #'Graphics.BitmapFromBytesInitializer'
	instanceVariableNames: 'bytes'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ImageFromResourceInitializer
	subclass: #'Graphics.ImageFromStringResourceInitializer'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Graphics.ImageManager
	subclass: #'Graphics.IconImageManager'
	instanceVariableNames: 'bitmaps'
	classVariableNames: 'Current'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.Structure
	subclass: #'OS.DEVMODE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_DEVMODE_Size' -> 16r94.
			'_OffsetOf_dmBitsPerPel' -> 16r68.
			'_OffsetOf_dmCollate' -> 16r44.
			'_OffsetOf_dmColor' -> 16r3C.
			'_OffsetOf_dmCopies' -> 16r36.
			'_OffsetOf_dmDefaultSource' -> 16r38.
			'_OffsetOf_dmDeviceName' -> 16r0.
			'_OffsetOf_dmDisplayFlags' -> 16r74.
			'_OffsetOf_dmDisplayFrequency' -> 16r78.
			'_OffsetOf_dmDitherType' -> 16r88.
			'_OffsetOf_dmDriverExtra' -> 16r26.
			'_OffsetOf_dmDriverVersion' -> 16r22.
			'_OffsetOf_dmDuplex' -> 16r3E.
			'_OffsetOf_dmFields' -> 16r28.
			'_OffsetOf_dmFormName' -> 16r46.
			'_OffsetOf_dmICMIntent' -> 16r80.
			'_OffsetOf_dmICMMethod' -> 16r7C.
			'_OffsetOf_dmLogPixels' -> 16r66.
			'_OffsetOf_dmMediaType' -> 16r84.
			'_OffsetOf_dmOrientation' -> 16r2C.
			'_OffsetOf_dmPaperLength' -> 16r30.
			'_OffsetOf_dmPaperSize' -> 16r2E.
			'_OffsetOf_dmPaperWidth' -> 16r32.
			'_OffsetOf_dmPelsHeight' -> 16r70.
			'_OffsetOf_dmPelsWidth' -> 16r6C.
			'_OffsetOf_dmPrintQuality' -> 16r3A.
			'_OffsetOf_dmReserved1' -> 16r8C.
			'_OffsetOf_dmReserved2' -> 16r90.
			'_OffsetOf_dmScale' -> 16r34.
			'_OffsetOf_dmSize' -> 16r24.
			'_OffsetOf_dmSpecVersion' -> 16r20.
			'_OffsetOf_dmTTOption' -> 16r42.
			'_OffsetOf_dmYResolution' -> 16r40
		}!
External.Structure
	subclass: #'External.SIZE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.SIZE
	subclass: #'OS.SIZEL'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_OffsetOf_cx' -> 16r0. '_OffsetOf_cy' -> 16r4. '_SIZEL_Size' -> 16r8 }!
OS.Win32Structure
	subclass: #'OS.AbstractLOGFONT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_AbstractLOGFONT_Size' -> 16r1C.
			'_OffsetOf_lfCharSet' -> 16r17.
			'_OffsetOf_lfClipPrecision' -> 16r19.
			'_OffsetOf_lfEscapement' -> 16r8.
			'_OffsetOf_lfHeight' -> 16r0.
			'_OffsetOf_lfItalic' -> 16r14.
			'_OffsetOf_lfOrientation' -> 16rC.
			'_OffsetOf_lfOutPrecision' -> 16r18.
			'_OffsetOf_lfPitchAndFamily' -> 16r1B.
			'_OffsetOf_lfQuality' -> 16r1A.
			'_OffsetOf_lfStrikeOut' -> 16r16.
			'_OffsetOf_lfUnderline' -> 16r15.
			'_OffsetOf_lfWeight' -> 16r10.
			'_OffsetOf_lfWidth' -> 16r4
		}!
OS.Win32Structure
	subclass: #'OS.BITMAP'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_BITMAP_Size' -> 16r18.
			'_OffsetOf_bmBits' -> 16r14.
			'_OffsetOf_bmBitsPixel' -> 16r12.
			'_OffsetOf_bmHeight' -> 16r8.
			'_OffsetOf_bmPlanes' -> 16r10.
			'_OffsetOf_bmType' -> 16r0.
			'_OffsetOf_bmWidth' -> 16r4.
			'_OffsetOf_bmWidthBytes' -> 16rC
		}!
OS.Win32Structure
	subclass: #'OS.BITMAPFILEHEADER'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_BITMAPFILEHEADER_Size' -> 16rE.
			'_OffsetOf_bfOffBits' -> 16rA.
			'_OffsetOf_bfReserved1' -> 16r6.
			'_OffsetOf_bfReserved2' -> 16r8.
			'_OffsetOf_bfSize' -> 16r2.
			'_OffsetOf_bfType' -> 16r0
		}!
OS.Win32Structure
	subclass: #'OS.BITMAPINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_BITMAPINFO_Size' -> 16r2C.
			'_OffsetOf_bmiColors' -> 16r28.
			'_OffsetOf_bmiHeader' -> 16r0
		}!
OS.Win32Structure
	subclass: #'OS.BITMAPINFOHEADER'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_BITMAPINFOHEADER_Size' -> 16r28.
			'_OffsetOf_biBitCount' -> 16rE.
			'_OffsetOf_biClrImportant' -> 16r24.
			'_OffsetOf_biClrUsed' -> 16r20.
			'_OffsetOf_biCompression' -> 16r10.
			'_OffsetOf_biHeight' -> 16r8.
			'_OffsetOf_biPlanes' -> 16rC.
			'_OffsetOf_biSizeImage' -> 16r14.
			'_OffsetOf_biWidth' -> 16r4.
			'_OffsetOf_biXPelsPerMeter' -> 16r18.
			'_OffsetOf_biYPelsPerMeter' -> 16r1C.
			'_OffsetOf_dwSize' -> 16r0
		}!
OS.Win32Structure
	subclass: #'OS.BLENDFUNCTION'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_BLENDFUNCTION_Size' -> 16r4.
			'_OffsetOf_AlphaFormat' -> 16r3.
			'_OffsetOf_BlendFlags' -> 16r1.
			'_OffsetOf_BlendOp' -> 16r0.
			'_OffsetOf_SourceConstantAlpha' -> 16r2
		}!
OS.Win32Structure
	subclass: #'OS.DOCINFOW'
	instanceVariableNames: 'docName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_DOCINFOW_Size' -> 16r14.
			'_OffsetOf_dwSize' -> 16r0.
			'_OffsetOf_fwType' -> 16r10.
			'_OffsetOf_lpszDatatype' -> 16rC.
			'_OffsetOf_lpszDocName' -> 16r4.
			'_OffsetOf_lpszOutput' -> 16r8
		}!
OS.Win32Structure
	subclass: #'OS.GRADIENT_RECT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_GRADIENT_RECT_Size' -> 16r8.
			'_OffsetOf_lowerRight' -> 16r4.
			'_OffsetOf_upperLeft' -> 16r0
		}!
OS.Win32Structure
	subclass: #'OS.GRADIENT_TRIANGLE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_GRADIENT_TRIANGLE_Size' -> 16rC.
			'_OffsetOf_Vertex1' -> 16r0.
			'_OffsetOf_Vertex2' -> 16r4.
			'_OffsetOf_Vertex3' -> 16r8
		}!
OS.Win32Structure
	subclass: #'OS.ICONINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_ICONINFO_Size' -> 16r14.
			'_OffsetOf_fIcon' -> 16r0.
			'_OffsetOf_hbmColor' -> 16r10.
			'_OffsetOf_hbmMask' -> 16rC.
			'_OffsetOf_xHotspot' -> 16r4.
			'_OffsetOf_yHotspot' -> 16r8
		}!
OS.Win32Structure
	subclass: #'OS.LOGBRUSH'
	instanceVariableNames: 'hatch'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_LOGBRUSH_Size' -> 16rC.
			'_OffsetOf_lbColor' -> 16r4.
			'_OffsetOf_lbHatch' -> 16r8.
			'_OffsetOf_lbStyle' -> 16r0
		}!
OS.Win32Structure
	subclass: #'OS.LOGPALETTE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_LOGPALETTE_Size' -> 16r404.
			'_OffsetOf_palNumEntries' -> 16r2.
			'_OffsetOf_palPalEntry' -> 16r4.
			'_OffsetOf_palVersion' -> 16r0
		}!
OS.Win32Structure
	subclass: #'OS.LOGPEN'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_LOGPEN_Size' -> 16r10.
			'_OffsetOf_lopnColor' -> 16rC.
			'_OffsetOf_lopnStyle' -> 16r0.
			'_OffsetOf_lopnWidth' -> 16r4
		}!
OS.Win32Structure
	subclass: #'OS.NONCLIENTMETRICSW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_NONCLIENTMETRICSW_Size' -> 16r1F8.
			'_OffsetOf_dwSize' -> 16r0.
			'_OffsetOf_iBorderWidth' -> 16r4.
			'_OffsetOf_iCaptionHeight' -> 16r14.
			'_OffsetOf_iCaptionWidth' -> 16r10.
			'_OffsetOf_iMenuHeight' -> 16rDC.
			'_OffsetOf_iMenuWidth' -> 16rD8.
			'_OffsetOf_iPaddedBorderWidth' -> 16r1F4.
			'_OffsetOf_iScrollHeight' -> 16rC.
			'_OffsetOf_iScrollWidth' -> 16r8.
			'_OffsetOf_iSmCaptionHeight' -> 16r78.
			'_OffsetOf_iSmCaptionWidth' -> 16r74.
			'_OffsetOf_lfCationFont' -> 16r18.
			'_OffsetOf_lfMenuFont' -> 16rE0.
			'_OffsetOf_lfMessageFont' -> 16r198.
			'_OffsetOf_lfSmCaptionFont' -> 16r7C.
			'_OffsetOf_lfStatusFont' -> 16r13C
		}!
OS.Win32Structure
	subclass: #'OS.OUTLINETEXTMETRICW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_dwSize' -> 16r0.
			'_OffsetOf_otmAscent' -> 16r64.
			'_OffsetOf_otmDescent' -> 16r68.
			'_OffsetOf_otmEMSquare' -> 16r60.
			'_OffsetOf_otmFiller' -> 16r40.
			'_OffsetOf_otmfsSelection' -> 16r4C.
			'_OffsetOf_otmfsType' -> 16r50.
			'_OffsetOf_otmItalicAngle' -> 16r5C.
			'_OffsetOf_otmLineGap' -> 16r6C.
			'_OffsetOf_otmMacAscent' -> 16r88.
			'_OffsetOf_otmMacDescent' -> 16r8C.
			'_OffsetOf_otmMacLineGap' -> 16r90.
			'_OffsetOf_otmPanoseNumber' -> 16r41.
			'_OffsetOf_otmpFaceName' -> 16rCC.
			'_OffsetOf_otmpFamilyName' -> 16rC8.
			'_OffsetOf_otmpFullName' -> 16rD4.
			'_OffsetOf_otmpStyleName' -> 16rD0.
			'_OffsetOf_otmptSubscriptOffset' -> 16rA0.
			'_OffsetOf_otmptSubscriptSize' -> 16r98.
			'_OffsetOf_otmptSuperscriptOffset' -> 16rB0.
			'_OffsetOf_otmptSuperscriptSize' -> 16rA8.
			'_OffsetOf_otmrcFontBox' -> 16r78.
			'_OffsetOf_otmsCapEmHeight' -> 16r70.
			'_OffsetOf_otmsCharSlopeRise' -> 16r54.
			'_OffsetOf_otmsCharSlopeRun' -> 16r58.
			'_OffsetOf_otmsStrikeoutPosition' -> 16rBC.
			'_OffsetOf_otmsStrikeoutSize' -> 16rB8.
			'_OffsetOf_otmsUnderscorePosition' -> 16rC4.
			'_OffsetOf_otmsUnderscoreSize' -> 16rC0.
			'_OffsetOf_otmsXHeight' -> 16r74.
			'_OffsetOf_otmTextMetrics' -> 16r4.
			'_OffsetOf_otmusMinimumPPEM' -> 16r94.
			'_OUTLINETEXTMETRICW_Size' -> 16rD8
		}!
OS.Win32Structure
	subclass: #'OS.PALETTEENTRY'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_peBlue' -> 16r2.
			'_OffsetOf_peFlags' -> 16r3.
			'_OffsetOf_peGreen' -> 16r1.
			'_OffsetOf_peRed' -> 16r0.
			'_PALETTEENTRY_Size' -> 16r4
		}!
OS.Win32Structure
	subclass: #'OS.PANOSE'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_bArmStyle' -> 16r6.
			'_OffsetOf_bContrast' -> 16r4.
			'_OffsetOf_bFamilyType' -> 16r0.
			'_OffsetOf_bLetterform' -> 16r7.
			'_OffsetOf_bMidline' -> 16r8.
			'_OffsetOf_bProportion' -> 16r3.
			'_OffsetOf_bSerifStyle' -> 16r1.
			'_OffsetOf_bStrokeVariation' -> 16r5.
			'_OffsetOf_bWeight' -> 16r2.
			'_OffsetOf_bXHeight' -> 16r9.
			'_PANOSE_Size' -> 16rA
		}!
OS.Win32Structure
	subclass: #'OS.RGBQUAD'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_rgbBlue' -> 16r0.
			'_OffsetOf_rgbGreen' -> 16r1.
			'_OffsetOf_rgbRed' -> 16r2.
			'_OffsetOf_rgbReserved' -> 16r3.
			'_RGBQUAD_Size' -> 16r4
		}!
OS.Win32Structure
	subclass: #'OS.TEXTMETRICW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_tmAscent' -> 16r4.
			'_OffsetOf_tmAveCharWidth' -> 16r14.
			'_OffsetOf_tmBreakChar' -> 16r32.
			'_OffsetOf_tmCharSet' -> 16r38.
			'_OffsetOf_tmDefaultChar' -> 16r30.
			'_OffsetOf_tmDescent' -> 16r8.
			'_OffsetOf_tmDigitizedAspectX' -> 16r24.
			'_OffsetOf_tmDigitizedAspectY' -> 16r28.
			'_OffsetOf_tmExternalLeading' -> 16r10.
			'_OffsetOf_tmFirstChar' -> 16r2C.
			'_OffsetOf_tmHeight' -> 16r0.
			'_OffsetOf_tmInternalLeading' -> 16rC.
			'_OffsetOf_tmItalic' -> 16r34.
			'_OffsetOf_tmLastChar' -> 16r2E.
			'_OffsetOf_tmMaxCharWidth' -> 16r18.
			'_OffsetOf_tmOverhang' -> 16r20.
			'_OffsetOf_tmPitchAndFamily' -> 16r37.
			'_OffsetOf_tmStruckOut' -> 16r36.
			'_OffsetOf_tmUnderlined' -> 16r35.
			'_OffsetOf_tmWeight' -> 16r1C.
			'_TEXTMETRICW_Size' -> 16r3C
		}!
OS.Win32Structure
	subclass: #'OS.TRIVERTEX'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_alpha' -> 16rE.
			'_OffsetOf_blue' -> 16rC.
			'_OffsetOf_green' -> 16rA.
			'_OffsetOf_red' -> 16r8.
			'_OffsetOf_x' -> 16r0.
			'_OffsetOf_y' -> 16r4.
			'_TRIVERTEX_Size' -> 16r10
		}!
OS.AbstractLOGFONT
	subclass: #'OS.LOGFONT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_LOGFONT_Size' -> 16r3C. '_OffsetOf_lfFaceName' -> 16r1C }!
OS.AbstractLOGFONT
	subclass: #'OS.LOGFONTW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_LOGFONTW_Size' -> 16r5C. '_OffsetOf_lfFaceName' -> 16r1C }!
OS.LOGFONTW
	subclass: #'OS.ENUMLOGFONTW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_ENUMLOGFONTW_Size' -> 16r11C.
			'_OffsetOf_elfFullName' -> 16r5C.
			'_OffsetOf_elfStyle' -> 16rDC
		}!
OS.BITMAP
	subclass: #'OS.DIBSECTION'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_DIBSECTION_Size' -> 16r54.
			'_OffsetOf_dsBitfields' -> 16r40.
			'_OffsetOf_dsBmih' -> 16r18.
			'_OffsetOf_dshSection' -> 16r4C.
			'_OffsetOf_dsOffset' -> 16r50
		}!
OS.TEXTMETRICW
	subclass: #'OS.NEWTEXTMETRICW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_NEWTEXTMETRICW_Size' -> 16r4C.
			'_OffsetOf_ntmAvgWidth' -> 16r48.
			'_OffsetOf_ntmCellHeight' -> 16r44.
			'_OffsetOf_ntmFlags' -> 16r3C.
			'_OffsetOf_ntmSizeEM' -> 16r40
		}!

"Loose Methods"!

!Core.ClassDescription methodsFor!

defaultIcon
	"Answer a suitable default icon to use for this class. Not all classes use their 
	default icon; one must define an appropriate #icon method in each class where the 
	icon required differs from that of the superclass."

	^#{Graphics.Icon} value fromId: self defaultIconName!

defaultIconName
	"Answer a filename to use to find an icon for this class."

	^File composeStem: self name extension: '.ico'!

defaultResourceIcon
	"Answer a suitable default icon resource to use for this class. Note that this method differs
	from #defaultIcon in that it uses the #resourceLocator of the class to locate the icon file"

	^#{Graphics.Icon} value fromId: self defaultResourceIconName!

defaultResourceIconName
	"Answer a filename to use for an icon of this class loaded from the class resources location."

	^self instanceClass resourcesLocator localFileSpecFor: self defaultIconName! !
!Core.ClassDescription categoriesForMethods!
defaultIcon!constants!public! !
defaultIconName!constants!public! !
defaultResourceIcon!constants!public! !
defaultResourceIconName!constants!public! !
!

!Core.Object methodsFor!

addToImageList: aWinImageList mask: aColorOrNil 
	"Private - Add a pictorial representation of the receiver to aWinImageList."

	^self icon addToImageList: aWinImageList mask: aColorOrNil!

asImageKey
	"Answer the form of the receiver to use as an image key in an ImageManager. Normally this is just the receiver, but in some cases there may be a need to snapshot certain attributes used in rendering the image so that subsequent attempts to use the image from the image manager do not match an old rendering of the image that should have changed, e.g. because ThemeColors are used in displaying the image, and the theme has been updated."

	^self! !
!Core.Object categoriesForMethods!
addToImageList:mask:!public! !
asImageKey!converting!public! !
!

!OS.CommCtrlLibrary methodsFor!

imageList_AddMasked: himl hbmImage: hbmImage crMask: crMask
	"Invoke the ImageList_AddMasked() function of the module wrapped by the receiver.
	Helpstring: Adds an image or images to an image list, generating a mask from the specified bitmap

		int __stdcall ImageList_AddMasked(
			HIMAGELIST himl,
			HBITMAP hbmImage,
			COLORREF crMask);"

	<stdcall: int32 ImageList_AddMasked handle handle uint32>
	^self invalidCall: _failureCode!

imageList_BeginDrag: himlTrack iTrack: iTrack dxHotspot: dxHotspot dyHotspot: dyHotspot
	"Invoke the ImageList_BeginDrag() function of the module wrapped by the receiver.
	Helpstring: Begins dragging an image

		BOOL __stdcall ImageList_BeginDrag(
			HIMAGELIST himlTrack,
			int iTrack,
			int dxHotspot,
			int dyHotspot);"

	<stdcall: bool ImageList_BeginDrag handle int32 int32 int32>
	^self invalidCall: _failureCode!

imageList_Create: cx cy: cy flags: flags cInitial: cInitial cGrow: cGrow
	"Invoke the ImageList_Create() function of the module wrapped by the receiver.
	Helpstring: Creates a new image list

		HIMAGELIST __stdcall ImageList_Create(
			int cx,
			int cy,
			UINT flags,
			int cInitial,
			int cGrow);"

	<stdcall: handle ImageList_Create int32 int32 uint32 int32 int32>
	^self invalidCall: _failureCode!

imageList_Destroy: himl
	"Invoke the ImageList_Destroy() function of the module wrapped by the receiver.
	Helpstring: Destroys an image list

		BOOL __stdcall ImageList_Destroy(
			HIMAGELIST himl);"

	<stdcall: bool ImageList_Destroy handle>
	^self invalidCall: _failureCode!

imageList_DragEnter: hwndLock x: x y: y
	"Invoke the ImageList_DragEnter() function of the module wrapped by the receiver.
	Helpstring: Updates the specified window during a drag operation and displays the drag image at the specified position

		BOOL __stdcall ImageList_DragEnter(
			HWND hwndLock,
			int x,
			int y);"

	<stdcall: bool ImageList_DragEnter handle int32 int32>
	^self invalidCall: _failureCode!

imageList_DragLeave: hwndLock
	"Invoke the ImageList_DragLeave() function of the module wrapped by the receiver.
	Helpstring: Unlocks the specified window and hides the drag image, allowing the window to be updated

		BOOL __stdcall ImageList_DragLeave(
			HWND hwndLock);"

	<stdcall: bool ImageList_DragLeave handle>
	^self invalidCall: _failureCode!

imageList_DragMove: x y: y
	"Invoke the ImageList_DragMove() function of the module wrapped by the receiver.
	Helpstring: Moves the image that is being dragged during a drag-and-drop operation

		BOOL __stdcall ImageList_DragMove(
			int x,
			int y);"

	<stdcall: bool ImageList_DragMove int32 int32>
	^self invalidCall: _failureCode!

imageList_DragShowNolock: fShow
	"Invoke the ImageList_DragShowNolock() function of the module wrapped by the receiver.
	Helpstring: Shows or hides the image being dragged

		BOOL __stdcall ImageList_DragShowNolock(
			BOOL fShow);"

	<stdcall: bool ImageList_DragShowNolock bool>
	^self invalidCall: _failureCode!

imageList_Draw: hImageList i: index hdcDst: hdc x: x y: y fStyle: style
	"The ImageList_Draw function draws an image list item in the specified
	device context.

	BOOL WINAPI ImageList_Draw(
		HIMAGELIST himl, 	
		int i, 	
		HDC hdcDst, 	
		int x, 	
		int y, 	
		UINT fStyle);	"

	<stdcall: bool ImageList_Draw handle int32 handle int32 int32 uint32>
	^self invalidCall: _failureCode!

imageList_DrawEx: himl i: i hdcDst: hdcDst x: x y: y dx: dx dy: dy rgbBk: rgbBk rgbFg: rgbFg fStyle: fStyle
	"Invoke the ImageList_DrawEx() function of the module wrapped by the receiver.
	Helpstring: Draws an image list item in the specified device context using the given drawing style and color

		long __stdcall ImageList_DrawEx(
			long himl,
			int i,
			long hdcDst,
			int x,
			int y,
			int dx,
			int dy,
			unsigned long rgbBk,
			unsigned long rgbFg,
			unsigned int fStyle);"

	<stdcall: bool ImageList_DrawEx handle int32 handle int32 int32 int32 int32 uint32 uint32 uint32>
	^self invalidCall: _failureCode!

imageList_Duplicate: himl
	"Invoke the ImageList_Duplicate() function of the module wrapped by the receiver.
	Helpstring: Creates a duplicate of an existing image list

		HIMAGELIST __stdcall ImageList_Duplicate(
			HIMAGELIST himl);"

	<stdcall: handle ImageList_Duplicate handle>
	^self invalidCall: _failureCode!

imageList_EndDrag
	"Invoke the ImageList_EndDrag() function of the module wrapped by the receiver.
	Helpstring: Ends a drag operation

		void __stdcall ImageList_EndDrag();"

	<stdcall: void ImageList_EndDrag>
	^self invalidCall: _failureCode!

imageList_GetBkColor: himl
	"Invoke the ImageList_GetBkColor() function of the module wrapped by the receiver.
	Helpstring: Gets the image list background color

		COLORREF __stdcall ImageList_GetBkColor(
			HIMAGELIST himl);"

	<stdcall: uint32 ImageList_GetBkColor handle>
	^self invalidCall: _failureCode!

imageList_GetIcon: himl i: i flags: flags
	"Invoke the ImageList_GetIcon() function of the module wrapped by the receiver.
	Helpstring: Creates an icon or cursor based on an image and mask in an image list

		HICON __stdcall ImageList_GetIcon(
			HIMAGELIST himl,
			int i,
			UINT flags);"

	<stdcall: handle ImageList_GetIcon handle int32 uint32>
	^self invalidCall: _failureCode!

imageList_GetIconSize: himl cx: cx cy: cy
	"Invoke the ImageList_GetIconSize() function of the module wrapped by the receiver.
	Helpstring: Retrieves the dimensions of images in the image list.

		BOOL __stdcall ImageList_GetIconSize(
			HIMAGELIST himl,
			int* cx,
			int* cy);"

	<stdcall: bool ImageList_GetIconSize handle int32 int32>
	^self invalidCall: _failureCode!

imageList_GetImageCount: himl
	"Invoke the ImageList_GetImageCount() function of the module wrapped by the receiver.
	Helpstring: Gets the number of images in an image list

		int __stdcall ImageList_GetImageCount(
			HIMAGELIST himl);"

	<stdcall: int32 ImageList_GetImageCount handle>
	^self invalidCall: _failureCode!

imageList_LoadImage: hi lpbmp: lpbmp cx: cx cGrow: cGrow crMask: crMask uType: uType uFlags: uFlags
	"Invoke the ImageList_LoadImage() function of the module wrapped by the receiver.
	Helpstring: Creates an image list from the specified bitmap, cursor, or icon resource

		HIMAGELIST __stdcall ImageList_LoadImage(
			HINSTANCE hi,
			LPCWSTR lpbmp,
			int cx,
			int cGrow,
			COLORREF crMask,
			UINT uType,
			UINT uFlags);"

	<stdcall: handle ImageList_LoadImageW handle lpwstr int32 int32 uint32 uint32 uint32>
	^self invalidCall: _failureCode!

imageList_ReplaceIcon: himl i: i hicon: hicon
	"Invoke the ImageList_ReplaceIcon() function of the module wrapped by the receiver.
	Helpstring: Replaces an image with an icon or cursor

		int __stdcall ImageList_ReplaceIcon(
			HIMAGELIST himl,
			int i,
			HICON HICON);"

	<stdcall: int32 ImageList_ReplaceIcon handle int32 handle>
	^self invalidCall: _failureCode!

imageList_SetBkColor: himl clrBk: clrBk
	"Invoke the ImageList_SetBkColor() function of the module wrapped by the receiver.
	Helpstring: Sets the image list background color

		COLORREF __stdcall ImageList_SetBkColor(
			HIMAGELIST himl,
			COLORREF clrBk);"

	<stdcall: uint32 ImageList_SetBkColor handle uint32>
	^self invalidCall: _failureCode!

imageList_SetDragCursorImage: himlDrag iDrag: iDrag dxHotspot: dxHotspot dyHotspot: dyHotspot
	"Invoke the ImageList_SetDragCursorImage() function of the module wrapped by the receiver.
	Helpstring: Creates a new drag image by combining the specified image (typically a cursor) with the current drag image

		BOOL __stdcall ImageList_SetDragCursorImage(
			HIMAGELIST himlDrag,
			int iDrag,
			int dxHotspot,
			int dyHotspot);"

	<stdcall: bool ImageList_SetDragCursorImage handle int32 int32 int32>
	^self invalidCall: _failureCode!

imageList_SetIconSize: himl cx: cx cy: cy
	"Invoke the ImageList_SetIconSize() function of the module wrapped by the receiver.
	Helpstring: Sets the dimensions of images in an image list

		BOOL __stdcall ImageList_SetIconSize(
			HIMAGELIST himl,
			int cx,
			int cy);"

	<stdcall: bool ImageList_SetIconSize handle int32 int32>
	^self invalidCall: _failureCode!

loadIconWithScaleDown: hInst pszName: pszName cx: cx cy: cy phico: phico
	"Invoke the LoadIconWithScaleDown() function of the module wrapped by the receiver.
	Helpstring: Loads an icon. If the icon is not a standard size, this function scales down a larger image instead of scaling up a smaller image.

		HRESULT __stdcall LoadIconWithScaleDown(
			HINSTANCE hInst,
			LPCWSTR pszName,
			int cx,
			int cy,
			[out, retval]HICON* phico);"

	<stdcall: int32 LoadIconWithScaleDown handle lpvoid int32 int32 handle*>
	^self invalidCall: _failureCode! !
!OS.CommCtrlLibrary categoriesForMethods!
imageList_AddMasked:hbmImage:crMask:!**auto generated**!public!win32 functions-image list! !
imageList_BeginDrag:iTrack:dxHotspot:dyHotspot:!**auto generated**!public!win32 functions-image list! !
imageList_Create:cy:flags:cInitial:cGrow:!**auto generated**!public!win32 functions-image list! !
imageList_Destroy:!**auto generated**!public!win32 functions-image list! !
imageList_DragEnter:x:y:!**auto generated**!public!win32 functions-image list! !
imageList_DragLeave:!**auto generated**!public!win32 functions-image list! !
imageList_DragMove:y:!**auto generated**!public!win32 functions-image list! !
imageList_DragShowNolock:!**auto generated**!public!win32 functions-image list! !
imageList_Draw:i:hdcDst:x:y:fStyle:!primitives!public!win32 functions-image list! !
imageList_DrawEx:i:hdcDst:x:y:dx:dy:rgbBk:rgbFg:fStyle:!**auto generated**!public!win32 functions-image list! !
imageList_Duplicate:!**auto generated**!public!win32 functions-image list! !
imageList_EndDrag!**auto generated**!public!win32 functions-image list! !
imageList_GetBkColor:!**auto generated**!public!win32 functions-image list! !
imageList_GetIcon:i:flags:!**auto generated**!public!win32 functions-image list! !
imageList_GetIconSize:cx:cy:!**auto generated**!public!win32 functions-image list! !
imageList_GetImageCount:!**auto generated**!public!win32 functions-image list! !
imageList_LoadImage:lpbmp:cx:cGrow:crMask:uType:uFlags:!**auto generated**!public!win32 functions-image list! !
imageList_ReplaceIcon:i:hicon:!**auto generated**!public!win32 functions-image list! !
imageList_SetBkColor:clrBk:!**auto generated**!public!win32 functions-image list! !
imageList_SetDragCursorImage:iDrag:dxHotspot:dyHotspot:!**auto generated**!public!win32 functions-image list! !
imageList_SetIconSize:cx:cy:!**auto generated**!public!win32 functions-image list! !
loadIconWithScaleDown:pszName:cx:cy:phico:!**auto generated**!public! !
!

!OS.UserLibrary methodsFor!

copyImage: hImage uType: uType cxDesired: cxDesired cyDesired: cyDesired fuFlags: fuFlags
	"The CopyImage function creates a new image (icon, cursor, or bitmap) and copies the attributes of
	the specified image to the new one. If necessary, the function stretches the bits to fit the desired size
	of the new image.
	
	HANDLE CopyImage(      
		HANDLE hImage,
		UINT uType,
		int cxDesired,
		int cyDesired,
		UINT fuFlags
		);"

	<stdcall: handle CopyImage handle uint32 int32 int32 uint32>
	^self invalidCall: _failureCode!

destroyCursor: hCursor
	"Destroy the specified cursor.
		BOOL DestroyCursor(
  			HCURSOR hCursor	// handle to cursor to destroy
		);"

	<stdcall: bool DestroyCursor handle>
	^self invalidCall: _failureCode!

destroyIcon: hIcon
	"Destroy the specified icon.
		BOOL DestroyIcon(
  			HICON hIcon 	// handle to icon to destroy
		);"

	<stdcall: bool DestroyIcon handle>
	^self invalidCall: _failureCode!

drawEdge: hdc qrc: qrc edge: edge grfFlags: grfFlags
	"Invoke the DrawEdge() function of the module wrapped by the receiver.
	Helpstring: Draws a 3-D edge on a rectangle according to the given edge and border flags

		BOOL __stdcall DrawEdge(
			[in]HDC HDC,
			[in, out]RECTL* qrc,
			[in]UINT edge,
			[in]UINT grfFlags);"

	<stdcall: bool DrawEdge handle RECTL* uint32 uint32>
	^self invalidCall: _failureCode!

drawIconEx: hDC xLeft: x yTop: y hIcon: hIcon cxWidth: w cyHeight: h istepIfAniCur: anInteger hbrFlickerFreeDraw: brush diFlags: flags
	"Draws an icon or cursor on the specified device context as specified by the flags
	argument, and and stretching or compressing the icon or cursor as specified by the extent.

		BOOL DrawIconEx(
			HDC hdc,					// handle to device context
			int xLeft,					// x-coordinate of upper left corner
			int yTop,					// y-coordinate of upper left corner
			HICON hIcon,				// handle to icon to draw
			int cxWidth,				// width of the icon
			int cyWidth,				// height of the icon
			UINT istepIfAniCur,			// index of frame in animated cursor
			HBRUSH hbrFlickerFreeDraw,	// handle to background brush (or nil)
			UINT diFlags				// icon-drawing flags
		);"

	<stdcall: bool DrawIconEx handle int32 int32 handle int32 int32 uint32 handle uint32>
	^self invalidCall: _failureCode!

drawState: hdc hbr: hbr lpOutputFunc: lpOutputFunc lData: lData wData: wData x: x y: y cx: cx cy: cy fuFlags: fuFlags
	"Invoke the DrawState() function of the module wrapped by the receiver.
	Helpstring: Displays an image and applies a visual effect to indicate a state, such as a disabled or default state

		BOOL __stdcall DrawState(
			[in]HDC HDC,
			[in]HBRUSH hbr,
			[in]DRAWSTATEPROC lpOutputFunc,
			[in]LPARAM lData,
			[in]WPARAM wData,
			[in]int x,
			[in]int y,
			[in]int cx,
			[in]int cy,
			[in]unsigned int fuFlags);"

	<stdcall: bool DrawStateW handle handle void* intptr uintptr int32 int32 int32 int32 uint32>
	^self invalidCall: _failureCode!

drawTextEx: hdc lpchText: lpchText cchText: cchText lprc: lprc dwDTFormat: dwDTFormat lpDTParams: lpdtParams
	"Draw text in the specified rectange with the specified options (see Win32 docs)

		int DrawTextEx(
			HDC hdc,			 						// handle to device context
			LPWSTR lpchText,							// pointer to string to draw 
			int cchText,								// length of string to draw 
			LPRECT lprc,								// pointer to rectangle coordinates 
			UINT dwDTFormat,						// formatting options 
			LPDRAWTEXTPARAMS lpDTParams	// pointer to struct with options 
		);
	"

	<stdcall: int32 DrawTextExW handle lpwstr int32 RECTL* uint32 lpvoid>
	^self invalidCall: _failureCode!

fillRect: hdc lprc: aRECT hbr: hBrush
	"Fill a rectangle using the specified brush. Left and top borders are inclusive, 
	right and bottom exclusive.
			int FillRect(
			HDC hDC,			// handle to device context 
			CONST RECTL *lprc,	// pointer to structure with rectangle  
			HBRUSH hbr 		// handle to brush
		);"

	<stdcall: bool FillRect handle RECTL* handle>
	^self invalidCall: _failureCode!

frameRect: hdc lprc: aRECT hbr: hBrush
	"Draw a border around the specified rectangle using the specified brush.
	The borders are one logical unit wide and high.
		int FrameRect(
			HDC hDC,			// handle to device context 
			CONST RECT *lprc,	// pointer to rectangle coordinates  
			HBRUSH hbr 		// handle to brush 
		);"

	<stdcall: bool FrameRect handle RECTL* handle>
	^self invalidCall: _failureCode!

getCursor
	"Retrieve the handle of the current system cursor.
		HCURSOR GetCursor(VOID)."

	<stdcall: handle GetCursor>
	^self invalidCall: _failureCode!

getCursorPos: aPOINT
	"Retrieve the cursor's position, in screen coordinates. Answer whether the request succeeds.
		BOOL GetCursorPos(
			LPPOINT  lpPoint
		   );"

	<stdcall: bool GetCursorPos POINTL*>
	^self invalidCall: _failureCode!

getDC
	"Answer a DC for drawing on the desktop.
	N.B. This is one half of the <dcSource> protocol, and must be matched with 
	a call to #releaseDC: to delete the DC.
		dc := self getDC.
		self releaseDC: dc.
	"

	^self getWindowDC: self getDesktopWindow!

getDC: aWindowHandle
	"Answer the handle of a display device context (DC) which can be used to draw
	in the client area of the specified window.
	The DC may be a common, class, or private device context depending on the class 
	style specified for the window. Common DCs are reinitialized with default 
	attributes each time, but class and private device contexts are answered
	in their current state.

		HDC GetDC(HWND hWnd);"

	<stdcall: handle GetDC handle>
	^self invalidCall: _failureCode!

getIconInfo: hIcon piconinfo: anICONINFO
	"Populate the argument, anICONINFO, with information about the  icon or cursor
	whose handle is hIcon.
		BOOL GetIconInfo( 
			HICON hIcon,			// icon handle	
			PICONINFO piconinfo 	// address of icon structure	
		);"

	<stdcall: bool GetIconInfo handle ICONINFO*>
	^self invalidCall: _failureCode!

invertRect: hdc lprc: aRECT
	"The InvertRect function inverts a rectangle in a window by performing a logical 
	NOT operation on the color values for each pixel in the rectangle's interior.

	BOOL InvertRect( 
		HDC hDC,	// handle of device context	
		CONST RECT *lprc	// address of structure with rectangle	
		); "

	<stdcall: bool InvertRect handle RECTL*>
	^self invalidCall: _failureCode!

loadIcon: anInstanceHandle lpIconName: anIntegerID
	"Loads the specified icon resource from the specified module.
		HICON LoadIcon(
			HINSTANCE hInstance,	// handle of application instance
			LPCTSTR lpIconName 	// icon-name string or icon resource identifier
		);"

	<stdcall: handle LoadIconW handle lpvoid>
	^self invalidCall: _failureCode!

loadImage: hInst lpszName: filename uType: type cxDesired: w cyDesired: h fuLoad: flags
	"Load an icon, cursor, or bitmap.
		HANDLE LoadImage(
			HINSTANCE hinst, 	// handle of the instance that contains the image
			LPCTSTR lpszName,	// name or identifier of image
			UINT uType,		// type of image
			int cxDesired,		// desired width
			int cyDesired,		// desired height
			UINT fuLoad		// load flags
		);"

	<stdcall: handle LoadImageW handle lpvoid uint32 int32 int32 uint32>
	^self invalidCall: _failureCode!

releaseDC: hDC
	"Release the specified device context. This is the second half of the 'DC source' protocol,
	and is intended to release the desktop DCs created by the receiver's implementation of #getDC.
	Answer whether the DC was indeed released."

	^(self 
		releaseDC: self getDesktopWindow
		hDC: hDC asParameter) == 1!

releaseDC: hWnd hDC: hDC
	"Releases a device context (DC) (if a common or window device context -
	class and private DCs are unaffected).

		int ReleaseDC(
			HWND hWnd,	// handle of window 
			HDC hDC 		// handle of device context  
		);"

	<stdcall: int32 ReleaseDC handle handle>
	^self invalidCall: _failureCode!

setCursorPosX: x y: y
	"Move the cursor to the specified screen coordinates. The coordinates are clipped to 
	the rectangle set by the most recent invocation of the ClipCursor function.

		BOOL SetCursorPos(
  			int  X,	// horizontal position  
			int  Y 	// vertical position
		);"

	<stdcall: bool SetCursorPos int32 int32>
	^self invalidCall: _failureCode!

showCursor: aBoolean
	"Show or hide the cursor. N.B. A count is maintained of the number of times 
	the cursor has been hidden/shown (which is answered), so there may be no visual effect.

		int ShowCursor(
  			BOOL  bShow 	// cursor visibility flag  
		);"

	<stdcall: int32 ShowCursor bool>
	^self invalidCall: _failureCode! !
!OS.UserLibrary categoriesForMethods!
copyImage:uType:cxDesired:cyDesired:fuFlags:!public!win32 functions-resources! !
destroyCursor:!public!win32 functions-icon! !
destroyIcon:!public!win32 functions-icon! !
drawEdge:qrc:edge:grfFlags:!**auto generated**!public!win32 functions-painting and drawing! !
drawIconEx:xLeft:yTop:hIcon:cxWidth:cyHeight:istepIfAniCur:hbrFlickerFreeDraw:diFlags:!public!win32 functions-icon! !
drawState:hbr:lpOutputFunc:lData:wData:x:y:cx:cy:fuFlags:!**auto generated**!public! !
drawTextEx:lpchText:cchText:lprc:dwDTFormat:lpDTParams:!public!win32 functions-font and text! !
fillRect:lprc:hbr:!public!win32 functions-filled shape! !
frameRect:lprc:hbr:!public!win32 functions-filled shape! !
getCursor!public!win32 functions-cursor! !
getCursorPos:!public!win32 functions-cursor! !
getDC!operations!public! !
getDC:!not an aspect!public!win32 functions-device context! !
getIconInfo:piconinfo:!public!win32 functions-icon! !
invertRect:lprc:!public!win32 functions-filled shape! !
loadIcon:lpIconName:!public!win32 functions-icon! !
loadImage:lpszName:uType:cxDesired:cyDesired:fuLoad:!public!win32 functions-resources! !
releaseDC:!operations!public! !
releaseDC:hDC:!public!win32 functions-device context! !
setCursorPosX:y:!public!win32 functions-cursor! !
showCursor:!public!win32 functions-cursor! !
!

"End of package definition"!

