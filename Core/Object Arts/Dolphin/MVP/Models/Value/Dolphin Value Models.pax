| package |
package := Package name: 'Dolphin Value Models'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk MVP framework Value Models.
Copyright (c) Object Arts Ltd. 1997-2001. Portions Copyright (c) CGI Group (Europe) Ltd. 1997.'.

package basicPackageVersion: '6.2'.


package setClassNames: #(
	#{UI.AspectBuffer}
	#{UI.CompositeValueAdaptor}
	#{UI.ValidationResult}
	#{UI.ValueAdaptor}
	#{UI.ValueAspectAdaptor}
	#{UI.ValueBuffer}
	#{UI.ValueConverter}
	#{UI.ValueHolder}
	#{UI.ValueKeyedAdaptor}
	#{UI.ValueModel}
	#{UI.ValueModelAspectAdaptor}
).

package setMethodNames: #(
	#(#{Core.Object} #aspectAdaptorClass)
	#(#{Core.Object} #aspectValue:)
	#(#{Core.Object} #aspectValue:triggers:)
	#(#{Core.Object} #asValue)
).

package setPrerequisites: #(
	'..\..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'UI.ValidationResult'
	instanceVariableNames: 'value caption hint presenter'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Model
	subclass: #'UI.AspectBuffer'
	instanceVariableNames: 'subject subjectCopy aspects gate validater'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Model
	subclass: #'UI.ValueModel'
	instanceVariableNames: 'settingValue comparisonPolicy'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.ValueModel
	subclass: #'UI.ValueAdaptor'
	instanceVariableNames: 'subject'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.ValueModel
	subclass: #'UI.ValueConverter'
	instanceVariableNames: 'subject typeConverter'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.ValueModel
	subclass: #'UI.ValueHolder'
	instanceVariableNames: 'value'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.ValueAdaptor
	subclass: #'UI.CompositeValueAdaptor'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.ValueAdaptor
	subclass: #'UI.ValueAspectAdaptor'
	instanceVariableNames: 'aspect putSelector getSelector'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.ValueAdaptor
	subclass: #'UI.ValueKeyedAdaptor'
	instanceVariableNames: 'key putSelector getSelector'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.ValueAspectAdaptor
	subclass: #'UI.ValueModelAspectAdaptor'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.ValueHolder
	subclass: #'UI.ValueBuffer'
	instanceVariableNames: 'subject modified gate validater'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Object methodsFor!

aspectAdaptorClass
	^UI.ValueAspectAdaptor!

aspectValue: anAspectSymbol 
	"Answer a ValueAspectAdapter capable of treating anAspectSymbol of the receiver
	as a ValueModel"

	^self aspectAdaptorClass subject: self aspect: anAspectSymbol!

aspectValue: anAspectSymbol triggers: anEventSymbol 
	"Answer a ValueAspectAdapter capable of treating anAspectSymbol of the receiver
	as a ValueModel. It is assumed that the receiver will trigger anEventSymbol whenever
	the aspect is changed."

	^(self aspectValue: anAspectSymbol) aspectTriggers: anEventSymbol!

asValue
	"Answer the receiver as a ValueModel. 
	In the general case create an answer a ValueHolder onto the receiver"

	^UI.ValueHolder with: self! !

!Core.Object categoriesForMethods!
aspectAdaptorClass!constants!private! !
aspectValue:!converting!public! !
aspectValue:triggers:!converting!public! !
asValue!converting!public! !
!

"End of package definition"!

