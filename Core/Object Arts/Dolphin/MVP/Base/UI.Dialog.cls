"Filed out from Dolphin Smalltalk"!

UI.Shell subclass: #'UI.Dialog'
	instanceVariableNames: 'confirmed ownerView'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'ValidationTimerId' -> 16r101
	}!
UI.Dialog guid: (Core.GUID fromString: '{87b4c69a-026e-11d3-9fd7-00a0cc3e4a32}')!
UI.Dialog isNonInstantiable: true!
UI.Dialog comment: 'Dialog is an abstract <dialogPresenter> superclass for allowing model data to be displayed and edited within a top-level modal dialog window. The fact that a Dialog is modal means that any changes made to the displayed data are usually buffered and not written directly back to the model until they are explicitly applied. This happens, usually after clicking an OK button. Hence a user has the opportunity of cancelling out of a Dialog without any changes being made to the underlying model.

When designing a <dialogPresenter> it is necessary to make an initial decision as to how the model data should be edited. If the model is a mutable object, in that it is legal (and sensible) to modify it in place using its aspect accessors, then it is sensible to treat it as a simple <dialogPresenter> and it can be subclassed directly from Dialog itself. If, on the other hand, the model is to be immutable then the dialog should be implemented as a <valueDialogPresenter> and, most likely, be subclassed from the ValueDialog class. The decision made here can often be quite subtle. On the one hand, making changes to a mutable object seems the most direct approach, however, a <valueDialogPresenter> can often be more flexible because it can be connected to anything that supports the <valueModel> protocol. Often the choice comes down to this: If the identity of the underlying model data must remain unchanged then use a standard <dialogPresenter>. If this is not the case then a <valueDialogPresenter> will be more suitable.

From this point let us consider the operation of a standard <dialogPresenter>. When the dialog is created, and given a subject model on which to operate, an <AspectBuffer> is created onto this subject. This is used to buffer the changes to any of the subject''s aspects so that they do not affect the original data directly. It is this <AspectBuffer> that is used as the actual model for the <dialogPresenter>. Interestingly, the use of an <AspectBuffer> imposes an additional factor in the decision to use a standard <dialogPresenter> rather than a <valueDialogPresenter>, this being, that the subject model must be capable of being cloned correctly using #copy. For more details see the comment for AspectBuffer itself.

Instance Variables:
	confirmed		<boolean> indicating whether the dialog has been confirmed and the changes applied.
	ownerView	<topView> which owns the dialog and is suspended waiting for it to complete.

'!
!UI.Dialog categoriesForClass!MVP-Presenters!MVP-Resources-Dialogs! !
!UI.Dialog methodsFor!

answer
	"Answer the model if the receiver was confirmed (with #apply, #ok) or nil otherwise"

	^self isConfirmed
		ifTrue: [ self model subject ]
		ifFalse: [ nil ]!

apply
	"Apply the changes cached in the receiver back to the original model. This can be used to
	dynamically see the effect of the changes without closing the dialog. More often
	it is sent by the #ok method just before closing the associated view."

	"First ensure that any changes cached in the view with focus (if any) are flushed"

	self flushChanges.
	self model apply.
	confirmed := true!

bufferedModelFor: aSubjectModel
	"Private - Answers a buffer suitable for the receiver on aSubjectModel. This will become the
	actual model to which the receiver is bound. May be overridden by subclasses that
	wish to use a different buffering scheme."

	^AspectBuffer subject: aSubjectModel!

cancel
	"Close the receiver without applying the changes back to the original model"

	self view close.
!

createSchematicWiring
	"Create the trigger wiring for the receiver"

	super createSchematicWiring.
	self
		when: #timerTick:
		send: #onTimerTick:
		to: self!

flushChanges
	"Private - First ensure that any changes cached in the view with focus (if any) are flushed"

	| focus |
	focus := View focus.
	focus isNil ifFalse: [focus updateModel]!

hintDwell
	"Private - Answer the <Duration> for which a hint bubble should be shown before fading away."

	^10 seconds!

hintFont
	"Answer the `Font` to be used for the main text of any hint bubble. This does not affect the headline text, the font of which is not configurable."

	^Font name: 'Segoe UI' pointSize: 10!

initialize
	"Private - Initialize the receiver"

	super initialize.
	self ownerView: View activeOrDesktop.
	confirmed := false!

isConfirmed
	"Answer true if the receiver has been confirmed and changes have been applied
	to the associated model. Can be sent after the dialog view has closed
	to determine (usually) if the Ok button was pressed."

	^confirmed!

model: aSubjectModel 
	"Set the model of the receiver to be a buffer onto aSubjectModel."

	| actualModel |
	actualModel := aSubjectModel notNil ifTrue: [self bufferedModelFor: aSubjectModel].
	super model: actualModel!

ok
	"Close the receiver and apply the changes cached in the receiver back to the model"

	self apply.
	self view close.
!

onTimerTick: anInteger
	anInteger == ValidationTimerId ifTrue: [self validate]!

ownerView
	"Answer the view that is parent/owner of the receiver"

	^ownerView
!

ownerView: aView
	"Private - Set the view that is parent/owner of the receiver"

	ownerView := aView.
!

revert
	"Revert the changes cached in the receiver and go back to the data in the original subject."

	self model revert
!

show
	"Shows the view of the receiver"

	self view showModeless: ownerView!

showModal
	"Show the receiver's view as a modal dialog.
	Answer the model if the receiver was confirmed (with #apply, #okay) or nil otherwise"

	self showModalView.
	^self answer!

showModalView
	self view showModalTo: ownerView!

showShell
	"Show the receiver a modeless dialog"

	self show!

showValidationResult: aValidationResult
	"Do nothing by default. Should be overridden by subclasses that want to show the validation result in their UI."

	!

subject
	"Answer the original model onto which the receiver was created"
	
	^self model subject!

validate
	| result |
	self view killTimer: ValidationTimerId.
	result := self validateModel.
	self showValidationResult: result.
	^result!

validateModel
	^self model validate! !
!UI.Dialog categoriesForMethods!
answer!accessing!public! !
apply!commands!public! !
bufferedModelFor:!accessing!private! !
cancel!commands!public! !
createSchematicWiring!initializing!public! !
flushChanges!commands!private! !
hintDwell!constants!private! !
hintFont!constants!public! !
initialize!initializing!private! !
isConfirmed!public!testing! !
model:!accessing!public! !
ok!commands!public! !
onTimerTick:!event handling!private! !
ownerView!accessing!public! !
ownerView:!accessing!not an aspect!private! !
revert!commands!public! !
show!operations!public! !
showModal!public!realizing/unrealizing! !
showModalView!private!realizing/unrealizing! !
showShell!operations!public! !
showValidationResult:!helpers!public! !
subject!accessing!public! !
validate!operations!private! !
validateModel!helpers!private! !
!

UI.Dialog methodProtocol: #dialogPresenter attributes: #(#readOnly) selectors: #(#apply #cancel #caption #caption: #clearCommandHistory #ensureVisible #hasCommandHistory #hasCommandHistory: #ok #onAboutToDisplayMenu: #onAboutToDisplaySystemMenu: #onActionPerformed #onCloseRequested #onIdleEntered #onInputMaskRequired: #onKeyPressed: #onKeyReleased: #onKeyTyped: #onKillFocus #onLeftButtonDoubleClicked: #onLeftButtonPressed: #onLeftButtonReleased: #onMouseMoved: #onPositionChanged: #onPositionChanging: #onRightButtonDoubleClicked: #onRightButtonPressed: #onRightButtonReleased: #onSetFocus #onTipTextRequired: #onViewClosed #onViewMinimized: #onViewOpened #onViewRestored: #parentPresenter #performAction #redo #revert #setFocus #show #topShell #undo #updateCaption #view)!

!UI.Dialog class methodsFor!

icon
	"Answers an Icon that can be used to represent this class"

	^##(self) defaultIcon!

resource_Default_view
	"Answer the literal data from which the 'Default view' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	Tools.ViewComposer openOn: (UI.ResourceIdentifier class: self selector: #resource_Default_view)
	"

	^#(#'!!STL' 5 985166 10 #{UI.STBViewProxy} #{UI.DialogView} 34 30 nil nil 8 #(13107200 65536) 416 nil 1245702 #{Graphics.ThemeColor} #dialog nil 167 nil nil nil 416 984838 #{UI.BorderLayout} 1 1 nil 410 #{UI.ReferenceView} 34 14 nil 416 34 2 8 1140850688 131073 528 nil nil nil 7 nil nil nil 528 1376838 1 #{UI.ResourceIdentifier} #{UI.Presenter} #resource_OK_Cancel_button_block nil 1310982 #{Core.MessageSequence} 34 1 1049350 #{Core.MessageSend} #createAt:extent: 34 2 918022 #{Graphics.Point} 21 423 722 449 71 528 1179910 #{OS.WINDOWPLACEMENT} 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 10 0 0 0 211 0 0 0 234 0 0 0 246 0 0 0] 8 #() 722 193 193 nil 27 nil nil nil 170 192 816 1180166 #{Graphics.Rectangle} 722 21 21 722 21 21 nil nil nil nil 64793 nil nil nil nil 1 nil nil 918278 #{Core.Semaphore} nil nil 1 nil 8 2004646672 626 34 1 674 #createAt:extent: 34 2 722 12287 21 722 521 591 416 770 8 #[44 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 23 0 0 10 0 0 0 3 25 0 0 49 1 0 0] 34 1 528 832 nil 27)!

showModal
	"Creates a default instance of the receiver with a default view	and displays it modal 
	to the current active window. 
	Answers the result of the dialog if confirmed or nil otherwise"

	^self create showModal!

showModal: aDialogResourceNameString
	"Creates an instance of the receiver with a view identified by aResourceNameString
	and displays it modal to the current	active window. 
	Answers the result of dialog if confirmed or nil otherwise"

	^(self create: aDialogResourceNameString) showModal!

showModal: aDialogResourceNameString on: aModel
	"Creates an instance of the receiver with a view identified by aResourceNameString
	and connected to aModel. The view is displayed modal to the current active window. 
	Answers the result of dialog if confirmed or nil otherwise"

	^(self create: aDialogResourceNameString on: aModel) showModal!

showModalOn: aModel
	"Creates an instance of the receiver with a default view and connected to aModel. 
	The view is displayed modal to the current active window. 
	Answers the result of dialog if confirmed or nil otherwise"

	^(self createOn: aModel) showModal! !
!UI.Dialog class categoriesForMethods!
icon!constants!public! !
resource_Default_view!public!resources-views! !
showModal!instance creation!public! !
showModal:!instance creation!public! !
showModal:on:!instance creation!public! !
showModalOn:!instance creation!public! !
!

