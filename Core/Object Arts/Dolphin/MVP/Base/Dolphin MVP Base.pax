| package |
package := Package name: 'Dolphin MVP Base'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin 🐬 Smalltalk Graphical User Interface framework.
Copyright © Object Arts Ltd. 1997-2018. Portions Copyright (c) CGI Group (Europe) Ltd. 1997.
'.

package basicPackageVersion: '6.2'.

package basicScriptAt: #postinstall put: '"The GDILibrary is a permanent library, and so won''t get opened lazily"
GDILibrary openDefault!!
"Opening the CommCtrlLibrary causes the common controls to be registered"
CommCtrlLibrary default!!
"Due to a limitation of the Dolphin protocols system, any protocols on a class that are incomplete without loose methods in an add-on package are lost when the add-on package is uninstalled (essentially this is because the package system is largely unaware of protocols, and so only protocols defined in the basic class are maintained). In this case we add #queryCommand: to MessageSend so that it can be used as a closed command. The command routing framework tests for the <commandTarget> protocol to see whether it should include the command itself in the route."
MessageSend addProtocol: #commandTarget!!
'.
package basicScriptAt: #postuninstall put: '| resIds |
resIds := UI.ResourceIdentifier allResourceIdentifiers.
resIds isEmpty 
	ifFalse: 
		[| stream |
		stream := String writeStream.
		stream
			nextPutAll: ''MVP base package uninstalled, but the following resources are still present in the image and will be forcibly removed:'';
			cr.
		resIds do: 
				[:each | 
				stream
					crtab;
					print: each].
		Warning signal: stream contents.
		resIds do: [:each | SessionManager current resourceManager removeResource: each]]'.
package basicScriptAt: #preuninstall put: 'MemoryManager current collectGarbage; collectGarbage; administerLastRites!!'.

package setClassNames: #(
	#{Graphics.Grid}
	#{Graphics.UxThemeFont}
	#{OS.ACCEL}
	#{OS.BP_ANIMATIONPARAMS}
	#{OS.BP_PAINTPARAMS}
	#{OS.ButtonConstants}
	#{OS.CommCtrlConstants}
	#{OS.DISPLAY_DEVICEW}
	#{OS.DRAWITEMSTRUCT}
	#{OS.DTBGOPTS}
	#{OS.DwmApiLibrary}
	#{OS.FLASHWINFO}
	#{OS.LASTINPUTINFO}
	#{OS.MARGINS}
	#{OS.MEASUREITEMSTRUCT}
	#{OS.MENUINFO}
	#{OS.MENUITEMINFOW}
	#{OS.MINMAXINFO}
	#{OS.MockThemeLibrary}
	#{OS.MONITORINFOEXW}
	#{OS.NCCALCSIZE_PARAMS}
	#{OS.NMHDR}
	#{OS.NMTTDISPINFOW}
	#{OS.NOTIFYICONDATAW}
	#{OS.OwnerDrawStruct}
	#{OS.PAINTSTRUCT}
	#{OS.RGNDATA}
	#{OS.SCROLLINFO}
	#{OS.SHCoreLibrary}
	#{OS.ThemeConstants}
	#{OS.ThemeLibrary}
	#{OS.TRACKMOUSEEVENT}
	#{OS.WINDOWPLACEMENT}
	#{OS.WINDOWPOS}
	#{OS.WNDCLASS}
	#{UI.AbstractDelegatingView}
	#{UI.AbstractNonReferenceDelegatingView}
	#{UI.AbstractSplash}
	#{UI.AcceleratorTable}
	#{UI.BorderLayout}
	#{UI.CapturingInteractor}
	#{UI.Clipboard}
	#{UI.ClosedCommandDescription}
	#{UI.ColorEvent}
	#{UI.Command}
	#{UI.CommandAnnotations}
	#{UI.CommandAnnotationsRegister}
	#{UI.CommandDescription}
	#{UI.CommandMenuItem}
	#{UI.CommandPolicy}
	#{UI.CommandQuery}
	#{UI.ContainerView}
	#{UI.CreateInDpiAwarenessContext}
	#{UI.CreateMixedDpiHost}
	#{UI.CreateWindow}
	#{UI.CreateWindowApiCall}
	#{UI.CreateWindowDecorator}
	#{UI.CreateWindowFunction}
	#{UI.DefaultShellSessionManager}
	#{UI.DelegatingCommandPolicy}
	#{UI.DesktopView}
	#{UI.DisplayMonitor}
	#{UI.DividerMenuItem}
	#{UI.DoubleBufferedView}
	#{UI.DpiAwareness}
	#{UI.DpiChangedEvent}
	#{UI.DragDropObject}
	#{UI.DragDropSession}
	#{UI.DraggableViewInteractor}
	#{UI.Event}
	#{UI.FindDetails}
	#{UI.FlowLayout}
	#{UI.FramingCalculation}
	#{UI.FramingConstraints}
	#{UI.FramingContext}
	#{UI.FramingLayout}
	#{UI.GridLayout}
	#{UI.GuiInputState}
	#{UI.GUISessionManager}
	#{UI.Interactor}
	#{UI.InternalDragDropObject}
	#{UI.InternalDragDropSession}
	#{UI.Keyboard}
	#{UI.KeyEvent}
	#{UI.LayoutContext}
	#{UI.LayoutManager}
	#{UI.LayoutPlacement}
	#{UI.LinearLayout}
	#{UI.Menu}
	#{UI.MenuBar}
	#{UI.MenuItem}
	#{UI.MouseEvent}
	#{UI.MouseTracker}
	#{UI.MouseWheelEvent}
	#{UI.PaintEvent}
	#{UI.PointEvent}
	#{UI.PositionEvent}
	#{UI.Presenter}
	#{UI.ProportionalLayout}
	#{UI.ReferenceView}
	#{UI.RuntimeSessionManager}
	#{UI.ScrollEvent}
	#{UI.SelectableItemsPresenter}
	#{UI.SelectionChangedEvent}
	#{UI.SelectionChangeEvent}
	#{UI.SelectionChangingEvent}
	#{UI.SettingsChangeEvent}
	#{UI.Shell}
	#{UI.ShellView}
	#{UI.SizeEvent}
	#{UI.Splash}
	#{UI.STBViewContext}
	#{UI.STBViewProxy}
	#{UI.ValuePresenter}
	#{UI.View}
	#{UI.ViewState}
	#{UI.WindowsEvent}
).

package setMethodNames: #(
	#(#{Core.Error class} #icon)
	#(#{Core.MessageSend} #queryCommand:)
	#(#{Core.Notification class} #icon)
	#(#{Core.Object} #icon)
	#(#{Core.Object} #iconImageIndex)
	#(#{Core.Object class} #icon)
	#(#{Core.String} #copyToClipboard)
	#(#{Core.String} #setTextInto:)
	#(#{Core.Symbol} #copyToClipboard)
	#(#{Core.UndefinedObject} #asResourceId)
	#(#{Core.Warning class} #icon)
	#(#{Graphics.Bitmap} #copyToClipboard)
	#(#{OS.CommCtrlLibrary class} #sharedVariableName)
	#(#{OS.KernelLibrary} #getConsoleWindow)
	#(#{OS.SystemMetrics} #menuBarColor)
	#(#{OS.UserLibrary} #adjustWindowRectExForDpi:dwStyle:bMenu:dwExStyle:dpi:)
	#(#{OS.UserLibrary} #animateWindow:dwTime:dwFlags:)
	#(#{OS.UserLibrary} #areDpiAwarenessContextsEqual:dpiContextB:)
	#(#{OS.UserLibrary} #attachThreadInput:idAttachTo:fAttach:)
	#(#{OS.UserLibrary} #beginDeferWindowPos:)
	#(#{OS.UserLibrary} #beginPaint:lpPaint:)
	#(#{OS.UserLibrary} #bringWindowToTop:)
	#(#{OS.UserLibrary} #callWindowProc:hWnd:msg:wParam:lParam:)
	#(#{OS.UserLibrary} #childWindowFromPointEx:pt:uFlags:)
	#(#{OS.UserLibrary} #clientToScreen:lpPoint:)
	#(#{OS.UserLibrary} #closeClipboard)
	#(#{OS.UserLibrary} #countClipboardFormats)
	#(#{OS.UserLibrary} #createAcceleratorTable:cEntries:)
	#(#{OS.UserLibrary} #createMenu)
	#(#{OS.UserLibrary} #createPopupMenu)
	#(#{OS.UserLibrary} #createWindowEx:lpClassName:lpWindowName:dwStyle:x:y:nWidth:nHeight:hWndParent:hMenu:hInstance:lpParam:)
	#(#{OS.UserLibrary} #deferWindowPos:hwnd:hwndInsertAfter:x:y:cx:cy:uFlags:)
	#(#{OS.UserLibrary} #deleteMenu:uPosition:uFlags:)
	#(#{OS.UserLibrary} #destroyAcceleratorTable:)
	#(#{OS.UserLibrary} #destroyMenu:)
	#(#{OS.UserLibrary} #disableProcessWindowsGhosting)
	#(#{OS.UserLibrary} #drawFocusRect:lprc:)
	#(#{OS.UserLibrary} #drawFrameControl:lprc:uType:uState:)
	#(#{OS.UserLibrary} #drawMenuBar:)
	#(#{OS.UserLibrary} #emptyClipboard)
	#(#{OS.UserLibrary} #enableNonClientDpiScaling:)
	#(#{OS.UserLibrary} #enableNonClientDpiScalingIfNecessary:)
	#(#{OS.UserLibrary} #enableScrollBar:wSBFlags:wArrows:)
	#(#{OS.UserLibrary} #endDeferWindowPos:)
	#(#{OS.UserLibrary} #endPaint:lpPaint:)
	#(#{OS.UserLibrary} #enumChildWindows:lpEnumFunction:lParam:)
	#(#{OS.UserLibrary} #enumClipboardFormats:)
	#(#{OS.UserLibrary} #enumDisplayDevices:iDevNum:lpDisplayDevice:dwFlags:)
	#(#{OS.UserLibrary} #enumDisplayMonitors:lprcClip:lpfnEnum:dwData:)
	#(#{OS.UserLibrary} #enumThreadWindows:lpfn:lParam:)
	#(#{OS.UserLibrary} #enumWindows:lParam:)
	#(#{OS.UserLibrary} #findWindow:lpWindowName:)
	#(#{OS.UserLibrary} #flashWindowEx:)
	#(#{OS.UserLibrary} #getAncestor:gaFlags:)
	#(#{OS.UserLibrary} #getAwarenessFromDpiAwarenessContext:)
	#(#{OS.UserLibrary} #getCapture)
	#(#{OS.UserLibrary} #getClassAtom:)
	#(#{OS.UserLibrary} #getClassLongPtr:nIndex:)
	#(#{OS.UserLibrary} #getClassName:)
	#(#{OS.UserLibrary} #getClassName:lpClassName:nMaxCount:)
	#(#{OS.UserLibrary} #getClientRect:lpRect:)
	#(#{OS.UserLibrary} #getClipboardData:)
	#(#{OS.UserLibrary} #getClipboardFormatName:lpszFormatName:cchMaxCount:)
	#(#{OS.UserLibrary} #getDialogControlDpiChangeBehavior:)
	#(#{OS.UserLibrary} #getDialogDpiChangeBehavior:)
	#(#{OS.UserLibrary} #getDlgCtrlID:)
	#(#{OS.UserLibrary} #getDpiAwarenessContextForProcess:)
	#(#{OS.UserLibrary} #getDpiForWindow:)
	#(#{OS.UserLibrary} #getDpiFromDpiAwarenessContext:)
	#(#{OS.UserLibrary} #getFocus)
	#(#{OS.UserLibrary} #getForegroundWindow)
	#(#{OS.UserLibrary} #getLastActivePopup:)
	#(#{OS.UserLibrary} #getLastInputInfo:)
	#(#{OS.UserLibrary} #getMenuInfo:lpcmi:)
	#(#{OS.UserLibrary} #getMenuItemInfo:uItem:fByPosition:lpmii:)
	#(#{OS.UserLibrary} #getMenuItemRect:hMenu:uItem:lprcItem:)
	#(#{OS.UserLibrary} #getMonitorInfo:lpmi:)
	#(#{OS.UserLibrary} #getNextDlgGroupItem:hCtl:bPrevious:)
	#(#{OS.UserLibrary} #getNextDlgTabItem:hCtl:bPrevious:)
	#(#{OS.UserLibrary} #getProp:lpString:)
	#(#{OS.UserLibrary} #getScrollInfo:nBar:lpsi:)
	#(#{OS.UserLibrary} #getSystemDpiForProcess:)
	#(#{OS.UserLibrary} #getSystemMenu:bRevert:)
	#(#{OS.UserLibrary} #getSystemMetricsForDpi:dpi:)
	#(#{OS.UserLibrary} #getThreadDpiAwarenessContext)
	#(#{OS.UserLibrary} #getThreadDpiHostingBehavior)
	#(#{OS.UserLibrary} #getTopWindow:)
	#(#{OS.UserLibrary} #getUpdateRect:lpRect:bErase:)
	#(#{OS.UserLibrary} #getWindow:uCmd:)
	#(#{OS.UserLibrary} #getWindowDC:)
	#(#{OS.UserLibrary} #getWindowDpiAwarenessContext:)
	#(#{OS.UserLibrary} #getWindowDpiHostingBehavior:)
	#(#{OS.UserLibrary} #getWindowExStyle:)
	#(#{OS.UserLibrary} #getWindowLong:nIndex:)
	#(#{OS.UserLibrary} #getWindowLongPtr:nIndex:)
	#(#{OS.UserLibrary} #getWindowPlacement:lpwndpl:)
	#(#{OS.UserLibrary} #getWindowRect:lpRect:)
	#(#{OS.UserLibrary} #getWindowStyle:)
	#(#{OS.UserLibrary} #getWindowText:)
	#(#{OS.UserLibrary} #getWindowText:lpString:nMaxCount:)
	#(#{OS.UserLibrary} #getWindowTextLength:)
	#(#{OS.UserLibrary} #getWindowThreadProcessId:lpdwProcessId:)
	#(#{OS.UserLibrary} #getWindowULong:nIndex:)
	#(#{OS.UserLibrary} #getWindowULongPtr:nIndex:)
	#(#{OS.UserLibrary} #inheritWindowMonitor:hwndInherit:)
	#(#{OS.UserLibrary} #initialize)
	#(#{OS.UserLibrary} #insertMenuItem:uItem:fByPosition:lpmii:)
	#(#{OS.UserLibrary} #invalidate:lpRect:bErase:)
	#(#{OS.UserLibrary} #invalidateRgn:hRgn:bErase:)
	#(#{OS.UserLibrary} #isChild:hWnd:)
	#(#{OS.UserLibrary} #isClipboardFormatAvailable:)
	#(#{OS.UserLibrary} #isDialog:)
	#(#{OS.UserLibrary} #isDialogMessage:lpMsg:)
	#(#{OS.UserLibrary} #isForegroundProcess:)
	#(#{OS.UserLibrary} #isIconic:)
	#(#{OS.UserLibrary} #isProcessDPIAware)
	#(#{OS.UserLibrary} #isProcessSystemDpiAware)
	#(#{OS.UserLibrary} #isValidDpiAwarenessContext:)
	#(#{OS.UserLibrary} #isWindowUnicode:)
	#(#{OS.UserLibrary} #isZoomed:)
	#(#{OS.UserLibrary} #loadAccelerators:lpTableName:)
	#(#{OS.UserLibrary} #loadMenu:lpMenuName:)
	#(#{OS.UserLibrary} #lockWindowUpdate:)
	#(#{OS.UserLibrary} #logicalToPhysicalPoint:lpPoint:)
	#(#{OS.UserLibrary} #logicalToPhysicalPointForPerMonitorDPI:lpPoint:)
	#(#{OS.UserLibrary} #makeDragList:)
	#(#{OS.UserLibrary} #mapRectangle:from:to:)
	#(#{OS.UserLibrary} #mapWindowPoints:hWndTo:lpPoints:cPoints:)
	#(#{OS.UserLibrary} #modifyMenu:uPosition:uFlags:uIDNewItem:lpNewItem:)
	#(#{OS.UserLibrary} #monitorFromPoint:dwFlags:)
	#(#{OS.UserLibrary} #monitorFromRect:dwFlags:)
	#(#{OS.UserLibrary} #monitorFromWindow:dwFlags:)
	#(#{OS.UserLibrary} #openClipboard:)
	#(#{OS.UserLibrary} #physicalToLogicalPoint:lpPoint:)
	#(#{OS.UserLibrary} #physicalToLogicalPointForPerMonitorDPI:lpPoint:)
	#(#{OS.UserLibrary} #printWindow:hdcBlt:nFlags:)
	#(#{OS.UserLibrary} #realChildWindowFromPoint:ptParentClientCoords:)
	#(#{OS.UserLibrary} #redrawWindow:lprcUpdate:hrgnUpdate:flags:)
	#(#{OS.UserLibrary} #registerClass:)
	#(#{OS.UserLibrary} #registerClipboardFormat:)
	#(#{OS.UserLibrary} #registerHotKey:id:fsModifiers:vk:)
	#(#{OS.UserLibrary} #registerWindowMessage:)
	#(#{OS.UserLibrary} #releaseCapture)
	#(#{OS.UserLibrary} #removeMenu:uPosition:uFlags:)
	#(#{OS.UserLibrary} #removeProp:lpString:)
	#(#{OS.UserLibrary} #screenToClient:lpPoint:)
	#(#{OS.UserLibrary} #scrollWindowEx:dx:dy:prcScroll:prcClip:hrgnUpdate:prcUpdate:flags:)
	#(#{OS.UserLibrary} #sendMessage:msg:wParam:lpParam:)
	#(#{OS.UserLibrary} #sendMessage:msg:wpParam:lpParam:)
	#(#{OS.UserLibrary} #sendMessageU:msg:wParam:lParam:)
	#(#{OS.UserLibrary} #sendMessageU:msg:wParam:lpParam:)
	#(#{OS.UserLibrary} #setCapture:)
	#(#{OS.UserLibrary} #setClassLong:nIndex:dwNewLong:)
	#(#{OS.UserLibrary} #setClipboardData:hMem:)
	#(#{OS.UserLibrary} #setDialogControlDpiChangeBehavior:mask:values:)
	#(#{OS.UserLibrary} #setDialogDpiChangeBehavior:mask:values:)
	#(#{OS.UserLibrary} #setFocus:)
	#(#{OS.UserLibrary} #setForegroundWindow:)
	#(#{OS.UserLibrary} #setLayeredWindowAttributes:lcrKey:bAlpha:dwFlags:)
	#(#{OS.UserLibrary} #setMenu:hMenu:)
	#(#{OS.UserLibrary} #setMenuDefaultItem:uItem:fByPos:)
	#(#{OS.UserLibrary} #setMenuInfo:lpcmi:)
	#(#{OS.UserLibrary} #setMenuItemInfo:uItem:fByPosition:lpmii:)
	#(#{OS.UserLibrary} #setParent:hWndNewParent:)
	#(#{OS.UserLibrary} #setProcessDPIAware)
	#(#{OS.UserLibrary} #setProcessDpiAwarenessContext:)
	#(#{OS.UserLibrary} #setProp:lpString:hData:)
	#(#{OS.UserLibrary} #setScrollInfo:nBar:lpsi:redraw:)
	#(#{OS.UserLibrary} #setThreadDpiAwarenessContext:)
	#(#{OS.UserLibrary} #setThreadDpiHostingBehavior:)
	#(#{OS.UserLibrary} #setWindowLong:nIndex:dwNewLong:)
	#(#{OS.UserLibrary} #setWindowLongPtr:nIndex:dwNewLong:)
	#(#{OS.UserLibrary} #setWindowPlacement:lpwndpl:)
	#(#{OS.UserLibrary} #setWindowPos:hWndInsertAfter:x:y:cx:cy:uFlags:)
	#(#{OS.UserLibrary} #setWindowULong:nIndex:dwNewLong:)
	#(#{OS.UserLibrary} #setWindowULongPtr:nIndex:dwNewLong:)
	#(#{OS.UserLibrary} #showScrollBar:wBar:bShow:)
	#(#{OS.UserLibrary} #systemParametersInfo:uiParam:pvParam:fWinIni:)
	#(#{OS.UserLibrary} #systemParametersInfoForDpi:uiParam:pvParam:fWinIni:dpi:)
	#(#{OS.UserLibrary} #trackMouseEvent:)
	#(#{OS.UserLibrary} #trackPopupMenu:uFlags:x:y:nReserved:hWnd:prcRect:)
	#(#{OS.UserLibrary} #translateAccelerator:haccl:lpmsg:)
	#(#{OS.UserLibrary} #unregisterClass:hInstance:)
	#(#{OS.UserLibrary} #unregisterHotKey:id:)
	#(#{OS.UserLibrary} #validate:lpRect:)
	#(#{OS.UserLibrary} #windowFromDC:)
	#(#{OS.UserLibrary} #windowFromPoint:)
	#(#{OS.UserLibrary} #withDpiHostingBehavior:do:)
	#(#{OS.UserLibrary class} #desiredDpiAwareness)
	#(#{OS.UserLibrary class} #desiredDpiAwareness:)
	#(#{OS.UserLibrary class} #dpiAwareness)
	#(#{OS.UserLibrary class} #dpiAwarenessContext)
	#(#{UI.ResourceIdentifier} #canShow)
	#(#{UI.ResourceIdentifier} #fixupIcon)
	#(#{UI.ResourceIdentifier} #icon)
	#(#{UI.ResourceIdentifier} #loadWithContext:)
	#(#{UI.ResourceIdentifier} #loadWithContext:forEdit:)
	#(#{UI.ResourceIdentifier} #show)
).

package setVariableNames: #(
	#{OS.Dwmapi}
	#{OS.SHCore}
	#{OS.UxTheme}
).

package setBinaryVariableNames: #(
	#{OS.Dwmapi}
	#{OS.SHCore}
	#{OS.UxTheme}
).

package setPrerequisites: #(
	'..\..\System\Win32\CommCtrl\Common Controls Library'
	'..\..\Base\Dolphin'
	'Dolphin Basic Geometry'
	'..\..\Base\Dolphin Command-line Parser'
	'..\Graphics\Dolphin GDI Graphics'
	'..\..\System\Filer\Dolphin Literal Filer'
	'..\..\System\Filer\Dolphin STx Filer Core'
	'..\Type Converters\Dolphin Type Converters'
	'..\Models\Value\Dolphin Value Models'
).

package!

"Class Definitions"!

Kernel.SharedPool
	subclass: #'OS.ButtonConstants'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'BCM_GETIDEALSIZE' -> 16r1601.
			'BCM_GETNOTE' -> 16r160A.
			'BCM_GETNOTELENGTH' -> 16r160B.
			'BCM_SETNOTE' -> 16r1609.
			'BCM_SETSHIELD' -> 16r160C.
			'BM_CLICK' -> 16rF5.
			'BM_GETCHECK' -> 16rF0.
			'BM_GETIMAGE' -> 16rF6.
			'BM_GETSTATE' -> 16rF2.
			'BM_SETCHECK' -> 16rF1.
			'BM_SETIMAGE' -> 16rF7.
			'BM_SETSTATE' -> 16rF3.
			'BM_SETSTYLE' -> 16rF4.
			'BN_CLICKED' -> 16r0.
			'BN_HILITE' -> 16r2.
			'BN_UNHILITE' -> 16r3.
			'BS_3STATE' -> 16r5.
			'BS_AUTO3STATE' -> 16r6.
			'BS_AUTOCHECKBOX' -> 16r3.
			'BS_AUTORADIOBUTTON' -> 16r9.
			'BS_BITMAP' -> 16r80.
			'BS_BOTTOM' -> 16r800.
			'BS_CENTER' -> 16r300.
			'BS_COMMANDLINK' -> 16rE.
			'BS_DEFCOMMANDLINK' -> 16rF.
			'BS_DEFPUSHBUTTON' -> 16r1.
			'BS_FLAT' -> 16r8000.
			'BS_GROUPBOX' -> 16r7.
			'BS_ICON' -> 16r40.
			'BS_LEFT' -> 16r100.
			'BS_LEFTTEXT' -> 16r20.
			'BS_MULTILINE' -> 16r2000.
			'BS_NOTIFY' -> 16r4000.
			'BS_PUSHBUTTON' -> 16r0.
			'BS_PUSHLIKE' -> 16r1000.
			'BS_RADIOBUTTON' -> 16r4.
			'BS_RIGHT' -> 16r200.
			'BS_RIGHTBUTTON' -> 16r20.
			'BS_TEXT' -> 16r0.
			'BS_TOP' -> 16r400.
			'BS_TYPEMASK' -> 16rF.
			'BS_VCENTER' -> 16rC00.
			'BST_CHECKED' -> 16r1.
			'BST_INDETERMINATE' -> 16r2.
			'BST_UNCHECKED' -> 16r0
		}!

Kernel.SharedPool
	subclass: #'OS.CommCtrlConstants'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'ACM_OPEN' -> 16r464.
			'ACM_PLAY' -> 16r465.
			'ACM_STOP' -> 16r466.
			'ACS_AUTOPLAY' -> 16r4.
			'ACS_CENTER' -> 16r1.
			'ACS_TRANSPARENT' -> 16r2.
			'CCM_FIRST' -> 16r2000.
			'CCM_GETCOLORSCHEME' -> 16r2003.
			'CCM_GETUNICODEFORMAT' -> 16r2006.
			'CCM_GETVERSION' -> 16r2008.
			'CCM_SETBKCOLOR' -> 16r2001.
			'CCM_SETCOLORSCHEME' -> 16r2002.
			'CCM_SETUNICODEFORMAT' -> 16r2005.
			'CCM_SETVERSION' -> 16r2007.
			'CCM_SETWINDOWTHEME' -> 16r200B.
			'CCS_ADJUSTABLE' -> 16r20.
			'CCS_BOTTOM' -> 16r3.
			'CCS_LEFT' -> 16r81.
			'CCS_NODIVIDER' -> 16r40.
			'CCS_NOMOVEY' -> 16r2.
			'CCS_NOPARENTALIGN' -> 16r8.
			'CCS_NORESIZE' -> 16r4.
			'CCS_RIGHT' -> 16r83.
			'CCS_TOP' -> 16r1.
			'CCS_VERT' -> 16r80.
			'CDDS_ITEM' -> 16r10000.
			'CDDS_ITEMPOSTERASE' -> 16r10004.
			'CDDS_ITEMPOSTPAINT' -> 16r10002.
			'CDDS_ITEMPREERASE' -> 16r10003.
			'CDDS_ITEMPREPAINT' -> 16r10001.
			'CDDS_POSTERASE' -> 16r4.
			'CDDS_POSTPAINT' -> 16r2.
			'CDDS_PREERASE' -> 16r3.
			'CDDS_PREPAINT' -> 16r1.
			'CDDS_SUBITEM' -> 16r20000.
			'CDIS_CHECKED' -> 16r8.
			'CDIS_DEFAULT' -> 16r20.
			'CDIS_DISABLED' -> 16r4.
			'CDIS_DROPHILITED' -> 16r1000.
			'CDIS_FOCUS' -> 16r10.
			'CDIS_GRAYED' -> 16r2.
			'CDIS_HOT' -> 16r40.
			'CDIS_INDETERMINATE' -> 16r100.
			'CDIS_MARKED' -> 16r80.
			'CDIS_NEARHOT' -> 16r400.
			'CDIS_OTHERSIDEHOT' -> 16r800.
			'CDIS_SELECTED' -> 16r1.
			'CDIS_SHOWKEYBOARDCUES' -> 16r200.
			'CDRF_DODEFAULT' -> 16r0.
			'CDRF_DOERASE' -> 16r8.
			'CDRF_NEWFONT' -> 16r2.
			'CDRF_NOTIFYITEMDRAW' -> 16r20.
			'CDRF_NOTIFYPOSTERASE' -> 16r40.
			'CDRF_NOTIFYPOSTPAINT' -> 16r10.
			'CDRF_NOTIFYSUBITEMDRAW' -> 16r20.
			'CDRF_SKIPDEFAULT' -> 16r4.
			'CDRF_SKIPPOSTPAINT' -> 16r100.
			'GDT_ERROR' -> -16r1.
			'GDT_NONE' -> 16r1.
			'GDT_VALID' -> 16r0.
			'GDTR_MAX' -> 16r2.
			'GDTR_MIN' -> 16r1.
			'I_IMAGECALLBACK' -> -16r1.
			'I_IMAGENONE' -> -16r2.
			'ICC_ANIMATE_CLASS' -> 16r80.
			'ICC_BAR_CLASSES' -> 16r4.
			'ICC_COOL_CLASSES' -> 16r400.
			'ICC_DATE_CLASSES' -> 16r121.
			'ICC_HOTKEY_CLASS' -> 16r40.
			'ICC_INTERNET_CLASSES' -> 16r800.
			'ICC_LINK_CLASS' -> 16r8000.
			'ICC_LISTVIEW_CLASSES' -> 16r1.
			'ICC_NATIVEFNTCTL_CLASS' -> 16r2000.
			'ICC_PAGESCROLLER_CLASS' -> 16r1000.
			'ICC_PROGRESS_CLASS' -> 16r20.
			'ICC_STANDARD_CLASSES' -> 16r4000.
			'ICC_TAB_CLASSES' -> 16r8.
			'ICC_TREEVIEW_CLASSES' -> 16r2.
			'ICC_UPDOWN_CLASS' -> 16r10.
			'ICC_USEREX_CLASSES' -> 16r200.
			'ICC_WIN95_CLASSES' -> 16rFF.
			'ILC_COLOR' -> 16r0.
			'ILC_COLOR16' -> 16r10.
			'ILC_COLOR32' -> 16r20.
			'ILC_COLOR4' -> 16r4.
			'ILC_COLOR8' -> 16r8.
			'ILC_COLORDB' -> 16rFE.
			'ILC_MASK' -> 16r1.
			'ILC_PALETTE' -> 16r800.
			'ILD_ASYNC' -> 16r8000.
			'ILD_BLEND' -> 16rF00.
			'ILD_BLEND25' -> 16r2.
			'ILD_BLEND50' -> 16r4.
			'ILD_DPISCALE' -> 16r4000.
			'ILD_FOCUS' -> 16r4.
			'ILD_IMAGE' -> 16r20.
			'ILD_MASK' -> 16r10.
			'ILD_NORMAL' -> 16r0.
			'ILD_OVERLAYMASK' -> 16rF00.
			'ILD_PRESERVEALPHA' -> 16r1000.
			'ILD_ROP' -> 16r40.
			'ILD_SCALE' -> 16r2000.
			'ILD_SELECTED' -> 16r4.
			'ILD_TRANSPARENT' -> 16r1.
			'INFOTIPSIZE' -> 16r400.
			'LIM_LARGE' -> 16r1.
			'LIM_SMALL' -> 16r0.
			'LVM_GETEDITCONTROL' -> 16r1018.
			'NM_CHAR' -> -16r12.
			'NM_CLICK' -> -16r2.
			'NM_CUSTOMDRAW' -> -16rC.
			'NM_CUSTOMTEXT' -> -16r18.
			'NM_DBLCLK' -> -16r3.
			'NM_FIRST' -> 16r0.
			'NM_FONTCHANGED' -> -16r17.
			'NM_HOVER' -> -16rD.
			'NM_KEYDOWN' -> -16rF.
			'NM_KILLFOCUS' -> -16r8.
			'NM_LDOWN' -> -16r14.
			'NM_NCHITTEST' -> -16rE.
			'NM_OUTOFMEMORY' -> -16r1.
			'NM_RCLICK' -> -16r5.
			'NM_RDBLCLK' -> -16r6.
			'NM_RDOWN' -> -16r15.
			'NM_RELEASEDCAPTURE' -> -16r10.
			'NM_RETURN' -> -16r4.
			'NM_SETCURSOR' -> -16r11.
			'NM_SETFOCUS' -> -16r7.
			'NM_THEMECHANGED' -> -16r16.
			'NM_TOOLTIPSCREATED' -> -16r13.
			'TTF_IDISHWND' -> 16r1.
			'TTN_GETDISPINFOA' -> -16r208.
			'TTN_GETDISPINFOW' -> -16r212.
			'TVM_GETEDITCONTROL' -> 16r110F
		}!

Kernel.SharedPool
	subclass: #'OS.ThemeConstants'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'ABS_DOWNDISABLED' -> 16r8.
			'ABS_DOWNHOT' -> 16r6.
			'ABS_DOWNNORMAL' -> 16r5.
			'ABS_DOWNPRESSED' -> 16r7.
			'ABS_LEFTDISABLED' -> 16rC.
			'ABS_LEFTHOT' -> 16rA.
			'ABS_LEFTNORMAL' -> 16r9.
			'ABS_LEFTPRESSED' -> 16rB.
			'ABS_RIGHTDISABLED' -> 16r10.
			'ABS_RIGHTHOT' -> 16rE.
			'ABS_RIGHTNORMAL' -> 16rD.
			'ABS_RIGHTPRESSED' -> 16rF.
			'ABS_UPDISABLED' -> 16r4.
			'ABS_UPHOT' -> 16r2.
			'ABS_UPNORMAL' -> 16r1.
			'ABS_UPPRESSED' -> 16r3.
			'BP_CHECKBOX' -> 16r3.
			'BP_GROUPBOX' -> 16r4.
			'BP_PUSHBUTTON' -> 16r1.
			'BP_RADIOBUTTON' -> 16r2.
			'BP_USERBUTTON' -> 16r5.
			'BPBF_COMPATIBLEBITMAP' -> 16r0.
			'BPBF_DIB' -> 16r1.
			'BPBF_TOPDOWNDIB' -> 16r2.
			'BPBF_TOPDOWNMONODIB' -> 16r3.
			'BPPF_ERASE' -> 16r1.
			'BPPF_NOCLIP' -> 16r2.
			'BPPF_NONCLIENT' -> 16r4.
			'BT_BORDERFILL' -> 16r1.
			'BT_ELLIPSE' -> 16r2.
			'BT_IMAGEFILE' -> 16r0.
			'BT_NONE' -> 16r2.
			'BT_RECT' -> 16r0.
			'BT_ROUNDRECT' -> 16r1.
			'CA_CENTER' -> 16r1.
			'CA_LEFT' -> 16r0.
			'CA_RIGHT' -> 16r2.
			'CBS_CHECKEDDISABLED' -> 16r8.
			'CBS_CHECKEDHOT' -> 16r6.
			'CBS_CHECKEDNORMAL' -> 16r5.
			'CBS_CHECKEDPRESSED' -> 16r7.
			'CBS_DISABLED' -> 16r4.
			'CBS_HOT' -> 16r2.
			'CBS_MIXEDDISABLED' -> 16rC.
			'CBS_MIXEDHOT' -> 16rA.
			'CBS_MIXEDNORMAL' -> 16r9.
			'CBS_MIXEDPRESSED' -> 16rB.
			'CBS_NORMAL' -> 16r1.
			'CBS_PUSHED' -> 16r3.
			'CBS_UNCHECKEDDISABLED' -> 16r4.
			'CBS_UNCHECKEDHOT' -> 16r2.
			'CBS_UNCHECKEDNORMAL' -> 16r1.
			'CBS_UNCHECKEDPRESSED' -> 16r3.
			'CBXS_DISABLED' -> 16r4.
			'CBXS_HOT' -> 16r2.
			'CBXS_NORMAL' -> 16r1.
			'CBXS_PRESSED' -> 16r3.
			'CHEVS_HOT' -> 16r2.
			'CHEVS_NORMAL' -> 16r1.
			'CHEVS_PRESSED' -> 16r3.
			'CLP_TIME' -> 16r1.
			'CLS_NORMAL' -> 16r1.
			'CP_DROPDOWNBUTTON' -> 16r1.
			'CS_ACTIVE' -> 16r1.
			'CS_DISABLED' -> 16r3.
			'CS_INACTIVE' -> 16r2.
			'DNHZS_DISABLED' -> 16r4.
			'DNHZS_HOT' -> 16r2.
			'DNHZS_NORMAL' -> 16r1.
			'DNHZS_PRESSED' -> 16r3.
			'DNS_DISABLED' -> 16r4.
			'DNS_HOT' -> 16r2.
			'DNS_NORMAL' -> 16r1.
			'DNS_PRESSED' -> 16r3.
			'DTBG_CLIPRECT' -> 16r1.
			'DTBG_COMPUTINGREGION' -> 16r10.
			'DTBG_DRAWSOLID' -> 16r2.
			'DTBG_MIRRORDC' -> 16r20.
			'DTBG_OMITBORDER' -> 16r4.
			'DTBG_OMITCONTENT' -> 16r8.
			'DTT_GRAYED' -> 16r1.
			'EBHC_HOT' -> 16r2.
			'EBHC_NORMAL' -> 16r1.
			'EBHC_PRESSED' -> 16r3.
			'EBHP_HOT' -> 16r2.
			'EBHP_NORMAL' -> 16r1.
			'EBHP_PRESSED' -> 16r3.
			'EBHP_SELECTEDHOT' -> 16r5.
			'EBHP_SELECTEDNORMAL' -> 16r4.
			'EBHP_SELECTEDPRESSED' -> 16r6.
			'EBM_HOT' -> 16r2.
			'EBM_NORMAL' -> 16r1.
			'EBM_PRESSED' -> 16r3.
			'EBNGC_HOT' -> 16r2.
			'EBNGC_NORMAL' -> 16r1.
			'EBNGC_PRESSED' -> 16r3.
			'EBNGE_HOT' -> 16r2.
			'EBNGE_NORMAL' -> 16r1.
			'EBNGE_PRESSED' -> 16r3.
			'EBP_HEADERBACKGROUND' -> 16r1.
			'EBP_HEADERCLOSE' -> 16r2.
			'EBP_HEADERPIN' -> 16r3.
			'EBP_IEBARMENU' -> 16r4.
			'EBP_NORMALGROUPBACKGROUND' -> 16r5.
			'EBP_NORMALGROUPCOLLAPSE' -> 16r6.
			'EBP_NORMALGROUPEXPAND' -> 16r7.
			'EBP_NORMALGROUPHEAD' -> 16r8.
			'EBP_SPECIALGROUPBACKGROUND' -> 16r9.
			'EBP_SPECIALGROUPCOLLAPSE' -> 16rA.
			'EBP_SPECIALGROUPEXPAND' -> 16rB.
			'EBP_SPECIALGROUPHEAD' -> 16rC.
			'EBSGC_HOT' -> 16r2.
			'EBSGC_NORMAL' -> 16r1.
			'EBSGC_PRESSED' -> 16r3.
			'EBSGE_HOT' -> 16r2.
			'EBSGE_NORMAL' -> 16r1.
			'EBSGE_PRESSED' -> 16r3.
			'EP_CARET' -> 16r2.
			'EP_EDITTEXT' -> 16r1.
			'ETDT_DISABLE' -> 16r1.
			'ETDT_ENABLE' -> 16r2.
			'ETDT_ENABLETAB' -> 16r6.
			'ETDT_USETABTEXTURE' -> 16r4.
			'ETS_ASSIST' -> 16r7.
			'ETS_DISABLED' -> 16r4.
			'ETS_FOCUSED' -> 16r5.
			'ETS_HOT' -> 16r2.
			'ETS_NORMAL' -> 16r1.
			'ETS_READONLY' -> 16r6.
			'ETS_SELECTED' -> 16r3.
			'FS_ACTIVE' -> 16r1.
			'FS_INACTIVE' -> 16r2.
			'FT_HORZGRADIENT' -> 16r2.
			'FT_RADIALGRADIENT' -> 16r3.
			'FT_SOLID' -> 16r0.
			'FT_TILEIMAGE' -> 16r4.
			'FT_VERTGRADIENT' -> 16r1.
			'GBS_DISABLED' -> 16r2.
			'GBS_NORMAL' -> 16r1.
			'GFST_DPI' -> 16r2.
			'GFST_NONE' -> 16r0.
			'GFST_SIZE' -> 16r1.
			'GLPS_CLOSED' -> 16r1.
			'GLPS_OPENED' -> 16r2.
			'GP_BORDER' -> 16r1.
			'GP_LINEHORZ' -> 16r2.
			'GP_LINEVERT' -> 16r3.
			'GT_FONTGLYPH' -> 16r2.
			'GT_IMAGEGLYPH' -> 16r1.
			'GT_NONE' -> 16r0.
			'HA_CENTER' -> 16r1.
			'HA_LEFT' -> 16r0.
			'HA_RIGHT' -> 16r2.
			'HBS_DISABLED' -> 16r4.
			'HBS_HOT' -> 16r2.
			'HBS_NORMAL' -> 16r1.
			'HBS_PUSHED' -> 16r3.
			'HILS_HOT' -> 16r2.
			'HILS_NORMAL' -> 16r1.
			'HILS_PRESSED' -> 16r3.
			'HIRS_HOT' -> 16r2.
			'HIRS_NORMAL' -> 16r1.
			'HIRS_PRESSED' -> 16r3.
			'HIS_HOT' -> 16r2.
			'HIS_NORMAL' -> 16r1.
			'HIS_PRESSED' -> 16r3.
			'HP_HEADERITEM' -> 16r1.
			'HP_HEADERITEMLEFT' -> 16r2.
			'HP_HEADERITEMRIGHT' -> 16r3.
			'HP_HEADERSORTARROW' -> 16r4.
			'HSAS_SORTEDDOWN' -> 16r2.
			'HSAS_SORTEDUP' -> 16r1.
			'HSS_DISABLED' -> 16r4.
			'HSS_HOT' -> 16r2.
			'HSS_NORMAL' -> 16r1.
			'HSS_PUSHED' -> 16r3.
			'HTS_DISABLED' -> 16r4.
			'HTS_HOT' -> 16r2.
			'HTS_NORMAL' -> 16r1.
			'HTS_PUSHED' -> 16r3.
			'HTTB_BACKGROUNDSEG' -> 16r0.
			'HTTB_CAPTION' -> 16r4.
			'HTTB_FIXEDBORDER' -> 16r2.
			'HTTB_RESIZINGBORDER' -> 16rF0.
			'HTTB_RESIZINGBORDER_BOTTOM' -> 16r80.
			'HTTB_RESIZINGBORDER_LEFT' -> 16r10.
			'HTTB_RESIZINGBORDER_RIGHT' -> 16r40.
			'HTTB_RESIZINGBORDER_TOP' -> 16r20.
			'HTTB_SIZINGTEMPLATE' -> 16r100.
			'HTTB_SYSTEMSIZINGMARGINS' -> 16r200.
			'ICE_ALPHA' -> 16r4.
			'ICE_GLOW' -> 16r1.
			'ICE_NONE' -> 16r0.
			'ICE_PULSE' -> 16r3.
			'ICE_SHADOW' -> 16r2.
			'IL_HORIZONTAL' -> 16r1.
			'IL_VERTICAL' -> 16r0.
			'IST_DPI' -> 16r2.
			'IST_NONE' -> 16r0.
			'IST_SIZE' -> 16r1.
			'LIS_DISABLED' -> 16r4.
			'LIS_HOT' -> 16r2.
			'LIS_NORMAL' -> 16r1.
			'LIS_SELECTED' -> 16r3.
			'LIS_SELECTEDNOTFOCUS' -> 16r5.
			'LVEB_HOVER' -> 16r2.
			'LVEB_NORMAL' -> 16r1.
			'LVEB_PUSHED' -> 16r3.
			'LVP_COLLAPSEBUTTON' -> 16r9.
			'LVP_EMPTYTEXT' -> 16r5.
			'LVP_EXPANDBUTTON' -> 16r8.
			'LVP_LISTDETAIL' -> 16r3.
			'LVP_LISTGROUP' -> 16r2.
			'LVP_LISTITEM' -> 16r1.
			'LVP_LISTSORTEDDETAIL' -> 16r4.
			'MAXBS_DISABLED' -> 16r4.
			'MAXBS_HOT' -> 16r2.
			'MAXBS_NORMAL' -> 16r1.
			'MAXBS_PUSHED' -> 16r3.
			'MDP_NEWAPPBUTTON' -> 16r1.
			'MDP_SEPERATOR' -> 16r2.
			'MDS_CHECKED' -> 16r5.
			'MDS_DISABLED' -> 16r4.
			'MDS_HOT' -> 16r2.
			'MDS_HOTCHECKED' -> 16r6.
			'MDS_NORMAL' -> 16r1.
			'MDS_PRESSED' -> 16r3.
			'MENU_BARBACKGROUND' -> 16r7.
			'MENU_BARITEM' -> 16r8.
			'MENU_CHEVRON_TMSCHEMA' -> 16r5.
			'MENU_MENUBARDROPDOWN_TMSCHEMA' -> 16r4.
			'MENU_MENUBARITEM_TMSCHEMA' -> 16r3.
			'MENU_MENUDROPDOWN_TMSCHEMA' -> 16r2.
			'MENU_MENUITEM_TMSCHEMA' -> 16r1.
			'MENU_POPUPBACKGROUND' -> 16r9.
			'MENU_POPUPBORDERS' -> 16rA.
			'MENU_POPUPCHECK' -> 16rB.
			'MENU_POPUPCHECKBACKGROUND' -> 16rC.
			'MENU_POPUPGUTTER' -> 16rD.
			'MENU_POPUPITEM' -> 16rE.
			'MENU_POPUPITEM_FOCUSABLE' -> 16r1B.
			'MENU_POPUPITEMKBFOCUS' -> 16r1A.
			'MENU_POPUPSEPARATOR' -> 16rF.
			'MENU_POPUPSUBMENU' -> 16r10.
			'MENU_POPUPSUBMENU_HCHOT' -> 16r15.
			'MENU_SEPARATOR_TMSCHEMA' -> 16r6.
			'MENU_SYSTEMCLOSE' -> 16r11.
			'MENU_SYSTEMCLOSE_HCHOT' -> 16r16.
			'MENU_SYSTEMMAXIMIZE' -> 16r12.
			'MENU_SYSTEMMAXIMIZE_HCHOT' -> 16r17.
			'MENU_SYSTEMMINIMIZE' -> 16r13.
			'MENU_SYSTEMMINIMIZE_HCHOT' -> 16r18.
			'MENU_SYSTEMRESTORE' -> 16r14.
			'MENU_SYSTEMRESTORE_HCHOT' -> 16r19.
			'MINBS_DISABLED' -> 16r4.
			'MINBS_HOT' -> 16r2.
			'MINBS_NORMAL' -> 16r1.
			'MINBS_PUSHED' -> 16r3.
			'MNCS_ACTIVE' -> 16r1.
			'MNCS_DISABLED' -> 16r3.
			'MNCS_INACTIVE' -> 16r2.
			'MP_CHEVRON' -> 16r5.
			'MP_MENUBARDROPDOWN' -> 16r4.
			'MP_MENUBARITEM' -> 16r3.
			'MP_MENUDROPDOWN' -> 16r2.
			'MP_MENUITEM' -> 16r1.
			'MP_SEPARATOR' -> 16r6.
			'MS_DEMOTED' -> 16r3.
			'MS_NORMAL' -> 16r1.
			'MS_SELECTED' -> 16r2.
			'MXCS_ACTIVE' -> 16r1.
			'MXCS_DISABLED' -> 16r3.
			'MXCS_INACTIVE' -> 16r2.
			'OT_ABOVELASTBUTTON' -> 16rC.
			'OT_BELOWLASTBUTTON' -> 16rD.
			'OT_BOTTOMLEFT' -> 16r3.
			'OT_BOTTOMMIDDLE' -> 16r5.
			'OT_BOTTOMRIGHT' -> 16r4.
			'OT_LEFTOFCAPTION' -> 16r8.
			'OT_LEFTOFLASTBUTTON' -> 16rA.
			'OT_MIDDLELEFT' -> 16r6.
			'OT_MIDDLERIGHT' -> 16r7.
			'OT_RIGHTOFCAPTION' -> 16r9.
			'OT_RIGHTOFLASTBUTTON' -> 16rB.
			'OT_TOPLEFT' -> 16r0.
			'OT_TOPMIDDLE' -> 16r2.
			'OT_TOPRIGHT' -> 16r1.
			'PBS_DEFAULTED' -> 16r5.
			'PBS_DISABLED' -> 16r4.
			'PBS_HOT' -> 16r2.
			'PBS_NORMAL' -> 16r1.
			'PBS_PRESSED' -> 16r3.
			'PGRP_DOWN' -> 16r2.
			'PGRP_DOWNHORZ' -> 16r4.
			'PGRP_UP' -> 16r1.
			'PGRP_UPHORZ' -> 16r3.
			'PO_CLASS' -> 16r2.
			'PO_GLOBAL' -> 16r3.
			'PO_NOTFOUND' -> 16r4.
			'PO_PART' -> 16r1.
			'PO_STATE' -> 16r0.
			'PP_BAR' -> 16r1.
			'PP_BARVERT' -> 16r2.
			'PP_CHUNK' -> 16r3.
			'PP_CHUNKVERT' -> 16r4.
			'RBS_CHECKEDDISABLED' -> 16r8.
			'RBS_CHECKEDHOT' -> 16r6.
			'RBS_CHECKEDNORMAL' -> 16r5.
			'RBS_CHECKEDPRESSED' -> 16r7.
			'RBS_DISABLED' -> 16r4.
			'RBS_HOT' -> 16r2.
			'RBS_NORMAL' -> 16r1.
			'RBS_PUSHED' -> 16r3.
			'RBS_UNCHECKEDDISABLED' -> 16r4.
			'RBS_UNCHECKEDHOT' -> 16r2.
			'RBS_UNCHECKEDNORMAL' -> 16r1.
			'RBS_UNCHECKEDPRESSED' -> 16r3.
			'RP_BACKGROUND' -> 16r7.
			'RP_BAND' -> 16r3.
			'RP_CHEVRON' -> 16r4.
			'RP_CHEVRONVERT' -> 16r5.
			'RP_GRIPPER' -> 16r1.
			'RP_GRIPPERVERT' -> 16r2.
			'RP_SPLITERVERT' -> 16r8.
			'RP_SPLITTER' -> 16r7.
			'SBP_ARROWBTN' -> 16r1.
			'SBP_GRIPPERHORZ' -> 16r8.
			'SBP_GRIPPERVERT' -> 16r9.
			'SBP_LOWERTRACKHORZ' -> 16r4.
			'SBP_LOWERTRACKVERT' -> 16r6.
			'SBP_SIZEBOX' -> 16rA.
			'SBP_THUMBBTNHORZ' -> 16r2.
			'SBP_THUMBBTNVERT' -> 16r3.
			'SBP_UPPERTRACKHORZ' -> 16r5.
			'SBP_UPPERTRACKVERT' -> 16r7.
			'SBS_DISABLED' -> 16r4.
			'SBS_HOT' -> 16r2.
			'SBS_NORMAL' -> 16r1.
			'SBS_PUSHED' -> 16r3.
			'SCRBS_DISABLED' -> 16r4.
			'SCRBS_HOT' -> 16r2.
			'SCRBS_NORMAL' -> 16r1.
			'SCRBS_PRESSED' -> 16r3.
			'SP_GRIPPER' -> 16r3.
			'SP_GRIPPERPANE' -> 16r2.
			'SP_PANE' -> 16r1.
			'SPLITS_NORMAL' -> 16r1.
			'SPLITSV_NORMAL' -> 16r1.
			'SPLS_HOT' -> 16r2.
			'SPLS_NORMAL' -> 16r1.
			'SPLS_PRESSED' -> 16r3.
			'SPNP_DOWN' -> 16r2.
			'SPNP_DOWNHORZ' -> 16r4.
			'SPNP_UP' -> 16r1.
			'SPNP_UPHORZ' -> 16r3.
			'SPP_LOGOFF' -> 16r8.
			'SPP_LOGOFFBUTTONS' -> 16r9.
			'SPP_MOREPROGRAMS' -> 16r2.
			'SPP_MOREPROGRAMSARROW' -> 16r3.
			'SPP_PLACESLIST' -> 16r6.
			'SPP_PLACESLISTSEPARATOR' -> 16r7.
			'SPP_PREVIEW' -> 16rB.
			'SPP_PROGLIST' -> 16r4.
			'SPP_PROGLISTSEPARATOR' -> 16r5.
			'SPP_USERPANE' -> 16r1.
			'SPP_USERPICTURE' -> 16rA.
			'SPS_HOT' -> 16r2.
			'SPS_NORMAL' -> 16r1.
			'SPS_PRESSED' -> 16r3.
			'ST_STRETCH' -> 16r1.
			'ST_TILE' -> 16r2.
			'ST_TRUESIZE' -> 16r0.
			'STAP_ALLOW_CONTROLS' -> 16r2.
			'STAP_ALLOW_NONCLIENT' -> 16r1.
			'STAP_ALLOW_WEBCONTENT' -> 16r4.
			'SZB_LEFTALIGN' -> 16r2.
			'SZB_RIGHTALIGN' -> 16r1.
			'TABP_BODY' -> 16rA.
			'TABP_PANE' -> 16r9.
			'TABP_TABITEM' -> 16r1.
			'TABP_TABITEMBOTHEDGE' -> 16r4.
			'TABP_TABITEMLEFTEDGE' -> 16r2.
			'TABP_TABITEMRIGHTEDGE' -> 16r3.
			'TABP_TOPTABITEM' -> 16r5.
			'TABP_TOPTABITEMBOTHEDGE' -> 16r8.
			'TABP_TOPTABITEMLEFTEDGE' -> 16r6.
			'TABP_TOPTABITEMRIGHTEDGE' -> 16r7.
			'TBP_BACKGROUNDBOTTOM' -> 16r1.
			'TBP_BACKGROUNDLEFT' -> 16r4.
			'TBP_BACKGROUNDRIGHT' -> 16r2.
			'TBP_BACKGROUNDTOP' -> 16r3.
			'TBP_SIZINGBARBOTTOM' -> 16r5.
			'TBP_SIZINGBARLEFT' -> 16r8.
			'TBP_SIZINGBARRIGHT' -> 16r6.
			'TBP_SIZINGBARTOP' -> 16r7.
			'TDP_FLASHBUTTON' -> 16r2.
			'TDP_FLASHBUTTONGROUPMENU' -> 16r3.
			'TDP_GROUPCOUNT' -> 16r1.
			'TIBES_DISABLED' -> 16r4.
			'TIBES_FOCUSED' -> 16r5.
			'TIBES_HOT' -> 16r2.
			'TIBES_NORMAL' -> 16r1.
			'TIBES_SELECTED' -> 16r3.
			'TILES_DISABLED' -> 16r4.
			'TILES_FOCUSED' -> 16r5.
			'TILES_HOT' -> 16r2.
			'TILES_NORMAL' -> 16r1.
			'TILES_SELECTED' -> 16r3.
			'TIRES_DISABLED' -> 16r4.
			'TIRES_FOCUSED' -> 16r5.
			'TIRES_HOT' -> 16r2.
			'TIRES_NORMAL' -> 16r1.
			'TIRES_SELECTED' -> 16r3.
			'TIS_DISABLED' -> 16r4.
			'TIS_FOCUSED' -> 16r5.
			'TIS_HOT' -> 16r2.
			'TIS_NORMAL' -> 16r1.
			'TIS_SELECTED' -> 16r3.
			'TKP_THUMB' -> 16r3.
			'TKP_THUMBBOTTOM' -> 16r4.
			'TKP_THUMBLEFT' -> 16r7.
			'TKP_THUMBRIGHT' -> 16r8.
			'TKP_THUMBTOP' -> 16r5.
			'TKP_THUMBVERT' -> 16r6.
			'TKP_TICS' -> 16r9.
			'TKP_TICSVERT' -> 16rA.
			'TKP_TRACK' -> 16r1.
			'TKP_TRACKVERT' -> 16r2.
			'TKS_NORMAL' -> 16r1.
			'TMT_ACCENTCOLORHINT' -> 16rEEF.
			'TMT_ACTIVEBORDER' -> 16r64B.
			'TMT_ACTIVECAPTION' -> 16r643.
			'TMT_ALPHALEVEL' -> 16r962.
			'TMT_ALPHATHRESHOLD' -> 16r96F.
			'TMT_ALWAYSSHOWSIZINGBAR' -> 16r8A0.
			'TMT_APPWORKSPACE' -> 16r64D.
			'TMT_AUTHOR' -> 16r25C.
			'TMT_AUTOSIZE' -> 16r89A.
			'TMT_BACKGROUND' -> 16r642.
			'TMT_BGFILL' -> 16r89D.
			'TMT_BGTYPE' -> 16rFA1.
			'TMT_BLENDCOLOR' -> 16r138B.
			'TMT_BODYTEXTCOLOR' -> 16rEF3.
			'TMT_BOOL' -> 16rCB.
			'TMT_BORDERCOLOR' -> 16rED9.
			'TMT_BORDERCOLORHINT' -> 16rEEE.
			'TMT_BORDERONLY' -> 16r89B.
			'TMT_BORDERSIZE' -> 16r963.
			'TMT_BORDERTYPE' -> 16rFA2.
			'TMT_BTNFACE' -> 16r650.
			'TMT_BTNHIGHLIGHT' -> 16r655.
			'TMT_BTNSHADOW' -> 16r651.
			'TMT_BTNTEXT' -> 16r653.
			'TMT_BUTTONALTERNATEFACE' -> 16r65A.
			'TMT_CAPTIONBARHEIGHT' -> 16r4B5.
			'TMT_CAPTIONBARWIDTH' -> 16r4B4.
			'TMT_CAPTIONFONT' -> 16r321.
			'TMT_CAPTIONMARGINS' -> 16rE13.
			'TMT_CAPTIONTEXT' -> 16r64A.
			'TMT_CHARSET' -> 16r193.
			'TMT_COLOR' -> 16rCC.
			'TMT_COLORSCHEMES' -> 16r191.
			'TMT_COMPANY' -> 16r25B.
			'TMT_COMPOSITED' -> 16r89C.
			'TMT_CONTENTALIGNMENT' -> 16rFA6.
			'TMT_CONTENTMARGINS' -> 16rE12.
			'TMT_COPYRIGHT' -> 16r25D.
			'TMT_CSSNAME' -> 16r579.
			'TMT_DEFAULTPANESIZE' -> 16r138A.
			'TMT_DESCRIPTION' -> 16r260.
			'TMT_DISPLAYNAME' -> 16r259.
			'TMT_DKSHADOW3D' -> 16r656.
			'TMT_EDGEDKSHADOWCOLOR' -> 16rEDF.
			'TMT_EDGEFILLCOLOR' -> 16rEE0.
			'TMT_EDGEHIGHLIGHTCOLOR' -> 16rEDD.
			'TMT_EDGELIGHTCOLOR' -> 16rEDC.
			'TMT_EDGESHADOWCOLOR' -> 16rEDE.
			'TMT_FILENAME' -> 16rCE.
			'TMT_FILLCOLOR' -> 16rEDA.
			'TMT_FILLCOLORHINT' -> 16rEED.
			'TMT_FILLTYPE' -> 16rFA3.
			'TMT_FLATMENUS' -> 16r3E9.
			'TMT_FONT' -> 16rD2.
			'TMT_FROMCOLOR1' -> 16r7D1.
			'TMT_FROMCOLOR2' -> 16r7D2.
			'TMT_FROMCOLOR3' -> 16r7D3.
			'TMT_FROMCOLOR4' -> 16r7D4.
			'TMT_FROMCOLOR5' -> 16r7D5.
			'TMT_FROMHUE1' -> 16r709.
			'TMT_FROMHUE2' -> 16r70A.
			'TMT_FROMHUE3' -> 16r70B.
			'TMT_FROMHUE4' -> 16r70C.
			'TMT_FROMHUE5' -> 16r70D.
			'TMT_GLOWCOLOR' -> 16rEE8.
			'TMT_GLYPHFONT' -> 16rA29.
			'TMT_GLYPHFONTSIZINGTYPE' -> 16rFAE.
			'TMT_GLYPHIMAGEFILE' -> 16rBC0.
			'TMT_GLYPHINDEX' -> 16r972.
			'TMT_GLYPHONLY' -> 16r89F.
			'TMT_GLYPHTEXTCOLOR' -> 16rEEB.
			'TMT_GLYPHTRANSPARENT' -> 16r89E.
			'TMT_GLYPHTRANSPARENTCOLOR' -> 16rEEC.
			'TMT_GLYPHTYPE' -> 16rFAC.
			'TMT_GRADIENTACTIVECAPTION' -> 16r65C.
			'TMT_GRADIENTCOLOR1' -> 16rEE2.
			'TMT_GRADIENTCOLOR2' -> 16rEE3.
			'TMT_GRADIENTCOLOR3' -> 16rEE4.
			'TMT_GRADIENTCOLOR4' -> 16rEE5.
			'TMT_GRADIENTCOLOR5' -> 16rEE6.
			'TMT_GRADIENTINACTIVECAPTION' -> 16r65D.
			'TMT_GRADIENTRATIO1' -> 16r966.
			'TMT_GRADIENTRATIO2' -> 16r967.
			'TMT_GRADIENTRATIO3' -> 16r968.
			'TMT_GRADIENTRATIO4' -> 16r969.
			'TMT_GRADIENTRATIO5' -> 16r96A.
			'TMT_GRAYTEXT' -> 16r652.
			'TMT_HALIGN' -> 16rFA5.
			'TMT_HEIGHT' -> 16r971.
			'TMT_HIGHLIGHT' -> 16r64E.
			'TMT_HIGHLIGHTTEXT' -> 16r64F.
			'TMT_HOTTRACKING' -> 16r65B.
			'TMT_ICONEFFECT' -> 16rFA9.
			'TMT_ICONTITLEFONT' -> 16r326.
			'TMT_IMAGECOUNT' -> 16r961.
			'TMT_IMAGEFILE' -> 16rBB9.
			'TMT_IMAGEFILE1' -> 16rBBA.
			'TMT_IMAGEFILE2' -> 16rBBB.
			'TMT_IMAGEFILE3' -> 16rBBC.
			'TMT_IMAGEFILE4' -> 16rBBD.
			'TMT_IMAGEFILE5' -> 16rBBE.
			'TMT_IMAGELAYOUT' -> 16rFAB.
			'TMT_IMAGESELECTTYPE' -> 16rFAD.
			'TMT_INACTIVEBORDER' -> 16r64C.
			'TMT_INACTIVECAPTION' -> 16r644.
			'TMT_INACTIVECAPTIONTEXT' -> 16r654.
			'TMT_INFOBK' -> 16r659.
			'TMT_INFOTEXT' -> 16r658.
			'TMT_INT' -> 16rCA.
			'TMT_INTEGRALSIZING' -> 16r8A3.
			'TMT_INTLIST' -> 16rD3.
			'TMT_LIGHT3D' -> 16r657.
			'TMT_MARGINS' -> 16rCD.
			'TMT_MENU' -> 16r645.
			'TMT_MENUBAR' -> 16r65F.
			'TMT_MENUBARHEIGHT' -> 16r4B9.
			'TMT_MENUBARWIDTH' -> 16r4B8.
			'TMT_MENUFONT' -> 16r323.
			'TMT_MENUHILIGHT' -> 16r65E.
			'TMT_MENUTEXT' -> 16r648.
			'TMT_MINCOLORDEPTH' -> 16r515.
			'TMT_MINDPI1' -> 16r974.
			'TMT_MINDPI2' -> 16r975.
			'TMT_MINDPI3' -> 16r976.
			'TMT_MINDPI4' -> 16r977.
			'TMT_MINDPI5' -> 16r978.
			'TMT_MINSIZE' -> 16rD4B.
			'TMT_MINSIZE1' -> 16rD4C.
			'TMT_MINSIZE2' -> 16rD4D.
			'TMT_MINSIZE3' -> 16rD4E.
			'TMT_MINSIZE4' -> 16rD4F.
			'TMT_MINSIZE5' -> 16rD50.
			'TMT_MIRRORIMAGE' -> 16r8A1.
			'TMT_MSGBOXFONT' -> 16r325.
			'TMT_NORMALSIZE' -> 16rD51.
			'TMT_OFFSET' -> 16rD49.
			'TMT_OFFSETTYPE' -> 16rFA8.
			'TMT_POSITION' -> 16rD0.
			'TMT_PROGRESSCHUNKSIZE' -> 16r96B.
			'TMT_PROGRESSSPACESIZE' -> 16r96C.
			'TMT_RECT' -> 16rD1.
			'TMT_ROUNDCORNERHEIGHT' -> 16r965.
			'TMT_ROUNDCORNERWIDTH' -> 16r964.
			'TMT_SATURATION' -> 16r96D.
			'TMT_SCROLLBAR' -> 16r641.
			'TMT_SCROLLBARHEIGHT' -> 16r4B3.
			'TMT_SCROLLBARWIDTH' -> 16r4B2.
			'TMT_SHADOWCOLOR' -> 16rEE7.
			'TMT_SIZE' -> 16rCF.
			'TMT_SIZES' -> 16r192.
			'TMT_SIZINGBORDERWIDTH' -> 16r4B1.
			'TMT_SIZINGMARGINS' -> 16rE11.
			'TMT_SIZINGTYPE' -> 16rFA4.
			'TMT_SMALLCAPTIONFONT' -> 16r322.
			'TMT_SMCAPTIONBARHEIGHT' -> 16r4B7.
			'TMT_SMCAPTIONBARWIDTH' -> 16r4B6.
			'TMT_SOURCEGROW' -> 16r8A4.
			'TMT_SOURCESHRINK' -> 16r8A5.
			'TMT_STATUSFONT' -> 16r324.
			'TMT_STOCKIMAGEFILE' -> 16rBBF.
			'TMT_STRING' -> 16rC9.
			'TMT_TEXT' -> 16rC81.
			'TMT_TEXTBORDERCOLOR' -> 16rEE9.
			'TMT_TEXTBORDERSIZE' -> 16r96E.
			'TMT_TEXTCOLOR' -> 16rEDB.
			'TMT_TEXTSHADOWCOLOR' -> 16rEEA.
			'TMT_TEXTSHADOWOFFSET' -> 16rD4A.
			'TMT_TEXTSHADOWTYPE' -> 16rFAA.
			'TMT_TOCOLOR1' -> 16r7D6.
			'TMT_TOCOLOR2' -> 16r7D7.
			'TMT_TOCOLOR3' -> 16r7D8.
			'TMT_TOCOLOR4' -> 16r7D9.
			'TMT_TOCOLOR5' -> 16r7DA.
			'TMT_TOHUE1' -> 16r70E.
			'TMT_TOHUE2' -> 16r70F.
			'TMT_TOHUE3' -> 16r710.
			'TMT_TOHUE4' -> 16r711.
			'TMT_TOHUE5' -> 16r712.
			'TMT_TOOLTIP' -> 16r25A.
			'TMT_TRANSPARENT' -> 16r899.
			'TMT_TRANSPARENTCOLOR' -> 16rEE1.
			'TMT_TRUESIZESCALINGTYPE' -> 16rFAF.
			'TMT_TRUESIZESTRETCHMARK' -> 16r973.
			'TMT_UNIFORMSIZING' -> 16r8A2.
			'TMT_URL' -> 16r25E.
			'TMT_USERPICTURE' -> 16r1389.
			'TMT_VALIGN' -> 16rFA7.
			'TMT_VERSION' -> 16r25F.
			'TMT_WIDTH' -> 16r970.
			'TMT_WINDOW' -> 16r646.
			'TMT_WINDOWFRAME' -> 16r647.
			'TMT_WINDOWTEXT' -> 16r649.
			'TMT_XMLNAME' -> 16r57A.
			'TNP_ANIMBACKGROUND' -> 16r2.
			'TNP_BACKGROUND' -> 16r1.
			'TP_BUTTON' -> 16r1.
			'TP_DROPDOWNBUTTON' -> 16r2.
			'TP_SEPARATOR' -> 16r5.
			'TP_SEPARATORVERT' -> 16r6.
			'TP_SPLITBUTTON' -> 16r3.
			'TP_SPLITBUTTONDROPDOWN' -> 16r4.
			'TREIS_DISABLED' -> 16r4.
			'TREIS_HOT' -> 16r2.
			'TREIS_NORMAL' -> 16r1.
			'TREIS_SELECTED' -> 16r3.
			'TREIS_SELECTEDNOTFOCUS' -> 16r5.
			'TRS_NORMAL' -> 16r1.
			'TRVS_NORMAL' -> 16r1.
			'TS_CHECKED' -> 16r5.
			'TS_DISABLED' -> 16r4.
			'TS_DRAW' -> 16r2.
			'TS_HOT' -> 16r2.
			'TS_HOTCHECKED' -> 16r6.
			'TS_MIN' -> 16r0.
			'TS_NORMAL' -> 16r1.
			'TS_PRESSED' -> 16r3.
			'TS_TRUE' -> 16r1.
			'TSS_NORMAL' -> 16r1.
			'TSST_DPI' -> 16r2.
			'TSST_NONE' -> 16r0.
			'TSST_SIZE' -> 16r1.
			'TST_CONTINUOUS' -> 16r2.
			'TST_NONE' -> 16r0.
			'TST_SINGLE' -> 16r1.
			'TSVS_NORMAL' -> 16r1.
			'TTBS_LINK' -> 16r2.
			'TTBS_NORMAL' -> 16r1.
			'TTCS_HOT' -> 16r2.
			'TTCS_NORMAL' -> 16r1.
			'TTCS_PRESSED' -> 16r3.
			'TTIBES_DISABLED' -> 16r4.
			'TTIBES_FOCUSED' -> 16r5.
			'TTIBES_HOT' -> 16r2.
			'TTIBES_NORMAL' -> 16r1.
			'TTIBES_SELECTED' -> 16r3.
			'TTILES_DISABLED' -> 16r4.
			'TTILES_FOCUSED' -> 16r5.
			'TTILES_HOT' -> 16r2.
			'TTILES_NORMAL' -> 16r1.
			'TTILES_SELECTED' -> 16r3.
			'TTIRES_DISABLED' -> 16r4.
			'TTIRES_FOCUSED' -> 16r5.
			'TTIRES_HOT' -> 16r2.
			'TTIRES_NORMAL' -> 16r1.
			'TTIRES_SELECTED' -> 16r3.
			'TTIS_DISABLED' -> 16r4.
			'TTIS_FOCUSED' -> 16r5.
			'TTIS_HOT' -> 16r2.
			'TTIS_NORMAL' -> 16r1.
			'TTIS_SELECTED' -> 16r3.
			'TTP_BALLOON' -> 16r3.
			'TTP_BALLOONTITLE' -> 16r4.
			'TTP_CLOSE' -> 16r5.
			'TTP_STANDARD' -> 16r1.
			'TTP_STANDARDTITLE' -> 16r2.
			'TTSS_LINK' -> 16r2.
			'TTSS_NORMAL' -> 16r1.
			'TUBS_DISABLED' -> 16r5.
			'TUBS_FOCUSED' -> 16r4.
			'TUBS_HOT' -> 16r2.
			'TUBS_NORMAL' -> 16r1.
			'TUBS_PRESSED' -> 16r3.
			'TUS_DISABLED' -> 16r5.
			'TUS_FOCUSED' -> 16r4.
			'TUS_HOT' -> 16r2.
			'TUS_NORMAL' -> 16r1.
			'TUS_PRESSED' -> 16r3.
			'TUTS_DISABLED' -> 16r5.
			'TUTS_FOCUSED' -> 16r4.
			'TUTS_HOT' -> 16r2.
			'TUTS_NORMAL' -> 16r1.
			'TUTS_PRESSED' -> 16r3.
			'TUVLS_DISABLED' -> 16r5.
			'TUVLS_FOCUSED' -> 16r4.
			'TUVLS_HOT' -> 16r2.
			'TUVLS_NORMAL' -> 16r1.
			'TUVLS_PRESSED' -> 16r3.
			'TUVRS_DISABLED' -> 16r5.
			'TUVRS_FOCUSED' -> 16r4.
			'TUVRS_HOT' -> 16r2.
			'TUVRS_NORMAL' -> 16r1.
			'TUVRS_PRESSED' -> 16r3.
			'TUVS_DISABLED' -> 16r5.
			'TUVS_FOCUSED' -> 16r4.
			'TUVS_HOT' -> 16r2.
			'TUVS_NORMAL' -> 16r1.
			'TUVS_PRESSED' -> 16r3.
			'TVP_BRANCH' -> 16r3.
			'TVP_GLYPH' -> 16r2.
			'TVP_TREEITEM' -> 16r1.
			'UPHZS_DISABLED' -> 16r4.
			'UPHZS_HOT' -> 16r2.
			'UPHZS_NORMAL' -> 16r1.
			'UPHZS_PRESSED' -> 16r3.
			'UPS_DISABLED' -> 16r4.
			'UPS_HOT' -> 16r2.
			'UPS_NORMAL' -> 16r1.
			'UPS_PRESSED' -> 16r3.
			'VA_BOTTOM' -> 16r2.
			'VA_CENTER' -> 16r1.
			'VA_TOP' -> 16r0.
			'VSS_DISABLED' -> 16r4.
			'VSS_HOT' -> 16r2.
			'VSS_NORMAL' -> 16r1.
			'VSS_PUSHED' -> 16r3.
			'VTS_DISABLED' -> 16r4.
			'VTS_HOT' -> 16r2.
			'VTS_NORMAL' -> 16r1.
			'VTS_PUSHED' -> 16r3.
			'WP_CAPTION' -> 16r1.
			'WP_CAPTIONSIZINGTEMPLATE' -> 16r1E.
			'WP_CLOSEBUTTON' -> 16r12.
			'WP_DIALOG' -> 16r1D.
			'WP_FRAMEBOTTOM' -> 16r9.
			'WP_FRAMEBOTTOMSIZINGTEMPLATE' -> 16r24.
			'WP_FRAMELEFT' -> 16r7.
			'WP_FRAMELEFTSIZINGTEMPLATE' -> 16r20.
			'WP_FRAMERIGHT' -> 16r8.
			'WP_FRAMERIGHTSIZINGTEMPLATE' -> 16r22.
			'WP_HELPBUTTON' -> 16r17.
			'WP_HORZSCROLL' -> 16r19.
			'WP_HORZTHUMB' -> 16r1A.
			'WP_MAXBUTTON' -> 16r11.
			'WP_MAXCAPTION' -> 16r5.
			'WP_MDICLOSEBUTTON' -> 16r14.
			'WP_MDIHELPBUTTON' -> 16r18.
			'WP_MDIMINBUTTON' -> 16r10.
			'WP_MDIRESTOREBUTTON' -> 16r16.
			'WP_MDISYSBUTTON' -> 16rE.
			'WP_MINBUTTON' -> 16rF.
			'WP_MINCAPTION' -> 16r3.
			'WP_RESTOREBUTTON' -> 16r15.
			'WP_SMALLCAPTION' -> 16r2.
			'WP_SMALLCAPTIONSIZINGTEMPLATE' -> 16r1F.
			'WP_SMALLCLOSEBUTTON' -> 16r13.
			'WP_SMALLFRAMEBOTTOM' -> 16rC.
			'WP_SMALLFRAMEBOTTOMSIZINGTEMPLATE' -> 16r25.
			'WP_SMALLFRAMELEFT' -> 16rA.
			'WP_SMALLFRAMELEFTSIZINGTEMPLATE' -> 16r21.
			'WP_SMALLFRAMERIGHT' -> 16rB.
			'WP_SMALLFRAMERIGHTSIZINGTEMPLATE' -> 16r23.
			'WP_SMALLMAXCAPTION' -> 16r6.
			'WP_SMALLMINCAPTION' -> 16r4.
			'WP_SYSBUTTON' -> 16rD.
			'WP_VERTSCROLL' -> 16r1B.
			'WP_VERTTHUMB' -> 16r1C
		}!

Core.Object
	subclass: #'UI.Clipboard'
	instanceVariableNames: 'isOpen registeredFormats idToName'
	classVariableNames: 'Current'
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.Command'
	instanceVariableNames: 'commandDescription receiver undoAction redoAction isBenign'
	classVariableNames: 'Current'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.CommandAnnotations'
	instanceVariableNames: 'targetClass commandQueries menuPopulators accelerators acceleratorKeys'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.CommandAnnotationsRegister'
	instanceVariableNames: 'register'
	classVariableNames: 'Current'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.CommandDescription'
	instanceVariableNames: 'command description acceleratorKey flags image'
	classVariableNames: 'CommandDescriptionRegistry CurrentId'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'DefaultMask' -> 16r1.
			'MaximumId' -> 16r7FFF.
			'ModalMask' -> 16r2.
			'NotAbortableMask' -> 16r4.
			'StartingId' -> 16rFA0.
			'TextSubstitutionsMask' -> 16r8
		}!

Core.Object
	subclass: #'UI.CommandPolicy'
	instanceVariableNames: 'source path'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.CommandQuery'
	instanceVariableNames: 'commandDescription receiver source text flags image validationResult'
	classVariableNames: ''
	imports: #(#{OS.MENUITEMINFOW private})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.CreateWindowFunction'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: { 'UseDefaultGeometry' -> (-16r80000000 @ -16r80000000) }!

Core.Object
	subclass: #'UI.DisplayMonitor'
	instanceVariableNames: 'handle info devices dpi metrics defaultWindowExtent lastWindowPosition cascadeOffset workArea deviceName isPrimary rectangle'
	classVariableNames: 'Instances'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'MDT_ANGULAR_DPI' -> 16r1.
			'MDT_DEFAULT' -> 16r0.
			'MDT_EFFECTIVE_DPI' -> 16r0.
			'MDT_RAW_DPI' -> 16r2.
			'MONITOR_DEFAULTTONEAREST' -> 16r2.
			'MONITOR_DEFAULTTONULL' -> 16r0.
			'MONITOR_DEFAULTTOPRIMARY' -> 16r1
		}!

Core.Object
	subclass: #'UI.DpiAwareness'
	instanceVariableNames: 'handle name'
	classVariableNames: 'Awarenesses GdiScaled PerMonitor PerMonitorV1 System Unaware'
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {
			'AwarenessLevelNames' -> #(#invalid #unaware #system #perMonitor).
			'ContextNames' -> #(#unaware #system #perMonitorV1 #perMonitor #gdiScaled)
		}!

Core.Object
	subclass: #'UI.DragDropObject'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.DragDropSession'
	instanceVariableNames: 'dragSource dragPoint suggestedSource dragObjects defaultOperation dropTarget suggestedTarget operationsSupportedByDropTarget operation inDropTargetScrollZone dragImages scrollProcess'
	classVariableNames: 'Current DefaultImages OperationDescriptions'
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.Event'
	instanceVariableNames: 'window'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.FindDetails'
	instanceVariableNames: 'pattern replaceWith searchMode flags action'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'IgnoreCaseMask' -> 16r1.
			'UpMask' -> 16r1000.
			'WholeWordMask' -> 16r2.
			'WrapMask' -> 16r4
		}!

Core.Object
	subclass: #'UI.FramingCalculation'
	instanceVariableNames: 'name framingBlock offsetBlock flags'
	classVariableNames: 'Calculations'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'IndependentMask' -> 16r4. 'ProportionalMask' -> 16r2. 'VerticalMask' -> 16r1 }!

Core.Object
	subclass: #'UI.FramingConstraints'
	instanceVariableNames: 'leftFraming leftOffset rightFraming rightOffset topFraming topOffset bottomFraming bottomOffset'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.FramingContext'
	instanceVariableNames: 'layoutContext view rectangle parentRect'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'Graphics.Grid'
	instanceVariableNames: 'resolution'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.Interactor'
	instanceVariableNames: 'presenter'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.Keyboard'
	instanceVariableNames: 'state virtualKeys modifierKeys keyNames'
	classVariableNames: 'DefaultInstance InvariantInstance'
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.LayoutContext'
	instanceVariableNames: 'container placements'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: { 'DeferRectangles' -> true }!

Core.Object
	subclass: #'UI.LayoutManager'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.LayoutPlacement'
	instanceVariableNames: 'view rectangle show'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.MenuItem'
	instanceVariableNames: 'flags'
	classVariableNames: 'Dividers'
	imports: #(#{OS.MENUITEMINFOW private})
	classInstanceVariableNames: ''
	classConstants: { 'StringSeparator' -> $/. 'StylesMask' -> 16rFFFFF }!

Core.Object
	subclass: #'UI.Presenter'
	instanceVariableNames: 'model view parentPresenter events subPresenters names helpId'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: 'legacyQueryCommandHandlers'
	classConstants: {}!

Core.Object
	subclass: #'UI.STBViewContext'
	instanceVariableNames: 'parent owner'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'UI.View'
	instanceVariableNames: 'handle creationParent creationStyles presenter model backcolor preferredExtent flags contextMenu font events interactor'
	classVariableNames: 'MessageMap NextId ViewClosedError WndClassAtom'
	imports: #(#{OS.Win32Constants} #{OS.Win32Errors})
	classInstanceVariableNames: 'theme'
	classConstants: {
			'CreateCenteredMask' -> 16r40.
			'CreationParentInstVarIndex' -> 16r2.
			'DragSourceMask' -> 16r4.
			'DropTargetMask' -> 16r8.
			'LayoutValidMask' -> 16r1.
			'ManagedMask' -> 16r2.
			'MinimizedMask' -> 16r80.
			'MixedDpiAwarenessMask' -> 16r800.
			'NoInheritMenuMask' -> 16r200.
			'ProxyRestoringMask' -> 16r10.
			'RestoringMask' -> 16r30.
			'StateRestoringMask' -> 16r20.
			'UIValidMask' -> 16r400.
			'UsePreferredExtentMask' -> 16r100
		}!

Core.Object
	subclass: #'UI.ViewState'
	instanceVariableNames: 'view state showCmd dpi dpiAwarenessContext subViewStates'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.CommandDescription
	subclass: #'UI.ClosedCommandDescription'
	instanceVariableNames: 'queryBlock receiver'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.CommandPolicy
	subclass: #'UI.DelegatingCommandPolicy'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.CreateWindowFunction
	subclass: #'UI.CreateWindowApiCall'
	instanceVariableNames: 'rectangle dpi'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

UI.CreateWindowFunction
	subclass: #'UI.CreateWindowDecorator'
	instanceVariableNames: 'decorated'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.CreateWindowApiCall
	subclass: #'UI.CreateWindow'
	instanceVariableNames: 'styles title'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

UI.CreateWindowDecorator
	subclass: #'UI.CreateInDpiAwarenessContext'
	instanceVariableNames: 'dpiAwareness'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.CreateWindowDecorator
	subclass: #'UI.CreateMixedDpiHost'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.DragDropObject
	subclass: #'UI.InternalDragDropObject'
	instanceVariableNames: 'availableFormats'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.DragDropSession
	subclass: #'UI.InternalDragDropSession'
	instanceVariableNames: 'lastImageKey imageList oldCursor dragButton operationDescriptions'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

External.WindowsSystemLibrary
	subclass: #'OS.DwmApiLibrary'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'DWMWA_USE_IMMERSIVE_DARK_MODE' -> 16r14 }!

External.WindowsSystemLibrary
	subclass: #'OS.SHCoreLibrary'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

External.WindowsSystemLibrary
	subclass: #'OS.ThemeLibrary'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.ThemeConstants})
	classInstanceVariableNames: ''
	classConstants: {}!

OS.ThemeLibrary
	subclass: #'OS.MockThemeLibrary'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.Event
	subclass: #'UI.SelectionChangeEvent'
	instanceVariableNames: 'newSelections oldSelections cause'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.Event
	subclass: #'UI.WindowsEvent'
	instanceVariableNames: 'message wParam lParam lResult'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

UI.SelectionChangeEvent
	subclass: #'UI.SelectionChangedEvent'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.SelectionChangeEvent
	subclass: #'UI.SelectionChangingEvent'
	instanceVariableNames: 'permit'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.WindowsEvent
	subclass: #'UI.ColorEvent'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.WindowsEvent
	subclass: #'UI.DpiChangedEvent'
	instanceVariableNames: 'currentDpi'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.WindowsEvent
	subclass: #'UI.KeyEvent'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.WindowsEvent
	subclass: #'UI.PaintEvent'
	instanceVariableNames: 'hdc paintStruct'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.WindowsEvent
	subclass: #'UI.PointEvent'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.WindowsEvent
	subclass: #'UI.PositionEvent'
	instanceVariableNames: 'lpwp flags'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.WindowsEvent
	subclass: #'UI.ScrollEvent'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.WindowsEvent
	subclass: #'UI.SettingsChangeEvent'
	instanceVariableNames: 'area'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.WindowsEvent
	subclass: #'UI.SizeEvent'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.PointEvent
	subclass: #'UI.MouseEvent'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.MouseEvent
	subclass: #'UI.MouseWheelEvent'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Graphics.GraphicsTool
	subclass: #'UI.AcceleratorTable'
	instanceVariableNames: 'commands'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'KeySeparator' -> $+ }!

Graphics.GraphicsTool
	subclass: #'UI.Menu'
	instanceVariableNames: 'items text name flags image metrics id lastQuery _reserved2'
	classVariableNames: 'DrawStateCallbackDescriptor'
	imports: #(#{OS.MENUITEMINFOW private} #{OS.MENUINFO private})
	classInstanceVariableNames: ''
	classConstants: {}!

Graphics.SystemFont
	subclass: #'Graphics.UxThemeFont'
	instanceVariableNames: 'themedObject'
	classVariableNames: ''
	imports: #(#{OS.ThemeConstants})
	classInstanceVariableNames: ''
	classConstants: {
			'FontNames'
				-> (IdentityDictionary withAll: {
								16r321 -> #caption.
								16r322 -> #smallCaption.
								16r323 -> #menu.
								16r324 -> #status.
								16r325 -> #messageBox.
								16r326 -> #iconTitle
							})
		}!

UI.Menu
	subclass: #'UI.MenuBar'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.InputState
	subclass: #'UI.GuiInputState'
	instanceVariableNames: ''
	classVariableNames: 'EnumHandlesDescriptor'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.Interactor
	subclass: #'UI.CapturingInteractor'
	instanceVariableNames: 'oldInteractor stateFlags'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'HotMask' -> 16r1.
			'LeftDownMask' -> 16r4.
			'MiddleDownMask' -> 16r8.
			'RightDownMask' -> 16r10
		}!

UI.CapturingInteractor
	subclass: #'UI.MouseTracker'
	instanceVariableNames: 'dragButton target startPoint startPointLocal origin hysteresis _unused10 trackPosition constrain'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'HorizontalOnly' -> 16r1. 'TrackingMask' -> 16r400. 'VerticalOnly' -> 16r2 }!

UI.MouseTracker
	subclass: #'UI.DraggableViewInteractor'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.LayoutManager
	subclass: #'UI.BorderLayout'
	instanceVariableNames: 'horizontalGap verticalGap north south east west center'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.LayoutManager
	subclass: #'UI.FlowLayout'
	instanceVariableNames: 'horizontalGap verticalGap flags'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'AlignBottom' -> 16r8.
			'AlignHCenter' -> 16r1.
			'AlignLeft' -> 16r0.
			'AlignmentMap'
				-> (IdentityDictionary withAll: {
								#bottomCenter -> 16r9.
								#bottomLeft -> 16r8.
								#bottomRight -> 16rA.
								#center -> 16r5.
								#leftCenter -> 16r4.
								#rightCenter -> 16r6.
								#topCenter -> 16r1.
								#topLeft -> 16r0.
								#topRight -> 16r2
							}).
			'AlignmentMask' -> 16rF.
			'AlignRight' -> 16r2.
			'AlignTop' -> 16r0.
			'AlignVCenter' -> 16r4
		}!

UI.LayoutManager
	subclass: #'UI.FramingLayout'
	instanceVariableNames: 'framings'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.LayoutManager
	subclass: #'UI.GridLayout'
	instanceVariableNames: 'rows columns horizontalGap verticalGap'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.LayoutManager
	subclass: #'UI.LinearLayout'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.LinearLayout
	subclass: #'UI.ProportionalLayout'
	instanceVariableNames: 'proportions isVertical'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.MenuItem
	subclass: #'UI.CommandMenuItem'
	instanceVariableNames: 'commandDescription lastQuery _reserved'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'IsDefaultMask' -> 16r100000 }!

UI.MenuItem
	subclass: #'UI.DividerMenuItem'
	instanceVariableNames: ''
	classVariableNames: 'BarBreak Break Separator'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'DividerLookup'
				-> (IdentityDictionary withAll: { 16r20 -> #barBreak. 16r40 -> #break. 16r800 -> #separator })
		}!

UI.Presenter
	subclass: #'UI.SelectableItemsPresenter'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.Presenter
	subclass: #'UI.Shell'
	instanceVariableNames: 'caption commandHistory'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.Presenter
	subclass: #'UI.ValuePresenter'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.SessionManager
	subclass: #'UI.GUISessionManager'
	instanceVariableNames: 'savedWindows'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { 'NoSplashMask' -> 16r2. 'UnattendedMask' -> 16r4 }!

UI.GUISessionManager
	subclass: #'UI.RuntimeSessionManager'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.RuntimeSessionManager
	subclass: #'UI.DefaultShellSessionManager'
	instanceVariableNames: 'mainShellClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

External.Structure
	subclass: #'OS.ACCEL'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_ACCEL_Size' -> 16r6.
			'_OffsetOf_cmd' -> 16r4.
			'_OffsetOf_fVirt' -> 16r0.
			'_OffsetOf_key' -> 16r2
		}!

External.Structure
	subclass: #'OS.MARGINS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MARGINS_Size' -> 16r10.
			'_OffsetOf_cxLeftWidth' -> 16r0.
			'_OffsetOf_cxRightWidth' -> 16r4.
			'_OffsetOf_cyBottomHeight' -> 16rC.
			'_OffsetOf_cyTopHeight' -> 16r8
		}!

External.Structure
	subclass: #'OS.MINMAXINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MINMAXINFO_Size' -> 16r28.
			'_OffsetOf_ptMaxPosition' -> 16r10.
			'_OffsetOf_ptMaxSize' -> 16r8.
			'_OffsetOf_ptMaxTrackSize' -> 16r20.
			'_OffsetOf_ptMinTrackSize' -> 16r18.
			'_OffsetOf_ptReserved' -> 16r0
		}!

External.Structure
	subclass: #'OS.NCCALCSIZE_PARAMS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_NCCALCSIZE_PARAMS_Size' -> 16r34.
			'_OffsetOf_lppos' -> 16r30.
			'_OffsetOf_rgrc' -> 16r0
		}!

External.Structure
	subclass: #'OS.NMHDR'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.CommCtrlConstants})
	classInstanceVariableNames: ''
	classConstants: {
			'_NMHDR_Size' -> 16rC.
			'_OffsetOf_code' -> 16r8.
			'_OffsetOf_hwndFrom' -> 16r0.
			'_OffsetOf_idFrom' -> 16r4
		}!

External.Structure
	subclass: #'OS.OwnerDrawStruct'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_CtlID' -> 16r4.
			'_OffsetOf_CtlType' -> 16r0.
			'_OffsetOf_itemID' -> 16r8
		}!

External.Structure
	subclass: #'OS.PAINTSTRUCT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_fErase' -> 16r4.
			'_OffsetOf_fIncUpdate' -> 16r1C.
			'_OffsetOf_fRestore' -> 16r18.
			'_OffsetOf_hdc' -> 16r0.
			'_OffsetOf_rcPaint' -> 16r8.
			'_OffsetOf_rgbReserved' -> 16r20.
			'_PAINTSTRUCT_Size' -> 16r40
		}!

External.Structure
	subclass: #'OS.WINDOWPOS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_cx' -> 16r10.
			'_OffsetOf_cy' -> 16r14.
			'_OffsetOf_flags' -> 16r18.
			'_OffsetOf_hwnd' -> 16r0.
			'_OffsetOf_hwndInsertAfter' -> 16r4.
			'_OffsetOf_x' -> 16r8.
			'_OffsetOf_y' -> 16rC.
			'_WINDOWPOS_Size' -> 16r1C
		}!

External.Structure
	subclass: #'OS.WNDCLASS'
	instanceVariableNames: 'menuName className'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_cbClsExtra' -> 16r8.
			'_OffsetOf_cbWndExtra' -> 16rC.
			'_OffsetOf_hbrBackground' -> 16r1C.
			'_OffsetOf_hCursor' -> 16r18.
			'_OffsetOf_hIcon' -> 16r14.
			'_OffsetOf_hInstance' -> 16r10.
			'_OffsetOf_lpfnWndProc' -> 16r4.
			'_OffsetOf_lpszClassName' -> 16r24.
			'_OffsetOf_lpszMenuName' -> 16r20.
			'_OffsetOf_style' -> 16r0.
			'_WNDCLASS_Size' -> 16r28
		}!

OS.NMHDR
	subclass: #'OS.NMTTDISPINFOW'
	instanceVariableNames: 'text'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_NMTTDISPINFOW_Size' -> 16rBC.
			'_OffsetOf_hinst' -> 16rB0.
			'_OffsetOf_lParam' -> 16rB8.
			'_OffsetOf_lpszText' -> 16rC.
			'_OffsetOf_szText' -> 16r10.
			'_OffsetOf_uFlags' -> 16rB4
		}!

OS.OwnerDrawStruct
	subclass: #'OS.DRAWITEMSTRUCT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_DRAWITEMSTRUCT_Size' -> 16r30.
			'_OffsetOf_hDC' -> 16r18.
			'_OffsetOf_hwndItem' -> 16r14.
			'_OffsetOf_itemAction' -> 16rC.
			'_OffsetOf_itemData' -> 16r2C.
			'_OffsetOf_itemState' -> 16r10.
			'_OffsetOf_rcItem' -> 16r1C
		}!

OS.OwnerDrawStruct
	subclass: #'OS.MEASUREITEMSTRUCT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MEASUREITEMSTRUCT_Size' -> 16r18.
			'_OffsetOf_itemData' -> 16r14.
			'_OffsetOf_itemHeight' -> 16r10.
			'_OffsetOf_itemWidth' -> 16rC
		}!

OS.SizedStructure
	subclass: #'OS.BP_ANIMATIONPARAMS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_BP_ANIMATIONPARAMS_Size' -> 16r10.
			'_OffsetOf_dwDuration' -> 16rC.
			'_OffsetOf_dwFlags' -> 16r4.
			'_OffsetOf_style' -> 16r8
		}!

OS.SizedStructure
	subclass: #'OS.BP_PAINTPARAMS'
	instanceVariableNames: 'blendFunction'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_BP_PAINTPARAMS_Size' -> 16r10.
			'_OffsetOf_dwFlags' -> 16r4.
			'_OffsetOf_pBlendFunction' -> 16rC.
			'_OffsetOf_prcExclude' -> 16r8
		}!

OS.SizedStructure
	subclass: #'OS.DISPLAY_DEVICEW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_DISPLAY_DEVICEW_Size' -> 16r348.
			'_OffsetOf_DeviceID' -> 16r148.
			'_OffsetOf_DeviceKey' -> 16r248.
			'_OffsetOf_DeviceName' -> 16r4.
			'_OffsetOf_DeviceString' -> 16r44.
			'_OffsetOf_StateFlags' -> 16r144.
			'DISPLAY_DEVICE_ATTACHED_TO_DESKTOP' -> 16r1.
			'DISPLAY_DEVICE_MIRRORING_DRIVER' -> 16r8.
			'DISPLAY_DEVICE_MULTI_DRIVER' -> 16r2.
			'DISPLAY_DEVICE_PRIMARY_DEVICE' -> 16r4.
			'DISPLAY_DEVICE_VGA_COMPATIBLE' -> 16r10
		}!

OS.SizedStructure
	subclass: #'OS.DTBGOPTS'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_DTBGOPTS_Size' -> 16r18.
			'_OffsetOf_dwFlags' -> 16r4.
			'_OffsetOf_rcClip' -> 16r8
		}!

OS.SizedStructure
	subclass: #'OS.FLASHWINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_FLASHWINFO_Size' -> 16r14.
			'_OffsetOf_dwFlags' -> 16r8.
			'_OffsetOf_dwTimeout' -> 16r10.
			'_OffsetOf_hwnd' -> 16r4.
			'_OffsetOf_uCount' -> 16rC
		}!

OS.SizedStructure
	subclass: #'OS.LASTINPUTINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_LASTINPUTINFO_Size' -> 16r8. '_OffsetOf_dwTime' -> 16r4 }!

OS.SizedStructure
	subclass: #'OS.MENUINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MENUINFO_Size' -> 16r1C.
			'_OffsetOf_cyMax' -> 16rC.
			'_OffsetOf_dwContextHelpID' -> 16r14.
			'_OffsetOf_dwMenuData' -> 16r18.
			'_OffsetOf_dwStyle' -> 16r8.
			'_OffsetOf_fMask' -> 16r4.
			'_OffsetOf_hbrBack' -> 16r10.
			'MIM_APPLYTOSUBMENUS' -> 16r80000000.
			'MIM_BACKGROUND' -> 16r2.
			'MIM_HELPID' -> 16r4.
			'MIM_MAXHEIGHT' -> 16r1.
			'MIM_MENUDATA' -> 16r8.
			'MIM_STYLE' -> 16r10.
			'MNS_AUTODISMISS' -> 16r10000000.
			'MNS_CHECKORBMP' -> 16r4000000.
			'MNS_DRAGDROP' -> 16r20000000.
			'MNS_MODELESS' -> 16r40000000.
			'MNS_NOCHECK' -> 16r80000000.
			'MNS_NOTIFYBYPOS' -> 16r8000000
		}!

OS.SizedStructure
	subclass: #'OS.MENUITEMINFOW'
	instanceVariableNames: 'text bitmap'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MENUITEMINFOW_Size' -> 16r30.
			'_OffsetOf_cch' -> 16r28.
			'_OffsetOf_dwItemData' -> 16r20.
			'_OffsetOf_dwTypeData' -> 16r24.
			'_OffsetOf_fMask' -> 16r4.
			'_OffsetOf_fState' -> 16rC.
			'_OffsetOf_fType' -> 16r8.
			'_OffsetOf_hbmpChecked' -> 16r18.
			'_OffsetOf_hbmpItem' -> 16r2C.
			'_OffsetOf_hbmpUnchecked' -> 16r1C.
			'_OffsetOf_hSubMenu' -> 16r14.
			'_OffsetOf_wID' -> 16r10.
			'MF_APPEND' -> 16r100.
			'MF_BYCOMMAND' -> 16r0.
			'MF_BYPOSITION' -> 16r400.
			'MF_CHANGE' -> 16r80.
			'MF_DELETE' -> 16r200.
			'MF_HELP' -> 16r4000.
			'MF_INSERT' -> 16r0.
			'MF_MOUSESELECT' -> 16r8000.
			'MF_POPUP' -> 16r10.
			'MF_REMOVE' -> 16r1000.
			'MF_SYSMENU' -> 16r2000.
			'MF_USECHECKBITMAPS' -> 16r200.
			'MFS_CHECKED' -> 16r8.
			'MFS_DEFAULT' -> 16r1000.
			'MFS_DISABLED' -> 16r3.
			'MFS_ENABLED' -> 16r0.
			'MFS_HILITE' -> 16r80.
			'MFS_UNCHECKED' -> 16r0.
			'MFS_UNHILITE' -> 16r0.
			'MFT_BITMAP' -> 16r4.
			'MFT_MENUBARBREAK' -> 16r20.
			'MFT_MENUBREAK' -> 16r40.
			'MFT_OWNERDRAW' -> 16r100.
			'MFT_RADIOCHECK' -> 16r200.
			'MFT_RIGHTJUSTIFY' -> 16r4000.
			'MFT_RIGHTORDER' -> 16r2000.
			'MFT_SEPARATOR' -> 16r800.
			'MFT_STRING' -> 16r0.
			'MIIM_BITMAP' -> 16r80.
			'MIIM_CHECKMARKS' -> 16r8.
			'MIIM_DATA' -> 16r20.
			'MIIM_FTYPE' -> 16r100.
			'MIIM_ID' -> 16r2.
			'MIIM_STATE' -> 16r1.
			'MIIM_STRING' -> 16r40.
			'MIIM_SUBMENU' -> 16r4.
			'MIIM_TYPE' -> 16r10
		}!

OS.SizedStructure
	subclass: #'OS.MONITORINFOEXW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MONITORINFOEXW_Size' -> 16r68.
			'_OffsetOf_dwFlags' -> 16r24.
			'_OffsetOf_rcMonitor' -> 16r4.
			'_OffsetOf_rcWork' -> 16r14.
			'_OffsetOf_szDevice' -> 16r28.
			'MONITORINFOF_PRIMARY' -> 16r1
		}!

OS.SizedStructure
	subclass: #'OS.NOTIFYICONDATAW'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_NOTIFYICONDATAW_Size' -> 16r98.
			'_OffsetOf_hIcon' -> 16r14.
			'_OffsetOf_hWnd' -> 16r4.
			'_OffsetOf_szTip' -> 16r18.
			'_OffsetOf_uCallbackMessage' -> 16r10.
			'_OffsetOf_uFlags' -> 16rC.
			'_OffsetOf_uID' -> 16r8
		}!

OS.SizedStructure
	subclass: #'OS.RGNDATA'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_iType' -> 16r4.
			'_OffsetOf_nCount' -> 16r8.
			'_OffsetOf_nRgnSize' -> 16rC.
			'_OffsetOf_rcBound' -> 16r10.
			'_RGNDATA_Size' -> 16r20
		}!

OS.SizedStructure
	subclass: #'OS.SCROLLINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_fMask' -> 16r4.
			'_OffsetOf_nMax' -> 16rC.
			'_OffsetOf_nMin' -> 16r8.
			'_OffsetOf_nPage' -> 16r10.
			'_OffsetOf_nPos' -> 16r14.
			'_OffsetOf_nTrackPos' -> 16r18.
			'_SCROLLINFO_Size' -> 16r1C
		}!

OS.SizedStructure
	subclass: #'OS.TRACKMOUSEEVENT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_dwFlags' -> 16r4.
			'_OffsetOf_dwHoverTime' -> 16rC.
			'_OffsetOf_hwndTrack' -> 16r8.
			'_TRACKMOUSEEVENT_Size' -> 16r10
		}!

OS.SizedStructure
	subclass: #'OS.WINDOWPLACEMENT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_flags' -> 16r4.
			'_OffsetOf_ptMaxPosition' -> 16r14.
			'_OffsetOf_ptMinPosition' -> 16rC.
			'_OffsetOf_rcNormalPosition' -> 16r1C.
			'_OffsetOf_showCmd' -> 16r8.
			'_WINDOWPLACEMENT_Size' -> 16r2C
		}!

Kernel.STxProxy
	subclass: #'UI.STBViewProxy'
	instanceVariableNames: 'viewClass instVars state showCmd subViews resolution events version'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: { 'EventsIndex' -> 16rB. 'FlagsIndex' -> 16r8. 'HandleIndex' -> 16r1 }!

UI.View
	subclass: #'UI.AbstractDelegatingView'
	instanceVariableNames: 'resourceIdentifier referee'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.View
	subclass: #'UI.ContainerView'
	instanceVariableNames: 'layoutManager names insets'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.View
	subclass: #'UI.DesktopView'
	instanceVariableNames: '_dvReserved0 _dvReserved1 _dvReserved2 _dvReserved3'
	classVariableNames: 'Current'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.View
	subclass: #'UI.DoubleBufferedView'
	instanceVariableNames: 'backSurface requiresRender'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.AbstractDelegatingView
	subclass: #'UI.AbstractNonReferenceDelegatingView'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.AbstractDelegatingView
	subclass: #'UI.ReferenceView'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

UI.ContainerView
	subclass: #'UI.ShellView'
	instanceVariableNames: 'menuBar acceleratorTable combinedAcceleratorTable lastFocus defaultButton largeIcon smallIcon maxExtent minExtent actualIcons svFlags dpi'
	classVariableNames: 'DialogMessageMap'
	imports: #(#{OS.ButtonConstants})
	classInstanceVariableNames: ''
	classConstants: { 'DefaultButtonIndex' -> 16r14. 'TransientMask' -> 16r1 }!

UI.ShellView
	subclass: #'UI.AbstractSplash'
	instanceVariableNames: 'splashDelay bitmap overlayWith'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

UI.AbstractSplash
	subclass: #'UI.Splash'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Error class methodsFor!

icon
	"Answer the default icon for the receiver and its instances."
	
	^Graphics.Icon error! !

!Core.Error class categoriesForMethods!
icon!constants!public! !
!

!Core.MessageSend methodsFor!

queryCommand: aCommandQuery
	"Private - Enters status and target details about the receiver's own command into the <CommandQuery> argument.
	Implementation Note: As the receiver represents a fully closed command, we can	skip all further routing (the CommandDescription itself is queried first by default)."

	aCommandQuery
		beEnabled;
		receiver: self receiver.
	^true! !

!Core.MessageSend categoriesForMethods!
queryCommand:!commands!private! !
!

!Core.Notification class methodsFor!

icon
	"Answer the default icon for the receiver and its instances."

	^Graphics.Icon information! !

!Core.Notification class categoriesForMethods!
icon!constants!public! !
!

!Core.Object methodsFor!

icon
	"Answer an Icon representing the receiver."

	^self class icon!

iconImageIndex
	^self icon imageIndex! !

!Core.Object categoriesForMethods!
icon!constants!public! !
iconImageIndex!accessing!public! !
!

!Core.Object class methodsFor!

icon
	"Answers an Icon that can be used to represent this class. Here we use a constant expression 
	evaluated at compile time in order to statically bind 'self' at this position in the class hierarchy 
	(i.e. to Object). This ensures that subclasses which do not override this method still answer 
	'Object defaultIcon' rather than 'aSubclass defaultIcon'. Classes which provide their own default icon 
	can override this method with a similar implementation perhaps with #defaultIconFrom: if the icon comes
	from an ExternalResourceLibrary other than the system default."

	^##(self defaultIcon)! !

!Core.Object class categoriesForMethods!
icon!constants!public! !
!

!Core.String methodsFor!

copyToClipboard
	"Copy the receiver to the clipboard."

	UI.Clipboard current setText: self!

setTextInto: aView
	"Private - Sent as part of a double dispatch from View objects to set their text from
	the receiver. The receiver is assumed to be plain text, so sends the #plainText
	message back to aView."

	aView plainText: self! !

!Core.String categoriesForMethods!
copyToClipboard!copying!public! !
setTextInto:!double dispatch!private! !
!

!Core.Symbol methodsFor!

copyToClipboard
	"Copy the #String format of the receiver to the clipboard."

	UI.Clipboard current setRegisteredFormat: #String data: self! !

!Core.Symbol categoriesForMethods!
copyToClipboard!copying!public! !
!

!Core.UndefinedObject methodsFor!

asResourceId
	^self! !

!Core.UndefinedObject categoriesForMethods!
asResourceId!converting!public! !
!

!Core.Warning class methodsFor!

icon
	"Answer the default icon for the receiver and its instances."

	^Graphics.Icon warning! !

!Core.Warning class categoriesForMethods!
icon!constants!public! !
!

!Graphics.Bitmap methodsFor!

copyToClipboard
	"Copy the receiver to the clipboard."

	UI.Clipboard current setBitmap: self! !

!Graphics.Bitmap categoriesForMethods!
copyToClipboard!copying!public! !
!

!OS.CommCtrlLibrary class methodsFor!

sharedVariableName
	^#{ComCtl32}! !

!OS.CommCtrlLibrary class categoriesForMethods!
sharedVariableName!constants!private! !
!

!OS.KernelLibrary methodsFor!

getConsoleWindow
	"Invoke the GetConsoleWindow() function of the module wrapped by the receiver.
	Helpstring: Retrieves the window handle used by the console associated with the calling process.

		wireHWND __stdcall GetConsoleWindow();"

	<stdcall: handle GetConsoleWindow>
	^self invalidCall: _failureCode! !

!OS.KernelLibrary categoriesForMethods!
getConsoleWindow!**auto generated**!public!win32 functions-console! !
!

!OS.SystemMetrics methodsFor!

menuBarColor
	^UxTheme isAppThemed ifTrue: [Graphics.Color menuBar] ifFalse: [Graphics.Color menu]! !

!OS.SystemMetrics categoriesForMethods!
menuBarColor!constants!public! !
!

!OS.UserLibrary methodsFor!

adjustWindowRectExForDpi: rect dwStyle: styleFlags bMenu: menuPresent dwExStyle: exStyleFlags dpi: dpi
	"Calculates the required size of the rectangle of a window with extended style based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. 

	BOOL AdjustWindowRectExForDpi(
		LPRECT lpRect,		// pointer to client-rectangle structure
		DWORD dwStyle,		// window styles
		BOOL bMenu,		// menu-present flag
		DWORD dwExStyle,	// extended style
		UINT dpi
		);"

	<stdcall: bool AdjustWindowRectExForDpi RECTL* uint32 bool uint32 uint32>
	^self invalidCall: _failureCode!

animateWindow: hwnd dwTime: dwTime dwFlags: dwFlags
	"Invoke the AnimateWindow() function of the module wrapped by the receiver.
	Helpstring: Produces special effects when showing or hiding windows. There are four types of animation: roll, slide, collapse or expand, and alpha-blended fade.

		BOOL __stdcall AnimateWindow(
			[in]HWND HWND,
			[in]DWORD dwTime,
			[in]DWORD dwFlags);"

	<stdcall: bool AnimateWindow handle uint32 uint32>
	^self invalidCall: _failureCode!

areDpiAwarenessContextsEqual: dpiContextA dpiContextB: dpiContextB
	"Invoke the AreDpiAwarenessContextsEqual() function of the module wrapped by the receiver.
	Helpstring: Determines whether two DPI_AWARENESS_CONTEXT values are equivalent.

		BOOL __stdcall AreDpiAwarenessContextsEqual(
			INT_PTR dpiContextA,
			INT_PTR dpiContextB);"

	<stdcall: bool AreDpiAwarenessContextsEqual intptr intptr>
	^self invalidCall: _failureCode!

attachThreadInput: idAttach idAttachTo: idAttachTo fAttach: aBoolean
	"The AttachThreadInput function attaches the input processing mechanism of one thread to that of another thread. 

	BOOL AttachThreadInput(
		DWORD idAttach <>,    // thread to attach
		DWORD idAttachTo <>,  // thread to attach to
		BOOL fAttach <>       // attach or detach
		);"

	<stdcall: bool AttachThreadInput uint32 uint32 bool>
	^self invalidCall: _failureCode!

beginDeferWindowPos: nNumWindows
	"Invoke the BeginDeferWindowPos() function of the module wrapped by the receiver.
	Helpstring: Allocates memory for a multiple-window-position structure and returns the handle to the structure

		HDWP __stdcall BeginDeferWindowPos(
			int nNumWindows);"

	<stdcall: handle BeginDeferWindowPos int32>
	^self invalidCall: _failureCode!

beginPaint: hWindow lpPaint: aPAINTSTRUCT
	"Prepare the specified window for painting, filling aPAINTSTRUCT
	structure with information about the painting required. 
		HDC BeginPaint(
  			HWND hwnd,			// handle to window
			LPPAINTSTRUCT lpPaint	// pointer to structure for paint information
		);"

	<stdcall: handle BeginPaint handle PAINTSTRUCT*>
	^self invalidCall: _failureCode!

bringWindowToTop: hWnd
	"Bring the specified window to the top of the Z order, activating it if it is a
	frame window, or its parent frame if it is not. 
		BOOL BringWindowToTop(
			HWND hWnd 	// handle to window
		);"

	<stdcall: bool BringWindowToTop handle>
	^self invalidCall: _failureCode!

callWindowProc: lpPrevWndFunc hWnd: hWnd msg: msg wParam: wParam lParam: lParam
	"Pass a message to the specified Unicode window procedure. 
		LRESULT CallWindowProc(
  			WNDPROC lpPrevWndFunc,	// pointer to previous procedure
			HWND hWnd,			// handle to window
			UINT Msg,				// message
			WPARAM wParam,			// first message parameter
			LPARAM lParam 			// second message parameter
		);
	N.B. As we don't want to pass the address of a Smalltalk object containing
	the WNDPROC's address to the function, we specify the first parameter
	as being a DWORD as this allows us to pass a wider range of types."

	<stdcall: uintptr CallWindowProcW uint32 handle uint32 uintptr uintptr>
	^self invalidCall: _failureCode!

childWindowFromPointEx: hwnd pt: aPOINTL uFlags: flags
	"Answers the handle of the window that contains the specified point. 
		HWND ChildWindowFromPointEx(
			HWND hwndParent, 	// handle to parent window
			POINT pt, 	// structure with point coordinates
			UINT uFlags	// skipping flags
		);"

	<stdcall: handle ChildWindowFromPointEx handle POINTL uint32>
	^self invalidCall: _failureCode!

clientToScreen: hwnd lpPoint: lpPoint
	"Invoke the ClientToScreen() function of the module wrapped by the receiver.
	Helpstring: Converts client coordinates of specified point to screen coordinates

		BOOL __stdcall ClientToScreen(
			wireHWND hwnd,
			POINTL* lpPoint);"

	<stdcall: bool ClientToScreen handle POINTL*>
	^self invalidCall: _failureCode!

closeClipboard
	"Close the clipboard. Answers 0 if fails.

		BOOL CloseClipboard(VOID)"

	<stdcall: bool CloseClipboard>
	^self invalidCall: _failureCode!

countClipboardFormats
	"Answer the number of registered clipboard formats.
		int CountClipboardFormats(VOID)"

	<stdcall: int32 CountClipboardFormats>
	^self invalidCall: _failureCode!

createAcceleratorTable: pTable cEntries: tableSize
	"Create an accelerator table. 
		HACCEL CreateAcceleratorTable(
  			LPACCEL lpaccl,	// pointer to structure array with accelerator data
			int cEntries 		// number of structures in the array
		);"

	<stdcall: handle CreateAcceleratorTableW ACCEL* int32>
	^self invalidCall: _failureCode!

createMenu
	"Create an empty menu.
		HMENU CreateMenu(VOID)"

	<stdcall: handle CreateMenu>
	^self invalidCall: _failureCode!

createPopupMenu
	"Create an empty popup menu.
		HMENU CreateMenu(VOID)"

	<stdcall: handle CreatePopupMenu>
	^self invalidCall: _failureCode!

createWindowEx: exstyle lpClassName: classname lpWindowName: windowname dwStyle: style x: x y: y nWidth: width nHeight: height hWndParent: parent hMenu: menu hInstance: instance lpParam: lpParam
	"Creates an overlapped, pop-up, or child window with the specified the parent or owner (if any), class, 
	title, menu, style (and extended style), position and extent. Answer the handle of the
	new window, or nil if the create fails.
	N.B. In order to correctly subclass controls so that Dolphin receives creation messages
	for those controls, View>>hookWindowCreate should be called before this function.
		HWND CreateWindowEx(
			DWORD dwExStyle,		// extended window style
			LPCWSTR lpClassName,	// pointer to registered class name
			LPCWSTR lpWindowName,	// pointer to window name
			DWORD dwStyle,		// window style
			int x,				// horizontal position of window
			int y,				// vertical position of window
			int nWidth,			// window width
			int nHeight,			// window height
			HWND hWndParent,		// handle to parent or owner window
			HMENU hMenu,			// handle to menu, or child-window identifier
			HINSTANCE hInstance,	// handle to application instance
			LPVOID lpParam 		// pointer to window-creation data
		);"

	<stdcall: handle CreateWindowExW uint32 lpvoid lpwstr uint32 int32 int32 int32 int32 handle handle handle lpvoid>
	^self invalidCall: _failureCode!

deferWindowPos: hWinPosInfo hwnd: hwnd hwndInsertAfter: hwndInsertAfter x: x y: y cx: cx cy: cy uFlags: uFlags
	"Invoke the DeferWindowPos() function of the module wrapped by the receiver.
	Helpstring: Updates the specified multiple-window-position structure for the specified window

		long __stdcall DeferWindowPos(
			HDWP hWinPosInfo,
			HWND hwnd,
			HWND hwndInsertAfter,
			int x,
			int y,
			int cx,
			int cy,
			UINT uFlags);"

	<stdcall: handle DeferWindowPos handle handle handle int32 int32 int32 int32 uint32>
	^self invalidCall: _failureCode!

deleteMenu: hMenu uPosition: uPosition uFlags: uFlags
	"Deletes an item from the Menu with handle, hMenu.

		BOOL DeleteMenu(
			HMENU hMenu,
			UINT uPosition,
			UINT uFlags);"

	<stdcall: bool DeleteMenu handle uint32 uint32>
	^self invalidCall: _failureCode!

destroyAcceleratorTable: hAcceleratorTable
	"Destroys an accelerator table.
		BOOL DestroyAcceleratorTable(
	  	HACCEL hAccel 	// handle to accelerator table
		);"

	<stdcall: bool DestroyAcceleratorTable handle>
	^self invalidCall: _failureCode!

destroyMenu: hMenu
	"Destroy the specified menu.
		BOOL DestroyMenu(
			HMENU hMenu	// handle to menu to destroy
			);"

	<stdcall: bool DestroyMenu handle>
	^self invalidCall: _failureCode!

disableProcessWindowsGhosting
	<stdcall: void DisableProcessWindowsGhosting>
	^self invalidCall: _failureCode!

drawFocusRect: hdc lprc: aRECT
	"Draw a rectangle in the style used to indicate focus.
		BOOL DrawFocusRect(
  			HDC hDC,			// handle to device context
			CONST RECT *lprc	// pointer to structure for rectangle
		);"

	<stdcall: bool DrawFocusRect handle RECTL*>
	^self invalidCall: _failureCode!

drawFrameControl: hdc lprc: lprc uType: uType uState: uState
	"Invoke the DrawFrameControl() function of the module wrapped by the receiver.
	Helpstring: Draws a control frame of a specified type and style

		BOOL __stdcall DrawFrameControl(
			[in]HDC HDC,
			[in, out]RECTL* lprc,
			[in]UINT uType,
			[in]UINT uState);"

	<stdcall: bool DrawFrameControl handle RECTL* uint32 uint32>
	^self invalidCall: _failureCode!

drawMenuBar: aWindowHandle
	"Draw the menu bar of the specified window (e.g. when the bars contents
	are altered).
		BOOL DrawMenuBar(
			HWND hWnd	// handle to window with menu bar to redraw  
		);"

	<stdcall: bool DrawMenuBar handle>
	^self invalidCall: _failureCode!

emptyClipboard
	"Empty the (open) clipboard. Answers 0 if fails.

		BOOL EmptyClipboard(VOID)"

	<stdcall: bool EmptyClipboard>
	^self invalidCall: _failureCode!

enableNonClientDpiScaling: hwnd
	"Invoke the EnableNonClientDpiScaling() function of the module wrapped by the receiver.
	Helpstring: In high-DPI displays, enables automatic display scaling of the non-client area portions of the specified top-level window.

		BOOL __stdcall EnableNonClientDpiScaling(
			wireHWND hwnd);"

	<stdcall: bool EnableNonClientDpiScaling handle>
	^self invalidCall: _failureCode!

enableNonClientDpiScalingIfNecessary: anExternalHandle
	"Private - Enable system scaling of non-client window decoration."

	"The [documentation](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablenonclientdpiscaling) states that it is not necessary to call EnableNonClientScaling for apps running at per monitor V2 awareness level, but as far as I can determine it makes no difference in _any_ mode on Windows 11 as the NC areas are always scaled, regardless of mode and whether this is called or not. It also doesn't have any effect on the bug where at certain DPIs in per-monitor mode menu bars leave small black areas around some edges (i.e. don't paint the entire background)."

	self isProcessSystemDpiAware ifTrue: [self enableNonClientDpiScaling: anExternalHandle]!

enableScrollBar: hwnd wSBFlags: wSBFlags wArrows: wArrows
	"Invoke the EnableScrollBar() function of the module wrapped by the receiver.
	Helpstring: Enables or disables scroll bar arrows (see SB_ and ESB_ constants)

		BOOL __stdcall EnableScrollBar(
			[in]wireHWND hwnd,
			[in]unsigned int wSBFlags,
			[in]unsigned int wArrows);"

	<stdcall: bool EnableScrollBar handle uint32 uint32>
	^self invalidCall: _failureCode!

endDeferWindowPos: hWinPosInfo
	"Invoke the EndDeferWindowPos() function of the module wrapped by the receiver.
	Helpstring: Updates the position and size of one or more windows in a single screen-refreshing cycle

		BOOL __stdcall EndDeferWindowPos(
			HDWP hWinPosInfo);"

	<stdcall: bool EndDeferWindowPos handle>
	^self invalidCall: _failureCode!

endPaint: hWindow lpPaint: aPAINTSTRUCT
	"Mark the end of painting in the specified window (other half of BeginPaint() sandwich).
		BOOL EndPaint(
			HWND hWnd,				// handle to window
			CONST PAINTSTRUCT *lpPaint // pointer to structure for paint data  
		);"

	<stdcall: bool EndPaint handle PAINTSTRUCT*>
	^self invalidCall: _failureCode!

enumChildWindows: hwndParent lpEnumFunction: lpEnumFunction lParam: lParam
	"Invoke the EnumChildWindows() function of the module wrapped by the receiver.
	Helpstring: Enumerates the child windows that belong to the specified parent window by passing the handle of each child window, in turn, to an application-defined callback function

		BOOL __stdcall EnumChildWindows(
			wireHWND hwndParent,
			LPVOID lpEnumFunction,
			LONG_PTR lParam);"

	<stdcall: bool EnumChildWindows handle void* intptr>
	^self invalidCall: _failureCode!

enumClipboardFormats: knownFormat
	"Enumerate the data formats that are currently available on the clipboard, beginning
	with that specified (set to 0 to start).  Answers 0 at end (in which case GetLastError()
	will return NO_ERROR), and also if an error occurs.

		UINT EnumClipboardFormats(
			UINT format 	// specifies a known available clipboard format 
		);"

	<stdcall: uint32 EnumClipboardFormats uint32>
	^self invalidCall: _failureCode!

enumDisplayDevices: lpDevice iDevNum: iDevNum lpDisplayDevice: lpDisplayDevice dwFlags: dwFlags
	"Invoke the EnumDisplayDevices() function of the module wrapped by the receiver.
	Helpstring: Queries information about the display devices in the current session.

		BOOL __stdcall EnumDisplayDevices(
			[in]LPCWSTR lpDevice,
			[in]DWORD iDevNum,
			[in, out]DISPLAY_DEVICEW* lpDisplayDevice,
			[in]DWORD dwFlags);"

	<stdcall: bool EnumDisplayDevicesW lpwstr uint32 DISPLAY_DEVICEW* uint32>
	^self invalidCall: _failureCode!

enumDisplayMonitors: hDC lprcClip: lprcClip lpfnEnum: lpfnEnum dwData: dwData
	"Invoke the EnumDisplayMonitors() function of the module wrapped by the receiver.
	Helpstring: Enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context.

		BOOL __stdcall EnumDisplayMonitors(
			[in]wireHDC hDC,
			[in]RECT* lprcClip,
			[in]LPVOID lpfnEnum,
			[in]LONG_PTR dwData);"

	<stdcall: bool EnumDisplayMonitors handle RECTL* void* intptr>
	^self invalidCall: _failureCode!

enumThreadWindows: dwThreadId lpfn: aCallbackThunk lParam: lParam
	<stdcall: bool EnumThreadWindows uint32 lpvoid uintptr>
	^self invalidCall: _failureCode!

enumWindows: lpEnumFunction lParam: lParam
	"Invoke the EnumWindows() function of the module wrapped by the receiver.
	Helpstring: Enumerates all top-level windows on the screen by passing the handle of each window, in turn, to an application-defined callback function

		BOOL __stdcall EnumWindows(
			LPVOID lpEnumFunction,
			LONG_PTR lParam);"

	<stdcall: bool EnumWindows void* intptr>
	^self invalidCall: _failureCode!

findWindow: lpClassName lpWindowName: lpWindowName
	"Find and answer the handle of the top-level window with matching class name and caption."

	<stdcall: handle FindWindowW lpwstr lpwstr>
	^self invalidCall: _failureCode!

flashWindowEx: pfwi
	"BOOL FlashWindowEx( PFLASHWINFO pfwi // flash status information );"

	<stdcall: bool FlashWindowEx FLASHWINFO*>
	^self invalidCall: _failureCode!

getAncestor: hwnd gaFlags: gaFlags
	"Invoke the GetAncestor() function of the module wrapped by the receiver.
	Helpstring: Retrieves a handle to an ancestor of the specified window.

		HWND __stdcall GetAncestor(
			[in]HWND HWND,
			[in]UINT gaFlags);"

	<stdcall: handle GetAncestor handle uint32>
	^self invalidCall: _failureCode!

getAwarenessFromDpiAwarenessContext: value
	"Invoke the GetAwarenessFromDpiAwarenessContext() function of the module wrapped by the receiver.
	Helpstring: Retrieves the DPI_AWARENESS value from a DPI_AWARENESS_CONTEXT.

		DPI_AWARENESS __stdcall GetAwarenessFromDpiAwarenessContext(
			INT_PTR value);"

	<stdcall: int32 GetAwarenessFromDpiAwarenessContext intptr>
	^self invalidCall: _failureCode!

getCapture
	"Retreive the handle of the current window with mouse capture.
		HANDLE GetCapture(VOID)."

	<stdcall: handle GetCapture>
	^self invalidCall: _failureCode!

getClassAtom: hWnd
	^self getClassLongPtr: hWnd nIndex: GCW_ATOM!

getClassLongPtr: hWnd nIndex: nIndex
	<stdcall: uintptr GetClassLongW handle int32>
	^self invalidCall: _failureCode!

getClassName: anExternalHandle
	| buf |
	buf := Utf16String newFixed: 256.
	"Per https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-wndclassexw, the maximum length of a window class name is 256,
	although it not specified whether this includes the null terminator."
	(self
		getClassName: anExternalHandle
		lpClassName: buf
		nMaxCount: 256) == 0
		ifTrue: [Win32Error signal].
	^buf trimNulls!

getClassName: aWindowHandle lpClassName: aByteBuffer nMaxCount: anInteger
	"Private - Retrieves the name of the Windows class to which the specified window belongs.
		int GetClassName(
			HWND hWnd,			// handle of window
			LPWSTR lpClassName,	// address of UTF16 buffer for class name
			int nMaxCount 			// size of buffer, in characters
		);"

	<stdcall: int32 GetClassNameW handle lpvoid int32>
	^self invalidCall: _failureCode!

getClientRect: aWindowHandle lpRect: aRECT
	"Retrieve the coordinates of hWnd's client area into aRECT.
	The client coordinates specify the upper-left and lower-right corners 
	of the client area. The coordinates of the upper-left corner are always 0@0.

		BOOL GetClientRect(
			HWND hWnd,	// handle of window
			LPRECT lpRect 	// address of structure for client coordinates
		);"

	<stdcall: bool GetClientRect handle RECTL*>
	^self invalidCall: _failureCode!

getClipboardData: format
	"Answer a global memory handle for the clipboard data in the specified format. 
	
		HANDLE GetClipboardData(UINT format);"

	<stdcall: handle GetClipboardData uint32>
	^self invalidCall: _failureCode!

getClipboardFormatName: format lpszFormatName: lpszFormatName cchMaxCount: cchMaxCount
	"Copy the name of the specified registered clipboard format into the
	supplied buffer.

		int GetClipboardFormatName( 
			UINT format,				// clipboard format to retrieve 
			LPWSTR lpszFormatName, 	// address of buffer for name 
			int cchMaxCount  			// length of name string in characters 
		);"

	<stdcall: int32 GetClipboardFormatNameW uint32 lpwstr int32>
	^self invalidCall: _failureCode!

getDialogControlDpiChangeBehavior: hwnd
	"Invoke the GetDialogControlDpiChangeBehavior() function of the module wrapped by the receiver.
	Helpstring: Get the per-monitor DPI scaling behavior of child windows in a dialog.

		DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS __stdcall GetDialogControlDpiChangeBehavior(
			wireHWND hwnd);"

	<stdcall: int32 GetDialogControlDpiChangeBehavior handle>
	^self invalidCall: _failureCode!

getDialogDpiChangeBehavior: hDlg
	"Invoke the GetDialogDpiChangeBehavior() function of the module wrapped by the receiver.
	Helpstring: Get the per-monitor DPI scaling behavior of a dialog.

		DIALOG_DPI_CHANGE_BEHAVIORS __stdcall GetDialogDpiChangeBehavior(
			wireHWND hDlg);"

	<stdcall: int32 GetDialogDpiChangeBehavior handle>
	^self invalidCall: _failureCode!

getDlgCtrlID: hWnd
	<stdcall: int32 GetDlgCtrlID handle>
	^self invalidCall: _failureCode!

getDpiAwarenessContextForProcess: hProcess
	"Invoke the GetDpiAwarenessContextForProcess() function of the module wrapped by the receiver.
	Helpstring: Gets a DPI_AWARENESS_CONTEXT handle for the specified process.

		INT_PTR __stdcall GetDpiAwarenessContextForProcess(
			HANDLE hProcess);"

	<stdcall: intptr GetDpiAwarenessContextForProcess handle>
	^self invalidCall: _failureCode!

getDpiForWindow: hwnd
	"Invoke the GetDpiForWindow() function of the module wrapped by the receiver.
	Helpstring: Get the DPI of the specified Window.

		unsigned int __stdcall GetDpiForWindow(
			wireHWND hwnd);"

	<stdcall: uint32 GetDpiForWindow handle>
	^self invalidCall: _failureCode!

getDpiFromDpiAwarenessContext: value
	"Invoke the GetDpiFromDpiAwarenessContext() function of the module wrapped by the receiver.
	Helpstring: Retrieves the DPI from a given DPI_AWARENESS_CONTEXT handle.

		unsigned int __stdcall GetDpiFromDpiAwarenessContext(
			INT_PTR value);"

	<stdcall: uint32 GetDpiFromDpiAwarenessContext intptr>
	^self invalidCall: _failureCode!

getFocus
	"Answers the handle of the keyboard focus window associated with the thread that called the function,
	or nil if the thread does not own the focus window
	
		HWND GetFocus(VOID);"

	<stdcall: handle GetFocus>
	^self invalidCall: _failureCode!

getForegroundWindow
	"Answer the handle of the window with which the user is currently working.
		HWND GetForegroundWindow(VOID)"

	<stdcall: handle GetForegroundWindow>
	^self invalidCall: _failureCode!

getLastActivePopup: aHandle
	"Answer the handle of the pop-up window owned by the specified window 
	which was most recently active.
		HWND GetLastActivePopup(
			HWND hWnd 	// handle of owner window
		);"

	<stdcall: handle GetLastActivePopup handle>
	^self invalidCall: _failureCode!

getLastInputInfo: plii
	"Retrieves the time of the last input event.
		BOOL WINAPI GetLastInputInfo(
			_Out_ PLASTINPUTINFO plii
		);"

	<stdcall: bool GetLastInputInfo LASTINPUTINFO*>
	^self invalidCall: _failureCode!

getMenuInfo: hMenu lpcmi: aMenuItemInfo
	<stdcall: bool GetMenuInfo handle MENUINFO*>
	^self invalidCall: _failureCode!

getMenuItemInfo: hMenu uItem: anInteger fByPosition: aBoolean lpmii: aMenuItemInfo
	"Get various information about a menu item.
		BOOL GetMenuItemInfo(
			HMENU hMenu,
			UINT uItem,
			BOOL fByPosition,
			LPMENUITEMINFO lpmii
		);"

	<stdcall: bool GetMenuItemInfoW handle uint32 bool MENUITEMINFOW*>
	^self invalidCall: _failureCode!

getMenuItemRect: hWnd hMenu: hMenu uItem: uItem lprcItem: lprcItem
	<stdcall: bool GetMenuItemRect handle handle uint32 RECTL*>
	^self invalidCall: _failureCode!

getMonitorInfo: hmonitor lpmi: lpmi
	"Invoke the GetMonitorInfo() function of the module wrapped by the receiver.
	Helpstring: Retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.

		BOOL __stdcall GetMonitorInfo(
			[in]HMONITOR HMONITOR,
			[in, out]MONITORINFO* lpmi);"

	<stdcall: bool GetMonitorInfoW handle MONITORINFOEXW*>
	^self invalidCall: _failureCode!

getNextDlgGroupItem: p1 hCtl: p2 bPrevious: p3
	"HWND GetNextDlgGroupItem(
		HWND hDlg,	// handle of dialog box
		HWND hCtl,	// handle of control
		BOOL bPrevious 	// direction flag
		);"

	<stdcall: handle GetNextDlgGroupItem handle handle bool>
	^self invalidCall: _failureCode!

getNextDlgTabItem: p1 hCtl: p2 bPrevious: p3
	"HWND GetNextDlgTabItem(
		HWND hDlg,	// handle of dialog box
		HWND hCtl,	// handle of known control
		BOOL bPrevious 	// direction flag
		);"

	<stdcall: handle GetNextDlgTabItem handle handle bool>
	^self invalidCall: _failureCode!

getProp: aWindowHandle lpString: name
	"Answer a data handle which is the previously added (with #setProp:etc) named property 
	of the given window.
		HANDLE GetProp(
			HWND hWnd,	// handle of window
			LPCWSTR lpString 	// atom or address of string
		);.

	N.B. The return specification HANDLE here indicates that the value is an opaque unsigned
	integer value, so we use uintptr, as we reserve #handle for real handles."

	<stdcall: uintptr GetPropW handle lpwstr>
	^self invalidCall: _failureCode!

getScrollInfo: hwnd nBar: nBar lpsi: lpsi
	"Invoke the GetScrollInfo() function of the module wrapped by the receiver.
	Helpstring: Retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box(thumb).

		BOOL __stdcall GetScrollInfo(
			wireHWND hwnd,
			int nBar,
			SCROLLINFO* lpsi);"

	<stdcall: bool GetScrollInfo handle int32 SCROLLINFO*>
	^self invalidCall: _failureCode!

getSystemDpiForProcess: hProcess
	"Invoke the GetSystemDpiForProcess() function of the module wrapped by the receiver.
	Helpstring: Retrieves the system DPI associated with a given process.

		unsigned int __stdcall GetSystemDpiForProcess(
			HANDLE hProcess);"

	<stdcall: uint32 GetSystemDpiForProcess handle>
	^self invalidCall: _failureCode!

getSystemMenu: anExternalHandle bRevert: aBoolean
	<stdcall: handle GetSystemMenu handle bool>
	^self invalidCall: _failureCode!

getSystemMetricsForDpi: index dpi: dpi
	<stdcall: int32 GetSystemMetricsForDpi int32 uint32>
	^self invalidCall: _failureCode!

getThreadDpiAwarenessContext
	"Invoke the GetThreadDpiAwarenessContext() function of the module wrapped by the receiver.
	Helpstring: Get the DPI awareness for the current thread.

		INT_PTR __stdcall GetThreadDpiAwarenessContext();"

	<stdcall: intptr GetThreadDpiAwarenessContext>
	^self invalidCall: _failureCode!

getThreadDpiHostingBehavior
	"Invoke the GetThreadDpiHostingBehavior() function of the module wrapped by the receiver.
	Helpstring: Get the current thread's DPI_HOSTING_BEHAVIOR.

		DPI_HOSTING_BEHAVIOR __stdcall GetThreadDpiHostingBehavior();"

	<stdcall: int32 GetThreadDpiHostingBehavior>
	^self invalidCall: _failureCode!

getTopWindow: aHandle
	"Answer the handle of the top-most child of the window with the specified handle.
		HWND GetTopWindow(
			HWND hWnd 	// handle of parent window
		);"

	<stdcall: handle GetTopWindow handle>
	^self invalidCall: _failureCode!

getUpdateRect: hWnd lpRect: lpRect bErase: bErase
	"Get the update rectangle for the Window with handle, hWnd. If the update
	region is empty then answers false, else true. The lpRect parameter can be
	null if the caller only wants to determine whether the window requires any
	repainting.

		BOOL GetUpdateRect(
			HWND hWnd, // handle of window 
			LPRECT lpRect , // address of update rectangle coordinates 
			BOOL bErase <> // erase flag 
		); "

	<stdcall: bool GetUpdateRect handle RECTL* bool>
	^self invalidCall: _failureCode!

getWindow: hWnd uCmd: flags
	"Answer the handle of a window that has the specified relationship to hWnd.
		HWND GetWindow(
			HWND hWnd,	// handle of original window
			UINT uCmd 	// relationship flag
		);"

	<stdcall: handle GetWindow handle uint32>
	^self invalidCall: _failureCode!

getWindowDC: aWindowHandle
	"Answer the handle of a display device context (DC) which can be used to draw
	in the entire non-client area of the specified window. GetWindowDC assigns 
	default attributes to the window device context each time it retrieves the 
	device context. Previous attributes are lost. 

		HDC GetWindowDC(HWND hWnd);"

	<stdcall: handle GetWindowDC handle>
	^self invalidCall: _failureCode!

getWindowDpiAwarenessContext: hwnd
	"Invoke the GetWindowDpiAwarenessContext() function of the module wrapped by the receiver.
	Helpstring: Get the DPI awareness for the specified window.

		INT_PTR __stdcall GetWindowDpiAwarenessContext(
			wireHWND hwnd);"

	<stdcall: intptr GetWindowDpiAwarenessContext handle>
	^self invalidCall: _failureCode!

getWindowDpiHostingBehavior: hwnd
	"Invoke the GetWindowDpiHostingBehavior() function of the module wrapped by the receiver.
	Helpstring: Get the DPI_HOSTING_BEHAVIOR of the specified window.

		DPI_HOSTING_BEHAVIOR __stdcall GetWindowDpiHostingBehavior(
			wireHWND hwnd);"

	<stdcall: int32 GetWindowDpiHostingBehavior handle>
	^self invalidCall: _failureCode!

getWindowExStyle: hWnd
	^self getWindowLong: hWnd nIndex: GWL_EXSTYLE!

getWindowLong: aWindowHandle nIndex: zeroBasedIntegerOffset
	"Answer various signed 32-bit integer values retrieved from the window with handle, aWindowHandle.
	If an unsigned value is required, use getWindowULong:nIndex:

		LONG GetWindowLong(
			HWND hWnd, // handle of window 
			int nIndex // offset of value to retrieve 
		);

	Valid offsets are in the range 0 to the number of bytes of extra window memory, minus the
	size of an int (4), or one of the following values: 

		GWL_EXSTYLE Extended window styles (WS_EX_XXX) 
		GWL_STYLE Window styles (WS_XXX) 

	Answers 0 if the function fails."

	<stdcall: int32 GetWindowLongW handle int32>
	^self invalidCall: _failureCode!

getWindowLongPtr: aWindowHandle nIndex: zeroBasedIntegerOffset
	"Answer various signed intptr values retrieved from the window with handle, aWindowHandle.
	If an unsigned value is required, use getWindowULongPtr:nIndex:. Note that this function
	is only supported on 64-bit Windows.

		LONG_PTR GetWindowLongPtr(
			HWND hWnd, // handle of window 
			int nIndex // offset of value to retrieve 
		);

	Valid offsets are in the range 0 to the number of bytes of extra window memory, minus the
	size of an intptr, or one of the following values: 

		GWL_EXSTYLE Extended window styles (WS_EX_XXX) 
		GWL_STYLE Window styles (WS_XXX) 
		GWLP_WNDPROC Address of the Window Procedure
		GWLP_HINSTANCE Handle of the application instance which owns the window. 
		GWLP_HWNDPARENT Handle of the parent window, if any. 
		GWLP_ID Identifier of the window. GWLP_USERDATA An inptr value associated with the window by the owning application.

	The following values are also available for dialog windows: 

		DWLP_DLGPROC Address of the dialog box procedure. 
		DWLP_MSGRESULT The return value of a message processed in the dialog	box procedure. 
		DWLP_USER Extra information private to the application.

	Answers 0 if the function fails."

	<stdcall: intptr GetWindowLongPtrW handle int32>
	^self invalidCall: _failureCode!

getWindowPlacement: hWnd lpwndpl: lpwndpl
	"Retrieve the show state and restored, minimized, and maximized positions 
	of the specified window.
		BOOL GetWindowPlacement(
			HWND hWnd,				// handle of window
			WINDOWPLACEMENT *lpwndpl 	// address of structure for position data
		);"

	<stdcall: bool GetWindowPlacement handle WINDOWPLACEMENT*>
	^self invalidCall: _failureCode!

getWindowRect: aWindowHandle lpRect: aRECT
	"Retrieves the dimensions of the bounding rectangle of the specified window
	(in screen coordinates, relative to the upper-left corner of the screen).

		BOOL GetWindowRect(
			HWND hWnd,	// handle of window
			LPRECT lpRect 	// address of structure for window coordinates
		);"

	<stdcall: bool GetWindowRect handle RECTL*>
	^self invalidCall: _failureCode!

getWindowStyle: hWnd
	^self getWindowLong: hWnd nIndex: GWL_STYLE!

getWindowText: hWnd
	| text textLen |
	textLen := self getWindowTextLength: hWnd.
	text := Utf16String newFixed: textLen.
	self
		getWindowText: hWnd
		lpString: text
		nMaxCount: textLen + 1.
	"We must return UTF-16 text in order to be compatible with other control APIs that may return character counts expressed in UTF-16 code units (e.g. the Edit control's EM_LINELENGTH)"
	^text!

getWindowText: aWindow lpString: aBuffer nMaxCount: len
	"Copy the text of the specified window (its title bar, or other appropriate text)
	into the supplied buffer, up to the specified maximum length
		int GetWindowText(
			HWND hWnd,		// handle of window or control with text
			LPWSTR lpString,	// address of buffer for text
			int nMaxCount 		// maximum number of characters to copy
		);"

	<stdcall: int32 GetWindowTextW handle lpvoid int32>
	^self invalidCall: _failureCode!

getWindowTextLength: hWnd
	"Answer the length, in characters, of the specified window's title 'text'
		int GetWindowTextLength(
			HWND hWnd 	// handle of window or control with text
		);"

	<stdcall: int32 GetWindowTextLengthW handle>
	^self invalidCall: _failureCode!

getWindowThreadProcessId: hwnd lpdwProcessId: lpdwProcessId
	"Invoke the GetWindowThreadProcessId() function of the module wrapped by the receiver.
	Helpstring: Returns the ids of both the process and the thread that created a window

		DWORD __stdcall GetWindowThreadProcessId(
			wireHWND hwnd,
			DWORD* lpdwProcessId);"

	<stdcall: uint32 GetWindowThreadProcessId handle uint32*>
	^self invalidCall: _failureCode!

getWindowULong: aWindowHandle nIndex: zeroBasedIntegerOffset
	"Answer various unsigned 32-bit integer values retrieved from the window with handle,
	aWindowHandle. See #getWindowLongPtr:offset: for more details"

	<stdcall: uint32 GetWindowLongW handle int32>
	^self invalidCall: _failureCode!

getWindowULongPtr: aWindowHandle nIndex: zeroBasedIntegerOffset
	"Answer various unsigned values retrieved from the window with handle, aWindowHandle. See
	#getWindowLongPtr:offset: for more details"

	"Note: This function only exists on Win64. It is not present on Win32."

	<stdcall: uintptr GetWindowLongPtrW handle int32>
	^self invalidCall: _failureCode!

inheritWindowMonitor: hwnd hwndInherit: hwndInherit
	"Invoke the InheritWindowMonitor() function of the module wrapped by the receiver.
	Helpstring: Causes a specified window to inherit the monitor of another window.

		BOOL __stdcall InheritWindowMonitor(
			wireHWND hwnd,
			wireHWND hwndInherit);"

	<stdcall: bool InheritWindowMonitor handle handle>
	^self invalidCall: _failureCode!

initialize
	"We must ensure the DPI awareness level is set before we do anything that might do any UI operations, otherwise we'll end up with a mess."

	self setProcessDpiAwarenessContext: DesiredDpiAwarenessContext.
	"We cache the actual system-wide awareness context now because:
		- it cannot be changed once set, but the configured context can be changed for the next image restart (so DpiAwarenessContext may not be the system-wide context)
		- we may not get what we asked for, e.g. in an application with a manifest defined awareness
		- the result of GetDpiAwarenessContextForProcess will depend on the thread awareness context at the time it is called (!!)"
	DpiAwarenessContext := self getThreadDpiAwarenessContext.
	^self!

insertMenuItem: hMenu uItem: anInteger fByPosition: aBoolean lpmii: aMENUITEMINFOW
	"Insert a new item into a menu.

		BOOL InsertMenuItem(
			HMENU hMenu,
			UINT uItem,
			BOOL fByPosition,
			LPCMENUITEMINFO lpmii
		);"

	<stdcall: bool InsertMenuItemW handle uint32 bool MENUITEMINFOW*>
	^self invalidCall: _failureCode!

invalidate: hWnd lpRect: aRECT bErase: aBoolean
	"Add aRECT to hWnd's update region (that portion of the
	windows client area that requires repainting).
		BOOL InvalidateRect(
  			HWND hWnd,			// handle of window with changed update region  
			CONST RECT *lpRect,	// address of rectangle coordinates 
			BOOL bErase			// erase-background flag 
		);"

	<stdcall: bool InvalidateRect handle RECTL* bool>
	^self invalidCall: _failureCode!

invalidateRgn: hWnd hRgn: aRegion bErase: aBoolean
	"Invalidates the client area within the specified region by adding it to the current update region of a window. 
	The invalidated region, along with all other areas in the update region, is marked for painting when the 
	next paint message occurs. 

		BOOL InvalidateRgn(
	  	HWND  hWnd,	// handle of window with changed update region  
		HRGN  hRgn,	// handle of region to add
		BOOL  bErase 	// erase-background flag
		);"

	<stdcall: bool InvalidateRgn handle handle bool>
	^self invalidCall: _failureCode!

isChild: hWndParent hWnd: hWnd
	"Answer whether the window identified by the handle, hWnd, is 
	a child of the window identified by the handle, hWndParent."

	<stdcall: bool IsChild handle handle>
	^self invalidCall: _failureCode!

isClipboardFormatAvailable: format
	"Answer whether the clipboard contains data in the specified format. 
	
		BOOL IsClipboardFormatAvailable(UINT format);"

	<stdcall: bool IsClipboardFormatAvailable uint32>
	^self invalidCall: _failureCode!

isDialog: anExternalHandle
	^(self getClassAtom: anExternalHandle) == 32770!

isDialogMessage: aHandle lpMsg: aMSG
	"Determine whether a message is intended for the specified dialog 
	box and, if it is, process the message. 
		BOOL IsDialogMessage(
  			HWND hDlg,	// handle of dialog box
			LPMSG lpMsg	// address of structure with message
		);"

	<stdcall: bool IsDialogMessageW handle MSG*>
	^self invalidCall: _failureCode!

isForegroundProcess: anInteger
	| hWnd |
	hWnd := self getForegroundWindow.
	^hWnd notNil and: 
			[| foregroundPid |
			foregroundPid := UInt32Bytes new.
			(self getWindowThreadProcessId: hWnd lpdwProcessId: foregroundPid) ~~ 0
				and: [foregroundPid = anInteger]]!

isIconic: aWindowHandle
	"Answer whether the specified window is iconic (minimized). 
		BOOL IsIconic(
			HWND hWnd 	// handle of window
		);"

	<stdcall: bool IsIconic handle>
	^self invalidCall: _failureCode!

isProcessDPIAware
	"Invoke the IsProcessDPIAware() function of the module wrapped by the receiver.
	Helpstring: Determines whether the current process is dots per inch (dpi) aware such that it adjusts the sizes of UI elements to compensate for the dpi setting.

		BOOL __stdcall IsProcessDPIAware();"

	<stdcall: bool IsProcessDPIAware>
	^self invalidCall: _failureCode!

isProcessSystemDpiAware
	"Answer whether the process default Dpi awareness is the 'system' level, i.e. a common high DPI applied to all monitors regardless of their physical DPI, as opposed to per-monitor high DPI."

	^self areDpiAwarenessContextsEqual: DPI_AWARENESS_CONTEXT_SYSTEM_AWARE
		dpiContextB: DpiAwarenessContext!

isValidDpiAwarenessContext: value
	"Invoke the IsValidDpiAwarenessContext() function of the module wrapped by the receiver.
	Helpstring: Determines whether a value is a valid DPI_AWARENESS_CONTEXT.

		BOOL __stdcall IsValidDpiAwarenessContext(
			INT_PTR value);"

	<stdcall: bool IsValidDpiAwarenessContext intptr>
	^self invalidCall: _failureCode!

isWindowUnicode: hWnd
	<stdcall: bool IsWindowUnicode handle>
	^self invalidCall: _failureCode!

isZoomed: aWindowHandle
	"Answer wether a window is zoomed (maximized). See also #isIconic:.
		BOOL IsZoomed(
			HWND hWnd 	// handle of window
		);"

	<stdcall: bool IsZoomed handle>
	^self invalidCall: _failureCode!

loadAccelerators: anExternalHandle lpTableName: anIntegerOrString
	"Load the specified accelerator table from the resources of the application identified
	by the instance handle, aHandle. The argument anIntegerOrString may be a 16-bit integer
	resource id, or a String name. Answer the handle of the resource, or nil if the function
	fails. Loaded accelerator tables will be freed automatically when Dolphin terminates.

		HACCEL LoadAccelerators(
				HINSTANCE  hInstance,	// handle of application instance
				LPCWSTR  lpTableName 	// address of table-name string
			);"

	<stdcall: handle LoadAcceleratorsW handle lpvoid>
	^self invalidCall: _failureCode!

loadMenu: anExternalHandle lpMenuName: anIntegerOrString
	"Load the specified menu from the resources of the application identified
	by the instance handle, aHandle. The argument anIntegerOrString may be a 16-bit integer
	resource id, or a String name. Answer the handle of the resource, or nil if the function
	fails.

		HMENU LoadMenu(
			HINSTANCE  hInstance,	// handle of application instance
			LPCWSTR  lpMenuName	// menu name string or menu-resource identifier  
			);"

	<stdcall: handle LoadMenuW handle lpvoid>
	^self invalidCall: _failureCode!

lockWindowUpdate: anExternalHandle
	<stdcall: bool LockWindowUpdate handle>
	^self invalidCall: _failureCode!

logicalToPhysicalPoint: hwnd lpPoint: lpPoint
	"Invoke the LogicalToPhysicalPoint() function of the module wrapped by the receiver.
	Helpstring: Converts a point in a window from logical coordinates into physical coordinates, regardless of the dots per inch (dpi) awareness of the caller.

		BOOL __stdcall LogicalToPhysicalPoint(
			wireHWND hwnd,
			POINT* lpPoint);"

	<stdcall: bool LogicalToPhysicalPoint handle POINTL*>
	^self invalidCall: _failureCode!

logicalToPhysicalPointForPerMonitorDPI: hwnd lpPoint: lpPoint
	"Invoke the LogicalToPhysicalPointForPerMonitorDPI() function of the module wrapped by the receiver.
	Helpstring: Converts the logical coordinates of a point in a window to physical coordinates.

		BOOL __stdcall LogicalToPhysicalPointForPerMonitorDPI(
			wireHWND hwnd,
			POINT* lpPoint);"

	<stdcall: bool LogicalToPhysicalPointForPerMonitorDPI handle POINTL*>
	^self invalidCall: _failureCode!

makeDragList: aWindowHandle
	"The MakeDragList function changes the specified single-selection list box 
	to a drag list box.

	BOOL MakeDragList( HWND hLB);"

	<stdcall: bool MakeDragList handle>
	^self invalidCall: _failureCode!

mapRectangle: aRectangle from: hwndSrc to: hwndDest
	| rect |
	rect := RECTL marshal: aRectangle.
	self
		mapWindowPoints: hwndSrc asParameter
		hWndTo: hwndDest asParameter
		lpPoints: rect
		cPoints: 2.
	^rect!

mapWindowPoints: fromHwnd hWndTo: toHwnd lpPoints: points cPoints: count
	"Map a set of points from a coordinate space relative to one window 
	to a coordinate space relative to another window.

		int MapWindowPoints(
  			HWND hWndFrom,		// handle of window to be mapped from 
			HWND hWndTo,		// handle of window to be mapped to 
			LPPOINT lpPoints,	// address of structure array with points to map 
			UINT cPoints 		// number of structures in array 
	   );"

	<stdcall: int32 MapWindowPoints handle handle lpvoid uint32>
	^self invalidCall: _failureCode!

modifyMenu: hMenuDrop uPosition: position uFlags: styleFlags uIDNewItem: menuId lpNewItem: menuText
	"Changes an existing menu item the specified menu with the specified
	style, identifier and text.

		BOOL ModifyMenu(
			HMENU hMenu,	// handle to menu
			UINT uPosition,	// menu item to modify
			UINT uFlags,		// menu item flags
			UINT uIDNewItem,	// menu item identifier or pop-up menu handle 
			LPCWSTR lpNewItem	// menu item content
		);"

	<stdcall: bool ModifyMenuW handle uint32 uint32 uint32 lpwstr>
	^self invalidCall: _failureCode!

monitorFromPoint: pt dwFlags: dwFlags
	"Invoke the MonitorFromPoint() function of the module wrapped by the receiver.
	Helpstring: Retrieves a handle to the display monitor that contains a specified point.

		HMONITOR __stdcall MonitorFromPoint(
			[in]POINTL pt,
			[in]DWORD dwFlags);"

	<stdcall: handle MonitorFromPoint POINTL uint32>
	^self invalidCall: _failureCode!

monitorFromRect: lprc dwFlags: dwFlags
	"Invoke the MonitorFromRect() function of the module wrapped by the receiver.
	Helpstring: Retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle.

		HMONITOR __stdcall MonitorFromRect(
			[in]RECT* lprc,
			[in]DWORD dwFlags);"

	<stdcall: handle MonitorFromRect RECTL* uint32>
	^self invalidCall: _failureCode!

monitorFromWindow: hwnd dwFlags: dwFlags
	"Invoke the MonitorFromWindow() function of the module wrapped by the receiver.
	Helpstring: Retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.

		HMONITOR __stdcall MonitorFromWindow(
			[in]wireHWND hwnd,
			[in]DWORD dwFlags);"

	<stdcall: handle MonitorFromWindow handle uint32>
	^self invalidCall: _failureCode!

openClipboard: hWnd
	"Open the clipboard, associating it with the specified window.
	Answers 0 if fails.

		BOOL OpenClipboard(HWND)"

	<stdcall: bool OpenClipboard handle>
	^self invalidCall: _failureCode!

physicalToLogicalPoint: hwnd lpPoint: lpPoint
	"Invoke the PhysicalToLogicalPoint() function of the module wrapped by the receiver.
	Helpstring: Converts the physical coordinates of a point in a window to logical coordinates.

		BOOL __stdcall PhysicalToLogicalPoint(
			wireHWND hwnd,
			POINT* lpPoint);"

	<stdcall: bool PhysicalToLogicalPoint handle POINTL*>
	^self invalidCall: _failureCode!

physicalToLogicalPointForPerMonitorDPI: hwnd lpPoint: lpPoint
	"Invoke the PhysicalToLogicalPointForPerMonitorDPI() function of the module wrapped by the receiver.
	Helpstring: Converts a point in a window from physical coordinates into logical coordinates, regardless of the dots per inch (dpi) awareness of the caller.

		BOOL __stdcall PhysicalToLogicalPointForPerMonitorDPI(
			wireHWND hwnd,
			POINT* lpPoint);"

	<stdcall: bool PhysicalToLogicalPointForPerMonitorDPI handle POINTL*>
	^self invalidCall: _failureCode!

printWindow: hwnd hdcBlt: hDC nFlags: anInteger
	<stdcall: bool PrintWindow handle handle uint32>
	^self invalidCall: _failureCode!

realChildWindowFromPoint: hwndParent ptParentClientCoords: ptParentClientCoords
	"Invoke the RealChildWindowFromPoint() function of the module wrapped by the receiver.
	Helpstring: Determines which if any child window of given window contains a specified point

		wireHWND __stdcall RealChildWindowFromPoint(
			wireHWND hwndParent,
			POINT ptParentClientCoords);"

	<stdcall: handle RealChildWindowFromPoint handle POINTL>
	^self invalidCall: _failureCode!

redrawWindow: hWnd lprcUpdate: lprcUpdate hrgnUpdate: hrgnUpdate flags: flags
	"Update the specified rectangle or region in a window's client area. 
		BOOL RedrawWindow(
			HWND hWnd,				// handle to window
			CONST RECTL *lprcUpdate,	// update rectangle
			HRGN hrgnUpdate,			// handle to update region
			UINT flags				// array of redraw flags
		);
	"

	<stdcall: bool RedrawWindow handle RECTL* handle uint32>
	^self invalidCall: _failureCode!

registerClass: aWNDCLASS
	"Registers a window class for subsequent use in calls to the CreateWindow or 
	CreateWindowEx functions. Answers the class atom, or zero if fails.
		ATOM RegisterClass(
			CONST WNDCLASS  *lpwc 	// address of structure with class data
		);"

	<stdcall: uint16 RegisterClassW WNDCLASS*>
	^self invalidCall: _failureCode!

registerClipboardFormat: formatName
	"Register a new clipboard format name, answering its system wide identifier.

		UINT RegisterClipboardFormat( 
			LPCTSTR lpszFormat  // address of name string 
		);"

	<stdcall: uint32 RegisterClipboardFormatW lpwstr>
	^self invalidCall: _failureCode!

registerHotKey: aWindowHandle id: anIntegerId fsModifiers: anIntegerFlags vk: anIntegerVk
	"Define a hot key for the current thread.
		BOOL RegisterHotKey(
		  	HWND  hWnd,		// window to receive hot-key notification
			int  id,			// identifier of hot key
			UINT  fsModifiers,	// key-modifier flags
			UINT  vk 			// virtual-key code
		);"

	<stdcall: bool RegisterHotKey handle int32 uint32 uint32>
	^self invalidCall: _failureCode!

registerWindowMessage: aString
	"Defines a new window message that is guaranteed to be unique system wide.

		UINT RegisterWindowMessage(
			LPCWSTR  lpString 	// address of message string
		);"

	<stdcall: uint32 RegisterWindowMessageW lpwstr>
	^self invalidCall: _failureCode!

releaseCapture
	"Release the mouse capture from a window, restoring normal mouse input processing.
		BOOL ReleaseCapture(VOID)"

	<stdcall: bool ReleaseCapture>
	^self invalidCall: _failureCode!

removeMenu: aMenu uPosition: idOrPos uFlags: flags
	"Delete a menu item from the specified menu. If the menu item activates a pop-up menu, 
	RemoveMenu does not destroy the pop-up menu or its handle, allowing the menu to be reused. 
	Before this function is called, the GetSubMenu function should retrieve the handle of the pop-up menu. 
		BOOL RemoveMenu(
			HMENU hMenu,	// handle of menu
			UINT uPosition,	// menu item identifier or position
			UINT uFlags	// menu item flag
		);"

	<stdcall: bool RemoveMenu handle uint32 uint32>
	^self invalidCall: _failureCode!

removeProp: aWindowHandle lpString: name
	"Remove an the entry identified by lpString from the property list of 
	the specified window.
		HANDLE RemoveProp(
			HWND hWnd,	// handle to window
			LPCWSTR lpString 	// atom or address of string
		);"

	<stdcall: handle RemovePropW handle lpvoid>
	^self invalidCall: _failureCode!

screenToClient: hwnd lpPoint: lpPoint
	"Invoke the ScreenToClient() function of the module wrapped by the receiver.
	Helpstring: Converts screen coordinates of specified point to client coordinates

		BOOL __stdcall ScreenToClient(
			wireHWND hwnd,
			POINTL* lpPoint);"

	<stdcall: bool ScreenToClient handle POINTL*>
	^self invalidCall: _failureCode!

scrollWindowEx: hwnd dx: dx dy: dy prcScroll: prcScroll prcClip: prcClip hrgnUpdate: hrgnUpdate prcUpdate: prcUpdate flags: flags
	"Invoke the ScrollWindowEx() function of the module wrapped by the receiver.
	Helpstring: Scrolls the content of the specified window’s client area

		int __stdcall ScrollWindowEx(
			[in]wireHWND hwnd,
			[in]int dx,
			[in]int dy,
			RECT* prcScroll,
			RECT* prcClip,
			wireHRGN hrgnUpdate,
			RECT* prcUpdate,
			[in]unsigned int flags);"

	<stdcall: int32 ScrollWindowEx handle int32 int32 RECTL* RECTL* handle RECTL* uint32>
	^self invalidCall: _failureCode!

sendMessage: aWindowHandle msg: msg wParam: wParam lpParam: lParam
	"As sendMessage:msg:wParam:lParam, but implicit conversion of lParam
	to pointer."

	<stdcall: intptr SendMessageW handle uint32 uintptr lpvoid>
	^self invalidCall: _failureCode!

sendMessage: aWindowHandle msg: msg wpParam: wParam lpParam: lParam
	"As sendMessage:msg:wParam:lParam, but implicit conversion of lParam
	and wParam to pointers."

	<stdcall: intptr SendMessageW handle uint32 lpvoid lpvoid>
	^self invalidCall: _failureCode!

sendMessageU: aWindowHandle msg: msg wParam: wParam lParam: lParam
	"As sendMessage:msg:wParam:lParam:, but returns an unsigned integer."

	<stdcall: uintptr SendMessageW handle uint32 uintptr uintptr>
	^self invalidCall: _failureCode!

sendMessageU: aWindowHandle msg: msg wParam: wParam lpParam: lParam
	"As sendMessage:msg:wParam:lpParam, but returns an unsigned integer."

	<stdcall: uintptr SendMessageW handle uint32 uintptr lpvoid>
	^self invalidCall: _failureCode!

setCapture: aWindowHandle
	"Set the mouse capture to the specified window. Once a window has captured the mouse, it receives all
	mouse input (unless a button is down while the mouse if over another thread's window).
		HWND SetCapture(
			HWND hWnd 	// handle of window to receive mouse capture
		);"

	<stdcall: handle SetCapture handle>
	^self invalidCall: _failureCode!

setClassLong: aWindowHandle nIndex: offset dwNewLong: value
	"Change an attribute of the specified window class, setting 
	a signed 32-bit (long) value at the specified offset into 
	the extra window memory of a window.
	Note: This is declared as returning a DWORD.

		DWORD SetClassLong(
			HWND hWnd,		// handle of window
			int nIndex,		// offset of value to set
			LONG dwNewLong 	// new value
		);"

	<stdcall: uint32 SetClassLongW handle int32 int32>
	^self invalidCall: _failureCode!

setClipboardData: uFormat hMem: hMem
	"Places data on the clipboard in the specified clipboard format.
	The clipboard must previously have been opened unless responding to a WM_RENDERXXX
	message.

		HANDLE SetClipboardData( 
			UINT uFormat,		// clipboard format 
			HANDLE hMem	// data handle 
		);"

	<stdcall: handle SetClipboardData uint32 handle>
	^self invalidCall: _failureCode!

setDialogControlDpiChangeBehavior: hwnd mask: mask values: values
	"Invoke the SetDialogControlDpiChangeBehavior() function of the module wrapped by the receiver.
	Helpstring: Set the per-monitor DPI scaling behavior of child windows in a dialog.

		BOOL __stdcall SetDialogControlDpiChangeBehavior(
			wireHWND hwnd,
			DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask,
			DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values);"

	<stdcall: bool SetDialogControlDpiChangeBehavior handle int32 int32>
	^self invalidCall: _failureCode!

setDialogDpiChangeBehavior: hDlg mask: mask values: values
	"Invoke the SetDialogDpiChangeBehavior() function of the module wrapped by the receiver.
	Helpstring: Set the per-monitor DPI scaling behavior of a dialog.

		BOOL __stdcall SetDialogDpiChangeBehavior(
			wireHWND hDlg,
			DIALOG_DPI_CHANGE_BEHAVIORS mask,
			DIALOG_DPI_CHANGE_BEHAVIORS values);"

	<stdcall: bool SetDialogDpiChangeBehavior handle int32 int32>
	^self invalidCall: _failureCode!

setFocus: aWindowHandle
	"Transfer the keyboard focus to the specified window. All keyboard input 
	is directed to the window with focus.
	Answers the handle of the window which previously had focus, or nil if none.
		HWND SetFocus(
  			HWND hWnd 	// handle of window to receive focus
		);"

	<stdcall: handle SetFocus handle>
	^self invalidCall: _failureCode!

setForegroundWindow: aHandle
	"Makes the specified top-level window associated with the current thread the active window
	and force it to the foreground.. 
		HWND SetForegroundWindow( HWND hWnd);"

	<stdcall: handle SetForegroundWindow handle>
	^self invalidCall: _failureCode!

setLayeredWindowAttributes: aWindowHandle lcrKey: crKey bAlpha: bAlpha dwFlags: flags
	"The SetLayeredWindowAttributes function sets the opacity and transparency color key of a layered window.

	BOOL SetLayeredWindowAttributes(      
			HWND hwnd,
			COLORREF crKey,
			BYTE bAlpha,
			DWORD dwFlags
			);
	"

	<stdcall: bool SetLayeredWindowAttributes handle uint32 uint8 uint32>
	^self invalidCall: _failureCode!

setMenu: windowHandle hMenu: menuHandle
	"Assign a new menu to the specified window.
		BOOL SetMenu(
	  		HWND hWnd,	// handle of window
			HMENU hMenu	// handle of menu
		);"

	<stdcall: bool SetMenu handle handle>
	^self invalidCall: _failureCode!

setMenuDefaultItem: hMenu uItem: uItem fByPos: fByPos
	"Set the default item for the menu with handle, hMenu

		BOOL SetMenuDefaultItem(
			HMENU hMenu, 
			UINT uItem, 
			UINT fByPos
		);"

	<stdcall: uint32 SetMenuDefaultItem handle uint32 uint32>
	^self invalidCall: _failureCode!

setMenuInfo: hMenu lpcmi: aMenuItemInfo
	"Set various information about a menu.
		BOOL SetMenuInfo(
			HMENU hMenu,
			LPMENUINFO lpcmi
		);"

	<stdcall: bool SetMenuInfo handle MENUINFO*>
	^self invalidCall: _failureCode!

setMenuItemInfo: hMenu uItem: anInteger fByPosition: aBoolean lpmii: aMenuItemInfo
	"Set various information about a menu item.
		BOOL SetMenuItemInfo(
			HMENU hMenu,
			UINT uItem,
			BOOL fByPosition,
			LPMENUITEMINFO lpmii
		);"

	<stdcall: bool SetMenuItemInfoW handle uint32 bool MENUITEMINFOW*>
	^self invalidCall: _failureCode!

setParent: hWndChild hWndNewParent: hWndParent
	"Set the parent window of the window with handle hWnd.
	If the function succeeds, answer the handle of the original parent window.
		HWND SetParent(
			HWND hWndChild,		// handle of window whose parent is changing
			HWND hWndNewParent 	// handle of new parent window
		);"

	<stdcall: uint32 SetParent handle handle>
	^self invalidCall: _failureCode!

setProcessDPIAware
	"Invoke the SetProcessDPIAware() function of the module wrapped by the receiver.
	Helpstring: Sets the process-default DPI awareness to system-DPI awareness.

		BOOL __stdcall SetProcessDPIAware();"

	<stdcall: bool SetProcessDPIAware>
	^self invalidCall: _failureCode!

setProcessDpiAwarenessContext: value
	"Invoke the SetProcessDpiAwarenessContext() function of the module wrapped by the receiver.
	Helpstring: Sets the current process to a specified dots per inch (dpi) awareness context.

		BOOL __stdcall SetProcessDpiAwarenessContext(
			INT_PTR value);"

	<stdcall: bool SetProcessDpiAwarenessContext intptr>
	^self invalidCall: _failureCode!

setProp: aWindowHandle lpString: name hData: anObject
	"Answer true if name and anObject are successfully added to the property list.
	The SetProp function adds a new entry or changes an existing entry in the property list of the specified window.
	The function adds a new entry to the list if the specified character string does not exist already in the list.
	The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle. 
		
		BOOL SetProp(
			HWND  	hWnd,		// handle of window
			LPCTSTR  lpString,		// atom or address of string
			HANDLE  	hData 		// handle of data
		);

	Before destroying a window (that is, before processing the WM_DESTROY message), an application must remove all entries it has added
	to the property list. The application must use the RemoveProp function to remove the entries."

	<stdcall: bool SetPropW handle lpvoid handle>
	^self invalidCall: _failureCode!

setScrollInfo: hwnd nBar: nBar lpsi: lpsi redraw: redraw
	"Invoke the SetScrollInfo() function of the module wrapped by the receiver.
	Helpstring: Retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box(thumb).

		int __stdcall SetScrollInfo(
			wireHWND hwnd,
			int nBar,
			SCROLLINFO* lpsi,
			BOOL redraw);"

	<stdcall: int32 SetScrollInfo handle int32 SCROLLINFO* bool>
	^self invalidCall: _failureCode!

setThreadDpiAwarenessContext: dpiContext
	"Invoke the SetThreadDpiAwarenessContext() function of the module wrapped by the receiver.
	Helpstring: Set the DPI awareness for the current thread to the provided value.

		INT_PTR __stdcall SetThreadDpiAwarenessContext(
			INT_PTR dpiContext);"

	<stdcall: intptr SetThreadDpiAwarenessContext intptr>
	^self invalidCall: _failureCode!

setThreadDpiHostingBehavior: value
	"Invoke the SetThreadDpiHostingBehavior() function of the module wrapped by the receiver.
	Helpstring: Sets the current thread's DPI_HOSTING_BEHAVIOR. This behavior allows windows created in the thread to host child windows with a different DPI_AWARENESS_CONTEXT.

		DPI_HOSTING_BEHAVIOR __stdcall SetThreadDpiHostingBehavior(
			DPI_HOSTING_BEHAVIOR value);"

	<stdcall: int32 SetThreadDpiHostingBehavior int32>
	^self invalidCall: _failureCode!

setWindowLong: hWnd nIndex: nIndex dwNewLong: dwNewLong
	"Change an attribute of the specified window, setting 
	a signed 32-bit (long) value at the specified offset into 
	the extra window memory of a window.
		LONG SetWindowLong(
			HWND hWnd,		// handle of window
			int nIndex,		// offset of value to set
			LONG dwNewLong 	// new value
		);"

	<stdcall: int32 SetWindowLongW handle int32 int32>
	^self invalidCall: _failureCode!

setWindowLongPtr: hWnd nIndex: nIndex dwNewLong: dwNewLong
	"N.B. This is not equivalent to SetWindowLong, even on 32-bit Windows. The documentation is misleading in this regard - 32/64-bit compatibility using SetWindowLongPtr in C is achieved by defining a macro."

	<stdcall: intptr SetWindowLongPtrW handle int32 intptr>
	^self invalidCall: _failureCode!

setWindowPlacement: aWindowHandle lpwndpl: aWinWINDOWPLACEMENT
	"Set the show state and the restored, minimized, and maximized positions 
	of the specified window. Answer whether the request succeeded.
		BOOL SetWindowPlacement(
			HWND hWnd,					// handle of window
			CONST WINDOWPLACEMENT *lpwndpl 	// address of structure with position data
			);"

	<stdcall: bool SetWindowPlacement handle lpvoid>
	^self invalidCall: _failureCode!

setWindowPos: aWindowHandle hWndInsertAfter: hwndInsertAfter x: x y: y cx: cx cy: cy uFlags: flags
	"Change the size, position, and Z order of a child, pop-up, or top-level window.
	Windows are ordered according to their appearance on the screen. The topmost window 
	receives the highest rank and is the first window in the Z order. 
		BOOL SetWindowPos(
			HWND hWnd,			// handle of window
			HWND hWndInsertAfter,	// placement-order handle
			int X,				// horizontal position
			int Y,				// vertical position
			int cx,				// width
			int cy,				// height
			UINT uFlags 			// window-positioning flags
		);"

	<stdcall: bool SetWindowPos handle uint32 int32 int32 int32 int32 uint32>
	^self invalidCall: _failureCode!

setWindowULong: hWnd nIndex: nIndex dwNewLong: dwNewLong
	<stdcall: uint32 SetWindowLongW handle int32 uint32>
	^self invalidCall: _failureCode!

setWindowULongPtr: hWnd nIndex: nIndex dwNewLong: dwNewLong
	"N.B. This is not equivalent to SetWindowLong, even on 32-bit Windows. The documentation is misleading in this regard - 32/64-bit compatibility using SetWindowLongPtr in C is achieved by defining a macro."

	<stdcall: uintptr SetWindowLongPtrW handle int32 uintptr>
	^self invalidCall: _failureCode!

showScrollBar: hwnd wBar: wBar bShow: bShow
	"Invoke the ShowScrollBar() function of the module wrapped by the receiver.
	Helpstring: Shows or hides a scroll bar

		BOOL __stdcall ShowScrollBar(
			[in]wireHWND hwnd,
			[in]int wBar,
			[in]BOOL bShow);"

	<stdcall: bool ShowScrollBar handle int32 bool>
	^self invalidCall: _failureCode!

systemParametersInfo: uiAction uiParam: param1 pvParam: param2 fWinIni: update
	"
	BOOL SystemParametersInfo(
		UINT uiAction,	// system parameter to query or set
		UINT uiParam,	// depends on action to be taken
		PVOID pvParam,	// depends on action to be taken
		UINT fWinIni 	// user profile update flag
	);"

	<stdcall: bool SystemParametersInfoW uint32 uint32 lpvoid uint32>
	^self invalidCall: _failureCode!

systemParametersInfoForDpi: uiAction uiParam: param1 pvParam: param2 fWinIni: update dpi: dpi
	"
	BOOL SystemParametersInfoForDpi(
		UINT uiAction,	// system parameter to query or set
		UINT uiParam,	// depends on action to be taken
		PVOID pvParam,	// depends on action to be taken
		UINT fWinIni, 	// user profile update flag
		UINT dpi
	);"

	<stdcall: bool SystemParametersInfoForDpi uint32 uint32 lpvoid uint32 uint32>
	^self invalidCall: _failureCode!

trackMouseEvent: lpEventTrack
	"Invoke the TRACKMOUSEEVENT() function of the module wrapped by the receiver.
	Helpstring: Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time.

		BOOL __stdcall TRACKMOUSEEVENT(
			TRACKMOUSEEVENT* lpEventTrack);"

	<stdcall: bool TrackMouseEvent TRACKMOUSEEVENT*>
	^self invalidCall: _failureCode!

trackPopupMenu: hMenu uFlags: uFlags x: x y: y nReserved: reserved hWnd: hWnd prcRect: aRect
	"Display a pop-up menu at the specified location (anywhere on the screen) and track the selection of 
	items on that menu.
			BOOL TrackPopupMenu(
  			HMENU hMenu,			// handle of pop-up menu
			UINT uFlags,			// screen-position and mouse-button flags
			int x,				// horizontal position, in screen coordinates
			int y,				// vertical position, in screen coordinates
			int nReserved,			// reserved, must be zero
			HWND hWnd,			// handle of owner window
			CONST RECTL *prcRect	// points to RECT that specifies no-dismissal area
		);"

	<stdcall: bool TrackPopupMenu handle uint32 int32 int32 int32 handle RECTL*>
	^self invalidCall: _failureCode!

translateAccelerator: handleWindow haccl: handleAccelerators lpmsg: aMSG
	"Translate accelerator keys for menu commands, translating WM_KEYDOWN or WM_SYSKEYDOWN 
	messages to WM_COMMAND or WM_SYSCOMMAND messages if there is an entry for the key in the 
	accelerator table with handle, handleAccelerators, sending the WM_COMMAND or WM_SYSCOMMAND 
	message directly to the window procedure of the window identified by the handle, handleWindow,
	returning only when the window procedure returns.

		int TranslateAccelerator(
			HWND  hwnd,	// handle of destination window
			HACCEL  haccl,	// handle of accelerator table
			LPMSG  lpmsg 	// address of structure with message
		);	

	Answers true if the function succeeds, and has consumed the message. Answers false if the 
	functions fails. The exact error is available by sending KernelLibrary>>getLastError."

	<stdcall: bool TranslateAccelerator handle handle MSG*>
	^self invalidCall: _failureCode!

unregisterClass: classAtomOrStringName hInstance: instanceHandle
	"Remove a window class.
		BOOL UnregisterClass(
			LPCTSTR lpClassName,	// address of class name string
			HINSTANCE hInstance 	// handle of application instance
		);"

	<stdcall: bool UnregisterClassW lpvoid handle>
	^self invalidCall: _failureCode!

unregisterHotKey: aWindowHandle id: anIntegerId
	<stdcall: bool UnregisterHotKey handle int32>
	^self invalidCall: _failureCode!

validate: hWnd lpRect: aRECT
	"Remove aRECT from hWnd's update region (that portion of the
	windows client area that requires repainting).
		BOOL ValidateRect(
  			HWND hWnd,			// handle of window with changed update region  
			CONST RECT *lpRect		// address of rectangle coordinates 
		);"

	<stdcall: bool ValidateRect handle RECTL*>
	^self invalidCall: _failureCode!

windowFromDC: hDC
	"HWND WindowFromDC(
		[in] HDC hDC
	);"
	<stdcall: handle WindowFromDC handle>
	^self invalidCall: _failureCode!

windowFromPoint: aPOINTL
	"The WindowFromPoint function retrieves the handle of the window that contains the
	specified point. 
		HWND WindowFromPoint(
			POINT Point); 	// structure with point
 
	Return Values:
	If the function succeeds, the return value is the handle of the window that contains the 
	point. If no window exists at the given point, the return value is NULL. 

	Remarks:
	The WindowFromPoint function does not retrieve the handle of a hidden or disabled 
	window, even if the point is within the window. Use the ChildWindowFromPoint function 
	for a nonrestrictive search."

	<stdcall: handle WindowFromPoint POINTL>
	^self invalidCall: _failureCode!

withDpiHostingBehavior: anInteger do: aNiladicBlock
	"Evaluate the niladic <BlockClosure> argument, aNiladicBlock, with the DPI hosting behaviour identified by the <integer> first argument.
	This can be used to create windows with mixed DPI hosting capability."

	| current |
	current := self setThreadDpiHostingBehavior: anInteger.
	^aNiladicBlock ensure: [self setThreadDpiHostingBehavior: current]! !

!OS.UserLibrary categoriesForMethods!
adjustWindowRectExForDpi:dwStyle:bMenu:dwExStyle:dpi:!public!win32 functions-coordinate space and transformation! !
animateWindow:dwTime:dwFlags:!**auto generated**!public! !
areDpiAwarenessContextsEqual:dpiContextB:!**auto generated**!public!win32 functions-high DPI! !
attachThreadInput:idAttachTo:fAttach:!public!win32 functions-message and message queue! !
beginDeferWindowPos:!**auto generated**!public! !
beginPaint:lpPaint:!public!win32 functions-painting and drawing! !
bringWindowToTop:!public!win32 functions-window! !
callWindowProc:hWnd:msg:wParam:lParam:!public!win32 functions-window procedure! !
childWindowFromPointEx:pt:uFlags:!public!win32 functions-window! !
clientToScreen:lpPoint:!**auto generated**!public!win32 functions-coordinate space and transformation! !
closeClipboard!public!win32 functions-clipboard! !
countClipboardFormats!public!win32 functions-clipboard! !
createAcceleratorTable:cEntries:!public!win32 functions-keyboard accelerator! !
createMenu!public!win32 functions-menu! !
createPopupMenu!public!win32 functions-menu! !
createWindowEx:lpClassName:lpWindowName:dwStyle:x:y:nWidth:nHeight:hWndParent:hMenu:hInstance:lpParam:!public!win32 functions-window! !
deferWindowPos:hwnd:hwndInsertAfter:x:y:cx:cy:uFlags:!**auto generated**!public! !
deleteMenu:uPosition:uFlags:!public!win32 functions-menu! !
destroyAcceleratorTable:!public!win32 functions-keyboard accelerator! !
destroyMenu:!public!win32 functions-menu! !
disableProcessWindowsGhosting!public!win32 functions-message and message queue! !
drawFocusRect:lprc:!public!win32 functions-painting and drawing! !
drawFrameControl:lprc:uType:uState:!**auto generated**!public!win32 functions-painting and drawing! !
drawMenuBar:!public!win32 functions-menu! !
emptyClipboard!public!win32 functions-clipboard! !
enableNonClientDpiScaling:!**auto generated**!public!win32 functions-high DPI! !
enableNonClientDpiScalingIfNecessary:!high DPI!public! !
enableScrollBar:wSBFlags:wArrows:!**auto generated**!public!win32 functions-scroll bar! !
endDeferWindowPos:!**auto generated**!public! !
endPaint:lpPaint:!public!win32 functions-painting and drawing! !
enumChildWindows:lpEnumFunction:lParam:!**auto generated**!public! !
enumClipboardFormats:!public!win32 functions-clipboard! !
enumDisplayDevices:iDevNum:lpDisplayDevice:dwFlags:!**auto generated**!public! !
enumDisplayMonitors:lprcClip:lpfnEnum:dwData:!**auto generated**!public!win32 functions-multiple display monitors! !
enumThreadWindows:lpfn:lParam:!public!win32 functions-window! !
enumWindows:lParam:!**auto generated**!public! !
findWindow:lpWindowName:!public!win32 functions-filled shape! !
flashWindowEx:!public!win32 functions-error handling! !
getAncestor:gaFlags:!**auto generated**!public! !
getAwarenessFromDpiAwarenessContext:!**auto generated**!public!win32 functions-high DPI! !
getCapture!public!win32 functions-mouse input! !
getClassAtom:!public!win32 functions-window class! !
getClassLongPtr:nIndex:!public!win32 functions-window class! !
getClassName:!public!win32 functions-window class! !
getClassName:lpClassName:nMaxCount:!public!win32 functions-window class! !
getClientRect:lpRect:!public!win32 functions-window! !
getClipboardData:!public!win32 functions-clipboard! !
getClipboardFormatName:lpszFormatName:cchMaxCount:!public!win32 functions-clipboard! !
getDialogControlDpiChangeBehavior:!**auto generated**!public!win32 functions-high DPI! !
getDialogDpiChangeBehavior:!**auto generated**!public!win32 functions-high DPI! !
getDlgCtrlID:!public!win32 functions-dialog box! !
getDpiAwarenessContextForProcess:!**auto generated**!public!win32 functions-high DPI! !
getDpiForWindow:!**auto generated**!public!win32 functions-high DPI! !
getDpiFromDpiAwarenessContext:!**auto generated**!public!win32 functions-high DPI! !
getFocus!public!win32 functions-keyboard input! !
getForegroundWindow!public!win32 functions-keyboard input! !
getLastActivePopup:!public!win32 functions-window! !
getLastInputInfo:!public!win32 functions-keyboard input!win32 functions-mouse input!win32 functions-timer!win32 functions-window! !
getMenuInfo:lpcmi:!public!win32 functions-menu! !
getMenuItemInfo:uItem:fByPosition:lpmii:!public!win32 functions-menu! !
getMenuItemRect:hMenu:uItem:lprcItem:!public!win32 functions-menu! !
getMonitorInfo:lpmi:!public!win32 functions-multiple display monitors! !
getNextDlgGroupItem:hCtl:bPrevious:!public!win32 functions-window! !
getNextDlgTabItem:hCtl:bPrevious:!public!win32 functions-window! !
getProp:lpString:!public!win32 functions-window property! !
getScrollInfo:nBar:lpsi:!**auto generated**!public!win32 functions-scroll bar! !
getSystemDpiForProcess:!**auto generated**!public!win32 functions-high DPI! !
getSystemMenu:bRevert:!public!win32 functions-menu!win32 functions-system information! !
getSystemMetricsForDpi:dpi:!public!win32 functions-high DPI! !
getThreadDpiAwarenessContext!**auto generated**!public!win32 functions-high DPI! !
getThreadDpiHostingBehavior!**auto generated**!public!win32 functions-high DPI! !
getTopWindow:!public!win32 functions-window! !
getUpdateRect:lpRect:bErase:!public!win32 functions-painting and drawing! !
getWindow:uCmd:!public!win32 functions-window! !
getWindowDC:!public!win32 functions-device context! !
getWindowDpiAwarenessContext:!**auto generated**!public!win32 functions-high DPI! !
getWindowDpiHostingBehavior:!**auto generated**!public!win32 functions-high DPI! !
getWindowExStyle:!public!win32 functions-window! !
getWindowLong:nIndex:!public!win32 functions-window! !
getWindowLongPtr:nIndex:!public!win32 functions-window class! !
getWindowPlacement:lpwndpl:!public!win32 functions-window! !
getWindowRect:lpRect:!public!win32 functions-window! !
getWindowStyle:!public!win32 functions-window! !
getWindowText:!public!win32 functions-window! !
getWindowText:lpString:nMaxCount:!public!win32 functions-window! !
getWindowTextLength:!public!win32 functions-window! !
getWindowThreadProcessId:lpdwProcessId:!**auto generated**!public!win32 functions-window! !
getWindowULong:nIndex:!public!win32 functions-window class! !
getWindowULongPtr:nIndex:!public!win32 functions-window class! !
inheritWindowMonitor:hwndInherit:!**auto generated**!public!win32 functions-high DPI! !
initialize!initializing!public! !
insertMenuItem:uItem:fByPosition:lpmii:!public!win32 functions-menu! !
invalidate:lpRect:bErase:!public!win32 functions-painting and drawing! !
invalidateRgn:hRgn:bErase:!public!win32 functions-painting and drawing! !
isChild:hWnd:!public!win32 functions-window! !
isClipboardFormatAvailable:!public!win32 functions-clipboard! !
isDialog:!public!queries! !
isDialogMessage:lpMsg:!public!win32 functions-dialog box! !
isForegroundProcess:!enquiries!public! !
isIconic:!public!win32 functions-icon! !
isProcessDPIAware!**auto generated**!public!win32 functions-high DPI! !
isProcessSystemDpiAware!high DPI!public!testing! !
isValidDpiAwarenessContext:!**auto generated**!public!win32 functions-high DPI! !
isWindowUnicode:!public!win32 functions-window!win32 functions-window procedure! !
isZoomed:!public!win32 functions-window! !
loadAccelerators:lpTableName:!public!win32 functions-keyboard accelerator! !
loadMenu:lpMenuName:!public!win32 functions-menu! !
lockWindowUpdate:!public!win32 functions-painting and drawing! !
logicalToPhysicalPoint:lpPoint:!**auto generated**!public!win32 functions-high DPI! !
logicalToPhysicalPointForPerMonitorDPI:lpPoint:!**auto generated**!public!win32 functions-high DPI! !
makeDragList:!public!win32 functions-list box! !
mapRectangle:from:to:!geometry!public! !
mapWindowPoints:hWndTo:lpPoints:cPoints:!public!win32 functions-coordinate space and transformation! !
modifyMenu:uPosition:uFlags:uIDNewItem:lpNewItem:!public!win32 functions-menu! !
monitorFromPoint:dwFlags:!**auto generated**!public!win32 functions-multiple display monitors! !
monitorFromRect:dwFlags:!**auto generated**!public!win32 functions-multiple display monitors! !
monitorFromWindow:dwFlags:!**auto generated**!public!win32 functions-multiple display monitors! !
openClipboard:!public!win32 functions-clipboard! !
physicalToLogicalPoint:lpPoint:!**auto generated**!public!win32 functions-high DPI! !
physicalToLogicalPointForPerMonitorDPI:lpPoint:!**auto generated**!public!win32 functions-high DPI! !
printWindow:hdcBlt:nFlags:!public!win32 functions-painting and drawing! !
realChildWindowFromPoint:ptParentClientCoords:!**auto generated**!public!win32 functions-window! !
redrawWindow:lprcUpdate:hrgnUpdate:flags:!public!win32 functions-painting and drawing! !
registerClass:!public!win32 functions-window class! !
registerClipboardFormat:!public!win32 functions-clipboard! !
registerHotKey:id:fsModifiers:vk:!public!win32 functions-keyboard input! !
registerWindowMessage:!public!win32 functions-message and message queue! !
releaseCapture!public!win32 functions-mouse input! !
removeMenu:uPosition:uFlags:!public!win32 functions-menu! !
removeProp:lpString:!public!win32 functions-window property! !
screenToClient:lpPoint:!**auto generated**!public!win32 functions-coordinate space and transformation! !
scrollWindowEx:dx:dy:prcScroll:prcClip:hrgnUpdate:prcUpdate:flags:!**auto generated**!public!win32 functions-scroll bar! !
sendMessage:msg:wParam:lpParam:!public!win32 functions-message and message queue! !
sendMessage:msg:wpParam:lpParam:!public!win32 functions-message and message queue! !
sendMessageU:msg:wParam:lParam:!public!win32 functions-message and message queue! !
sendMessageU:msg:wParam:lpParam:!public!win32 functions-message and message queue! !
setCapture:!public!win32 functions-mouse input! !
setClassLong:nIndex:dwNewLong:!public!win32 functions-window class! !
setClipboardData:hMem:!public!win32 functions-clipboard! !
setDialogControlDpiChangeBehavior:mask:values:!**auto generated**!public!win32 functions-high DPI! !
setDialogDpiChangeBehavior:mask:values:!**auto generated**!public!win32 functions-high DPI! !
setFocus:!public!win32 functions-keyboard input! !
setForegroundWindow:!public!win32 functions-keyboard input! !
setLayeredWindowAttributes:lcrKey:bAlpha:dwFlags:!public!win32 functions-window! !
setMenu:hMenu:!public!win32 functions-menu! !
setMenuDefaultItem:uItem:fByPos:!public!win32 functions-menu! !
setMenuInfo:lpcmi:!public!win32 functions-menu! !
setMenuItemInfo:uItem:fByPosition:lpmii:!public!win32 functions-menu! !
setParent:hWndNewParent:!public!win32 functions-window! !
setProcessDPIAware!**auto generated**!public!win32 functions-high DPI! !
setProcessDpiAwarenessContext:!**auto generated**!public!win32 functions-high DPI! !
setProp:lpString:hData:!public!win32 functions-window property! !
setScrollInfo:nBar:lpsi:redraw:!**auto generated**!public!win32 functions-scroll bar! !
setThreadDpiAwarenessContext:!**auto generated**!public!win32 functions-high DPI! !
setThreadDpiHostingBehavior:!**auto generated**!public!win32 functions-high DPI! !
setWindowLong:nIndex:dwNewLong:!public!win32 functions-window class! !
setWindowLongPtr:nIndex:dwNewLong:!public!win32 functions-window class! !
setWindowPlacement:lpwndpl:!public!win32 functions-window! !
setWindowPos:hWndInsertAfter:x:y:cx:cy:uFlags:!public!win32 functions-window! !
setWindowULong:nIndex:dwNewLong:!public!win32 functions-window class! !
setWindowULongPtr:nIndex:dwNewLong:!public!win32 functions-window class! !
showScrollBar:wBar:bShow:!**auto generated**!public!win32 functions-scroll bar! !
systemParametersInfo:uiParam:pvParam:fWinIni:!public!win32 functions-string manipulation! !
systemParametersInfoForDpi:uiParam:pvParam:fWinIni:dpi:!public!win32 functions-string manipulation! !
trackMouseEvent:!public!win32 functions-mouse input! !
trackPopupMenu:uFlags:x:y:nReserved:hWnd:prcRect:!public!win32 functions-menu! !
translateAccelerator:haccl:lpmsg:!public!win32 functions-keyboard accelerator! !
unregisterClass:hInstance:!public!win32 functions-window class! !
unregisterHotKey:id:!public!win32 functions-keyboard input! !
validate:lpRect:!public!win32 functions-painting and drawing! !
windowFromDC:!public!win32 functions-device context! !
windowFromPoint:!public!win32 functions-window! !
withDpiHostingBehavior:do:!high DPI!operations!public! !
!

!OS.UserLibrary class methodsFor!

desiredDpiAwareness
	"Answer the <DpiAwareness> to be requested when the process starts. Note that this may not be the same as the current system DPI awareness because:
		- the desired awareness can be configured for future image starts, but cannot take effect in the current session
		- the awareness achieved may be different to that requested, e.g. in an application with a manifest that specifies a different awareness."

	^UI.DpiAwareness fromHandle: DesiredDpiAwarenessContext!

desiredDpiAwareness: aDpiAwareness
	"Set the DPI awareness mode to be requested when this image is restarted. N.B. Windows does not support changing the DPI awareness of an entire running process, so this cannot take effect until restart."

	DesiredDpiAwarenessContext := aDpiAwareness handle!

dpiAwareness
	"Answer the <DpiAwareness> context established for this Dolphin process. Note that this cannot be changed in a running session, only on restart."

	^UI.DpiAwareness fromHandle: DpiAwarenessContext!

dpiAwarenessContext
	"Answer the <integer> dpi awareness context handle established for this Dolphin process. Note that this cannot be changed in a running session, only on restart."

	^DpiAwarenessContext! !

!OS.UserLibrary class categoriesForMethods!
desiredDpiAwareness!accessing!high DPI!public! !
desiredDpiAwareness:!accessing!high DPI!public! !
dpiAwareness!accessing!high DPI!public! !
dpiAwarenessContext!accessing!public! !
!

!UI.ResourceIdentifier methodsFor!

canShow
	^self resourceOrNil notNil and: [self owningClass respondsTo: #show:]!

fixupIcon
	"Private - Now try to determine the icon to use from the class of the top level object in the 
	resource. We perform a non-realizing load of the resource object."

	| icon stlInFilerClass |
	stlInFilerClass := #{Kernel.STLInFiler} value.
	icon := [(stlInFilerClass on: self resource readStream) basicNext icon] on: Error do: [:x | x icon].
	self icon: icon.
	^icon!

icon	
	^self propertyAt: #_icon ifAbsent: [self fixupIcon]!

loadWithContext: context 
	"Load and answer the resource represented by the receiver with context context."

	^self loadWithContext: context forEdit: false!

loadWithContext: context forEdit: aBoolean
	^self resource ifNotNil: [:resource | context loadViewResource: resource forEdit: aBoolean]!

show
	"Display the resource identified by the receiver in whatever way is appropriate. 
	Answer the <Presenter> opended to display it."

	^self owningClass show: self name.
! !

!UI.ResourceIdentifier categoriesForMethods!
canShow!public!testing! !
fixupIcon!helpers!private! !
icon!accessing!development!public! !
loadWithContext:!operations!public! !
loadWithContext:forEdit:!operations!private! !
show!operations!public! !
!

"End of package definition"!

