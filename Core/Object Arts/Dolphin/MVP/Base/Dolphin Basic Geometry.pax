| package |
package := Package name: 'Dolphin Basic Geometry'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin 🐬 Smalltalk Basic Geometry.
Copyright © Object Arts Ltd. 1997-2018. Portions Copyright (c) CGI Group (Europe) Ltd. 1997.
'.


package setClassNames: #(
	#{External.POINT}
	#{External.POINTArray}
	#{External.POINTLArray}
	#{External.RECT}
	#{Graphics.Point}
	#{Graphics.Point3D}
	#{Graphics.Rectangle}
	#{OS.POINTL}
	#{OS.RECTL}
).

package setMethodNames: #(
	#(#{Core.ArithmeticValue} #_expandRectangle:)
	#(#{Core.ArithmeticValue} #_insetRectangle:)
	#(#{Core.ArithmeticValue} #_offsetRectangle:)
	#(#{Core.ArithmeticValue} #addToPoint:)
	#(#{Core.ArithmeticValue} #asGenericPoint)
	#(#{Core.ArithmeticValue} #asPoint)
	#(#{Core.ArithmeticValue} #divideIntoPoint:)
	#(#{Core.ArithmeticValue} #divideIntoPoint3D:)
	#(#{Core.ArithmeticValue} #multiplyByPoint:)
	#(#{Core.ArithmeticValue} #subtractFromPoint:)
	#(#{Core.Number} #@)
	#(#{Core.Number} #addToPoint:)
	#(#{Core.Number} #asGenericPoint)
	#(#{Core.Number} #asPoint)
	#(#{Core.Number} #asPoint3D)
	#(#{Core.Number} #divideIntoPoint:)
	#(#{Core.Number} #multiplyByPoint:)
	#(#{Core.Number} #subtractFromPoint:)
	#(#{OS.UserLibrary} #subtractRect:lprcSrc1:lprcSrc2:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Core.Object
	subclass: #'Graphics.Rectangle'
	instanceVariableNames: 'origin corner'
	classVariableNames: 'Empty'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.ArithmeticValue
	subclass: #'Graphics.Point'
	instanceVariableNames: 'x y'
	classVariableNames: 'Zero'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.ArithmeticValue
	subclass: #'Graphics.Point3D'
	instanceVariableNames: 'x y z'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.Structure
	subclass: #'External.POINT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.Structure
	subclass: #'External.RECT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.ExternalArray
	subclass: #'External.POINTArray'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.POINTArray
	subclass: #'External.POINTLArray'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.POINT
	subclass: #'OS.POINTL'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_OffsetOf_x' -> 16r0. '_OffsetOf_y' -> 16r4. '_POINTL_Size' -> 16r8 }!
External.RECT
	subclass: #'OS.RECTL'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_bottom' -> 16rC.
			'_OffsetOf_left' -> 16r0.
			'_OffsetOf_right' -> 16r8.
			'_OffsetOf_top' -> 16r4.
			'_RECTL_Size' -> 16r10
		}!

"Loose Methods"!

!Core.ArithmeticValue methodsFor!

_expandRectangle: rect
	"Private - Expand the <Rectangle>, rect, by the magnitude of the receiver.
	 All sides of the rectangle are expanded by the specified amount.
	Double-dispatched from the Rectangle itself."

	^rect species
		origin: (rect origin - self)
		corner: (rect corner + self)!

_insetRectangle: aRectangle 
	"Private - Inset the <Rectangle> argument by the magnitude of the receiver. All sides of the
	rectangle are inset by the specified amount. Double-dispatched from the Rectangle itself."

	^aRectangle species origin: aRectangle origin + self corner: aRectangle corner - self!

_offsetRectangle: aRectangle 
	"Private - Offset the <Rectangle> argument by the magnitude of the receiver.
	Double-dispatched from the Rectangle itself."

	^aRectangle species origin: aRectangle origin + self corner: aRectangle corner + self!

addToPoint: aPoint
	"Private - Answer the <point> result of adding the receiver to the known <Point> argument, by coercing the less general of it and the receiver. 
	Can be overridden by subclasses that can implement more efficiently."

	^aPoint retry: #+ coercing: self!

asGenericPoint
	"Answer a <point> with the receiver as both co-ordinates."

	^self asPoint!

asPoint
	"Answer a Point with the receiver as both co-ordinates."

	^self subclassResponsibility!

divideIntoPoint: aPoint
	"Private - Answer the result of dividing the receiver into the known <point> argument, by coercing the less general of it and the receiver. 
	Overridden by subclasses which can implement more efficiently."

	^aPoint retry: #/ coercing: self!

divideIntoPoint3D: aPoint3D
	"Private - Answer the result of dividing the receiver into the known <Point3D> argument, by coercing the less general of it and the receiver. 
	Can be overridden by subclasses that can implement more efficiently."

	^aPoint3D retry: #/ coercing: self!

multiplyByPoint: aPoint
	"Private - Answer the result of multiplying the known <point> argument by the receiver, by coercing the less general of it and the recever.
	Can be overridden by subclasses that can implement more efficiently."

	^aPoint retry: #* coercing: self!

subtractFromPoint: aPoint
	"Private - Answer the result of subtracting the receiver from the known <point> argument, by coercing the less general of it and the receiver. 
	Can be overridden by subclasses that can implement more efficiently."

	^aPoint retry: #- coercing: self! !
!Core.ArithmeticValue categoriesForMethods!
_expandRectangle:!double dispatch!private! !
_insetRectangle:!double dispatch!private! !
_offsetRectangle:!double dispatch!private! !
addToPoint:!double dispatch!private! !
asGenericPoint!converting!public! !
asPoint!converting!public! !
divideIntoPoint:!double dispatch!private! !
divideIntoPoint3D:!double dispatch!private! !
multiplyByPoint:!double dispatch!private! !
subtractFromPoint:!double dispatch!private! !
!

!Core.Number methodsFor!

@ yCoord
	"Answer a Point with the receiver as X and the argument as Y.
	The traditional Make Point primitive is present because this operation may be
	performed a few thousand times when opening a complex window (for example).
	The primitive is simply a VM level implementation of #x:y:, and does not fail."

	^Graphics.Point x: self y: yCoord!

addToPoint: aPoint
	"Private - Answer the <point> result of adding the receiver to the known <point> argument."

	^(aPoint x + self) @ (aPoint y + self)!

asGenericPoint
	"Answer a <point> with the receiver as both co-ordinates."

	^self @ self!

asPoint
	"Answer a Point with the receiver as both co-ordinates."

	^self @ self!

asPoint3D
	"Answer a Point with the receiver as all three co-ordinates."

	^self @ self @ self!

divideIntoPoint: aPoint
	"Private - Answer the result of dividing the receiver into the known <Point> argument, by coercing the less general of it and the receiver. "

	^(aPoint x / self) @ (aPoint y / self)!

multiplyByPoint: aPoint
	"Private - Answer the result of multiplying the receiver by the known <Point> argument."

	^(aPoint x * self) @ (aPoint y * self)!

subtractFromPoint: aPoint
	"Private - Answer the result of subtracting the receiver from the known <point> argument."

	^(aPoint x - self) @ (aPoint y - self)! !
!Core.Number categoriesForMethods!
@!converting!public! !
addToPoint:!double dispatch!private! !
asGenericPoint!converting!public! !
asPoint!converting!public! !
asPoint3D!converting!public! !
divideIntoPoint:!double dispatch!private! !
multiplyByPoint:!double dispatch!private! !
subtractFromPoint:!double dispatch!private! !
!

!OS.UserLibrary methodsFor!

subtractRect: lprcDst lprcSrc1: lprcSrc1 lprcSrc2: lprcSrc2
	<stdcall: bool SubtractRect RECTL* RECTL* RECTL*>
	^self invalidCall: _failureCode! !
!OS.UserLibrary categoriesForMethods!
subtractRect:lprcSrc1:lprcSrc2:!public!rectangle functions! !
!

"End of package definition"!

