| package |
package := Package name: 'Dolphin Basic Geometry'.
package paxVersion: 1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Basic Geometry.
Copyright (c) Object Arts Ltd. 1997-2018. Portions Copyright (c) CGI Group (Europe) Ltd. 1997.
'.

package classNames
	add: #ExternalPoint;
	add: #ExternalRectangle;
	add: #Point;
	add: #Point3D;
	add: #POINTArray;
	add: #POINTL;
	add: #POINTLArray;
	add: #RECT;
	add: #Rectangle;
	yourself.

package methodNames
	add: #ArithmeticValue -> #_expandRectangle:;
	add: #ArithmeticValue -> #_insetRectangle:;
	add: #ArithmeticValue -> #_offsetRectangle:;
	add: #ArithmeticValue -> #addToPoint:;
	add: #ArithmeticValue -> #addToPoint3D:;
	add: #ArithmeticValue -> #asGenericPoint;
	add: #ArithmeticValue -> #asPoint;
	add: #ArithmeticValue -> #divideIntoPoint:;
	add: #ArithmeticValue -> #divideIntoPoint3D:;
	add: #ArithmeticValue -> #multiplyByPoint:;
	add: #ArithmeticValue -> #multiplyByPoint3D:;
	add: #ArithmeticValue -> #subtractFromPoint:;
	add: #ArithmeticValue -> #subtractFromPoint3D:;
	add: #Number -> #@;
	add: #Number -> #addToPoint:;
	add: #Number -> #asPoint;
	add: #Number -> #asPoint3D;
	add: #Number -> #divideIntoPoint:;
	add: #Number -> #multiplyByPoint:;
	add: #Number -> #subtractFromPoint:;
	add: #UserLibrary -> #subtractRect:lprcSrc1:lprcSrc2:;
	add: 'DWORD class' -> #fromPoint:;
	yourself.

package globalNames
	add: #POINT;
	add: #RECTL;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	add: #POINT;
	add: #RECTL;
	yourself).

package setPrerequisites: #(
	'..\..\Base\Dolphin').

package!

"Class Definitions"!

Object subclass: #Rectangle
	instanceVariableNames: 'origin corner'
	classVariableNames: 'Empty'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ExternalStructure subclass: #ExternalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ExternalStructure subclass: #ExternalRectangle
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ExternalArray subclass: #POINTArray
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

POINTArray subclass: #POINTLArray
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ExternalPoint subclass: #POINTL
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_x _OffsetOf_y'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ExternalRectangle subclass: #RECT
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_bottom _OffsetOf_left _OffsetOf_right _OffsetOf_top'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ArithmeticValue subclass: #Point
	instanceVariableNames: 'x y'
	classVariableNames: 'Zero'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

ArithmeticValue subclass: #Point3D
	instanceVariableNames: 'x y z'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!

POINT := POINTL!

RECTL := RECT!


"Loose Methods"!

!ArithmeticValue methodsFor!

_expandRectangle: rect
	"Private - Expand the <Rectangle>, rect, by the magnitude of the receiver.
	 All sides of the rectangle are expanded by the specified amount.
	Double-dispatched from the Rectangle itself."

	^rect species
		origin: (rect origin - self)
		corner: (rect corner + self)!

_insetRectangle: aRectangle 
	"Private - Inset the <Rectangle> argument by the magnitude of the receiver. All sides of the
	rectangle are inset by the specified amount. Double-dispatched from the Rectangle itself."

	^aRectangle species origin: aRectangle origin + self corner: aRectangle corner - self!

_offsetRectangle: aRectangle 
	"Private - Offset the <Rectangle> argument by the magnitude of the receiver.
	Double-dispatched from the Rectangle itself."

	^aRectangle species origin: aRectangle origin + self corner: aRectangle corner + self!

addToPoint: aPoint
	"Private - Answer the <point> result of adding the receiver to the known <point> argument."

	^aPoint retry: #+ coercing: self
!

addToPoint3D: aPoint3D
	"Private - Answer the result of adding the receiver to the known Point3D, aPoint3D, by coercing 
	the less general of it and the receiver. Overridden by subclasses which can implement 
	more efficiently."

	^aPoint3D retry: #+ coercing: self
!

asGenericPoint
	"Answer a <point> with the receiver as both co-ordinates."

	^self asPoint!

asPoint
	"Answer the receiver"

	^self subclassResponsibility!

divideIntoPoint: aPoint
	"Private - Answer the <point> result of dividing the receiver into the known <point> argument."

	^aPoint retry: #/ coercing: self!

divideIntoPoint3D: aPoint3D
	"Private - Answer the result of dividing the receiver into the known Point3D, aPoint3D, by 
	coercing the less general of it and the receiver. Overridden by subclasses which 
	can implement more efficiently."

	^aPoint3D retry: #/ coercing: self!

multiplyByPoint: aPoint
	"Private - Answer the <point> result of multiplying the the known <point> argument by the receiver."

	^aPoint retry: #* coercing: self!

multiplyByPoint3D: aPoint3D
	"Private - Answer the result of multiplying the known Point3D, aPoint3D,
	by the receiver, by coercing the less general of it and the recever.
	Overridden by subclasses which can implement more efficiently."

	^aPoint3D retry: #* coercing: self!

subtractFromPoint: aPoint
	"Private - Answer the <point> result of subtracting the receiver from the the known <point> argument."

	^aPoint retry: #- coercing: self!

subtractFromPoint3D: aPoint3D
	"Private - Answer the result of subtracting the receiver from the known Point3D,
	aPoint3D, by coercing the less general of it and the receiver. Overridden by 
	subclasses which can implement more efficiently."

	^aPoint3D retry: #- coercing: self
! !

!ArithmeticValue categoriesForMethods!
_expandRectangle:!double dispatch!private! !
_insetRectangle:!double dispatch!private! !
_offsetRectangle:!double dispatch!private! !
addToPoint:!double dispatch!private! !
addToPoint3D:!double dispatch!private! !
asGenericPoint!converting!double dispatch!public! !
asPoint!converting!public! !
divideIntoPoint:!double dispatch!private! !
divideIntoPoint3D:!double dispatch!private! !
multiplyByPoint:!double dispatch!private! !
multiplyByPoint3D:!double dispatch!private! !
subtractFromPoint:!double dispatch!private! !
subtractFromPoint3D:!double dispatch!private! !
!

!DWORD class methodsFor!

fromPoint: aPoint
	"Private - Answer a new instance of the receiver with high and low
	words set from aPoint assuming its co-ordinates to be 16-bit signed
	integer values, with X in the low-word. This instantiator is somewhat
	similar to the Windows MAKEPOINT macro."

	^(self new)
		lowSWord: aPoint x;
		highSWord: aPoint y;
		yourself! !

!DWORD class categoriesForMethods!
fromPoint:!instance creation!private! !
!

!Number methodsFor!

@ yCoord 
	"Answer a Point with the receiver as X and the argument as Y.
	The traditional Make Point primitive is present because this operation may be
	performed a few thousand times when opening a complex window (for example).
	The primitive is simply a VM level implementation of #x:y:, and does not fail."

	^Point x: self y: yCoord!

addToPoint: aPoint
	"Private - Answer the <point> result of adding the receiver to the known <point> argument."

	^Point x: aPoint x + self y: aPoint y + self!

asPoint
	"Answer a Point with the receiver as both co-ordinates."

	^self @ self!

asPoint3D
	"Answer a Point with the receiver as all three co-ordinates."

	^self @ self @ self!

divideIntoPoint: aPoint
	"Private - Answer the <point> result of dividing the receiver into the known <point> argument."

	^Point x: aPoint x / self y: aPoint y / self!

multiplyByPoint: aPoint
	"Private - Answer the <point> result of multiplying the the known <point> argument by the receiver."

	^Point x: aPoint x * self y: aPoint y * self!

subtractFromPoint: aPoint
	"Private - Answer the <point> result of subtracting the receiver from the the known <point> argument."

	^Point x: aPoint x - self y: aPoint y - self! !

!Number categoriesForMethods!
@!converting!public! !
addToPoint:!double dispatch!private! !
asPoint!converting!public! !
asPoint3D!converting!public! !
divideIntoPoint:!double dispatch!private! !
multiplyByPoint:!double dispatch!private! !
subtractFromPoint:!double dispatch!private! !
!

!UserLibrary methodsFor!

subtractRect: lprcDst lprcSrc1: lprcSrc1 lprcSrc2: lprcSrc2
	<stdcall: bool SubtractRect RECT* RECT* RECT*>
	^self invalidCall: _failureCode! !

!UserLibrary categoriesForMethods!
subtractRect:lprcSrc1:lprcSrc2:!public!rectangle functions! !
!

"End of package definition"!

