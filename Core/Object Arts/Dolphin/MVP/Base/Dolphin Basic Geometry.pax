| package |
package := Package name: 'Dolphin Basic Geometry'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Basic Geometry.
Copyright (c) Object Arts Ltd. 1997-2018. Portions Copyright (c) CGI Group (Europe) Ltd. 1997.
'.


package setClassNames: #(
	#{External.POINT}
	#{External.RECT}
	#{Graphics.Point}
	#{Graphics.Point3D}
	#{Graphics.Rectangle}
	#{OS.POINTL}
	#{OS.RECTL}
).

package setMethodNames: #(
	#(#{Core.ArithmeticValue} #_expandRectangle:)
	#(#{Core.ArithmeticValue} #_insetRectangle:)
	#(#{Core.ArithmeticValue} #_offsetRectangle:)
	#(#{Core.ArithmeticValue} #asPoint)
	#(#{Core.Number} #@)
	#(#{Core.Number} #asPoint)
	#(#{Core.Number} #asPoint3D)
	#(#{External.DWORD class} #fromPoint:)
	#(#{OS.UserLibrary} #subtractRect:lprcSrc1:lprcSrc2:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Core.Object subclass: #'Graphics.Rectangle'
	instanceVariableNames: 'origin corner'
	classVariableNames: 'Empty'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.ArithmeticValue subclass: #'Graphics.Point'
	instanceVariableNames: 'x y'
	classVariableNames: 'Zero'
	imports: #(#{Kernel.VMConstants private})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.ArithmeticValue subclass: #'Graphics.Point3D'
	instanceVariableNames: 'x y z'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.Structure subclass: #'External.POINT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.Structure subclass: #'External.RECT'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.POINT subclass: #'OS.POINTL'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'_OffsetOf_x' -> 16r0.
		'_OffsetOf_y' -> 16r4.
		'_POINTL_Size' -> 16r8
	}!
External.RECT subclass: #'OS.RECTL'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'_OffsetOf_bottom' -> 16rC.
		'_OffsetOf_left' -> 16r0.
		'_OffsetOf_right' -> 16r8.
		'_OffsetOf_top' -> 16r4.
		'_RECTL_Size' -> 16r10
	}!

"Loose Methods"!

!Core.ArithmeticValue methodsFor!

_expandRectangle: rect
	"Private - Expand the <Rectangle>, rect, by the magnitude of the receiver.
	 All sides of the rectangle are expanded by the specified amount.
	Double-dispatched from the Rectangle itself."

	^rect species
		origin: (rect origin - self)
		corner: (rect corner + self)!

_insetRectangle: aRectangle 
	"Private - Inset the <Rectangle> argument by the magnitude of the receiver. All sides of the
	rectangle are inset by the specified amount. Double-dispatched from the Rectangle itself."

	^aRectangle species origin: aRectangle origin + self corner: aRectangle corner - self!

_offsetRectangle: aRectangle 
	"Private - Offset the <Rectangle> argument by the magnitude of the receiver.
	Double-dispatched from the Rectangle itself."

	^aRectangle species origin: aRectangle origin + self corner: aRectangle corner + self!

asPoint
	"Answer a Point with the receiver as both co-ordinates."

	^self subclassResponsibility! !
!Core.ArithmeticValue categoriesForMethods!
_expandRectangle:!double dispatch!private! !
_insetRectangle:!double dispatch!private! !
_offsetRectangle:!double dispatch!private! !
asPoint!converting!public! !
!

!Core.Number methodsFor!

@ yCoord
	"Answer a Point with the receiver as X and the argument as Y.
	The traditional Make Point primitive is present because this operation may be
	performed a few thousand times when opening a complex window (for example).
	The primitive is simply a VM level implementation of #x:y:, and does not fail."

	^Graphics.Point x: self y: yCoord!

asPoint
	"Answer a Point with the receiver as both co-ordinates."

	^self @ self!

asPoint3D
	"Answer a Point with the receiver as all three co-ordinates."

	^self @ self @ self! !
!Core.Number categoriesForMethods!
@!converting!public! !
asPoint!converting!public! !
asPoint3D!converting!public! !
!

!External.DWORD class methodsFor!

fromPoint: aPoint
	"Private - Answer a new instance of the receiver with high and low
	words set from aPoint assuming its co-ordinates to be 16-bit signed
	integer values, with X in the low-word. This instantiator is somewhat
	similar to the Windows MAKEPOINT macro."

	^(self new)
		lowSWord: aPoint x;
		highSWord: aPoint y;
		yourself! !
!External.DWORD class categoriesForMethods!
fromPoint:!instance creation!private! !
!

!OS.UserLibrary methodsFor!

subtractRect: lprcDst lprcSrc1: lprcSrc1 lprcSrc2: lprcSrc2
	<stdcall: bool SubtractRect RECTL* RECTL* RECTL*>
	^self invalidCall: _failureCode! !
!OS.UserLibrary categoriesForMethods!
subtractRect:lprcSrc1:lprcSrc2:!public!rectangle functions! !
!

"End of package definition"!

