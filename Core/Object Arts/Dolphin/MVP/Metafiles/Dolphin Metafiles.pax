| package |
package := Package name: 'Dolphin Metafiles'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Image class wrapper for Windows Enhanced Metafiles.
Copyright (c) Object Arts Ltd. 2010.'.

package basicPackageVersion: '6.1'.


package setClassNames: #(
	#{Graphics.Metafile}
	#{OS.EnhancedMetafileRecordTypes}
	#{OS.ENHMETAHEADER}
	#{OS.ENHMETARECORD}
).

package setMethodNames: #(
	#(#{OS.GDILibrary} #closeEnhMetaFile:)
	#(#{OS.GDILibrary} #copyEnhMetaFile:lpszFile:)
	#(#{OS.GDILibrary} #createEnhMetaFile:lpFileName:lpRect:lpDescription:)
	#(#{OS.GDILibrary} #deleteEnhMetaFile:)
	#(#{OS.GDILibrary} #enumEnhMetaFile:hemf:lpEnhMetaFunc:lpData:lpRect:)
	#(#{OS.GDILibrary} #getEnhMetaFile:)
	#(#{OS.GDILibrary} #getEnhMetaFileBits:cbBuffer:lpbBuffer:)
	#(#{OS.GDILibrary} #getEnhMetaFileDescription:cchBuffer:lpszDescription:)
	#(#{OS.GDILibrary} #getEnhMetaFileHeader:cbBuffer:lpemnh:)
	#(#{OS.GDILibrary} #getEnhMetaFilePaletteEntries:cbEntries:lppe:)
	#(#{OS.GDILibrary} #playEnhMetaFile:hemf:lpRect:)
	#(#{OS.GDILibrary} #playEnhMetaFileRecord:lpHandletable:lpEnhMetaRecord:nHandles:)
	#(#{OS.GDILibrary} #setEnhMetaFileBits:lpData:)
	#(#{UI.Clipboard} #getMetafile)
	#(#{UI.Clipboard} #getMetafileIfNone:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'..\Base\Dolphin Basic Geometry'
	'..\Graphics\Dolphin GDI Graphics'
	'..\Base\Dolphin MVP Base'
).

package!

"Class Definitions"!

Kernel.SharedPool
	subclass: #'OS.EnhancedMetafileRecordTypes'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'EMR_ABORTPATH' -> 16r44.
			'EMR_ALPHABLEND' -> 16r72.
			'EMR_ANGLEARC' -> 16r29.
			'EMR_ARC' -> 16r2D.
			'EMR_ARCTO' -> 16r37.
			'EMR_BEGINPATH' -> 16r3B.
			'EMR_BITBLT' -> 16r4C.
			'EMR_CHORD' -> 16r2E.
			'EMR_CLOSEFIGURE' -> 16r3D.
			'EMR_COLORCORRECTPALETTE' -> 16r6F.
			'EMR_COLORMATCHTOTARGETW' -> 16r79.
			'EMR_CREATEBRUSHINDIRECT' -> 16r27.
			'EMR_CREATECOLORSPACE' -> 16r63.
			'EMR_CREATECOLORSPACEW' -> 16r7A.
			'EMR_CREATEDIBPATTERNBRUSHPT' -> 16r5E.
			'EMR_CREATEMONOBRUSH' -> 16r5D.
			'EMR_CREATEPALETTE' -> 16r31.
			'EMR_CREATEPEN' -> 16r26.
			'EMR_DELETECOLORSPACE' -> 16r65.
			'EMR_DELETEOBJECT' -> 16r28.
			'EMR_ELLIPSE' -> 16r2A.
			'EMR_ENDPATH' -> 16r3C.
			'EMR_EOF' -> 16rE.
			'EMR_EXCLUDECLIPRECT' -> 16r1D.
			'EMR_EXTCREATEFONTINDIRECTW' -> 16r52.
			'EMR_EXTCREATEPEN' -> 16r5F.
			'EMR_EXTFLOODFILL' -> 16r35.
			'EMR_EXTSELECTCLIPRGN' -> 16r4B.
			'EMR_EXTTEXTOUTA' -> 16r53.
			'EMR_EXTTEXTOUTW' -> 16r54.
			'EMR_FILLPATH' -> 16r3E.
			'EMR_FILLRGN' -> 16r47.
			'EMR_FLATTENPATH' -> 16r41.
			'EMR_FRAMERGN' -> 16r48.
			'EMR_GDICOMMENT' -> 16r46.
			'EMR_GLSBOUNDEDRECORD' -> 16r67.
			'EMR_GLSRECORD' -> 16r66.
			'EMR_GRADIENTFILL' -> 16r76.
			'EMR_HEADER' -> 16r1.
			'EMR_INTERSECTCLIPRECT' -> 16r1E.
			'EMR_INVERTRGN' -> 16r49.
			'EMR_LINETO' -> 16r36.
			'EMR_MASKBLT' -> 16r4E.
			'EMR_MAX' -> 16r7A.
			'EMR_MIN' -> 16r1.
			'EMR_MODIFYWORLDTRANSFORM' -> 16r24.
			'EMR_MOVETOEX' -> 16r1B.
			'EMR_OFFSETCLIPRGN' -> 16r1A.
			'EMR_PAINTRGN' -> 16r4A.
			'EMR_PIE' -> 16r2F.
			'EMR_PIXELFORMAT' -> 16r68.
			'EMR_PLGBLT' -> 16r4F.
			'EMR_POLYBEZIER' -> 16r2.
			'EMR_POLYBEZIER16' -> 16r55.
			'EMR_POLYBEZIERTO' -> 16r5.
			'EMR_POLYBEZIERTO16' -> 16r58.
			'EMR_POLYDRAW' -> 16r38.
			'EMR_POLYDRAW16' -> 16r5C.
			'EMR_POLYGON' -> 16r3.
			'EMR_POLYGON16' -> 16r56.
			'EMR_POLYLINE' -> 16r4.
			'EMR_POLYLINE16' -> 16r57.
			'EMR_POLYLINETO' -> 16r6.
			'EMR_POLYLINETO16' -> 16r59.
			'EMR_POLYPOLYGON' -> 16r8.
			'EMR_POLYPOLYGON16' -> 16r5B.
			'EMR_POLYPOLYLINE' -> 16r7.
			'EMR_POLYPOLYLINE16' -> 16r5A.
			'EMR_POLYTEXTOUTA' -> 16r60.
			'EMR_POLYTEXTOUTW' -> 16r61.
			'EMR_REALIZEPALETTE' -> 16r34.
			'EMR_RECTANGLE' -> 16r2B.
			'EMR_RESERVED_105' -> 16r69.
			'EMR_RESERVED_106' -> 16r6A.
			'EMR_RESERVED_107' -> 16r6B.
			'EMR_RESERVED_108' -> 16r6C.
			'EMR_RESERVED_109' -> 16r6D.
			'EMR_RESERVED_110' -> 16r6E.
			'EMR_RESERVED_117' -> 16r75.
			'EMR_RESERVED_119' -> 16r77.
			'EMR_RESERVED_120' -> 16r78.
			'EMR_RESIZEPALETTE' -> 16r33.
			'EMR_RESTOREDC' -> 16r22.
			'EMR_ROUNDRECT' -> 16r2C.
			'EMR_SAVEDC' -> 16r21.
			'EMR_SCALEVIEWPORTEXTEX' -> 16r1F.
			'EMR_SCALEWINDOWEXTEX' -> 16r20.
			'EMR_SELECTCLIPPATH' -> 16r43.
			'EMR_SELECTOBJECT' -> 16r25.
			'EMR_SELECTPALETTE' -> 16r30.
			'EMR_SETARCDIRECTION' -> 16r39.
			'EMR_SETBKCOLOR' -> 16r19.
			'EMR_SETBKMODE' -> 16r12.
			'EMR_SETBRUSHORGEX' -> 16rD.
			'EMR_SETCOLORADJUSTMENT' -> 16r17.
			'EMR_SETCOLORSPACE' -> 16r64.
			'EMR_SETDIBITSTODEVICE' -> 16r50.
			'EMR_SETICMMODE' -> 16r62.
			'EMR_SETICMPROFILEA' -> 16r70.
			'EMR_SETICMPROFILEW' -> 16r71.
			'EMR_SETLAYOUT' -> 16r73.
			'EMR_SETMAPMODE' -> 16r11.
			'EMR_SETMAPPERFLAGS' -> 16r10.
			'EMR_SETMETARGN' -> 16r1C.
			'EMR_SETMITERLIMIT' -> 16r3A.
			'EMR_SETPALETTEENTRIES' -> 16r32.
			'EMR_SETPIXELV' -> 16rF.
			'EMR_SETPOLYFILLMODE' -> 16r13.
			'EMR_SETROP2' -> 16r14.
			'EMR_SETSTRETCHBLTMODE' -> 16r15.
			'EMR_SETTEXTALIGN' -> 16r16.
			'EMR_SETTEXTCOLOR' -> 16r18.
			'EMR_SETVIEWPORTEXTEX' -> 16rB.
			'EMR_SETVIEWPORTORGEX' -> 16rC.
			'EMR_SETWINDOWEXTEX' -> 16r9.
			'EMR_SETWINDOWORGEX' -> 16rA.
			'EMR_SETWORLDTRANSFORM' -> 16r23.
			'EMR_STRETCHBLT' -> 16r4D.
			'EMR_STRETCHDIBITS' -> 16r51.
			'EMR_STROKEANDFILLPATH' -> 16r3F.
			'EMR_STROKEPATH' -> 16r40.
			'EMR_TRANSPARENTBLT' -> 16r74.
			'EMR_WIDENPATH' -> 16r42
		}!

Graphics.Image
	subclass: #'Graphics.Metafile'
	instanceVariableNames: 'header'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

External.Structure
	subclass: #'OS.ENHMETARECORD'
	instanceVariableNames: ''
	classVariableNames: 'RecordTypes'
	imports: #(#{OS.EnhancedMetafileRecordTypes})
	classInstanceVariableNames: ''
	classConstants: {
			'_ENHMETARECORD_Size' -> 16r8.
			'_OffsetOf_iType' -> 16r0.
			'_OffsetOf_nSize' -> 16r4
		}!

OS.ENHMETARECORD
	subclass: #'OS.ENHMETAHEADER'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_ENHMETAHEADER_Size' -> 16r6C.
			'_OffsetOf_bOpenGL' -> 16r60.
			'_OffsetOf_cbPixelFormat' -> 16r58.
			'_OffsetOf_dSignature' -> 16r28.
			'_OffsetOf_nBytes' -> 16r30.
			'_OffsetOf_nDescription' -> 16r3C.
			'_OffsetOf_nHandles' -> 16r38.
			'_OffsetOf_nPalEntries' -> 16r44.
			'_OffsetOf_nRecords' -> 16r34.
			'_OffsetOf_nVersion' -> 16r2C.
			'_OffsetOf_offDescription' -> 16r40.
			'_OffsetOf_offPixelFormat' -> 16r5C.
			'_OffsetOf_rclBounds' -> 16r8.
			'_OffsetOf_rclFrame' -> 16r18.
			'_OffsetOf_sReserved' -> 16r3A.
			'_OffsetOf_szlDevice' -> 16r48.
			'_OffsetOf_szlMicrometers' -> 16r64.
			'_OffsetOf_szlMillimeters' -> 16r50
		}!

"Loose Methods"!

!OS.GDILibrary methodsFor!

closeEnhMetaFile: hdc
	"Invoke the CloseEnhMetaFile() function of the module wrapped by the receiver.
	Helpstring: Closes an enhanced-metafile device context and returns a handle to the metafile.

		HENHMETAFILE __stdcall CloseEnhMetaFile(
			HDC HDC);"

	<stdcall: handle CloseEnhMetaFile handle>
	^self invalidCall: _failureCode!

copyEnhMetaFile: hemf lpszFile: lpszFile
	"Invoke the CopyEnhMetaFile() function of the module wrapped by the receiver.
	Helpstring: Copies contents of enhanced-format metafile to specified file.

		HENHMETAFILE __stdcall CopyEnhMetaFile(
			HENHMETAFILE hemf,
			LPCWSTR lpszFile);"

	<stdcall: handle CopyEnhMetaFileW handle lpwstr>
	^self invalidCall: _failureCode!

createEnhMetaFile: hdc lpFileName: lpFileName lpRect: lpRect lpDescription: lpDescription
	"Invoke the CreateEnhMetaFile() function of the module wrapped by the receiver.
	Helpstring: Creates device context for enhanced-format metafile.

		HDC __stdcall CreateEnhMetaFile(
			HDC HDC,
			LPCWSTR lpFileName,
			int* lpRect,
			LPCWSTR lpDescription);"

	<stdcall: handle CreateEnhMetaFileW handle lpwstr int32* lpwstr>
	^self invalidCall: _failureCode!

deleteEnhMetaFile: hemf
	"Invoke the DeleteEnhMetaFile() function of the module wrapped by the receiver.
	Helpstring: Deletes an enhanced-format metafile or metafile handle.

		BOOL __stdcall DeleteEnhMetaFile(
			HENHMETAFILE hemf);"

	<stdcall: bool DeleteEnhMetaFile handle>
	^self invalidCall: _failureCode!

enumEnhMetaFile: hdc hemf: hemf lpEnhMetaFunc: lpEnhMetaFunc lpData: lpData lpRect: lpRect
	"Invoke the EnumEnhMetaFile() function of the module wrapped by the receiver.
	Helpstring: Enumerates the records within an enhanced-format metafile by retrieving each record and passing it to the specified callback function

		BOOL __stdcall EnumEnhMetaFile(
			HDC HDC,
			HENHMETAFILE hemf,
			CALLBACK lpEnhMetaFunc,
			LPVOID lpData,
			RECTL* lpRect);"

	<stdcall: bool EnumEnhMetaFile handle handle void* void* RECTL*>
	^self invalidCall: _failureCode!

getEnhMetaFile: lpszMetaFile
	"Invoke the GetEnhMetaFile() function of the module wrapped by the receiver.
	Helpstring: Creates handle for given file-based enhanced-format metafile

		HENHMETAFILE __stdcall GetEnhMetaFile(
			LPCWSTR lpszMetaFile);"

	<stdcall: handle GetEnhMetaFileW lpwstr>
	^self invalidCall: _failureCode!

getEnhMetaFileBits: hemf cbBuffer: cbBuffer lpbBuffer: lpbBuffer
	"Invoke the GetEnhMetaFileBits() function of the module wrapped by the receiver.
	Helpstring: Copies contents of specified enhanced-format metafile into buffer

		UINT __stdcall GetEnhMetaFileBits(
			HENHMETAFILE hemf,
			UINT cbBuffer,
			BYTE* lpbBuffer);"

	<stdcall: dword GetEnhMetaFileBits handle dword byte*>
	^self invalidCall: _failureCode!

getEnhMetaFileDescription: hemf cchBuffer: cchBuffer lpszDescription: lpszDescription
	"Invoke the GetEnhMetaFileDescription() function of the module wrapped by the receiver.
	Helpstring: Copies optional text description from an enhanced-format metafile to a specified buffer.

		UINT __stdcall GetEnhMetaFileDescription(
			HENHMETAFILE hemf,
			UINT cchBuffer,
			LPWSTR lpszDescription);"

	<stdcall: dword GetEnhMetaFileDescriptionW handle dword lpwstr>
	^self invalidCall: _failureCode!

getEnhMetaFileHeader: hemf cbBuffer: cbBuffer lpemnh: lpemnh
	"Invoke the GetEnhMetaFileHeader() function of the module wrapped by the receiver.
	Helpstring: Retrieves the record containing the header for the specified enhanced-format metafile.

		UINT __stdcall GetEnhMetaFileHeader(
			HENHMETAFILE hemf,
			UINT cbBuffer,
			ENHMETAHEADER* lpemnh);"

	<stdcall: dword GetEnhMetaFileHeader handle dword ENHMETAHEADER*>
	^self invalidCall: _failureCode!

getEnhMetaFilePaletteEntries: hemf cbEntries: cbEntries lppe: lppe
	"Invoke the GetEnhMetaFilePaletteEntries() function of the module wrapped by the receiver.
	Helpstring: Rretrieves optional palette entries from the specified enhanced metafile.

		UINT __stdcall GetEnhMetaFilePaletteEntries(
			HENHMETAFILE hemf,
			UINT cbEntries,
			PALETTEENTRY* lppe);"

	<stdcall: dword GetEnhMetaFilePaletteEntries handle dword PALETTEENTRY*>
	^self invalidCall: _failureCode!

playEnhMetaFile: hdc hemf: hemf lpRect: lpRect
	"Invoke the PlayEnhMetaFile() function of the module wrapped by the receiver.
	Helpstring: Displays the picture in specified enhanced-format metafile.

		BOOL __stdcall PlayEnhMetaFile(
			HDC HDC,
			HENHMETAFILE hemf,
			int* lpRect);"

	<stdcall: bool PlayEnhMetaFile handle handle int32*>
	^self invalidCall: _failureCode!

playEnhMetaFileRecord: hdc lpHandletable: lpHandletable lpEnhMetaRecord: lpEnhMetaRecord nHandles: nHandles
	"Invoke the PlayEnhMetaFileRecord() function of the module wrapped by the receiver.
	Helpstring: Plays an enhanced-metafile record by executing the graphics device interface (GDI) functions identified by the record.

		BOOL __stdcall PlayEnhMetaFileRecord(
			HDC HDC,
			HANDLETABLE* lpHandletable,
			ENHMETARECORD* lpEnhMetaRecord,
			UINT nHandles);"

	<stdcall: bool PlayEnhMetaFileRecord handle HandleArray* ENHMETARECORD* dword>
	^self invalidCall: _failureCode!

setEnhMetaFileBits: cbBuffer lpData: lpData
	"Invoke the SetEnhMetaFileBits() function of the module wrapped by the receiver.
	Helpstring: Creates memory-based enhanced-format metafile from supplied data.

		HENHMETAFILE __stdcall SetEnhMetaFileBits(
			UINT cbBuffer,
			BYTE* lpData);"

	<stdcall: handle SetEnhMetaFileBits dword byte*>
	^self invalidCall: _failureCode! !

!OS.GDILibrary categoriesForMethods!
closeEnhMetaFile:!public!win32 functions-metafile! !
copyEnhMetaFile:lpszFile:!public!win32 functions-metafile! !
createEnhMetaFile:lpFileName:lpRect:lpDescription:!public!win32 functions-metafile! !
deleteEnhMetaFile:!public!win32 functions-metafile! !
enumEnhMetaFile:hemf:lpEnhMetaFunc:lpData:lpRect:!public!win32 functions-metafile! !
getEnhMetaFile:!public!win32 functions-metafile! !
getEnhMetaFileBits:cbBuffer:lpbBuffer:!public!win32 functions-metafile! !
getEnhMetaFileDescription:cchBuffer:lpszDescription:!public!win32 functions-metafile! !
getEnhMetaFileHeader:cbBuffer:lpemnh:!public!win32 functions-metafile! !
getEnhMetaFilePaletteEntries:cbEntries:lppe:!public!win32 functions-metafile! !
playEnhMetaFile:hemf:lpRect:!public!win32 functions-metafile! !
playEnhMetaFileRecord:lpHandletable:lpEnhMetaRecord:nHandles:!public!win32 functions-metafile! !
setEnhMetaFileBits:lpData:!public!win32 functions-metafile! !
!

!UI.Clipboard methodsFor!

getMetafile
	"Answer a <Metafile> copied from the clipboard Enhanced Metafile on the clipboard, or raise an 
	exception if no metafile is available."

	^self getMetafileIfNone: [self errorFormatNotAvailable: #Metafile]!

getMetafileIfNone: exceptionHandler
	"Answer a Metafile representing the Enhanced Metafile currently on the clipboard, or if none
	the result of evaluating the <niladicValuable> exceptionHandler. Note that because the
	clipboard retains ownership of the metafile, we must immediately copy it."

	^self apply: 
			[| hemf |
			hemf := User32 getClipboardData: CF_ENHMETAFILE.
			hemf isNull ifTrue: [exceptionHandler value] ifFalse: [(Metafile fromHandle: hemf) copy]]! !

!UI.Clipboard categoriesForMethods!
getMetafile!accessing!public! !
getMetafileIfNone:!accessing!public! !
!

"End of package definition"!

