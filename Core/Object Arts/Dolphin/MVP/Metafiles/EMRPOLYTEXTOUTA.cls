"Filed out from Dolphin Smalltalk 7"!

ENHMETARECORD subclass: #EMRPOLYTEXTOUTA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
EMRPOLYTEXTOUTA guid: (GUID fromString: '{7c11c025-67e0-44de-87ab-e4f1377a4314}')!
EMRPOLYTEXTOUTA comment: '<EMRPOLYTEXTOUTA> is an <ExternalStructure> class to wrap the struct ''Win32.EMRPOLYTEXTOUTA'' from type information in the ''Win32 API (ANSI). Derived from Bruce McKinney´s Hardcore Visual Basic Type Library'' library.

The type library contains no documentation for this struct

Warning: This comment was automatically generated from the struct''s type information, but any changes made here will not be overwritten if the wrapper class is regenerated.

IDL definition follows:

typedef [uuid(7C11C025-67E0-44DE-87AB-E4F1377A4314)]
struct tagEMRPOLYTEXTOUTA {
	EMR EMR;
	[helpstring("Inclusive-inclusive bounds in device units")] RECTL rclBounds;
	[helpstring("Current graphics mode")] DWORD iGraphicsMode;
	[helpstring("X and Y scales from Page units to .01mm units")] float exScale;
	[helpstring("if graphics mode is GM_COMPATIBLE.")] float eyScale;
	long cStrings;
	[helpstring("Array of EMRTEXT structures.  This is followed by the strings and spacing arrays.")] EMRTEXT* aemrtext;
} EMRPOLYTEXTOUTA;
'!
!EMRPOLYTEXTOUTA categoriesForClass!Win32-Structs! !
!EMRPOLYTEXTOUTA methodsFor!

aemrtext
	"Answer the <StructureArray> value of the receiver's 'aemrtext' field."

	^StructureArray
		fromAddress: bytes yourAddress + ##(self offsetOf: #aemrtext)
		length: self cStrings
		elementClass: EMRTEXT!

aemrtext: aStructureArrayOfEMRTEXT
	"Set the receiver's 'aemrtext' field to the value of the argument, aStructureArrayOfEMRTEXT"

	| size |
	size := aStructureArrayOfEMRTEXT byteSize.
	aStructureArrayOfEMRTEXT
		replaceBytesOf: bytes
		from: ##((self offsetOf: #aemrtext) + 1)
		to: ##(self offsetOf: #aemrtext) + size
		startingAt: 1.
	self cStrings: aStructureArrayOfEMRTEXT size!

cStrings
	"Answer the <Integer> value of the receiver's 'cStrings' field."

	^bytes sdwordAtOffset: ##(self offsetOf: #cStrings)!

cStrings: anInteger
	"Set the receiver's 'cStrings' field to the value of the argument, anInteger"

	bytes sdwordAtOffset: ##(self offsetOf: #cStrings) put: anInteger!

exScale
	"Answer the <Float> value of the receiver's 'exScale' field."

	^bytes floatAtOffset: ##(self offsetOf: #exScale)!

exScale: aFloat
	"Set the receiver's 'exScale' field to the value of the argument, aFloat"

	bytes floatAtOffset: ##(self offsetOf: #exScale) put: aFloat!

eyScale
	"Answer the <Float> value of the receiver's 'eyScale' field."

	^bytes floatAtOffset: ##(self offsetOf: #eyScale)!

eyScale: aFloat
	"Set the receiver's 'eyScale' field to the value of the argument, aFloat"

	bytes floatAtOffset: ##(self offsetOf: #eyScale) put: aFloat!

iGraphicsMode
	"Answer the <Integer> value of the receiver's 'iGraphicsMode' field."

	^bytes dwordAtOffset: ##(self offsetOf: #iGraphicsMode)!

iGraphicsMode: anInteger
	"Set the receiver's 'iGraphicsMode' field to the value of the argument, anInteger"

	bytes dwordAtOffset: ##(self offsetOf: #iGraphicsMode) put: anInteger!

rclBounds
	"Answer the <RECT> value of the receiver's 'rclBounds' field."

	^RECT fromAddress: bytes yourAddress + ##(self offsetOf: #rclBounds)!

rclBounds: aRECT
	"Set the receiver's 'rclBounds' field to the value of the argument, aRECT"

	aRECT
		replaceBytesOf: bytes
		from: ##((self offsetOf: #rclBounds) + 1)
		to: ##((self offsetOf: #rclBounds) + RECT basicByteSize)
		startingAt: 1! !
!EMRPOLYTEXTOUTA categoriesFor: #aemrtext!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #aemrtext:!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #cStrings!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #cStrings:!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #exScale!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #exScale:!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #eyScale!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #eyScale:!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #iGraphicsMode!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #iGraphicsMode:!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #rclBounds!**compiled accessors**!public! !
!EMRPOLYTEXTOUTA categoriesFor: #rclBounds:!**compiled accessors**!public! !

!EMRPOLYTEXTOUTA class methodsFor!

defineFields
	"Define the fields of the EMRPOLYTEXTOUTA structure.

	EMRPOLYTEXTOUTA  compileDefinition

		typedef [uuid(7C11C025-67E0-44DE-87AB-E4F1377A4314)]
		struct tagEMRPOLYTEXTOUTA {
			EMR EMR;
			[helpstring('Inclusive-inclusive bounds in device units')] RECTL rclBounds;
			[helpstring('Current graphics mode')] DWORD iGraphicsMode;
			[helpstring('X and Y scales from Page units to .01mm units')] float exScale;
			[helpstring('if graphics mode is GM_COMPATIBLE.')] float eyScale;
			long cStrings;
			[helpstring('Array of EMRTEXT structures.  This is followed by the strings and spacing arrays.')] EMRTEXT aemrtext[];
		} EMRPOLYTEXTOUTA;
"

	super defineFields.
	self
		defineField: #rclBounds
			type: (StructureField type: RECT)
			offset: 8;
		defineField: #iGraphicsMode
			type: DWORDField new
			offset: 24;
		defineField: #exScale
			type: FLOATField new
			offset: 28;
		defineField: #eyScale
			type: FLOATField new
			offset: 32;
		defineField: #cStrings
			type: SDWORDField new
			offset: 36;
		defineField: #aemrtext
			type: (StructureArrayField type: EMRTEXT lengthField: #cStrings)
			offset: 40!

getFieldNames
	^#(#iType #nSize #rclBounds #iGraphicsMode #exScale #eyScale #cStrings #aemrtext)!

iTypes
	"Answer the integer enhanced metafile record type id for this record class."

	^Array with: EMR_POLYTEXTOUTA with: EMR_POLYTEXTOUTW! !
!EMRPOLYTEXTOUTA class categoriesFor: #defineFields!initializing!public! !
!EMRPOLYTEXTOUTA class categoriesFor: #getFieldNames!**compiled accessors**!constants!private! !
!EMRPOLYTEXTOUTA class categoriesFor: #iTypes!constants!public! !

