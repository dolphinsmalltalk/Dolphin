"Filed out from Dolphin Smalltalk 7"!

DolphinTest subclass: #AcceleratorTableTest
	instanceVariableNames: 'savedLayout'
	classVariableNames: ''
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!
AcceleratorTableTest guid: (GUID fromString: '{ffc00c13-8da5-4b75-b82d-f96bba254efe}')!
AcceleratorTableTest comment: ''!
!AcceleratorTableTest categoriesForClass!Unclassified! !
!AcceleratorTableTest methodsFor!

setCurrentKeyboardLayout: aString
	| current |
	current := Keyboard layoutName.
	^current = aString or: 
			[(Keyboard layoutName: aString) and: 
					[savedLayout ifNil: [savedLayout := current].
					true]]!

tearDown
	savedLayout ifNotNil: [Keyboard layoutName: savedLayout]!

testKeycodeFromString
	"for alphanumerics, the keycode corresponds with the ascii code point"

	self skipUnless: [self setCurrentKeyboardLayout: '00000809'].

	($A codePoint to: $Z codePoint) , ($0 codePoint to: $9 codePoint) do: 
			[:each |
			| code keyString |
			code := each | (FVIRTKEY << 9).
			keyString := (Character value: each) asString.
			self assert: code equals: (AcceleratorTable keyCodeFromString: keyString).
			self assert: code | (FCONTROL << 9)
				equals: (AcceleratorTable keyCodeFromString: 'Ctrl+' , keyString).
			self assert: code | (FSHIFT << 9) equals: (AcceleratorTable keyCodeFromString: 'Shift+' , keyString).
			self assert: code | (FALT << 9) equals: (AcceleratorTable keyCodeFromString: 'Alt+' , keyString).
			self assert: code | ((FSHIFT | FCONTROL) << 9)
				equals: (AcceleratorTable keyCodeFromString: 'Ctrl+Shift+' , keyString)].
	"Other keys where the VK code is not the Ascii codepoint"
	(Array
		with: ',' -> VK_OEM_COMMA
		with: '-' -> VK_OEM_MINUS
		with: '.' -> VK_OEM_PERIOD)
			, ((1 to: 9) collect: [:each | ('NUM ' , each displayString) -> (VK_NUMPAD1 + each - 1)]) do: 
				[:each |
				| code keyString |
				code := each value | (FVIRTKEY << 9).
				keyString := each key.
				self assert: code equals: (AcceleratorTable keyCodeFromString: keyString).
				self assert: code | (FCONTROL << 9)
					equals: (AcceleratorTable keyCodeFromString: 'Ctrl+' , keyString).
				self assert: code | (FSHIFT << 9) equals: (AcceleratorTable keyCodeFromString: 'Shift+' , keyString).
				self assert: code | (FALT << 9) equals: (AcceleratorTable keyCodeFromString: 'Alt+' , keyString).
				self assert: code | ((FSHIFT | FCONTROL) << 9)
					equals: (AcceleratorTable keyCodeFromString: 'Ctrl+Shift+' , keyString)].
	"		with: '+' -> VK_OEM_PLUS"
	"Extended keys"
	(Array
		with: 'END' -> VK_END
		with: 'DOWN' -> VK_DOWN
		with: 'PGUP' -> VK_PRIOR) do: 
				[:each |
				| code keyString |
				code := each value | 16r100 | (FVIRTKEY << 9).
				keyString := each key.
				self assert: code equals: (AcceleratorTable keyCodeFromString: keyString).
				self assert: code | (FCONTROL << 9)
					equals: (AcceleratorTable keyCodeFromString: 'Ctrl+' , keyString).
				self assert: code | (FSHIFT << 9) equals: (AcceleratorTable keyCodeFromString: 'Shift+' , keyString).
				self assert: code | (FALT << 9) equals: (AcceleratorTable keyCodeFromString: 'Alt+' , keyString).
				self assert: code | ((FSHIFT | FCONTROL) << 9)
					equals: (AcceleratorTable keyCodeFromString: 'Ctrl+Shift+' , keyString)].
	#(#('CTRL+NUM 1' 4705)) do: 
			[:each |
			self assert: each last equals: (AcceleratorTable keyCodeFromString: each first).
			self]!

testRoundTrippingInvariantKeyNames
	| invariant |
	invariant := AcceleratorTable invariantKeyStringFromCode: 8810.
	self assert: invariant equals: 'ALT+NUMMULT'.
	self assert: (AcceleratorTable keyCodeFromInvariantString: invariant) equals: 8810
!

testRoundTrippingKeyNames
	"https://github.com/dolphinsmalltalk/Dolphin/issues/159."

	| localised invariant |
	"Fails with US keyboard in the presence of the bug"
	self skipUnless: [self setCurrentKeyboardLayout: '00000409'].
	localised := AcceleratorTable keyStringFromCode: 8810.
	self assert: localised equals: 'Alt+Num *'.
	self assert: (AcceleratorTable keyCodeFromString: localised) equals: 8810! !
!AcceleratorTableTest categoriesFor: #setCurrentKeyboardLayout:!helpers!private! !
!AcceleratorTableTest categoriesFor: #tearDown!private!Running! !
!AcceleratorTableTest categoriesFor: #testKeycodeFromString!public!unit tests! !
!AcceleratorTableTest categoriesFor: #testRoundTrippingInvariantKeyNames!public! !
!AcceleratorTableTest categoriesFor: #testRoundTrippingKeyNames!public!unit tests! !

