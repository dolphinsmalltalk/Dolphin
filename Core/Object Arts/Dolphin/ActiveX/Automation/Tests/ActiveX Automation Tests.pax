| package |
package := Package name: 'ActiveX Automation Tests'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{OS.COM.Tests.BSTRArrayTest}
	#{OS.COM.Tests.BSTRTest}
	#{OS.COM.Tests.CURRENCYTest}
	#{OS.COM.Tests.DECIMALTest}
	#{OS.COM.Tests.IDispatchTest}
	#{OS.COM.Tests.SAFEARRAYTest}
	#{OS.COM.Tests.TestTypelib}
	#{OS.COM.Tests.TypeLibraryAnalyzerTest}
	#{OS.COM.Tests.VARIANTTest}
).

package setMethodNames: #(
	#(#{External.Tests.AddressTest} #testBSTRFromAddress)
	#(#{External.Tests.FunctionDescriptorTest} #testComPtrs)
	#(#{External.Tests.StructureTest} #testExtendedErrorInfo)
	#(#{Kernel.Tests.VMTest} #testExtCallArgBstr)
).

package setPrerequisites: #(
	'..\ActiveX Automation'
	'..\..\Components\Scripting\ActiveX Scripting'
	'..\..\..\..\Samples\ActiveX\Random\COM Random Stream'
	'..\..\..\Base\Dolphin'
	'..\..\..\Base\Tests\Dolphin Base Tests'
	'..\..\..\MVP\Base\Dolphin Basic Geometry'
	'..\..\COM\OLE COM'
	'..\..\COM\Tests\OLE COM Tests'
	'..\..\..\..\..\Contributions\Camp Smalltalk\SUnit\SUnit'
).

package!

"Class Definitions"!

Core.Tests.DolphinTest
	subclass: #'OS.COM.Tests.BSTRTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest
	subclass: #'OS.COM.Tests.CURRENCYTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.COM.AutomationConstants})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest
	subclass: #'OS.COM.Tests.DECIMALTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.COM.AutomationConstants})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest
	subclass: #'OS.COM.Tests.IDispatchTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest
	subclass: #'OS.COM.Tests.TypeLibraryAnalyzerTest'
	instanceVariableNames: 'analyzer'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest
	subclass: #'OS.COM.Tests.VARIANTTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.COM.AutomationConstants})
	classInstanceVariableNames: ''
	classConstants: {}!
External.Tests.ExternalArrayTest
	subclass: #'OS.COM.Tests.BSTRArrayTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.Tests.GenericExternalArrayTest
	subclass: #'OS.COM.Tests.SAFEARRAYTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.Win32Errors})
	classInstanceVariableNames: ''
	classConstants: {}!
XProgramming.SUnit.TestResource
	subclass: #'OS.COM.Tests.TestTypelib'
	instanceVariableNames: 'analyzer'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!External.Tests.AddressTest methodsFor!

testBSTRFromAddress
	| empty |
	self stringFromAddressTestClass: OS.COM.BSTR.
	"By convention, a null BSTR is equivalent to the empty string"
	empty := OS.COM.BSTR new.
	self assert: (OS.COM.BSTR fromAddress: nil) equals: empty.
	self assert: (OS.COM.BSTR fromAddress: 0) equals: empty! !
!External.Tests.AddressTest categoriesForMethods!
testBSTRFromAddress!public!unit tests! !
!

!External.Tests.FunctionDescriptorTest methodsFor!

testComPtrs
	self
		parseStructArg: COM.IUnknown
		valueType: ExtCallArgSTRUCT
		refType: ExtCallArgCOMPTR.
	self
		parseStructArg: COM.IDispatch
		valueType: ExtCallArgSTRUCT
		refType: ExtCallArgCOMPTR! !
!External.Tests.FunctionDescriptorTest categoriesForMethods!
testComPtrs!public!unit tests! !
!

!External.Tests.StructureTest methodsFor!

testExtendedErrorInfo
	"Tests that extended error info is accessed on failed external API calls through COM interfaces if the target object supports it."

	| script errorInfo error |
	script := MSScriptControl.IScriptControl new.
	self assert: script supportsErrorInfo.
	errorInfo := [script eval: '1+2'] on: HRESULTError do: [:ex | ex errorInfo].
	self assert: errorInfo notNil.
	self assert: errorInfo source equals: 'ScriptControl'.
	self assert: errorInfo guid equals: MSScriptControl.IScriptControl guid.
	script free.
	error := [script eval: '1+2'] on: HRESULTError do: [:ex | ex].
	self assertIsNil: error errorInfo.
	self assert: error hresult
		equals: (HRESULT fromPrimitiveFailureCode: _PrimitiveFailureCode.InvalidPointer)! !
!External.Tests.StructureTest categoriesForMethods!
testExtendedErrorInfo!public!unit tests! !
!

!Kernel.Tests.VMTest methodsFor!

testExtCallArgBstr
	"Note that BSTR is one of the FFI parameter types that may cause the VM to perform a type conversion that allocates memory, and as such cannot be used safely in overlapped calls unless the calling code is careful to perform all conversions to BSTR from Smalltalk strings in advance with #asBSTR"

	| beers |
	{''. 'a'. '£2'. 'a' , (String with: Character null) , 'b'} do: 
			[:each |
			| subject expected actual |
			expected := each asUtf16String size.
			actual := OS.COM.OleAut32 sysStringLen: each.
			self assert: actual equals: expected.
			subject := each asUtf8String.
			actual := OS.COM.OleAut32 sysStringLen: subject.
			self assert: actual equals: expected.
			subject := each asUtf16String.
			actual := OS.COM.OleAut32 sysStringLen: subject.
			self assert: actual equals: expected].
	"Like most string length functions, SysStringLen reports the number of code units, not the number of characters"
	beers := Utf8String fromByteArray: #[16rF0 16r9F 16r8D 16rBB].
	self assert: (OS.COM.OleAut32 sysStringLen: beers) equals: 2.
	self assert: (OS.COM.OleAut32 sysStringLen: beers asUtf16String) equals: 2! !
!Kernel.Tests.VMTest categoriesForMethods!
testExtCallArgBstr!public!unit tests! !
!

"End of package definition"!

