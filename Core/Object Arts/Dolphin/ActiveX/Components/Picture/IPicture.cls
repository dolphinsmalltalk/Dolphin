"Filed out from Dolphin Smalltalk 7"!

IUnknown subclass: #IPicture
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IPicture guid: (IID fromString: '{7BF80980-BF32-101A-8BBB-00AA00300CAB}')!
IPicture comment: '<IPicture> is a wrapper class for the COM interface ''stdole.IPicture'' generated from type information in the ''OLE Automation'' library. It contains methods to invoke the member functions exposed by that interface.

The type library contains the following helpstring for this interface
	"Picture Object"

This class was originally auto-generated by the Active-X Component Wizard, but is has been modified to support compatibility between OLE Pictures and other Image types in Dolphin.'!
!IPicture categoriesForClass!COM-Interfaces!stdole-Interfaces! !
!IPicture methodsFor!

attributes
	"Answer the <sdword> value of the 'Attributes' property of the receiver."

	| answer |
	answer := (SDWORD new).
	self get_Attributes: answer.
	^answer asObject
!

curDC
	"Answer the <sdword> value of the 'CurDC' property of the receiver."

	| answer |
	answer := ExternalHandle new.
	self get_CurDC: answer.
	^answer asObject!

extent
	"Answer the hi-metric extent of the receiver."

	| buf x |
	buf := SDWORD new.
	self get_Width: buf.
	x := buf asInteger.
	self get_Height: buf.
	^x @ buf asInteger!

get_Attributes: pdwAttr
	"Private - Get the value of the 'Attributes' property of the receiver.

		HRESULT __stdcall Attributes(
			[out, retval] long* pdwAttr);"

	<virtual stdcall: hresult 17 sdword*>
	^self invalidCall
!

get_CurDC: phdcOut 
	"Private - Get the value of the 'CurDC' property of the receiver.

		HRESULT __stdcall CurDC(
			[out, retval] HDC* phdcOut);"

	"Implementation Note: Autogenerated method modified to use handle argument type"

	<virtual stdcall: hresult 11 handle*>
	^self invalidCall!

get_Handle: phandle
	"Private - Get the value of the 'Handle' property of the receiver.

		HRESULT __stdcall Handle(
			[out, retval] OLE_HANDLE* phandle);"

	<virtual stdcall: hresult 4 handle*>
	^self invalidCall
!

get_Height: pheight
	"Private - Get the value of the 'Height' property of the receiver.

		HRESULT __stdcall Height(
			[out, retval] OLE_YSIZE_HIMETRIC* pheight);"

	<virtual stdcall: hresult 8 sdword*>
	^self invalidCall
!

get_hPal: phpal
	"Private - Get the value of the 'hPal' property of the receiver.

		HRESULT __stdcall hPal(
			[out, retval] OLE_HANDLE* phpal);	"

	<virtual stdcall: sdword 5 handle*>
	^self invalidCall
!

get_KeepOriginalFormat: pfkeep
	"Private - Get the value of the 'KeepOriginalFormat' property of the receiver.

		HRESULT __stdcall KeepOriginalFormat(
			[out, retval] BOOL* pfkeep);
	"

	<virtual stdcall: hresult 13 bool*>
	^self invalidCall
!

get_Type: ptype
	"Private - Get the value of the 'Type' property of the receiver.

		HRESULT __stdcall Type(
			[out, retval] short* ptype);"

	<virtual stdcall: hresult 6 sword*>
	^self invalidCall
!

get_Width: pwidth
	"Private - Get the value of the 'Width' property of the receiver.

		HRESULT __stdcall Width(
			[out, retval] OLE_XSIZE_HIMETRIC* pwidth);"

	<virtual stdcall: hresult 7 sdword*>
	^self invalidCall
!

handle
	"Answer the GDI handle of the picture."

	| answer |
	answer := ExternalHandle new.
	self get_Handle: answer.
	^answer
!

height
	"Answer the <sdword> value of the 'Height' property of the receiver."

	| answer |
	answer := (SDWORD new).
	self get_Height: answer.
	^answer asObject
!

hPal
	"Answer the handle of the picture's palette. If there is no palette then the answer will be null.
	Note that ownership of the palette varies, see the OLE documentation for further information."

	| answer |
	answer := ExternalHandle new.
	self get_hPal: answer.
	^answer
!

hPal: phpal
	"Set the 'hPal' property of the receiver to the <sdword> value of the argument."

	self put_hPal: phpal
!

keepOriginalFormat
	"Answer the <bool> value of the 'KeepOriginalFormat' property of the receiver."

	| answer |
	answer := SDWORD new.
	self get_KeepOriginalFormat: answer.
	^answer asInteger asBoolean
!

keepOriginalFormat: pfkeep
	"Set the 'KeepOriginalFormat' property of the receiver to the <varbool> value of the argument."

	self put_KeepOriginalFormat: pfkeep
!

pictureChanged
	"Invoke the PictureChanged() method of the COM object."

	^self PictureChanged
!

PictureChanged
	"Private - Invoke the PictureChanged() method of the COM object.

		HRESULT __stdcall PictureChanged();"

	<virtual stdcall: hresult 15>
	^self invalidCall
!

put_hPal: phpal
	"Private - Set the value of the 'hPal' property of the object wrapped by the 
	 receiver to the <ExternalHandle> argument, phpal.

		HRESULT __stdcall hPal(
			[in] OLE_HANDLE phpal);
	"

	<virtual stdcall: hresult 10 handle>
	^self invalidCall
!

put_KeepOriginalFormat: pfkeep
	"Private - Set the value of the 'KeepOriginalFormat' property of the object wrapped by the 
	 receiver to the <varbool> argument, pfkeep.

		HRESULT __stdcall KeepOriginalFormat(
			[in] VARIANT_BOOL pfkeep);"

	<virtual stdcall: hresult 14 varbool>
	^self invalidCall
!

render: canvas x: x y: y cx: cx cy: cy xSrc: xSrc ySrc: ySrc cxSrc: cxSrc cySrc: cySrc prcWBounds: prcWBounds 
	"Invoke the Render() method of the COM Object."

	self
		Render: canvas asParameter
		x: x
		y: y
		cx: cx
		cy: cy
		xSrc: xSrc
		ySrc: ySrc
		cxSrc: cxSrc
		cySrc: cySrc
		prcWBounds: prcWBounds asParameter
!

Render: hdc x: x y: y cx: cx cy: cy xSrc: xSrc ySrc: ySrc cxSrc: cxSrc cySrc: cySrc prcWBounds: prcWBounds
	"Private - Invoke the Render() method of the COM object wrapped by the receiver.

		HRESULT __stdcall Render(
			[in] HDC hdc,
			[in] long x,
			[in] long y,
			[in] long cx,
			[in] long cy,
			[in] OLE_XPOS_HIMETRIC xSrc,
			[in] OLE_YPOS_HIMETRIC ySrc,
			[in] OLE_XSIZE_HIMETRIC cxSrc,
			[in] OLE_YSIZE_HIMETRIC cySrc,
			[in] RECT* prcWBounds);
	"

	<virtual stdcall: hresult 9 handle sdword sdword sdword sdword sdword sdword sdword sdword RECT*>
	^self invalidCall
!

saveAsFile: pstm fSaveMemCopy: fSaveMemCopy
	"Answer the <SDWORD> result of invoking the SaveAsFile() method of the COM object."

	| answer |
	answer := (SDWORD new).
	self
		SaveAsFile: pstm
		fSaveMemCopy: fSaveMemCopy
		pcbSize: answer.
	^answer asObject
!

SaveAsFile: pstm fSaveMemCopy: fSaveMemCopy pcbSize: pcbSize
	"Private - Invoke the SaveAsFile() method of the COM object wrapped by the receiver.

		HRESULT __stdcall SaveAsFile(
			[in] IStream* pstm,
			[in] BOOL fSaveMemCopy,
			[out] long* pcbSize);
	"

	"Declare stream parameter as IUnknown* to avoid creating dependency on structured storage package"
	<virtual stdcall: hresult 16 IUnknown* bool sdword*>
	^self invalidCall
!

selectPicture: hdcIn
	"Invoke the SelectPicture() method of the COM object."

	| answer |
	answer := (Array new: 2)
				basicAt: 1 put: (SDWORD new);
				basicAt: 2 put: (SDWORD new);
				yourself.
	self
		SelectPicture: hdcIn
		phdcOut: (answer basicAt: 1)
		phbmpOut: (answer basicAt: 2).
	^answer collect: [:e | e asObject]
!

SelectPicture: hdcIn phdcOut: phdcOut phbmpOut: phbmpOut
	"Private - Invoke the SelectPicture() method of the COM object.

		HRESULT __stdcall SelectPicture(
			[in] int hdcIn,
			[out] int* phdcOut,
			[out] OLE_HANDLE* phbmpOut);"

	<virtual stdcall: hresult 12 sdword sdword* sdword*>
	^self invalidCall
!

setHdc: aCanvas 
	"Invoke the SetHdc() method of the COM object."

	^self SetHdc: aCanvas asParameter!

SetHdc: hdc
	"Private - Invoke the SetHdc() method of the COM object.

		HRESULT __stdcall SetHdc(
			[in] OLE_HANDLE hdc);"

	<virtual stdcall: hresult 18 handle>
	^self invalidCall
!

type
	"Answer the <sword> value of the 'Type' property of the receiver."

	| answer |
	answer := (SWORD new).
	self get_Type: answer.
	^answer asObject
!

width
	"Answer the <sdword> value of the 'Width' property of the receiver."

	| answer |
	answer := (SDWORD new).
	self get_Width: answer.
	^answer asObject
! !
!IPicture categoriesFor: #attributes!**auto generated**!properties!public! !
!IPicture categoriesFor: #curDC!properties!public! !
!IPicture categoriesFor: #extent!accessing!public! !
!IPicture categoriesFor: #get_Attributes:!**auto generated**!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #get_CurDC:!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #get_Handle:!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #get_Height:!**auto generated**!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #get_hPal:!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #get_KeepOriginalFormat:!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #get_Type:!**auto generated**!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #get_Width:!**auto generated**!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #handle!properties!public! !
!IPicture categoriesFor: #height!**auto generated**!properties!public! !
!IPicture categoriesFor: #hPal!properties!public! !
!IPicture categoriesFor: #hPal:!**auto generated**!properties!public! !
!IPicture categoriesFor: #keepOriginalFormat!properties!public! !
!IPicture categoriesFor: #keepOriginalFormat:!**auto generated**!properties!public! !
!IPicture categoriesFor: #pictureChanged!**auto generated**!methods!public! !
!IPicture categoriesFor: #PictureChanged!**auto generated**!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #put_hPal:!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #put_KeepOriginalFormat:!**auto generated**!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #render:x:y:cx:cy:xSrc:ySrc:cxSrc:cySrc:prcWBounds:!methods!public! !
!IPicture categoriesFor: #Render:x:y:cx:cy:xSrc:ySrc:cxSrc:cySrc:prcWBounds:!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #saveAsFile:fSaveMemCopy:!**auto generated**!methods!public! !
!IPicture categoriesFor: #SaveAsFile:fSaveMemCopy:pcbSize:!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #selectPicture:!**auto generated**!methods!public! !
!IPicture categoriesFor: #SelectPicture:phdcOut:phbmpOut:!**auto generated**!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #setHdc:!methods!public! !
!IPicture categoriesFor: #SetHdc:!COM Interfaces-IPicture!private! !
!IPicture categoriesFor: #type!**auto generated**!properties!public! !
!IPicture categoriesFor: #width!**auto generated**!properties!public! !

!IPicture class methodsFor!

clsid
	"Private - Answer the CLSID of the coclass (StdPicture) which supports this interface."

	^CLSID fromString: '{0BE35204-8F91-11CE-9DE3-00AA004BB851}'!

createPicture: handle type: picType owns: isOwner
	"Private - Create a new picture according to parameters."

	| answer desc |
	desc := PICTDESC new.
	desc handle: handle asParameter.
	desc picType: picType.
	answer := self newPointer.
	OLEAutLibrary default
		oleCreatePictureIndirect: desc
		riid: self iid
		fOwn: isOwner
		ppvObj: answer.
	^answer!

defineFunctions
	"Declare the virtual function table for the COM interface 'stdole.IPicture'
		IPicture defineTemplate
	"

	self
		defineFunction: #get_Handle:
			argumentTypes: 'handle*';
		defineFunction: #get_hPal:
			returnType: 'sdword'
			argumentTypes: 'handle*';
		defineFunction: #get_Type:
			argumentTypes: 'sword*';
		defineFunction: #get_Width:
			argumentTypes: 'sdword*';
		defineFunction: #get_Height:
			argumentTypes: 'sdword*';
		defineFunction: #Render:x:y:cx:cy:xSrc:ySrc:cxSrc:cySrc:prcWBounds:
			argumentTypes: 'handle sdword sdword sdword sdword sdword sdword sdword sdword RECT*';
		defineFunction: #put_hPal:
			argumentTypes: 'handle';
		defineFunction: #get_CurDC:
			argumentTypes: 'handle*';
		defineFunction: #SelectPicture:phdcOut:phbmpOut:
			argumentTypes: 'handle handle* handle*';
		defineFunction: #get_KeepOriginalFormat:
			argumentTypes: 'bool*';
		defineFunction: #put_KeepOriginalFormat:
			argumentTypes: 'bool';
		defineFunction: #PictureChanged;
		defineFunction: #SaveAsFile:fSaveMemCopy:pcbSize:
			argumentTypes: 'void* bool sdword*';
		defineFunction: #get_Attributes:
			argumentTypes: 'sdword*';
		defineFunction: #SetHdc:
			argumentTypes: 'handle'
!

fromBitmap: aBitmap
	"Answer a new instance of the receiver on a StdPicture object wrapping the <Bitmap> (or handle),
	anIcon. The bitmap will NOT be destroyed when the picture is destroyed."

	^self fromImage: aBitmap type: "PICTYPE_BITMAP" 1.!

fromFile: path
	"Answer an instance loaded from the file whose path is specified by the <readableString>
	path (i.e. the argument is not a File object, but a path, which makes the selector of this
	method a bit of a misnomer, but there is precedent for this usage elsewhere)."

	| answer |
	answer := self newPointer.
	OLEAutLibrary default
		oleLoadPicturePath: path asUnicodeString
		punkCaller: nil
		dwReserved: 0 
		clrReserved: 0
		riid: self iid
		ppvRet: answer.
	^answer
!

fromIcon: anIcon
	"Answer a new instance of the receiver on a StdPicture object wrapping the <Icon> (or handle),
	anIcon. The icon will NOT be destroyed when the picture is destroyed."

	^self fromImage: anIcon type: "PICTYPE_ICON" 3.!

fromImage: anImage type: picType
	"Private - Answer a new instance of the receiver on a StdPicture object 
	wrapping the <Image> (or handle), anImage. The image will not be destroyed 
	when the picture is destroyed."

	^self createPicture: anImage asParameter type: picType owns: false!

fromOwnedBitmap: aBitmap
	"Answer a new instance of the receiver on a StdPicture object wrapping the <Bitmap> (or handle),
	anIcon. The bitmap will be destroyed when the picture is destroyed."

	^self fromOwnedImage: aBitmap type: "PICTYPE_BITMAP" 1.!

fromOwnedIcon: anIcon
	"Answer a new instance of the receiver on a StdPicture object wrapping the <Icon> (or handle),
	anIcon. The icon will be destroyed when the picture is destroyed."

	^self fromOwnedImage: anIcon type: "PICTYPE_ICON" 3.!

fromOwnedImage: anImage type: picType
	"Private - Answer a new instance of the receiver on a StdPicture object 
	wrapping the <Image> (or handle), anImage. The image will be destroyed 
	when the picture is destroyed."

	^self createPicture: anImage detach type: picType owns: true!

readFromIStream: anIStream
	"Answer a new instance of the receiver on an OLE Picture object instantiated from the data
	in the <IStream>, anIStream."

	| answer |
	answer := self newPointer.
	OLEAutLibrary default 
		oleLoadPicture: anIStream 
		lSize: 0
		fRunmode: false 
		riid: self iid 
		ppvObj: answer.
	^answer

	! !
!IPicture class categoriesFor: #clsid!constants!private! !
!IPicture class categoriesFor: #createPicture:type:owns:!instance creation!private! !
!IPicture class categoriesFor: #defineFunctions!initializing!public! !
!IPicture class categoriesFor: #fromBitmap:!instance creation!public! !
!IPicture class categoriesFor: #fromFile:!instance creation!public! !
!IPicture class categoriesFor: #fromIcon:!instance creation!public! !
!IPicture class categoriesFor: #fromImage:type:!instance creation!private! !
!IPicture class categoriesFor: #fromOwnedBitmap:!instance creation!public! !
!IPicture class categoriesFor: #fromOwnedIcon:!instance creation!public! !
!IPicture class categoriesFor: #fromOwnedImage:type:!instance creation!private! !
!IPicture class categoriesFor: #readFromIStream:!instance creation!public! !

