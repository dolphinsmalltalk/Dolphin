| package |
package := Package name: 'OLE Picture'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk OLE Picture component. 
Copyright (c) Object Arts Ltd 2000-2002.

This package wraps the OLE StdPicture object (a useful COM object that can load and paint images of most types including JPEGS, BMPs, etc).'.

package basicPackageVersion: '6.2'.


package setClassNames: #(
	#{OS.COM.IPicture}
	#{OS.COM.IPictureDisp}
	#{OS.COM.PICTDESC}
	#{OS.COM.Picture}
).

package setMethodNames: #(
	#(#{OS.COM.OLEAutLibrary} #oleCreatePictureIndirect:riid:fOwn:ppvObj:)
	#(#{OS.COM.OLEAutLibrary} #oleLoadPicture:lSize:fRunmode:riid:ppvObj:)
	#(#{OS.COM.OLEAutLibrary} #oleLoadPicturePath:punkCaller:dwReserved:clrReserved:riid:ppvRet:)
).

package setPrerequisites: #(
	'..\..\Automation\ActiveX Automation'
	'..\..\..\Base\Dolphin'
	'..\..\..\MVP\Base\Dolphin Basic Geometry'
	'..\..\..\MVP\Graphics\Dolphin GDI Graphics'
	'..\..\COM\OLE COM'
	'..\..\Structured Storage\OLE Streams'
).

package!

"Class Definitions"!

Graphics.Image
	subclass: #'OS.COM.Picture'
	instanceVariableNames: 'picture extent hmExtent'
	classVariableNames: ''
	imports: #(#{Graphics})
	classInstanceVariableNames: ''
	classConstants: {}!
OS.COM.IUnknown
	subclass: #'OS.COM.IPicture'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'PICTYPE_BITMAP' -> 16r1.
			'PICTYPE_ENHMETAFILE' -> 16r4.
			'PICTYPE_ICON' -> 16r3.
			'PICTYPE_METAFILE' -> 16r2.
			'PICTYPE_NONE' -> 16r0.
			'PICTYPE_UNINITIALIZED' -> -16r1
		}!
OS.COM.IDispatch
	subclass: #'OS.COM.IPictureDisp'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
OS.SizedStructure
	subclass: #'OS.COM.PICTDESC'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_OffsetOf_dw1' -> 16rC.
			'_OffsetOf_dw2' -> 16r10.
			'_OffsetOf_handle' -> 16r8.
			'_OffsetOf_picType' -> 16r4.
			'_PICTDESC_Size' -> 16r14
		}!

"Loose Methods"!

!OS.COM.OLEAutLibrary methodsFor!

oleCreatePictureIndirect: pDesc riid: riid fOwn: fOwn ppvObj: ppvObj
	"Create an OLE Picture object wrapping the bitmap/icon/metafile described by
	the <PICTDESC>, pDesc. The graphics object will be released when the picture
	is destroyed (i.e. on its final release) if the fOwn <boolean> is true. 

		STDAPI OleCreatePictureIndirect(
			PICTDESC* pFontDesc,
			REFIID riid,
			BOOL fOwn,
			VOID** ppvObj);
 	"

	<stdcall: hresult OleCreatePictureIndirect PICTDESC* guid* bool void**>
	^self invalidCall: _failureCode!

oleLoadPicture: pStream lSize: lSize fRunmode: fRunmode riid: riid ppvObj: ppvObj
	"Load an OLE picture object from an IStream.

		STDAPI OleLoadPicture(
			IStream * pStream,
			LONG lSize,
			BOOL fRunmode,
			REFIID riid,
			VOID** ppvObj 
		); 
		"

	"Avoid creating dependency on structured storage package by declaring stream as void*"

	<stdcall: hresult OleLoadPicture void* int32 bool guid* void**>
	^self invalidCall: _failureCode!

oleLoadPicturePath: szURLOrPath punkCaller: punk dwReserved: dw clrReserved: clr riid: iid ppvRet: ppv
	"Loads an OLE picture (StdPicture) object from a file. Only mentioned in the doc's, but 
	included in olectl.h head file. Can load jpeg/gif/bmp/wmf/etc from a file or URL.

		WINOLECTLAPI OleLoadPicturePath(
			LPOLESTR  szURLorPath,
			LPUNKNOWN punkCaller,
			DWORD     dwReserved,
			OLE_COLOR clrReserved,
			REFIID    riid,
			LPVOID *  ppvRet );
	"

	<stdcall: hresult OleLoadPicturePath lpwstr IUnknown* uint32 int32 guid* void**>
	^self invalidCall: _failureCode! !
!OS.COM.OLEAutLibrary categoriesForMethods!
oleCreatePictureIndirect:riid:fOwn:ppvObj:!OLE Functions-OLE!public! !
oleLoadPicture:lSize:fRunmode:riid:ppvObj:!OLE Functions-OLE!public! !
oleLoadPicturePath:punkCaller:dwReserved:clrReserved:riid:ppvRet:!OLE Functions-OLE!public! !
!

"End of package definition"!

