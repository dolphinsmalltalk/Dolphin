| package |
package := Package name: 'OLE COM'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk OLE COM Support. 
Copyright (c) Object Arts Ltd 1997-2006. Portions copyright (c) CGI Group (Europe) Ltd, 1997.

This package implements basic COM Functionality for interfacing to externally implemented interfaces, and for implementing COM interfaces. It is the base on which all other COM/OLE/Active-X support in Dolphin is based.'.

package basicPackageVersion: '6.1'.

package basicScriptAt: #postinstall put: 'COM.OLELibrary closeDefault.	"Cause the OLELibrary to be reinitialized"
COM.Interface registerSubclasses.
VM 
	registryAt: #IUnknown put: COM.IUnknown;
	registryAt: #BSTR put: COM.BSTR.
#{Tools.Debugger}
	ifDefined:
		[:debugger | 
		"Skip all COMFunction function callback methods"
		debugger
			skipSelector: #callback:vfn:withArgumentsAt:
				of: COM.ObjectStub
				type: 0;
			skipSelector: #comCallback:id:subId:withArgumentsAt:cookie:
				of: ProcessorScheduler
				type: 0;
			skipSelector: #callback:vfn:withArgumentsAt:
				of: COM.Interface
				type: 0.
		COM.InterfaceFunction withAllSubclassesDo: 
				[:c | 
				(c includesSelector: #callback:interface:withArgumentsAt:) 
					ifTrue: 
						[debugger 
							skipSelector: #callback:interface:withArgumentsAt:
							of: c
							type: 0]]]!!'.
package basicScriptAt: #preuninstall put: '#{Tools.Debugger}
	ifDefined:
		[:dbg | 
		dbg unskipSelectorsOf: COM.Interface.
		dbg
			unskipSelectorsOf: COM.ObjectStub;
			unskipSelector: #comCallback:id:subId:withArgumentsAt:cookie: of: ProcessorScheduler.
		dbg unskipSelectorsOf: COM.InterfaceFunction].

"Clear away all running objects"
COM.ObjectStub disconnectAll; initializeRegistries.

"Clear up the IMalloc allocators, etc"
COM.OLELibrary closeDefault.
OS.RPCLibrary closeDefault.

"Since we cannot control the order in which classes are removed, we must
 explicitly uninitialize all the interface classes first so that all IIDs, etc,
 are first free''d up."
COM.Interface withAllSubclasses do: [:c | c uninitializeBeforeRemove].
COM.Interface initializeRegister.
'.

package setClassNames: #(
	#{OS.COM}
	#{OS.COM.AbstractInterfaceFunction}
	#{OS.COM.AddRefFunction}
	#{OS.COM.BSTR}
	#{OS.COM.CADWORD}
	#{OS.COM.CALPOLESTR}
	#{OS.COM.ClassFactory}
	#{OS.COM.CLSID}
	#{OS.COM.COAUTHIDENTITY}
	#{OS.COM.COAUTHINFO}
	#{OS.COM.COSERVERINFO}
	#{OS.COM.CountedArray}
	#{OS.COM.Enumerable}
	#{OS.COM.Enumerator}
	#{OS.COM.EXCEPINFO}
	#{OS.COM.IClassFactory}
	#{OS.COM.IClassFactory2}
	#{OS.COM.IEnumString}
	#{OS.COM.IEnumStruct}
	#{OS.COM.IEnumUnknown}
	#{OS.COM.IEnumXXXX}
	#{OS.COM.IErrorInfo}
	#{OS.COM.IID}
	#{OS.COM.IMalloc}
	#{OS.COM.Interface}
	#{OS.COM.InterfaceEnumerator}
	#{OS.COM.InterfaceFunction}
	#{OS.COM.InterfaceImplementation}
	#{OS.COM.IObjectWithSite}
	#{OS.COM.IServiceProvider}
	#{OS.COM.ISupportErrorInfo}
	#{OS.COM.IUnknown}
	#{OS.COM.LICINFO}
	#{OS.COM.MULTI_QI}
	#{OS.COM.ObjectStub}
	#{OS.COM.OLEAutLibrary}
	#{OS.COM.OLEConstants}
	#{OS.COM.OLELibrary}
	#{OS.COM.QueryInterfaceFunction}
	#{OS.COM.ReleaseFunction}
	#{OS.COM.SingletonClassFactory}
	#{OS.COM.TaskMemory}
).

package setMethodNames: #(
	#(#{Core.ByteArray} #copyToCOMTaskMemory)
	#(#{Core.InvalidArgumentError} #hresult)
	#(#{Core.SessionManager} #comStartup)
	#(#{Core.String} #asBSTR)
	#(#{Core.String} #copyToCOMTaskMemory)
	#(#{External.Memory class} #queryInterface:ifNone:)
	#(#{External.Structure} #copyToCOMTaskMemory)
	#(#{Kernel.ProcessorScheduler} #comCallback:id:subId:withArgumentsAt:cookie:)
	#(#{Kernel.ProcessorScheduler} #registerCOMStub:)
	#(#{Kernel.ProcessorScheduler} #unregisterCOMStub:)
).

package setVariableNames: #(
	#{OS.COM.Ole32}
	#{OS.COM.OleAut32}
).

package setBinaryVariableNames: #(
	#{OS.COM.Ole32}
	#{OS.COM.OleAut32}
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'..\..\Registry\Dolphin Registry Access'
).

package!

"Class Definitions"!

OS
	subclass: #'OS.COM'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.Win32Errors})
	classInstanceVariableNames: ''
	classConstants: {}!

Kernel.SharedPool
	subclass: #'OS.COM.OLEConstants'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'CLSCTX_INPROC_HANDLER' -> 16r2.
			'CLSCTX_INPROC_SERVER' -> 16r1.
			'CLSCTX_LOCAL_SERVER' -> 16r4.
			'CLSCTX_REMOTE_SERVER' -> 16r10.
			'MEMCTX_SHARED' -> 16r2.
			'MEMCTX_TASK' -> 16r1.
			'REGCLS_MULTI_SEPARATE' -> 16r2.
			'REGCLS_MULTIPLEUSE' -> 16r1
		}!

Core.Object
	subclass: #'OS.COM.AbstractInterfaceFunction'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'OS.COM.InterfaceImplementation'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.Win32Errors} #{OS.COM.OLEConstants})
	classInstanceVariableNames: ''
	classConstants: {}!

Core.Object
	subclass: #'OS.COM.ObjectStub'
	instanceVariableNames: 'cookie object count interfaces outerUnknown'
	classVariableNames: 'IdentityRegistry'
	imports: #(#{OS.Win32Errors private})
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.AbstractInterfaceFunction
	subclass: #'OS.COM.AddRefFunction'
	instanceVariableNames: ''
	classVariableNames: 'Descriptor'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.AbstractInterfaceFunction
	subclass: #'OS.COM.InterfaceFunction'
	instanceVariableNames: 'selector descriptor'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.AbstractInterfaceFunction
	subclass: #'OS.COM.QueryInterfaceFunction'
	instanceVariableNames: ''
	classVariableNames: 'Descriptor'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.AbstractInterfaceFunction
	subclass: #'OS.COM.ReleaseFunction'
	instanceVariableNames: ''
	classVariableNames: 'Descriptor'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.SequenceableCollection
	subclass: #'OS.COM.Enumerable'
	instanceVariableNames: 'interface'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

External.Address
	variableByteSubclass: #'OS.COM.BSTR'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

External.Memory
	variableByteSubclass: #'OS.COM.TaskMemory'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

External.DynamicLinkLibrary
	subclass: #'OS.COM.OLEAutLibrary'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

External.DynamicLinkLibrary
	subclass: #'OS.COM.OLELibrary'
	instanceVariableNames: 'comOnly'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

Core.GUID
	variableByteSubclass: #'OS.COM.CLSID'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_CLSID_Size' -> 16r10 }!

Core.GUID
	variableByteSubclass: #'OS.COM.IID'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_IID_Size' -> 16r10 }!

OS.COM.InterfaceImplementation
	subclass: #'OS.COM.ClassFactory'
	instanceVariableNames: 'serverClass clsid registration'
	classVariableNames: 'Factories Instances LockCount'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.InterfaceImplementation
	subclass: #'OS.COM.Enumerator'
	instanceVariableNames: 'enumClass contents'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.ClassFactory
	subclass: #'OS.COM.SingletonClassFactory'
	instanceVariableNames: 'current'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.Enumerator
	subclass: #'OS.COM.InterfaceEnumerator'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

External.Structure
	subclass: #'OS.COM.COAUTHIDENTITY'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_COAUTHIDENTITY_Size' -> 16r1C.
			'_OffsetOf_Domain' -> 16r8.
			'_OffsetOf_DomainLength' -> 16rC.
			'_OffsetOf_Flags' -> 16r18.
			'_OffsetOf_Password' -> 16r10.
			'_OffsetOf_PasswordLength' -> 16r14.
			'_OffsetOf_User' -> 16r0.
			'_OffsetOf_UserLength' -> 16r4
		}!

External.Structure
	subclass: #'OS.COM.COAUTHINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_COAUTHINFO_Size' -> 16r1C.
			'_OffsetOf_dwAuthnLevel' -> 16rC.
			'_OffsetOf_dwAuthnSvc' -> 16r0.
			'_OffsetOf_dwAuthzSvc' -> 16r4.
			'_OffsetOf_dwCapabilities' -> 16r18.
			'_OffsetOf_dwImpersonationLevel' -> 16r10.
			'_OffsetOf_pAuthIdentityData' -> 16r14.
			'_OffsetOf_pwszServerPrincName' -> 16r8
		}!

External.Structure
	subclass: #'OS.COM.COSERVERINFO'
	instanceVariableNames: 'hostName'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_COSERVERINFO_Size' -> 16r10.
			'_OffsetOf_dwReserved1' -> 16r0.
			'_OffsetOf_dwReserved2' -> 16rC.
			'_OffsetOf_pAuthInfo' -> 16r8.
			'_OffsetOf_pwszName' -> 16r4
		}!

External.Structure
	subclass: #'OS.COM.Interface'
	instanceVariableNames: 'implementor'
	classVariableNames: 'InterfaceClasses'
	imports: #(#{OS.Win32Constants private} #{OS.Win32Errors private} #{OS.COM.OLEConstants})
	classInstanceVariableNames: 'argSizes functions typeLib'
	classConstants: {
			'_Interface_Size' -> 16r10.
			'_OffsetOf_argSizes' -> 16r4.
			'_OffsetOf_interfaceCookie' -> 16rC.
			'_OffsetOf_objectCookie' -> 16r8.
			'_OffsetOf_vtbl' -> 16r0.
			'EgressOnlyMask' -> 16r10000
		}!

External.ExternalArray
	subclass: #'OS.COM.CountedArray'
	instanceVariableNames: 'elements'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_OffsetOf_cElems' -> 16r0. '_OffsetOf_pElems' -> 16r4 }!

OS.COM.CountedArray
	subclass: #'OS.COM.CADWORD'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_CADWORD_Size' -> 16r8 }!

OS.COM.CountedArray
	subclass: #'OS.COM.CALPOLESTR'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: { '_CALPOLESTR_Size' -> 16r8 }!

External.FinalizableStructure
	subclass: #'OS.COM.EXCEPINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.Win32Errors})
	classInstanceVariableNames: ''
	classConstants: {
			'_EXCEPINFO_Size' -> 16r20.
			'_OffsetOf_dwHelpContext' -> 16r10.
			'_OffsetOf_pfnDeferredFillIn' -> 16r18.
			'_OffsetOf_pvReserved' -> 16r14.
			'_OffsetOf_pwszDescription' -> 16r8.
			'_OffsetOf_pwszHelpFile' -> 16rC.
			'_OffsetOf_pwszSource' -> 16r4.
			'_OffsetOf_scode' -> 16r1C.
			'_OffsetOf_wCode' -> 16r0.
			'_OffsetOf_wReserved' -> 16r2
		}!

External.FinalizableStructure
	subclass: #'OS.COM.MULTI_QI'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_MULTI_QI_Size' -> 16rC.
			'_OffsetOf_hr' -> 16r8.
			'_OffsetOf_pIID' -> 16r0.
			'_OffsetOf_pItf' -> 16r4
		}!

OS.COM.Interface
	subclass: #'OS.COM.IUnknown'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IUnknown
	subclass: #'OS.COM.IClassFactory'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IUnknown
	subclass: #'OS.COM.IEnumXXXX'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IUnknown
	subclass: #'OS.COM.IErrorInfo'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IUnknown
	subclass: #'OS.COM.IMalloc'
	instanceVariableNames: ''
	classVariableNames: 'Task'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IUnknown
	subclass: #'OS.COM.IObjectWithSite'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IUnknown
	subclass: #'OS.COM.IServiceProvider'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IUnknown
	subclass: #'OS.COM.ISupportErrorInfo'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IClassFactory
	subclass: #'OS.COM.IClassFactory2'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IEnumXXXX
	subclass: #'OS.COM.IEnumString'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IEnumXXXX
	subclass: #'OS.COM.IEnumStruct'
	instanceVariableNames: 'elementClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IEnumXXXX
	subclass: #'OS.COM.IEnumUnknown'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.SizedStructure
	subclass: #'OS.COM.LICINFO'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'_LICINFO_Size' -> 16rC.
			'_OffsetOf_fLicVerified' -> 16r8.
			'_OffsetOf_fRuntimeKeyAvail' -> 16r4
		}!

"Loose Methods"!

!Core.ByteArray methodsFor!

copyToCOMTaskMemory
	"Answer a COM.TaskMemory object containing a copy of the receiver's
	bytes."

	| size |
	size := self byteSize.
	^(OS.COM.TaskMemory new: size)
		replaceFrom: 1
		to: size
		with: self
		startingAt: 1! !

!Core.ByteArray categoriesForMethods!
copyToCOMTaskMemory!copying!public! !
!

!Core.InvalidArgumentError methodsFor!

hresult
	"Answer the <HRESULT> error code associated with the receiver.
	Overridden by subclasses to answer more specified HRESULT codes."

	^OS.HRESULT fromInteger: E_INVALIDARG! !

!Core.InvalidArgumentError categoriesForMethods!
hresult!accessing!public! !
!

!Core.SessionManager methodsFor!

comStartup
	"Private - Start up the COM sub-system."

	"Implementation Note: This used to be delayed until tertiary startup and hung off the #sessionStarted
	event, but that relied on COMInterface having registered itself before certain other event targets
	and was therefore not reliable."

	COM.IUnknown onStartup.
	"Attach the outer unknown passed by the stub, if any"
	self outer notNull ifTrue: [startupArgs at: 2 put: (COM.IUnknown attach: self outer)]! !

!Core.SessionManager categoriesForMethods!
comStartup!operations-startup!private! !
!

!Core.String methodsFor!

asBSTR
	"Answer the BSTR (AX Automation string) representation of the receiver.
	This conversion will also work fine for Utf16String."

	^OS.COM.BSTR fromString: self!

copyToCOMTaskMemory
	"Answer a COM.TaskMemory object containing a copy of the receiver's
	characters."

	^OS.COM.TaskMemory fromString: self! !

!Core.String categoriesForMethods!
asBSTR!converting!public! !
copyToCOMTaskMemory!copying!public! !
!

!External.Memory class methodsFor!

queryInterface: interfaceClass ifNone: exceptionHandler
	"Answer a new interface which supports the specified interface protocol
	(usually a class). If the receiver does not support the interface,
	answer the result of evaluating the niladic valuable, exceptionHandler.
	N.B. It is not necessary to answer an instance of the requested interface class,
	a subinstance will do, or even a completely different class, as long as the
	protocol of the requested class is supported.."

	^interfaceClass == COM.IMalloc
		ifTrue: [interfaceClass on: self]
		ifFalse: [exceptionHandler value]! !

!External.Memory class categoriesForMethods!
queryInterface:ifNone:!accessing-interfaces!public! !
!

!External.Structure methodsFor!

copyToCOMTaskMemory
	"Answer a block of COM Task Memory into which the bytes of the 
	receiver have been copied."

	^self
		copy: COM.TaskMemory
		from: 1
		to: self byteSize! !

!External.Structure categoriesForMethods!
copyToCOMTaskMemory!copying!public! !
!

!Kernel.ProcessorScheduler methodsFor!

comCallback: vfnIndex 
		id: objectCookie 
		subId: interfaceCookie 
		withArgumentsAt: anAddress 
		cookie: cookie
	"Private - Entry point from the VM. Suspend whatever the receiver is doing and send
	the virtual callback with cookies, objectCookie and interfaceCookie, for the virtual
	function indexed, vfnIndex, and whose arguments are stored in the VM's stack at the 
	address, anAddress." 

	"Transcript show: 'Com callback(vfn:', vfnIndex printString, ',', objectCookie printString, ',', interfaceCookie printString, ',', anAddress printString, ')'; cr."
	self callback: cookie return: 
		([(comStubs at: objectCookie)
			callback: interfaceCookie vfn: vfnIndex withArgumentsAt: anAddress]
				ifCurtailed: [self unwindCallback: cookie])!

registerCOMStub: target
	"Private - Register the specified argument COM callback target, answering its cookie."

	comStubs isNil ifTrue: [comStubs := PermanentRegistry new].
	^comStubs addAnsweringIndex: target!

unregisterCOMStub: cookie
	"Private - Unregister the COM object stub with the specified cookie."

	comStubs isNil ifTrue: [comStubs := PermanentRegistry new].
	comStubs removeAtIndex: cookie! !

!Kernel.ProcessorScheduler categoriesForMethods!
comCallback:id:subId:withArgumentsAt:cookie:!callbacks!debugger-step through!not restartable!private!vm entry points! !
registerCOMStub:!accessing!private! !
unregisterCOMStub:!callbacks!private! !
!

"End of package definition"!

