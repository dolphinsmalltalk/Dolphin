| package |
package := Package name: 'OLE Structured Storage'.
package paxVersion: 2.1;
	environmentName: #{OS.COM};
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk OLE Structured Storage Support. 
Copyright (c) Object Arts Ltd 1997-2003. Portions copyright (c) CGI Group (Europe) Ltd, 1997.

An OLE Structure Storage is a file system within a file. Each "storage" can contain multiple sub-storages and "streams". Streams are arbitrary byte-streams of data on which any interpretation can be placed, and are thus like files, whereas storages are like directories. Structure storage files are also referred to as "compound documents". See the Microsoft SDK documentation or "Inside OLE, 2e" for further information on structured storage.

This package includes wrappers for all the basic OLE/COM/Active-X structured storage interfaces, the most important of which are IStorage and IStream, which are the main interfaces onto storages and streams respectively. Also included are implementations of IStream onto standard Smalltalk streams, and ILockBytes (the underlying storage mechanism used by the system implementation of IStorage/IStream) onto both ByteArrays and Files.

Lastly the package includes wrappers for functions in the URLMonLibrary which provide high-level functions for downloading files from the Internet, for example:

	f := URLMonLibrary default urlDownloadToCacheFile: ''http://www.object-arts.com/Home.htm''.
	(FileStream read: f) contents. 	"Display me"

'.

package basicPackageVersion: '6.1'.


package setClassNames: #(
	#{OS.COM.ILockBytes}
	#{OS.COM.IRootStorage}
	#{OS.COM.IStorage}
	#{OS.COM.LockBytes}
	#{OS.COM.LockBytesAbstract}
	#{OS.COM.URLMonLibrary}
).

package setMethodNames: #(
	#(#{Core.FileStream} #SetSize:)
	#(#{Core.FileStream} #Stat:grfStatFlag:)
	#(#{Core.SequencedStream} #Commit:)
	#(#{Core.SequencedStream} #CopyTo:cb:pcbRead:pcbWritten:)
	#(#{Core.SequencedStream} #finalRelease)
	#(#{Core.SequencedStream} #LockRegion:cb:dwLockType:)
	#(#{Core.SequencedStream} #queryInterface:)
	#(#{Core.SequencedStream} #queryInterface:ifNone:)
	#(#{Core.SequencedStream} #Read:cb:pcbRead:)
	#(#{Core.SequencedStream} #Revert)
	#(#{Core.SequencedStream} #Seek:dwOrigin:plibNewPosition:)
	#(#{Core.SequencedStream} #SetSize:)
	#(#{Core.SequencedStream} #Stat:grfStatFlag:)
	#(#{Core.SequencedStream} #UnlockRegion:cb:dwLockType:)
	#(#{Core.SequencedStream} #Write:cb:pcbWritten:)
	#(#{Core.WriteStream} #SetSize:)
	#(#{OS.COM.IStream class} #onURL:)
	#(#{OS.COM.OLELibrary} #createILockBytesOnHGlobal:fDeleteOnRelease:pplkbyt:)
	#(#{OS.COM.OLELibrary} #getConvertStg:)
	#(#{OS.COM.OLELibrary} #getHGlobalFromILockBytes:phglobal:)
	#(#{OS.COM.OLELibrary} #oleDoAutoConvert:pClsidNew:)
	#(#{OS.COM.OLELibrary} #readClassStg:pclsid:)
	#(#{OS.COM.OLELibrary} #readFmtUserTypeStg:pcf:lplpszUserType:)
	#(#{OS.COM.OLELibrary} #setConvertStg:fConvert:)
	#(#{OS.COM.OLELibrary} #stgCreateDocfile:grfMode:reserved:ppstgOpen:)
	#(#{OS.COM.OLELibrary} #stgCreateDocfileOnILockBytes:grfMode:reserved:ppstgOpen:)
	#(#{OS.COM.OLELibrary} #stgIsStorageFile:)
	#(#{OS.COM.OLELibrary} #stgIsStorageILockBytes:)
	#(#{OS.COM.OLELibrary} #stgOpenStorage:pstgPriority:grfMode:snbExclude:reserved:ppstgOpen:)
	#(#{OS.COM.OLELibrary} #stgOpenStorageOnILockBytes:pstgPriority:grfMode:snbExclude:reserved:ppstgOpen:)
	#(#{OS.COM.OLELibrary} #stgSetTimes:pctime:patime:pmtime:)
	#(#{OS.COM.OLELibrary} #writeClassStg:rclsid:)
	#(#{OS.COM.OLELibrary} #writeFmtUserTypeStg:cf:lpszUserType:)
	#(#{OS.StdioFileStream} #Read:cb:pcbRead:)
	#(#{OS.StdioFileStream} #SetSize:)
	#(#{OS.StdioFileStream} #Stat:grfStatFlag:)
	#(#{OS.StdioTextFileStream} #Write:cb:pcbWritten:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'..\COM\OLE COM'
	'OLE Streams'
).

package!

"Class Definitions"!

External.DynamicLinkLibrary
	subclass: #'OS.COM.URLMonLibrary'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.InterfaceImplementation
	subclass: #'OS.COM.LockBytesAbstract'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.COM.StorageConstants private})
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.LockBytesAbstract
	subclass: #'OS.COM.LockBytes'
	instanceVariableNames: 'bytes'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IUnknown
	subclass: #'OS.COM.ILockBytes'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.COM.StorageConstants})
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IUnknown
	subclass: #'OS.COM.IRootStorage'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IUnknown
	subclass: #'OS.COM.IStorage'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.COM.StorageConstants})
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.FileStream methodsFor!

SetSize: libNewSize
	"Invoke the SetSize() method of the object wrapped by the receiver.
	
		HRESULT __stdcall SetSize(
			[in] ULARGE_INTEGER libNewSize);
	"

	| pos |
	pos := self position.
	self position: libNewSize.
	flags := flags bitOr: LimitsChangedMask.
	self position: pos.
	^S_OK!

Stat: pstatstg grfStatFlag: grfStatFlag
	"Implement the IStream::Stat() method.
	
		HRESULT __stdcall Stat(
			[out] STATSTG* pstatstg,
			[in] unsigned long grfStatFlag);
	"

	| hr grfMode |
	hr := super Stat: pstatstg grfStatFlag: grfStatFlag.
	hr < 0 ifTrue: [^hr].
	(grfStatFlag allMask: StorageConstants.STATFLAG_NONAME)
		ifFalse: [pstatstg name: self name].
	file
		getTimes: pstatstg ctime
		atime: pstatstg atime
		mtime: pstatstg mtime.
	"FileStreams require that files at least be readable."
	grfMode := (file accessFlags allMask: Win32Constants.GENERIC_WRITE)
				ifTrue: [StorageConstants.STGM_READWRITE]
				ifFalse: [StorageConstants.STGM_READ].
	file openFlags = Win32Constants.OPEN_EXISTING
		ifFalse: [grfMode := grfMode bitOr: StorageConstants.STGM_CREATE].
	grfMode := grfMode
				bitOr: (##({
						StorageConstants.STGM_SHARE_EXCLUSIVE.
						StorageConstants.STGM_SHARE_DENY_WRITE.
						StorageConstants.STGM_SHARE_DENY_READ.
						StorageConstants.STGM_SHARE_DENY_NONE
					}) at: file shareFlags + 1).
	pstatstg grfMode: grfMode.
	^hr! !

!Core.FileStream categoriesForMethods!
SetSize:!COM Interfaces-IStream!public! !
Stat:grfStatFlag:!COM Interfaces-IStream!public! !
!

!Core.SequencedStream methodsFor!

Commit: grfCommitFlags 
	"Implement the IStream::Commit() method.
	
		HRESULT __stdcall Commit(
			[in] unsigned long grfCommitFlags);
	"

	"Implementation Note: Transactions are not supported, so this method has no effect other
	than to flush the stream. The flags are ignored."

	self flush.
	^S_OK!

CopyTo: pstm cb: cb pcbRead: pcbRead pcbWritten: pcbWritten 
	"Implement the IStream::CopyTo() method.
	
		HRESULT __stdcall CopyTo(
			[in] IStream* pstm,
			[in] ULARGE_INTEGER cb,
			[out] ULARGE_INTEGER* pcbRead,
			[out] ULARGE_INTEGER* pcbWritten);
	"

	| read written block countWritten |
	read := 0.
	countWritten := pcbWritten bytes notNull.
	written := 0.
	[self atEnd or: [read > cb]] whileFalse: 
			[block := self nextAvailable: 8192.
			read := read + block size.
			pstm 
				Write: block
				cb: block size
				pcbWritten: pcbWritten.
			countWritten ifTrue: [written := written + pcbWritten value]].
	pcbRead bytes notNull ifTrue: [pcbRead value: read].
	countWritten ifTrue: [pcbWritten value: written].
	^S_OK!

finalRelease
	"The last reference to the receiver (as a COM object) has been released.
	This is an opportunity to actively clean up, rather than passively waiting 
	for finalization which might is asynchronous and may never happen if the 
	object doesn't become garbage."

	"Override as necessary"

	"Transcript print: self; display: ' final release'; cr"

	!

LockRegion: libOffset cb: cb dwLockType: dwLockType 
	"Implement the IStream::LockRegion() method.
	
		HRESULT __stdcall LockRegion(
			[in] ULARGE_INTEGER libOffset,
			[in] ULARGE_INTEGER cb,
			[in] unsigned long dwLockType);
	"

	"From MSDN: Support for this method is optional for implementations of stream objects since
	it may not be supported by the underlying file system. The type of locking supported is also
	optional. The STG_E_INVALIDFUNCTION error is returned if the requested type of locking is
	not supported."

	^StorageConstants.STG_E_INVALIDFUNCTION!

queryInterface: anInterfaceClass 
	"Answer a new interface which supports the specified interface protocol
	(usually a class), or nil if the receiver does not support the interface."

	^self queryInterface: anInterfaceClass ifNone: []!

queryInterface: interfaceClass ifNone: exceptionHandler
	"Answer a new interface which supports the specified interface protocol
	(usually a class). If the receiver does not support the interface,
	answer the result of evaluating the niladic valuable, exceptionHandler.
	N.B. It is not necessary to answer an instance of the requested interface class,
	a subinstance will do, or even a completely different class, as long as the
	protocol of the requested class is supported.."

	^(##({ IUnknown. IStream }) detect: [:each | each supportsInterface: interfaceClass]
		ifNone: [^exceptionHandler value]) on: self!

Read: pv cb: cb pcbRead: pcbRead 
	"Implement the IStream::Read().
	
		HRESULT __stdcall Read(
			[out] byte* pv,
			[in] unsigned long cb,
			[out] unsigned long* pcbRead);
	"

	| count |
	count := cb min: self size - self position.
	self 
		basicNext: count
		into: pv
		startingAt: 1.
	pcbRead bytes isNull ifFalse: [pcbRead value: count].
	^S_OK!

Revert
	"Implement the IStream::Revert() method

		HRESULT __stdcall Revert();
	"

	"Implementation Note: Transactions are not supported, so this method has no effect."

	^S_FALSE!

Seek: dlibMove dwOrigin: dwOrigin plibNewPosition: plibNewPosition
	"Implement the IStream::Seek() method..
	
		HRESULT __stdcall Seek(
			[in] LARGE_INTEGER dlibMove,
			[in] unsigned long dwOrigin,
			[out] ULARGE_INTEGER* plibNewPosition);
	"

	| currentSize position |
	currentSize := self size.
	position := dwOrigin == StorageConstants.STREAM_SEEK_SET
				ifTrue: [dlibMove]
				ifFalse: 
					[dwOrigin == StorageConstants.STREAM_SEEK_CUR
						ifTrue: [self position + dlibMove]
						ifFalse: 
							[dwOrigin == StorageConstants.STREAM_SEEK_END
								ifTrue: [currentSize - dlibMove]
								ifFalse: [-1]]].
	"It is not an error to seek beyond the current end of stream. This is expected to extend the stream."
	(position < 0 or: [position > currentSize and: [(self SetSize: position) < 0]])
		ifTrue: 
			[plibNewPosition bytes isNull ifFalse: [plibNewPosition value: 0].
			^StorageConstants.STG_E_INVALIDFUNCTION].
	self position: position.
	plibNewPosition bytes isNull ifFalse: [plibNewPosition value: position].
	^S_OK!

SetSize: libNewSize 
	"Invoke the SetSize() method of the object wrapped by the receiver.
	
		HRESULT __stdcall SetSize(
			[in] ULARGE_INTEGER libNewSize);

	IStream::SetSize changes the size of the stream object. Call this method to preallocate space for the stream. If the libNewSize parameter is larger than the current stream size, the stream is extended to the indicated size by filling the intervening space with bytes of undefined value. This operation is similar to the ISequentialStream::Write method if the seek pointer is past the current end of the stream.

	If the libNewSize parameter is smaller than the current stream, the stream is truncated to the indicated size.	

	The seek pointer is not affected by the change in stream size.
	"

	^StorageConstants.STG_E_INVALIDFUNCTION

!

Stat: pstatstg grfStatFlag: grfStatFlag
	"Implement the IStream::Stat() method.
	
		HRESULT __stdcall Stat(
			[out] STATSTG* pstatstg,
			[in] unsigned long grfStatFlag);
	"

	"Make sure it is zeroed out"

	pstatstg class init: pstatstg.
	pstatstg
		type: StorageConstants.STGTY_STREAM;
		cbSize: self size * self elementSize.
	^S_OK!

UnlockRegion: libOffset cb: cb dwLockType: dwLockType 
	"Implement the IStream::UnlockRegion() method.
	
		HRESULT __stdcall UnlockRegion(
			[in] ULARGE_INTEGER libOffset,
			[in] ULARGE_INTEGER cb,
			[in] unsigned long dwLockType);
	"

	"Implementation Note: Locking is not supported."

	^StorageConstants.STG_E_INVALIDFUNCTION!

Write: pv cb: cb pcbWritten: pcbWritten 
	"Implement the IStream::Write() method.
	
		HRESULT __stdcall Write(
			[in] byte* pv,
			[in] unsigned long cb,
			[out] unsigned long* pcbWritten);
	"

	self 
		next: cb
		putAll: pv
		startingAt: 1.
	pcbWritten bytes isNull ifFalse: [pcbWritten value: cb].
	^S_OK! !

!Core.SequencedStream categoriesForMethods!
Commit:!public! !
CopyTo:cb:pcbRead:pcbWritten:!COM Interfaces-IStream!public! !
finalRelease!public! !
LockRegion:cb:dwLockType:!COM Interfaces-IStream!public! !
queryInterface:!accessing-interfaces!public! !
queryInterface:ifNone:!accessing-interfaces!public! !
Read:cb:pcbRead:!COM Interfaces-IStream!public! !
Revert!COM Interfaces-IStream!public! !
Seek:dwOrigin:plibNewPosition:!COM Interfaces-IStream!public! !
SetSize:!COM Interfaces-IStream!public! !
Stat:grfStatFlag:!COM Interfaces-IStream!public! !
UnlockRegion:cb:dwLockType:!COM Interfaces-IStream!public! !
Write:cb:pcbWritten:!COM Interfaces-IStream!public! !
!

!Core.WriteStream methodsFor!

SetSize: libNewSize
	"Invoke the SetSize() method of the object wrapped by the receiver.
	
		HRESULT __stdcall SetSize(
			[in] ULARGE_INTEGER libNewSize);

	IStream::SetSize changes the size of the stream object. Call this method to preallocate space for the stream. If the libNewSize parameter is larger than the current stream size, the stream is extended to the indicated size by filling the intervening space with bytes of undefined value. This operation is similar to the ISequentialStream::Write method if the seek pointer is past the current end of the stream.

	If the libNewSize parameter is smaller than the current stream, the stream is truncated to the indicated size.	

	The seek pointer is not affected by the change in stream size.
	"

	collection resize: (readLimit := writeLimit := libNewSize).
	^S_OK! !

!Core.WriteStream categoriesForMethods!
SetSize:!COM Interfaces-IStream!public! !
!

!OS.COM.IStream class methodsFor!

onURL: urlString
	"Answer a new instance of the receiver on the file, web page, etc, with the specified
	URL."

	| answer |
	answer := self newPointer.
	URLMonLibrary default
		urlOpenBlockingStream: nil
		szURL: urlString
		ppStream: answer
		dwReserved: 0
		lpfnCB: nil.
	^answer! !

!OS.COM.IStream class categoriesForMethods!
onURL:!instance creation!public! !
!

!OS.COM.OLELibrary methodsFor!

createILockBytesOnHGlobal: hglobal fDeleteOnRelease: fDeleteOnRelease pplkbyt: pplkbyt
	"Invoke the CreateILockBytesOnHGlobal() function of the module wrapped by the receiver.
	Helpstring: Creates a byte array object that uses an HGLOBAL memory handle to store the bytes intended for in-memory storage of a compound file. This object is the OLE-provided implementation of the ILockBytes interface

		HRESULT __stdcall CreateILockBytesOnHGlobal(
			[in]HGLOBAL HGLOBAL,
			[in]BOOL fDeleteOnRelease,
			[out, retval]ILockBytes** pplkbyt);"

	<stdcall: hresult CreateILockBytesOnHGlobal handle bool ILockBytes**>
	^self invalidCall: _failureCode!

getConvertStg: pStg
	"Answer the convert bit of the specified storage (see setConvertStg:fConvert:)

		WINOLEAPI GetConvertStg(IStorage* pStg);"

	<stdcall: hresult GetConvertStg IStorage*>
	^self invalidCall: _failureCode!

getHGlobalFromILockBytes: plkbyt phglobal: phglobal
	"Invoke the GetHGlobalFromILockBytes() function of the module wrapped by the receiver.
	Helpstring: Retrieves a global memory handle to a byte array object created using the CreateILockBytesOnHGlobal function

		HRESULT __stdcall GetHGlobalFromILockBytes(
			[in]ILockBytes* plkbyt,
			[out, retval]HGLOBAL* phglobal);"

	<stdcall: hresult GetHGlobalFromILockBytes ILockBytes* handle*>
	^self invalidCall: _failureCode!

oleDoAutoConvert: pStg pClsidNew: aCLSID
	"Automatically converts an object to a new class if automatic conversion for that object class is set in the registry.
	Answer the new class through the out parameter, pClsidNew

		WINOLEAPI OleDoAutoConvert(
			IStorage * pStg, 	//Pointer to storage object to be converted
			LPCLSID pClsidNew	//Pointer to new CLSID of converted object
		);"

	<stdcall: hresult OleDoAutoConvert IStorage* guid*>
	^self invalidCall: _failureCode!

readClassStg: pStg pclsid: pclsid
	"Invoke the ReadClassStg() function of the module wrapped by the receiver.
	Helpstring: Reads a CLSID previously written in a storage object with WriteClassStg

		HRESULT __stdcall ReadClassStg(
			IStorage* pStg,
			GUID* pclsid);"

	<stdcall: hresult ReadClassStg IStorage* guid*>
	^self invalidCall: _failureCode!

readFmtUserTypeStg: pStg pcf: pcf lplpszUserType: lplpszUserType
	"Invoke the ReadFmtUserTypeStg() function of the module wrapped by the receiver.
	Helpstring: Returns the clipboard format and user type previously saved with WriteFmtUserTypeStg

		HRESULT __stdcall ReadFmtUserTypeStg(
			IStorage* pStg,
			CLIPFORMAT* pcf,
			LPWSTR* lplpszUserType);"

	<stdcall: hresult ReadFmtUserTypeStg IStorage* uint16* lpwstr*>
	^self invalidCall: _failureCode!

setConvertStg: pStg fConvert: aBoolean
	"Set/Reset the convert bit in a storage to indicate that the object is to be 
	converted to a new class when it is opened.

		WINOLEAPI SetConvertStg(
			IStorage * pStg, 	//Pointer to storage object where the conversion bit is to be set
			BOOL fConvert	//Whether an object is to be converted
		);"

	<stdcall: hresult SetConvertStg IStorage* bool>
	^self invalidCall: _failureCode!

stgCreateDocfile: pwcsName grfMode: grfMode reserved: reserved ppstgOpen: ppstgOpen
	"Invoke the StgCreateDocfile() function of the module wrapped by the receiver.
	Helpstring: Creates a new compound file storage object using the COM-provided compound file implementation of IStoreage

		HRESULT __stdcall StgCreateDocfile(
			[in]LPCWSTR pwcsName,
			[in]STGM grfMode,
			[in]unsigned long Reserved,
			[out, retval]IStorage** ppstgOpen);"

	<stdcall: hresult StgCreateDocfile lpwstr int32 uint32 IStorage**>
	^self invalidCall: _failureCode!

stgCreateDocfileOnILockBytes: plkbyt grfMode: grfMode reserved: reserved ppstgOpen: ppstgOpen
	"Invoke the StgCreateDocfileOnILockBytes() function of the module wrapped by the receiver.
	Helpstring: Creates and opens a new compound file storage object on top of a byte-array object provided by the caller.

		HRESULT __stdcall StgCreateDocfileOnILockBytes(
			ILockBytes* plkbyt,
			[in]unsigned long grfMode,
			[in]unsigned long Reserved,
			[out, retval]IStorage** ppstgOpen);"

	<stdcall: hresult StgCreateDocfileOnILockBytes ILockBytes* uint32 uint32 IStorage**>
	^self invalidCall: _failureCode!

stgIsStorageFile: pwcsName
	"Invoke the StgIsStorageFile() function of the module wrapped by the receiver.
	Helpstring: Indicates whether a particular disk file contains a storage object

		BOOL __stdcall StgIsStorageFile(
			LPCWSTR pwcsName);"

	<stdcall: bool StgIsStorageFile lpwstr>
	^self invalidCall: _failureCode!

stgIsStorageILockBytes: plkbyt
	"Invoke the StgIsStorageILockBytes() function of the module wrapped by the receiver.
	Helpstring: Indicates whether the specified byte array contains a storage object

		HRESULT __stdcall StgIsStorageILockBytes(
			[in]ILockBytes* plkbyt);"

	<stdcall: hresult StgIsStorageILockBytes ILockBytes*>
	^self invalidCall: _failureCode!

stgOpenStorage: pwcsName pstgPriority: pstgPriority grfMode: grfMode snbExclude: snbExclude reserved: reserved ppstgOpen: ppstgOpen
	"Invoke the StgOpenStorage() function of the module wrapped by the receiver.
	Helpstring: Opens an existing root storage object in the file system

		HRESULT __stdcall StgOpenStorage(
			[in]LPCWSTR pwcsName,
			[in]IStorage* pstgPriority,
			[in]STGM grfMode,
			[in]SNB snbExclude,
			[in]unsigned long Reserved,
			[out, retval]IStorage** ppstgOpen);"

	<stdcall: hresult StgOpenStorage lpwstr IStorage* int32 lpwstr* uint32 IStorage**>
	^self invalidCall: _failureCode!

stgOpenStorageOnILockBytes: plkbyt pstgPriority: pstgPriority grfMode: grfMode snbExclude: snbExclude reserved: reserved ppstgOpen: ppstgOpen
	"Invoke the StgOpenStorageOnILockBytes() function of the module wrapped by the receiver.
	Helpstring: Opens an existing storage object that does not reside in a disk file, but instead has an underlying byte array provided by the caller

		HRESULT __stdcall StgOpenStorageOnILockBytes(
			[in]ILockBytes* plkbyt,
			[in]IStorage* pstgPriority,
			[in]unsigned long grfMode,
			[in]SNB snbExclude,
			[in]unsigned long Reserved,
			[out, retval]IStorage** ppstgOpen);"

	<stdcall: hresult StgOpenStorageOnILockBytes ILockBytes* IStorage* uint32 lpwstr* uint32 IStorage**>
	^self invalidCall: _failureCode!

stgSetTimes: lpszName pctime: pctime patime: patime pmtime: pmtime
	"Invoke the StgSetTimes() function of the module wrapped by the receiver.
	Helpstring: Sets the creation, access, and modification times of the indicated file

		HRESULT __stdcall StgSetTimes(
			[in]LPWSTR lpszName,
			[in]FILETIME* pctime,
			[in]FILETIME* patime,
			[in]FILETIME* pmtime);"

	<stdcall: hresult StgSetTimes lpwstr FILETIME* FILETIME* FILETIME*>
	^self invalidCall: _failureCode!

writeClassStg: pStg rclsid: rclsid
	"Invoke the WriteClassStg() function of the module wrapped by the receiver.
	Helpstring: Stores the specified CLSID in a storage object

		HRESULT __stdcall WriteClassStg(
			IStorage* pStg,
			GUID* rclsid);"

	<stdcall: hresult WriteClassStg IStorage* guid*>
	^self invalidCall: _failureCode!

writeFmtUserTypeStg: pStg cf: cf lpszUserType: lpszUserType
	"Invoke the WriteFmtUserTypeStg() function of the module wrapped by the receiver.
	Helpstring: Writes a clipboard format and user type to a storage object

		HRESULT __stdcall WriteFmtUserTypeStg(
			IStorage* pStg,
			CLIPFORMAT cf,
			LPWSTR lpszUserType);"

	<stdcall: hresult WriteFmtUserTypeStg IStorage* uint16 lpwstr>
	^self invalidCall: _failureCode! !

!OS.COM.OLELibrary categoriesForMethods!
createILockBytesOnHGlobal:fDeleteOnRelease:pplkbyt:!**auto generated**!OLE Functions-Structured Storage!public! !
getConvertStg:!OLE Functions-Structured Storage!primitives!public! !
getHGlobalFromILockBytes:phglobal:!**auto generated**!OLE Functions-Structured Storage!public! !
oleDoAutoConvert:pClsidNew:!OLE Functions-Structured Storage!primitives!public! !
readClassStg:pclsid:!**auto generated**!OLE Functions-Structured Storage!public! !
readFmtUserTypeStg:pcf:lplpszUserType:!**auto generated**!OLE Functions-Structured Storage!public! !
setConvertStg:fConvert:!OLE Functions-Structured Storage!primitives!public! !
stgCreateDocfile:grfMode:reserved:ppstgOpen:!**auto generated**!OLE Functions-Structured Storage!public! !
stgCreateDocfileOnILockBytes:grfMode:reserved:ppstgOpen:!**auto generated**!OLE Functions-Structured Storage!public! !
stgIsStorageFile:!**auto generated**!OLE Functions-Structured Storage!public! !
stgIsStorageILockBytes:!**auto generated**!OLE Functions-Structured Storage!public! !
stgOpenStorage:pstgPriority:grfMode:snbExclude:reserved:ppstgOpen:!**auto generated**!OLE Functions-Structured Storage!public! !
stgOpenStorageOnILockBytes:pstgPriority:grfMode:snbExclude:reserved:ppstgOpen:!**auto generated**!OLE Functions-Structured Storage!public! !
stgSetTimes:pctime:patime:pmtime:!**auto generated**!OLE Functions-Structured Storage!public! !
writeClassStg:rclsid:!**auto generated**!OLE Functions-Structured Storage!public! !
writeFmtUserTypeStg:cf:lpszUserType:!**auto generated**!OLE Functions-Structured Storage!public! !
!

!OS.StdioFileStream methodsFor!

Read: pv cb: cb pcbRead: pcbRead
	"Implement the IStream::Read().
	
		HRESULT __stdcall Read(
			[out] byte* pv,
			[in] unsigned long cb,
			[out] unsigned long* pcbRead);
	"

	| read |
	"We don't use prepareToRead here because #size flushes if needed, and as a result would clear the FlushOnWrite flag too"
	read := crtlib
				fread_s: pv
				bufferSize: cb
				elementSize: 1
				count: (cb min: self size - self position)
				stream: stream.
	flags := flags bitOr: ReadingMask.
	pcbRead bytes isNull ifFalse: [pcbRead value: read].
	^S_OK!

SetSize: libNewSize
	"Invoke the SetSize() method of the object wrapped by the receiver.
	
		HRESULT __stdcall SetSize(
			[in] ULARGE_INTEGER libNewSize);
	"

	self flush.
	crtlib _chsize_s: self fileno size: libNewSize.
	^S_OK!

Stat: pstatstg grfStatFlag: grfStatFlag
	"Implement the IStream::Stat() method.
	
		HRESULT __stdcall Stat(
			[out] STATSTG* pstatstg,
			[in] unsigned long grfStatFlag);
	"

	| hr grfMode attr |
	hr := super Stat: pstatstg grfStatFlag: grfStatFlag.
	hr < 0 ifTrue: [^hr].
	(grfStatFlag noMask: StorageConstants.STATFLAG_NONAME) ifTrue: [pstatstg name: self name].
	attr := File attributesEx: self name.
	pstatstg
		ctime: attr ftCreationTime;
		mtime: attr ftLastWriteTime;
		atime: attr ftLastAccessTime.
	"The STGM access mode and sharing flags are the same as the CRT flags"
	grfMode := flags bitAnd: ##(AccessModeMask|ShareModeMask).
	(self creationMode allMask: _O_CREAT)
		ifTrue: [grfMode := grfMode bitOr: StorageConstants.STGM_CREATE].
	pstatstg grfMode: grfMode.
	^hr! !

!OS.StdioFileStream categoriesForMethods!
Read:cb:pcbRead:!COM Interfaces-IStream!public! !
SetSize:!COM Interfaces-IStream!public! !
Stat:grfStatFlag:!COM Interfaces-IStream!public! !
!

!OS.StdioTextFileStream methodsFor!

Write: pv cb: cb pcbWritten: pcbWritten
	"Implement the IStream::Write() method.
	
		HRESULT __stdcall Write(
			[in] byte* pv,
			[in] unsigned long cb,
			[out] unsigned long* pcbWritten);
	"

	"The sequence to write is arriving as bytes, so we have to just assume it is in the correct encoding."

	self nextPutAll: (self bufferClass fromByteArray: pv length: cb // self bufferClass elementSize).
	pcbWritten bytes isNull ifFalse: [pcbWritten value: cb].
	^S_OK! !

!OS.StdioTextFileStream categoriesForMethods!
Write:cb:pcbWritten:!COM Interfaces-IStream!public! !
!

"End of package definition"!

