| package |
package := Package name: 'OLE Persistence Base'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk OLE Persistence Support. 
Copyright (c) Object Arts Ltd 2000.

This package wraps the fundamental OLE persistence interfaces in the IPersist hierarchy. These interfaces are implemented by COM objects that support persistence to OLE structure storage streams (IStreams), and less commonly onto blocks of memory (through IPersistMemory). Most Active-X controls, for example, support IPersistStream(Init).'.

package basicPackageVersion: '6.0'.


package setClassNames: #(
	#{OS.COM.IPersist}
	#{OS.COM.IPersistMemory}
	#{OS.COM.IPersistStream}
	#{OS.COM.IPersistStreamInit}
).

package setMethodNames: #(
	#(#{OS.COM.Interface class} #readFromIStream:)
	#(#{OS.COM.IStream} #nextPutObject:)
	#(#{OS.COM.OLELibrary} #oleLoadFromStream:iidInterface:ppvObj:)
	#(#{OS.COM.OLELibrary} #oleSaveToStream:pStm:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'..\COM\OLE COM'
	'..\Structured Storage\OLE Streams'
).

package!

"Class Definitions"!

OS.COM.IUnknown
	subclass: #'OS.COM.IPersist'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IPersist
	subclass: #'OS.COM.IPersistMemory'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IPersist
	subclass: #'OS.COM.IPersistStream'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

OS.COM.IPersistStream
	subclass: #'OS.COM.IPersistStreamInit'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!OS.COM.Interface class methodsFor!

readFromIStream: anIStream
	"Answer a new instance of the receiver on a persistent object loaded from the argument, anIStream."

	| answer |
	answer := self newPointer.
	Ole32
		oleLoadFromStream: anIStream
		iidInterface: self iid
		ppvObj: answer.
	^answer! !

!OS.COM.Interface class categoriesForMethods!
readFromIStream:!instance creation!public! !
!

!OS.COM.IStream methodsFor!

nextPutObject: unkObj
	"Append the persisted representation of the COM object representd by the <IUnknown>,
	unkObj, to the receiver. This is done by using the objects IPersistStream[Init].
	If the object does not support persistence to a stream, then an attempt is made to
	at least write the object's CLSID to the stream so that it can be reinstantiated."

	| ips |
	ips := unkObj queryInterface: IPersistStreamInit ifNone: [unkObj queryInterface: IPersistStream].
	ips isNull
		ifTrue: 
			[| ip |
			ip := unkObj queryInterface: IPersist
						ifNone: [^self error: 'Object not persistable: ' , unkObj printString].
			self nextPutCLSID: ip clsid]
		ifFalse: [Ole32 oleSaveToStream: ips pStm: self]! !

!OS.COM.IStream categoriesForMethods!
nextPutObject:!accessing!public! !
!

!OS.COM.OLELibrary methodsFor!

oleLoadFromStream: pStm iidInterface: riid ppvObj: ppOut
	"Load an object from the specified stream, answering the specified interface on
	it through the output parameter, ppOut.
	This is equivalent to the following steps:
		1. Call ReadClassStm() to get the CLSID of the object from the stream.
		2. Call CoCreateInstance() to instantiate the object.
		3. Query the object for IPersistStream. 
		4. Call IPersistStream::Load to load the object's persistent state.

		WINOLEAPI OleLoadFromStream(
			IStream * pStm, 	//Pointer to stream from which object is to be loaded
			REFIID iidInterface,	//Interface identifier 
			void ** ppvObj	//Indirect pointer to the newly loaded object
		);"

	<stdcall: hresult OleLoadFromStream IStream* guid* lppvoid>
	^self invalidCall: _failureCode!

oleSaveToStream: pPStm pStm: pStm
	"Save an object with the specified IPersistStream interface to the specified IStream.
	This is equivalent to the following steps:
		1. Call IPersistStream::GetClassID method to get the object's CLSID.
		2. Write the CLSID to the IStream with the WriteClassStm function.
		3. Call the IPersistStream::Save method with fClearDirty set to TRUE, to save the object
		to the IStream (clearing the dirty bit).

	Note that contrary to what the Win32 help says, the pPStm argument cannot be NULL.

		WINOLEAPI OleSaveToStream(
			IPersistStream * pPStm,	//Pointer to the interface on the object to be saved
			IStream * pStm	//Pointer to the destination stream to which the object is saved
		);"

	<stdcall: hresult OleSaveToStream IPersistStream* IStream*>
	^self invalidCall: _failureCode! !

!OS.COM.OLELibrary categoriesForMethods!
oleLoadFromStream:iidInterface:ppvObj:!OLE Functions-Persistent Objects!primitives!public! !
oleSaveToStream:pStm:!OLE Functions-Persistent Objects!primitives!public! !
!

"End of package definition"!

