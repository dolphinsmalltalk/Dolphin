| package |
package := Package name: 'ActiveX Control Hosting'.
package paxVersion: 1;
	basicComment: 'Dolphin Smalltalk ActiveX Visual Control (OCX) Hosting. 
Copyright (c) Object Arts Ltd, 2000-2006.

This package provides complete Active-X control hosting for Dolphin Smalltalk. It can be used to support non-visual controls that require in-place activation (see AXControlSite class>>example1), or to host true visual controls (see AXControlSite class>>example2) including the Web Browser control (i.e. IE!!). Events from the control are triggered off the AXControlSite''s presenter (usually itself).

You can easily experiment with this package with the Active-X test container in the ''ActiveX Control Browser package''. When that package is installed the browser is accessible from the ''Tools/ Additional Tools'' menu.

But, please see Known Issues below.

This package relies on the ATL CAxHostWindow class for the underlying implementation of the control site window. This is a high performance implementation (being written in C++), but perhaps not entirely surprisingly there are bugs and limitations in the ATL host. Some of the "bugs" might be described as a level of ''intolerance'' to controls that do not follow the OLE control guidelines. 
Unfortunately some of these intolerances result in GPFs. The goods news is that we have fixed a number of these bugs in the version of the class that we have linked in with the Dolphin VM. Below are listed other bugs which we know about but haven''t fixed (some of these might be due to bugs in particular controls).

As mentioned above we have chosen to link the atlhost code into the VM as this has a number of advantages:
1) Although ATL.DLL is commonly used, it is not part of most of the standard operating system distributions and therefore it would have to be included in your application''s setup program.
2) A license to distribute ATL.DLL is not required.
3) There are quite a lot of bugs in the basic implementation, some listed on MSDN, some not. We have taken the opportunity to patch a number of these and consequently a wider range of controls can be hosted without problems.
4) The standard atlhost implementation does not support licensed controls, so we have added in this capability.

The downside of course is a small increase in the size of the VM, but it amounts to only a few Kb.

In order to avoid any possibility of clashing with ATL.DLL we have generated new GUIDs for all interfaces, etc.

This package can be used in conjuction with interfaces generated by the Active-X component wizard, for example if we had generated the IMSFlexGrid interface of the Microsoft FlexGrid Control, and assuming that ''host'' is the name of a variable which references an ActiveXHost instance which contains such a grid object, we might write:

	grid := host controlUnknown queryInterface: IMSFlexGrid.
	grid fixedRows: 2; fixedCols: 5.
	grid rows: 20; cols: 100.
	grid row: 5; col: 6.
	grid value: ''Here we are at 5,6''

Or if you don''t want to generate an interface for the control, you can use the IDispatch methods such as #getProperty:, #setProperty:value:, e.g. see AXControlSite class>>example3.

You will find that Dolphin''s IDispatch>>doesNotUnderstand: processing (which automatically attempts to pass messages which are not understood to the underlying COM object) works well for getting properties but may not work for setting properties depending on the control (e.g. you can write ''grid row'', but not ''grid row: 5''). If you are likely to be making extensive use of any control then we recommend generating the necessary interfaces for a better development experience (you''ll get auto-completion amongst other advantages) and because performance should be considerably better.

In summary this package make it possible to use the vast array of third-party Active-X components in your Dolphin Smalltalk applications.

Known Issues:
-----------------
1) Some versions of the Adobe Acrobat control have significant redraw problems, though 4.0 seems to be OK. This is probably something to do with the ATL host, and perhaps the fact that the control is actually a in-proc. facade onto the Acrobat which is running in a separate process, as it appears to work OK in VB and IE. Microsoft''s NetMeeting control appears to suffer similar redraw problems, though again this is version dependent.
2) Some controls open at their default size and only resize to fill the container when that itself is resized, e.g Microsoft Up-down control.
3) The method used to display the control property sheet (calling DoVerb() passing OLEIVERB_PROPERTIES) works for most, but it seems not all controls. The alternative of building the property dialog manually involves adding a significant number of additional interfaces and structures.
4) Handling of colors may need translation from OLE_COLOR.
5) Some controls GPF in the call to IViewObject::Draw (reading a null pointer). This appears to be a bug in those controls since this also occurs in Microsoft''s Active-X Test Container utility supplied with VisualStudio.
7) Some controls have a fixed size, in one or both dimensions, and do not paint the rest of the area reliably. This is most likely to show up when an ambient background colour is set.
8) The Microsoft Java VM occassionally generates floating point underflow/overflow exceptions, which are enabled by default in Dolphin. If these are trapped and handled by Dolphin, then the VM crashes in such a way (probably a stack fault) as to take out the whole Dolphin system without warning. On Win9X you may find the entire OS crashes. Thankfully this only affects controls written in Java, which is not common, and it doesn''t necessarily affect all Java controls. The workaround is to avoid such controls or disable FP exceptions by changing the floating point exception mask.
9) Controls cannot request a resize of the container at present. This is not supported by the ATL host.'.

package basicPackageVersion: '6.1'.


package classNames
	add: #AXControlSite;
	add: #AXValueConvertingControlSite;
	add: #IAxWinAmbientDispatch;
	add: #IAxWinAmbientDispatchEx;
	add: #IDocHostUIHandlerDispatch;
	add: #IDolphinAxHost;
	add: #IMSControl;
	add: #IOleClientSite;
	add: #IOleObject;
	add: #IPropertyNotifySink;
	add: #OLEVERB;
	yourself.

package methodNames
	add: #VMLibrary -> #axWinInit;
	yourself.

package globalNames
	add: #IAxWinHostWindow;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	add: #IAxWinHostWindow;
	yourself).

package setPrerequisites: #(
	'..\Automation\ActiveX Automation'
	'..\Categories\ActiveX Categories'
	'..\Connection Points\ActiveX Connection Points'
	'..\..\Base\Dolphin'
	'..\..\MVP\Base\Dolphin Basic Geometry'
	'..\..\MVP\Presenters\Prompters\Dolphin Choice Prompter'
	'..\..\Base\Dolphin Message Box'
	'..\..\MVP\Base\Dolphin MVP Base'
	'..\..\MVP\Type Converters\Dolphin Type Converters'
	'..\..\MVP\Models\Value\Dolphin Value Models'
	'..\COM\OLE COM'
	'..\Components\Font\OLE Font'
	'..\Persist\OLE Persistence Base'
	'..\Structured Storage\OLE Structured Storage').

package!

"Class Definitions"!

IUnknown subclass: #IDolphinAxHost
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IUnknown subclass: #IOleClientSite
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IUnknown subclass: #IOleObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IUnknown subclass: #IPropertyNotifySink
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IDispatch subclass: #IAxWinAmbientDispatch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IDispatch subclass: #IDocHostUIHandlerDispatch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IDispatch subclass: #IMSControl
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IAxWinAmbientDispatch subclass: #IAxWinAmbientDispatchEx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
OLEStructure subclass: #OLEVERB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ControlView subclass: #AXControlSite
	instanceVariableNames: 'progId dispControl host sink hostFlags propertyMap ambientDispatch unkControl licenseKey _reserved1 _reserved2'
	classVariableNames: 'AllowContextMenuMask AllowShowUIMask AllowWindowlessMask DisplayAsDefaultMask FireControlEventsMask FirePropertyEventsMask ReflectMask StandardPropNames TraceEventsMask UserModeMask WM_ATLGETHOST WM_FORWARDMSG'
	poolDictionaries: 'AXAutomationConstants AXAutomationErrors'
	classInstanceVariableNames: ''!
AXControlSite subclass: #AXValueConvertingControlSite
	instanceVariableNames: 'typeconverter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!

IAxWinHostWindow := IDolphinAxHost!


"Loose Methods"!

!VMLibrary methodsFor!

axWinInit
	"Initialize the AX host window stuff."

	<stdcall: bool AtlAxWinInit>
	^self invalidCall! !
!VMLibrary categoriesFor: #axWinInit!initializing!public! !

"End of package definition"!

