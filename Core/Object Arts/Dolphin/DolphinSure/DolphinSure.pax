| package |
package := Package name: 'DolphinSure'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk "DolphinSure" encryption and signature support.
Copyright (c) Object Arts Ltd, 1999-2000.

This package contains digital encryption and code signing/certification facilities..

The DolphinSureTrustedData class provides a vehicle for signing data with a particular publisher certificate in such a way that it can be verified to be unchanged after transmission via an insecure medium. To sign data you will need an appropriate DolphinSureCertificate. Such certificates can be obtained from Object Arts Ltd at http://www.object-arts.com/DolphinSure.

For documentation evaluate:
	SmalltalkSystem help: ''DolphinSure'''.

package basicPackageVersion: '6.1'.

package basicScriptAt: #postinstall put: '"To allow loading of old format STB''d certs we need to configure the old global names as aliases to the namespaced classes"
#(
	#{Security.DolphinSureCertificate} 
	#{Security.DolphinSureCertificateInfo}
	#{Security.ObjectArtsCertificate}
	#{Security.ObjectArtsRootCertificate}
) 
do: [:each | ClassLocator addAlias: each unqualifiedName forClass: each value]'.

package setClassNames: #(
	#{OS.BCryptConstants}
	#{OS.BCryptLibrary}
	#{Security}
	#{Security.DigitalSignatureAlgorithm}
	#{Security.DolphinSureCertificate}
	#{Security.DolphinSureCertificateInfo}
	#{Security.DolphinSureCertificateStore}
	#{Security.DolphinSureCertificationAuthorityCertificate}
	#{Security.DolphinSurePersonalCertificate}
	#{Security.DolphinSureTrustedData}
	#{Security.NotSignedCertificate}
	#{Security.NotTrustedError}
	#{Security.ObjectArtsCertificate}
	#{Security.ObjectArtsRootCertificate}
	#{Security.PC1Cipher}
	#{Security.SecureHashAlgorithm}
	#{Security.TrustedDataError}
).

package setMethodNames: #(
	#(#{Kernel.SourceManager} #emitSecureChunk:description:publisherCertificate:privateKey:on:)
	#(#{Kernel.SourceManager} #secureChunkMarker)
	#(#{Kernel.SourceManager} #secureFileIn:)
	#(#{Kernel.SourceManager} #secureFileInFrom:)
	#(#{Kernel.SourceManager} #secureFileItIn:)
).

package setVariableNames: #(
	#{OS.BCrypt}
).

package setBinaryVariableNames: #(
	#{OS.BCrypt}
).

package setPrerequisites: #(
	'..\Base\Dolphin'
	'..\System\Filer\Dolphin Binary Filer (Old versions)'
	'..\Base\Dolphin Legacy Date & Time'
	'..\System\Random\Dolphin Random Stream'
	'..\Registry\Dolphin Registry Access'
	'..\System\Filer\Dolphin Validating Binary Filer'
).

package!

"Class Definitions"!

Kernel.Namespace
	subclass: #Security
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{Core} #{Kernel private})
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.SharedPool
	subclass: #'OS.BCryptConstants'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'BCRYPT_3DES_112_ALGORITHM' -> '3DES_112'.
			'BCRYPT_3DES_ALGORITHM' -> '3DES'.
			'BCRYPT_AES_ALGORITHM' -> 'AES'.
			'BCRYPT_AES_CMAC_ALGORITHM' -> 'AES-CMAC'.
			'BCRYPT_AES_GMAC_ALGORITHM' -> 'AES-GMAC'.
			'BCRYPT_ALGORITHM_NAME' -> 'AlgorithmName'.
			'BCRYPT_AUTH_TAG_LENGTH' -> 'AuthTagLength'.
			'BCRYPT_BLOCK_LENGTH' -> 'BlockLength'.
			'BCRYPT_BLOCK_SIZE_LIST' -> 'BlockSizeList'.
			'BCRYPT_CHAINING_MODE' -> 'ChainingMode'.
			'BCRYPT_DES_ALGORITHM' -> 'DES'.
			'BCRYPT_DESX_ALGORITHM' -> 'DESX'.
			'BCRYPT_DH_ALGORITHM' -> 'DH'.
			'BCRYPT_DSA_ALGORITHM' -> 'DSA'.
			'BCRYPT_ECDH_P256_ALGORITHM' -> 'ECDH_P256'.
			'BCRYPT_ECDH_P384_ALGORITHM' -> 'ECDH_P384'.
			'BCRYPT_ECDH_P521_ALGORITHM' -> 'ECDH_P521'.
			'BCRYPT_ECDSA_P256_ALGORITHM' -> 'ECDSA_P256'.
			'BCRYPT_ECDSA_P384_ALGORITHM' -> 'ECDSA_P384'.
			'BCRYPT_ECDSA_P521_ALGORITHM' -> 'ECDSA_P521'.
			'BCRYPT_EFFECTIVE_KEY_LENGTH' -> 'EffectiveKeyLength'.
			'BCRYPT_HASH_BLOCK_LENGTH' -> 'HashBlockLength'.
			'BCRYPT_HASH_LENGTH' -> 'HashDigestLength'.
			'BCRYPT_HASH_OID_LIST' -> 'HashOIDList'.
			'BCRYPT_KEY_LENGTH' -> 'KeyLength'.
			'BCRYPT_KEY_LENGTHS' -> 'KeyLengths'.
			'BCRYPT_KEY_OBJECT_LENGTH' -> 'KeyObjectLength'.
			'BCRYPT_KEY_STRENGTH' -> 'KeyStrength'.
			'BCRYPT_MD2_ALGORITHM' -> 'MD2'.
			'BCRYPT_MD4_ALGORITHM' -> 'MD4'.
			'BCRYPT_MD5_ALGORITHM' -> 'MD5'.
			'BCRYPT_OBJECT_LENGTH' -> 'ObjectLength'.
			'BCRYPT_PADDING_SCHEMES' -> 'PaddingSchemes'.
			'BCRYPT_PROVIDER_HANDLE' -> 'ProviderHandle'.
			'BCRYPT_RC2_ALGORITHM' -> 'RC2'.
			'BCRYPT_RC4_ALGORITHM' -> 'RC4'.
			'BCRYPT_RNG_ALGORITHM' -> 'RNG'.
			'BCRYPT_RNG_DUAL_EC_ALGORITHM' -> 'DUALECRNG'.
			'BCRYPT_RNG_FIPS186_DSA_ALGORITHM' -> 'FIPS186DSARNG'.
			'BCRYPT_RSA_ALGORITHM' -> 'RSA'.
			'BCRYPT_RSA_SIGN_ALGORITHM' -> 'RSA_SIGN'.
			'BCRYPT_SHA1_ALGORITHM' -> 'SHA1'.
			'BCRYPT_SHA1_HASH_SIZE' -> 16r14.
			'BCRYPT_SHA256_ALGORITHM' -> 'SHA256'.
			'BCRYPT_SHA384_ALGORITHM' -> 'SHA384'.
			'BCRYPT_SHA512_ALGORITHM' -> 'SHA512'.
			'BCRYPT_SIGNATURE_LENGTH' -> 'SignatureLength'.
			'BCRYPT_STATUS_UNSUCCESSFUL' -> 16rC0000001
		}!
Core.Object
	subclass: #'Security.DigitalSignatureAlgorithm'
	instanceVariableNames: 'randKey randSeed'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'SmallPrimes'
				-> #(16r3 16r5 16r7 16rB 16rD 16r11 16r13 16r17 16r1D 16r1F 16r25 16r29 16r2B 16r2F 16r35 16r3B 16r3D 16r43 16r47 16r49 16r4F 16r53 16r59 16r61 16r65 16r67 16r6B 16r6D 16r71 16r7F 16r83 16r89 16r8B 16r95 16r97 16r9D 16rA3 16rA7 16rAD 16rB3 16rB5 16rBF 16rC1 16rC5 16rC7 16rD3 16rDF 16rE3 16rE5 16rE9 16rEF 16rF1 16rFB 16r101 16r107 16r10D 16r10F 16r115 16r119 16r11B 16r125 16r133 16r137 16r139 16r13D 16r14B 16r151 16r15B 16r15D 16r161 16r167 16r16F 16r175 16r17B 16r17F 16r185 16r18D 16r191 16r199 16r1A3 16r1A5 16r1AF 16r1B1 16r1B7 16r1BB 16r1C1 16r1C9 16r1CD 16r1CF 16r1D3 16r1DF 16r1E7 16r1EB 16r1F3 16r1F7 16r1FD 16r209 16r20B 16r21D 16r223 16r22D 16r233 16r239 16r23B 16r241 16r24B 16r251 16r257 16r259 16r25F 16r265 16r269 16r26B 16r277 16r281 16r283 16r287 16r28D 16r293 16r295 16r2A1 16r2A5 16r2AB 16r2B3 16r2BD 16r2C5 16r2CF 16r2D7 16r2DD 16r2E3 16r2E7 16r2EF 16r2F5 16r2F9 16r301 16r305 16r313 16r31D 16r329 16r32B 16r335 16r337 16r33B 16r33D 16r347 16r355 16r359 16r35B 16r35F 16r36D 16r371 16r373 16r377 16r38B 16r38F 16r397 16r3A1 16r3A9 16r3AD 16r3B3 16r3B9 16r3C7 16r3CB 16r3D1 16r3D7 16r3DF 16r3E5 16r3F1 16r3F5 16r3FB 16r3FD 16r407 16r409 16r40F 16r419 16r41B 16r425 16r427 16r42D 16r43F 16r443 16r445 16r449 16r44F 16r455 16r45D 16r463 16r469 16r47F 16r481 16r48B 16r493 16r49D 16r4A3 16r4A9 16r4B1 16r4BD 16r4C1 16r4C7 16r4CD 16r4CF 16r4D5 16r4E1 16r4EB 16r4FD 16r4FF 16r503 16r509 16r50B 16r511 16r515 16r517 16r51B 16r527 16r529 16r52F 16r551 16r557 16r55D 16r565 16r577 16r581 16r58F 16r593 16r595 16r599 16r59F 16r5A7 16r5AB 16r5AD 16r5B3 16r5BF 16r5C9 16r5CB 16r5CF 16r5D1 16r5D5 16r5DB 16r5E7 16r5F3 16r5FB 16r607 16r60D 16r611 16r617 16r61F 16r623 16r62B 16r62F 16r63D 16r641 16r647 16r649 16r64D 16r653 16r655 16r65B 16r665 16r679 16r67F 16r683 16r685 16r69D 16r6A1 16r6A3 16r6AD 16r6B9 16r6BB 16r6C5 16r6CD 16r6D3 16r6D9 16r6DF 16r6F1 16r6F7 16r6FB 16r6FD 16r709 16r713 16r71F 16r727 16r737 16r745 16r74B 16r74F 16r751 16r755 16r757 16r761 16r76D 16r773 16r779 16r78B 16r78D 16r79D 16r79F 16r7B5 16r7BB 16r7C3 16r7C9 16r7CD 16r7CF)
		}!
Core.Object
	subclass: #'Security.DolphinSureCertificateInfo'
	instanceVariableNames: 'serial owner details issued expiry publicKey'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'ValidStbClasses'
				-> #(#{Core.Date} #{Core.AnsiString} #{Core.Utf8String} #{Core.LargeInteger} #{Core.SmallInteger} #{Security.DolphinSureCertificateInfo})
		}!
Core.Object
	subclass: #'Security.DolphinSureCertificateStore'
	instanceVariableNames: 'regKey'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Security.DolphinSureTrustedData'
	instanceVariableNames: 'data description signature publisherCertificate'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
			'ValidStbClasses'
				-> #(#{Core.AnsiString} #{Core.Utf8String} #{Core.ByteArray} #{Security.DolphinSureTrustedData} #{Security.DolphinSureCertificate} #{Security.DolphinSurePersonalCertificate})
		}!
Core.Object
	subclass: #'Security.PC1Cipher'
	instanceVariableNames: 'key box i j'
	classVariableNames: 'RandPool'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object
	subclass: #'Security.SecureHashAlgorithm'
	instanceVariableNames: 'context'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Security.DolphinSureTrustedData
	subclass: #'Security.DolphinSureCertificate'
	instanceVariableNames: ''
	classVariableNames: 'UntrustedContentWarning'
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!
Security.DolphinSureCertificate
	subclass: #'Security.DolphinSureCertificationAuthorityCertificate'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Security.DolphinSureCertificate
	subclass: #'Security.DolphinSurePersonalCertificate'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Security.DolphinSureCertificate
	subclass: #'Security.NotSignedCertificate'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Security.DolphinSureCertificate
	subclass: #'Security.ObjectArtsCertificate'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Security.DolphinSureCertificationAuthorityCertificate
	subclass: #'Security.ObjectArtsRootCertificate'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.DynamicLinkLibrary
	subclass: #'OS.BCryptLibrary'
	instanceVariableNames: 'shaAlgorithmHandle'
	classVariableNames: ''
	imports: #(#{OS.BCryptConstants})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Error
	subclass: #'Security.NotTrustedError'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Error
	subclass: #'Security.TrustedDataError'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Kernel.SourceManager methodsFor!

emitSecureChunk: aString description: description publisherCertificate: certificate privateKey: privateKey on: aStream
	"Private - Output the specified text as a trusted chunk on aStream"

	| trusted filer |
	trusted := Security.DolphinSureTrustedData
				data: aString
				description: description
				publisherCertificate: certificate
				privateKey: privateKey.
	aStream
		nextPutAll: self secureChunkMarker;
		cr;
		cr.
	filer := self chunkFilerOn: aStream.
	filer
		emitChunk: trusted description;
		cr.
	filer
		emitChunk: trusted signature;
		cr.
	filer
		emitChunk: trusted publisherCertificate binaryStoreBytes fullPrintString;
		cr.
	filer emitChunk: trusted data.
	filer endChunk!

secureChunkMarker
	"Private - Answer marker than indicates a secure chunk"

	^'!!DolphinSureTrustedData secure!!'!

secureFileIn: aFileName
	"File the secure chunk format file in aFileName into the system.
	The file is first checked to see if it not in a secure format and, if not, then
	a warning is given to see if the user wished to continue with the file in."

	| stream |
	stream := FileStream read: aFileName.
	[self secureFileInFrom: stream] ensure: [stream close].!

secureFileInFrom: aStream
	"File the secure chunk format on aStream into the system.
	The stream is first checked to see if it not in a secure format and, if not, then
	a warning is given to see if the user wished to continue with the file in."

	| secureMarker actual pos |
	secureMarker := self secureChunkMarker.
	pos := aStream position.
	actual := aStream
				skipSeparators;
				nextAvailable: secureMarker size.
	aStream position: pos.
	(actual = secureMarker or: [Security.NotSignedCertificate new confirmTrustFor: 'Unknown Content'])
		ifTrue: [self fileInFrom: aStream]!

secureFileItIn: aString
	"File the secure chunk format Smalltalk expression in aString into the system.
	The string is first checked to see if it not in a secure format and, if not, then
	a warning is given to see if the user wished to continue with the file in."

	self secureFileInFrom: aString readStream! !
!Kernel.SourceManager categoriesForMethods!
emitSecureChunk:description:publisherCertificate:privateKey:on:!private!source filing! !
secureChunkMarker!constants!private! !
secureFileIn:!public!source filing! !
secureFileInFrom:!private!source filing! !
secureFileItIn:!public!source filing! !
!

"End of package definition"!

