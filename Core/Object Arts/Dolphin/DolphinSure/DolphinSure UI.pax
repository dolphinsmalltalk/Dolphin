| package |
package := Package name: 'DolphinSure UI'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk "DolphinSure" user interface.
Copyright (c) Object Arts Ltd, 1999-2001.

Extends the DolphinSure package with UI elements.

For documentation evaluate:
	SmalltalkSystem help: ''DolphinSure'''.

package basicPackageVersion: '6.0'.


package setClassNames: #(
	#{UI.DolphinSureTrustWarning}
).

package setMethodNames: #(
	#(#{Security.DolphinSureCertificate} #image)
	#(#{Security.DolphinSureCertificate} #imagePrint:on:labelBox:textBox:)
	#(#{Security.DolphinSureCertificate} #show)
).

package setPrerequisites: #(
	'..\Base\Dolphin'
	'..\MVP\Base\Dolphin Base Dialogs'
	'..\MVP\Base\Dolphin Basic Geometry'
	'..\MVP\Presenters\Boolean\Dolphin Boolean Presenter'
	'..\MVP\Views\Buttons\Dolphin Check Buttons'
	'..\MVP\Graphics\Dolphin GDI Graphics'
	'..\MVP\Presenters\Image\Dolphin Image Presenter'
	'..\MVP\Base\Dolphin MVP Base'
	'..\MVP\Views\Buttons\Dolphin Push Buttons'
	'..\System\Filer\Dolphin STx Filer (Old versions)'
	'..\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\MVP\Type Converters\Dolphin Type Converters'
	'..\MVP\Models\Value\Dolphin Value Models'
	'DolphinSure'
	'..\MVP\Gdiplus\Gdiplus'
).

package!

"Class Definitions"!

UI.Dialog
	subclass: #'UI.DolphinSureTrustWarning'
	instanceVariableNames: 'certificateImage description alwaysTrust'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Security.DolphinSureCertificate methodsFor!

image
	"Answers an image displaying the certificate details"

	"First validate the certificate"

	| background image extent canvas labelBox textBox |
	self validData.
	background := Graphics.Gdiplus.Bitmap fromFile: self backgroundImageFile
				usingLocator: FileLocator installRelative.
	extent := background extent.
	image := Graphics.DIBSection width: extent x height: extent y.
	canvas := image canvas.
	background
		drawOn: canvas
		at: Graphics.Point zero
		extent: extent.
	canvas backgroundMode: TRANSPARENT.
	labelBox := Graphics.Rectangle origin: 35 @ 55 corner: 110 @ (extent y - 20).
	textBox := Graphics.Rectangle origin: 120 @ 55 corner: extent - 20.

	"Draw attributes"
	self imageAttributes do: 
			[:each |
			canvas save.
			each value == #validityString
				ifTrue: [self info hasExpired ifTrue: [canvas forecolor: Graphics.Color red]].
			self
				imagePrint: each
				on: canvas
				labelBox: labelBox
				textBox: textBox.
			canvas restore].
	image freeDC.
	^image!

imagePrint: attributeAssociation on: aCanvas labelBox: labelRect textBox: textRect 
	"Private - Prints the attribute of the receiver identified by attributeAssociation on aCanvas
	in labelRect and textRect. The key of the association is a <readableString> that acts as a heading for
	the attribute data while the value is a selector to use to get the attribute data itself. Once
	the attribute has been printed on the canvas then labelRect and textRect are updated to the next location."

	| value |
	(value := self perform: attributeAssociation value) notEmpty 
		ifTrue: 
			[| lh th h |
			aCanvas font: (Graphics.Font name: 'Arial' pixelSize: 11) beBold.
			lh := aCanvas formatText: attributeAssociation key in: labelRect.
			aCanvas font: (Graphics.Font name: 'Arial' pixelSize: 11).
			th := aCanvas formatText: value in: textRect.
			h := lh max: th.
			labelRect top: labelRect top + h.
			textRect top: textRect top + h]!

show
	"Shows the receiver as a splash screen"

	(UI.Splash bitmap: self image) show	! !
!Security.DolphinSureCertificate categoriesForMethods!
image!drawing!public! !
imagePrint:on:labelBox:textBox:!drawing!helpers!private! !
show!operations!public! !
!

"End of package definition"!

