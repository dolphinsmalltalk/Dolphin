#pragma once
#include <windows.h>
#pragma warning(push,3)
#include "CritSect.h"

template<class charT, class traits = std::char_traits<charT> >
	class basic_tracestreambuf : public std::basic_streambuf<charT, traits>
{
public:
	// Public interface
	
	basic_tracestreambuf () : std::basic_streambuf<charT, traits>() 
	{
		this->setp(buffer, buffer+bufSize);
	}
	
	virtual ~basic_tracestreambuf ()
	{
		// Ensure buffer is flushed on destruct
		sync();
	}
	
protected:
	// Implementation
	using int_type = typename traits::int_type;
	using char_type = typename traits::char_type;

	int_type overflow(int_type ch = traits::eof())
	{
		if (output_buffer() < 0)
			return traits::eof();
		else
		{
			if (!traits::eq_int_type(traits::eof(), ch))
				return this->sputc(traits::to_char_type(ch));
			else
				return traits::not_eof(ch);
		}
	}
	
	int sync()
	{
		return output_buffer();
	}
	
private:
	int output_buffer()
	{
		char_type* pb = this->pbase();
		long count = this->pptr() - pb;
		if (count != 0)
		{
			pb[count] = 0;
			::OutputDebugStringW(pb);
		}
		
		// Empty the put area
		this->pbump(-count);
		return 0;
	}
	
private:
	// State
	static constexpr size_t bufSize = 255;
	// Allow an extra char for null terminator
	char_type buffer[bufSize+1];
};

typedef basic_tracestreambuf<wchar_t> tracestreambuf;

template<class charT, class traits = std::char_traits<charT> >
	class basic_tracestream : public std::basic_ostream<charT, traits>
{
private:
	// Suppress autogenerated copy constructor and assignment operator
	basic_tracestream(const basic_tracestream&) = delete;
	basic_tracestream& operator=(const basic_tracestream&) = delete;
public:
	typedef charT char_type;
	typedef basic_tracestreambuf<charT, traits> buf_type;

	basic_tracestream() : std::basic_ostream<charT, traits>(&m_buf), m_buf() {}

	virtual ~basic_tracestream()
	{}
	
	buf_type *rdbuf() const
	{
		return ((buf_type*)&m_buf); 
	}

	void Lock() {m_mutex.Lock(); }
	void Unlock() {m_mutex.Unlock();}
private:
	CMonitor m_mutex;

	buf_type m_buf;
};

typedef basic_tracestream<wchar_t> tracestream;
typedef CAutoLock<tracestream> tracelock;

struct _SYSTEMTIME;
std::wostream& operator<<(std::wostream& stream, const _SYSTEMTIME& st);
struct _CONTEXT;
std::wostream& operator<<(std::wostream& stream, const _CONTEXT* pCtx);
