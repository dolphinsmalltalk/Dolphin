"Filed out from Intuitive Smalltalk"!

Tool subclass: #DiaryEventEditor
	instanceVariableNames: 'diaryEventModel '
	classVariableNames: ''
	poolDictionaries: ''!

DiaryEventEditor class instanceVariableNames: ''!

!DiaryEventEditor categoriesForClass!No category! !

!DiaryEventEditor methodsFor!

buildView
	"Private - Builds and answers a default view for receiver that is not
	yet connected to it. This method is for demonstration purposes only
	and will be replaced by one automatically generated by the Dolphin ViewComposer
	when this becomes available. 
	For now, you probably don't need to understand what follows"
	
	| view descriptionView dateView timeView okView cancelView buttonsView |

	view := ColumnView new.
	descriptionView := TextEditView new.
	dateView := TextEditView new typeConverter: DateToText new; yourself.
	timeView := TextEditView new typeConverter: TimeToText new; yourself.
	okView := PushButtonView new label: 'Ok'; command: #ok; yourself.
	cancelView := PushButtonView new label: 'Cancel'; command: #cancel; yourself.
	buttonsView := RowView new.

	buttonsView
		addSubView: okView;
		addSubView: cancelView;
		sizeSubViews: #(1 1).
	
	view
		addSubView: descriptionView;
		addSubView: dateView;
		addSubView: timeView;
		addSubView: buttonsView;
		sizeSubViews: #(1 1 1 2).

	view	addConnectionFor: descriptionView toAspect: #descriptionModel.
	view	addConnectionFor: dateView toAspect: #triggerDateModel.
	view	addConnectionFor: timeView toAspect: #triggerTimeOfDayModel.

	^view
	!

descriptionModel
	"Answer a value model on the description of the DiaryEvent being edited.
	This can be used as a connection point for one or more Views to attach to.
	Any View that converses using ValueModel protocol can therefore be used 
	to display and edit the description"

	"Since we are already holding the associated DiaryEvent in a value model
	we must use a ValueModelAspectAdaptor (rather than a plain old
	ValueAspectAdaptor) to gain access to the #description aspect that we
	want to wrap"

	^ValueModelAspectAdaptor subject: self diaryEventModel aspect: #description!

diaryEventModel
	"Private - Answer the value model holding the DiaryEvent being edited.
	A Model must be used here since it will be a connection point to which one or 
	more Views can attach. Any View that converses using ValueModel protocol can 
	therefore be used to display the contents of our diary event.

	In fact the default view for the receiver does not connect to this model directly.
	It is easier to split the DiaryEvent into its separate components (description, 
	triggerTimeOfDay and triggerDate) for editing purposes. Hence we also supply
	additional models, #descriptionModel, #triggerTimeOfDayModel and #triggerDateModel
	as connection points for Views"

	^diaryEventModel!

diaryEventModel: aDiaryEventValueModel
	"Private - Set the value model holding the diary event being edited. See comment
	for #diaryEventModel"

	diaryEventModel := aDiaryEventValueModel!

triggerDateModel
	"Answer a value model on the #triggerDate aspet of the DiaryEvent being edited.
	This can be used as a connection point for one or more Views to attach to.
	Any View that converses using ValueModel protocol can therefore be used 
	to display and edit the description"

	"Since we are already holding the associated DiaryEvent in a value model
	we must use a ValueModelAspectAdaptor (rather than a plain old
	ValueAspectAdaptor) to gain access to the #triggerDate aspect that we
	want to wrap"

	^ValueModelAspectAdaptor subject: self diaryEventModel aspect: #triggerDate!

triggerTimeModel
	"Answer a value model on the #triggerTime aspect of the DiaryEvent being edited.
	This can be used as a connection point for one or more Views to attach to.
	Any View that converses using ValueModel protocol can therefore be used 
	to display and edit the description"

	"Since we are already holding the associated DiaryEvent in a value model
	we must use a ValueModelAspectAdaptor (rather than a plain old
	ValueAspectAdaptor) to gain access to the #triggerTime aspect that we
	want to wrap"


	^ValueModelAspectAdaptor subject: self diaryEventModel aspect: #triggerTime!

triggerTimeOfDayModel
	"Answer a value model on the #triggerTimeOfDay aspect of the DiaryEvent being 
	edited. This can be used as a connection point for one or more Views to attach 
	to. Any View that converses using ValueModel protocol can therefore be used 
	to display and edit the description"

	"Since we are already holding the associated DiaryEvent in a value model
	we must use a ValueModelAspectAdaptor (rather than a plain old
	ValueAspectAdaptor) to gain access to the #triggerTimeOfDay aspect that we
	want to wrap"

	^ValueModelAspectAdaptor subject: self diaryEventModel aspect: #triggerTimeOfDay!

value
	"Answer the value of the receiver. This is the DiaryEvent being edited"

	^self diaryEventModel value! !

!DiaryEventEditor categoriesFor: #buildView!views! !
!DiaryEventEditor categoriesFor: #descriptionModel!models! !
!DiaryEventEditor categoriesFor: #diaryEventModel!models! !
!DiaryEventEditor categoriesFor: #diaryEventModel:!models! !
!DiaryEventEditor categoriesFor: #triggerDateModel!models! !
!DiaryEventEditor categoriesFor: #triggerTimeModel!models! !
!DiaryEventEditor categoriesFor: #triggerTimeOfDayModel!models! !
!DiaryEventEditor categoriesFor: #value!accessing! !

!DiaryEventEditor class methodsFor!

new
	"Private - An instance of DiaryEventEditor can only be created when
	connected to a DiaryEvent wrapped in a ValueModel. Use #on: to do this.
	Here we prevent #new from exhibiting unwanted behaviour"

	self shouldNotImplement!

on: aDiaryEventValueModel
	"Answer an instance of the receiver editing the DiaryEvent wrapped in
	aDiaryEventValueModel"
	
	^super new diaryEventModel: aDiaryEventValueModel; yourself! !

!DiaryEventEditor class categoriesFor: #new!instance creation! !
!DiaryEventEditor class categoriesFor: #on:!instance creation! !

